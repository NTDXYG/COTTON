{"task_id": "Open/0", "prompt": "def validPosition ( arr , N , K ) :\n    \"\"\"Write a function that takes in an array, the length of the array, and a number K.\n    The function calculates the sum of all the elements in the array.\n    Then, it checks each element in the array and counts how many elements, when increased by K, would be greater than the sum of all the other elements in the array.\n    Finally, the function returns the count.\n    \"\"\"\n", "entry_point": "validPosition", "canonical_solution": "    count = 0 ; sum = 0 ;\n    for i in range ( N ) :\n        sum += arr [ i ] ;\n    for i in range ( N ) :\n        if ( ( arr [ i ] + K ) > ( sum - arr [ i ] ) ) :\n            count += 1 ;\n    return count ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1, 2, 3, 4, 5]\n    N = 5\n    K = 2\n    assert candidate(arr, N, K) == 0\n    \n    # test case 2\n    arr = [1, 2, 3, 4, 5]\n    N = 5\n    K = 10\n    assert candidate(arr, N, K) == 3\n    \n    # test case 3\n    arr = [1, 1, 1, 1]\n    N = 4\n    K = -2\n    assert candidate(arr, N, K) == 0\n    \n    # test case 4\n    arr = [1, 1, 1, 1]\n    N = 4\n    K = 4\n    assert candidate(arr, N, K) == 4\n    \n    # test case 5\n    arr = []\n    N = 0\n    K = 4\n    assert candidate(arr, N, K) == 0"}
{"task_id": "Open/1", "prompt": "def maxLen ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the frequency of the minimum value in the array.\n    \"\"\"\n", "entry_point": "maxLen", "canonical_solution": "    min_val = min ( arr ) ;\n    freq = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] == min_val ) :\n            freq += 1 ;\n    return freq ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1, 2, 3, 4, 5]\n    n = 5\n    assert candidate(arr, n) == 1\n    \n    # test case 2\n    arr = [2, 2, 2, 3, 2]\n    n = 3\n    assert candidate(arr, n)==3\n    \n    # test case 3\n    arr = [1, 1]\n    n = 2\n    assert candidate(arr, n)==2\n    \n    # test case 4\n    arr = [1, 1, 2, 3]\n    n = 2\n    assert candidate(arr, n)==2\n    \n    # test case 5\n    arr = [1, 1, 2, 3]\n    n = 4\n    assert candidate(arr, n)==2"}
{"task_id": "Open/2", "prompt": "def allBitsSetInTheGivenRange ( n , l , r ) :\n    \"\"\"Write a function that takes three integers n, l, and r and returns \"Yes\" if all the bits in the binary representation of n within the range from l to r (inclusive) are set to 1.\n    Otherwise, it returns \"No\".\n    \"\"\"\n", "entry_point": "allBitsSetInTheGivenRange", "canonical_solution": "    num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 )\n    new_num = n & num\n    if ( new_num == 0 ) :\n        return \"Yes\"\n    return \"No\"\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 15\n    l = 2\n    r = 4\n    assert candidate(n, l, r)==\"No\"\n    \n    # test case 2\n    n = 0\n    l = 1\n    r = 2\n    assert candidate(n, l, r)==\"Yes\"\n    \n    # test case 3\n    n = 12\n    l = 3\n    r = 4\n    assert candidate(n, l, r)==\"No\"\n    \n    # test case 4\n    n = 12\n    l = 2\n    r = 2\n    assert candidate(n, l, r)==\"Yes\"\n    \n    # test case 5\n    n = 1\n    l = 5\n    r = 1\n    assert candidate(n, l, r)==\"Yes\""}
{"task_id": "Open/3", "prompt": "def countKdivPairs ( A , n , K ) :\n    \"\"\"Write a function that takes an array A, its length n, and an integer K as input.\n    The function counts the number of pairs in the array whose sum is divisible by K.\n    It returns the count of such pairs.\n    \"\"\"\n", "entry_point": "countKdivPairs", "canonical_solution": "    freq = [ 0 for i in range ( K ) ]\n    ans = 0\n    for i in range ( n ) :\n        rem = A [ i ] % K\n        if ( rem != 0 ) :\n            ans += freq [ K - rem ]\n        else :\n            ans += freq [ 0 ]\n        freq [ rem ] += 1\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    A = [1,2,3,4,5]\n    n = 5\n    K = 2\n    assert candidate(A, n, K)==4\n    \n    # test case 2\n    A = [1,1,1,1,1]\n    n = 5\n    K = 2\n    assert candidate(A, n, K)==10\n    \n    # test case 3\n    A = [1,2,3,4,5,6,7,8,9,10]\n    n = 10\n    K = 5\n    assert candidate(A, n, K)==9\n    \n    # test case 4\n    A = [1,1,1,1,1,1,1,1,1,1]\n    n = 10\n    K = 3\n    assert candidate(A, n, K)==0\n    \n    # test case 5\n    A = [10,20,30,40,50]\n    n = 5\n    K = 3\n    assert candidate(A, n, K)==4"}
{"task_id": "Open/4", "prompt": "def isSpiltPossible ( n , a ) :\n    \"\"\"Write a function that takes an integer n and a list of integers a.\n    The function checks if it is possible to split the list into two parts such that the sum of each part is equal.\n    If it is possible, the function returns True, otherwise it returns False.\n    \"\"\"\n", "entry_point": "isSpiltPossible", "canonical_solution": "    Sum = 0\n    c1 = 0\n    for i in range ( n ) :\n        Sum += a [ i ]\n        if ( a [ i ] == 1 ) :\n            c1 += 1\n    if ( Sum % 2 ) :\n        return False\n    if ( ( Sum // 2 ) % 2 == 0 ) :\n        return True\n    if ( c1 > 0 ) :\n        return True\n    else :\n        return False\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 5\n    a = [1,2,3,4,5]\n    assert candidate(n, a)==False\n    \n    # test case 2\n    n = 4\n    a = [1,1,1,1]\n    assert candidate(n, a)==True\n    \n    # test case 3\n    n = 5\n    a = [1,1,1,1,2]\n    assert candidate(n, a)==True\n    \n    # test case 4\n    n = 5\n    a = [1,1,1,1,1]\n    assert candidate(n, a)==False\n    \n    # test case 5\n    n = 3\n    a = [1,2,3,4,5,6]\n    assert candidate(n, a)==True"}
{"task_id": "Open/5", "prompt": "def findParity ( x ) :\n    \"\"\"Write a function that takes an integer as input and returns 1 if the number has odd parity (an odd number of 1 bits in its binary representation) or 0 if it has even parity (an even number of 1 bits in its binary representation).\n    \"\"\"\n", "entry_point": "findParity", "canonical_solution": "    y = x ^ ( x >> 1 ) ;\n    y = y ^ ( y >> 2 ) ;\n    y = y ^ ( y >> 4 ) ;\n    y = y ^ ( y >> 8 ) ;\n    y = y ^ ( y >> 16 ) ;\n    if ( y & 1 ) :\n        return 1 ;\n    return 0 ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    x = 5\n    assert candidate(x)==0\n    \n    # test case 2\n    x = 8\n    assert candidate(x)==1\n    \n    # test case 3\n    x = 15\n    assert candidate(x)==0\n    \n    # test case 4\n    x = 23\n    assert candidate(x)==0\n    \n    # test case 5\n    x = 100\n    assert candidate(x)==1"}
{"task_id": "Open/6", "prompt": "def missing_elements ( vec ) :\n    \"\"\"Write a function that takes a list of integers and returns a list of missing elements.\n    The function first iterates through the input list and modifies the elements by changing the sign of the element at the index equal to the absolute value of the current element minus one.\n    Then, it iterates through the modified list and appends the indices of the positive elements plus one to the output list.\n    Finally, it returns the output list.\n    \"\"\"\n", "entry_point": "missing_elements", "canonical_solution": "    mis = [ ]\n    for i in range ( len ( vec ) ) :\n        temp = abs ( vec [ i ] ) - 1\n        if vec [ temp ] > 0 :\n            vec [ temp ] = - vec [ temp ]\n    for i in range ( len ( vec ) ) :\n        if ( vec [ i ] > 0 ) :\n            mis . append ( i + 1 )\n    return mis\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    vec = [3,4,2,1]\n    assert candidate(vec)==[]\n    \n    # test case 2\n    vec = [1,1,1]\n    assert candidate(vec)==[2, 3]\n    \n    # test case 3\n    vec = [1,1,2,2]\n    assert candidate(vec)==[3, 4]\n    \n    # test case 4\n    vec = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2]\n    assert candidate(vec)==[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    \n    # test case 5\n    vec = [1,1,1,1]\n    assert candidate(vec)==[2, 3, 4]"}
{"task_id": "Open/7", "prompt": "def findSubsequence ( arr , n ) :\n    \"\"\"Write a function that takes an array of integers and its length as input and returns the length of the longest subsequence in the array such that each element in the subsequence has at least one digit in common with every other element in the subsequence.\n    \"\"\"\n", "entry_point": "findSubsequence", "canonical_solution": "    length = 1 ;\n    dp = [ 0 ] * 10 ;\n    tmp = arr [ 0 ] ;\n    while ( tmp > 0 ) :\n        dp [ tmp % 10 ] = 1 ;\n        tmp //= 10 ;\n    for i in range ( 1 , n ) :\n        tmp = arr [ i ] ;\n        locMax = 1 ;\n        cnt = [ 0 ] * 10\n        while ( tmp > 0 ) :\n            cnt [ tmp % 10 ] = 1 ;\n            tmp //= 10 ;\n        for d in range ( 10 ) :\n            if ( cnt [ d ] ) :\n                dp [ d ] += 1 ;\n                locMax = max ( locMax , dp [ d ] ) ;\n        for d in range ( 10 ) :\n            if ( cnt [ d ] ) :\n                dp [ d ] = locMax ;\n        length = max ( length , locMax ) ;\n    return length ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [2, 34, 9, 5, 23, 76]\n    n = 6\n    assert candidate(arr, n)==2\n    \n    # test case 2\n    arr = [12, 456, 789, 123, 654, 789, 123]\n    n = 7\n    assert candidate(arr, n)==3\n    \n    # test case 3\n    arr = [22, 244, 446, 668, 888, 900]\n    n = 4\n    assert candidate(arr, n)==4\n    \n    # test case 4\n    arr = [11, 111, 1111, 11111, 111111]\n    n = 5\n    assert candidate(arr, n)==5\n    \n    # test case 5\n    arr = [12, 34, 56, 78, 90, 123, 456, 789]\n    n = 8\n    assert candidate(arr, n)==2"}
{"task_id": "Open/8", "prompt": "import math\n\ndef Distinct_Prime_factors ( a ) :\n    \"\"\"Write a function that takes a list of integers and returns the number of distinct prime factors for each integer in the list.\n    \"\"\"\n", "entry_point": "Distinct_Prime_factors", "canonical_solution": "    m = [ ]\n    for i in range ( len ( a ) ) :\n        sq = int ( math . sqrt ( a [ i ] ) )\n        for j in range ( 2 , sq + 1 ) :\n            if ( a [ i ] % j == 0 ) :\n                m . append ( j )\n                while ( a [ i ] % j == 0 ) :\n                    a [ i ] //= j\n        if ( a [ i ] > 2 ) :\n            m . append ( a [ i ] )\n    return len ( m )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a = [2, 34, 9, 5, 23, 76]\n    assert candidate(a) == 7\n    \n    # test case 2\n    a = [12, 15, 25, 50, 20]\n    assert candidate(a) == 9\n    \n    # test case 3\n    a = [1, 2, 3, 4, 5]\n    assert candidate(a) == 3\n    \n    # test case 4\n    a = [6, 10, 15, 20, 25, 30]\n    assert candidate(a) == 12\n    \n    # test case 5\n    a = [100, 200, 300, 400, 500, 600, 700]\n    assert candidate(a) == 17\n    "}
{"task_id": "Open/9", "prompt": "def findSum ( arr , n , k ) :\n    \"\"\"Write a function that takes an array, the length of the array, and an integer k as input.\n    The function calculates the sum of the difference between the kth largest element and the first element of the array, and the difference between the kth largest element and each element from index 1 to k.\n    The function returns the minimum value among these differences.\n    \"\"\"\n", "entry_point": "findSum", "canonical_solution": "    ans = arr [ n - k - 1 ] - arr [ 0 ] ;\n    for i in range ( 1 , k + 1 ) :\n        ans = min ( arr [ n - 1 - ( k - i ) ] - arr [ i ] , ans ) ;\n    return ans ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [2, 34, 9, 5, 23, 76]\n    n = 2\n    k = 3\n    assert candidate(arr, n, k) == -7\n    \n    # test case 2\n    arr = [1, 2, 3, 4, 5]\n    n = 4\n    k = 1\n    assert candidate(arr, n, k) == 2\n    \n    # test case 3\n    arr = [0, 0, 1, 1]\n    n = 1\n    k = 1\n    assert candidate(arr, n, k) == 0\n    \n    # test case 4\n    arr = [1, 2]\n    n = 1\n    k = 0\n    assert candidate(arr, n, k) == 0\n    \n    # test case 5\n    arr = [5, 10, 15, 20, 25, 30]\n    n = 4\n    k = 1\n    assert candidate(arr, n, k) == 10\n    "}
{"task_id": "Open/10", "prompt": "from collections import deque\n\ndef run_tasks ( A , B ) :\n    \"\"\"Write a function that takes two lists, A and B, and returns the total time it takes to complete a series of tasks.\n    The function iterates through the lists, comparing each element from A with the corresponding element from B.\n    If the elements are equal, the total time is incremented by 1.\n    If the elements are not equal, the element from B is moved to the front of the list and the element from A is moved to the end of the list.\n    The total time is incremented by 2 in this case.\n    The function continues this process until all elements in A have been compared.\n    Finally, the function returns the total time.\n    \"\"\"\n", "entry_point": "run_tasks", "canonical_solution": "    total_time = 0\n    while ( len ( A ) > 0 ) :\n        x = A . popleft ( )\n        y = B . popleft ( )\n        if ( x == y ) :\n            total_time += 1\n        else :\n            B . appendleft ( y )\n            A . append ( x )\n            total_time += 2\n    return total_time\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    A = deque([1, 2, 3])\n    B = deque([3, 2, 1])\n    assert candidate(A, B)==9\n    \n    # test case 2\n    A = deque([1, 2, 3])\n    B = deque([1, 2, 3, 4])\n    assert candidate(A, B)==3\n    \n    # test case 3\n    A = deque([])\n    B = deque([3, 2, 1])\n    assert candidate(A, B)==0\n    \n    # test case 4\n    A = deque([1, 2, 3, 4, 5])\n    B = deque([5, 4, 3, 2, 1])\n    assert candidate(A, B)==25\n    \n    # test case 5\n    A = deque([1, 2, 3])\n    B = deque([1, 2, 3])\n    assert candidate(A, B)==3\n    "}
{"task_id": "Open/11", "prompt": "def calculate ( array , size ) :\n    \"\"\"Write a function that takes an array and its size as input and returns the count of even numbers in the array, excluding 0 and 2.\n    \"\"\"\n", "entry_point": "calculate", "canonical_solution": "    count = 0\n    for i in range ( size ) :\n        if ( array [ i ] % 2 == 0 and array [ i ] != 0 and array [ i ] != 2 ) :\n            count += 1\n    return count\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    array=[2,4,6,8,10]\n    size=5\n    assert candidate(array, size)==4\n    \n    # test case 2\n    array=[0,2,4,6,8]\n    size=5\n    assert candidate(array, size)==3\n    \n    # test case 3\n    array=[2,4,6,0,10]\n    size=5\n    assert candidate(array, size)==3\n    \n    # test case 4\n    array=[2,0,0,0,0]\n    size=5\n    assert candidate(array, size)==0\n    \n    # test case 5\n    array=[2,4,2]\n    size=2\n    assert candidate(array, size)==1\n    "}
{"task_id": "Open/12", "prompt": "def find_sub ( s , k ) :\n    \"\"\"Write a function that takes a string and an integer as input and returns the number of substrings in the string that contain at most k distinct characters.\n    \"\"\"\n", "entry_point": "find_sub", "canonical_solution": "    Len = len ( s )\n    lp , rp = 0 , 0\n    ans = 0\n    hash_char = [ 0 for i in range ( 256 ) ]\n    for rp in range ( Len ) :\n        hash_char [ ord ( s [ rp ] ) ] += 1\n        while ( hash_char [ ord ( s [ rp ] ) ] > k ) :\n            hash_char [ ord ( s [ lp ] ) ] -= 1\n            lp += 1\n        ans += rp - lp + 1\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    s=\"aabcd\"\n    k=2\n    assert candidate(s, k)==15\n    \n    # test case 2\n    s=\"aaab\"\n    k=1\n    assert candidate(s, k)==5\n    \n    # test case 3\n    s=\"abcdefg\"\n    k=3\n    assert candidate(s, k)==28\n    \n    # test case 4\n    s=\"ababab\"\n    k=2\n    assert candidate(s, k)==18\n    \n    # test case 5\n    s=\"abcdabcdabcd\"\n    k=1\n    assert candidate(s, k)==42\n    "}
{"task_id": "Open/13", "prompt": "def Survives ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns True if the integer survives the given condition, or False otherwise.\n    The condition is as follows: starting from 2, divide the integer by the current number and subtract the result from the integer.\n    Repeat this process until the current number is greater than the integer.\n    If the integer reaches 1 at any point, return True.\n    If the integer is divisible by any of the current numbers, return False.\n    \"\"\"\n", "entry_point": "Survives", "canonical_solution": "    i = 2\n    while ( True ) :\n        if ( i > n ) :\n            return True ;\n        if ( n % i == 0 ) :\n            return False ;\n        n -= n // i ;\n        i += 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 9\n    assert candidate(n)==False\n    \n    # test case 2\n    n = 19\n    assert candidate(n)==True\n    \n    # test case 3\n    n = 20\n    assert candidate(n)==False\n    \n    # test case 4\n    n = 21\n    assert candidate(n)==False\n    \n    # test case 5\n    n = 22\n    assert candidate(n)==False\n    "}
{"task_id": "Open/14", "prompt": "def computeXOR ( n ) :\n    \"\"\"Write a function that takes an integer as input and computes the XOR of the integer with a specific pattern.\n    The function uses a switch statement to determine the XOR value based on the remainder of the input integer divided by 4.\n    The switch statement has four cases: \n- If the remainder is 0, the function returns the input integer itself.\n   \n- If the remainder is 1, the function returns 1.\n   \n- If the remainder is 2, the function returns the input integer plus 1.\n   \n- If the remainder is 3, the function returns 0.\n   \nIf the input integer does not match any of the cases, the function returns an empty string.\n    \"\"\"\n", "entry_point": "computeXOR", "canonical_solution": "    switch = { 0 : n , 1 : 1 , 2 : n + 1 , 3 : 0 , }\n    return switch . get ( n & 3 , \"\" )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 2\n    assert candidate(n)==3\n    \n    # test case 2\n    n = 3\n    assert candidate(n)==0\n    \n    # test case 3\n    n = 4\n    assert candidate(n)==4\n    \n    # test case 4\n    n = 5\n    assert candidate(n)==1\n    \n    # test case 5\n    n = 6\n    assert candidate(n)==7\n    "}
{"task_id": "Open/15", "prompt": "import random\n\ndef lehmann ( n , t ) :\n    \"\"\"Write a function that takes two parameters, n and t, and performs the Lehmann primality test.\n    The function generates a random number a between 2 and n-1, and calculates the value of a raised to the power of (n-1)/2 modulo n.\n    It then checks if the result is equal to 1 or n-1.\n    If it is, the function generates a new random number a and repeats the process t times.\n    If the result is not equal to 1 or n-1, the function returns -1.\n    If all t iterations pass the test, the function returns 1.\n    \"\"\"\n", "entry_point": "lehmann", "canonical_solution": "    random . seed ( 1234 )\n    a = random . randint ( 2 , n - 1 )\n    e = ( n - 1 ) / 2\n    while ( t > 0 ) :\n        result = ( ( int ) ( a ** e ) ) % n\n        if ( ( result % n ) == 1 or ( result % n ) == ( n - 1 ) ) :\n            a = random . randint ( 2 , n - 1 )\n            t -= 1\n        else :\n            return - 1\n    return 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    assert candidate(11, 1)==1\n    \n    # test case 2\n    assert candidate(19, 2)==1\n    \n    # test case 3\n    assert candidate(100, 3)==-1\n    \n    # test case 4\n    assert candidate(7, 4)==1\n    \n    # test case 5\n    assert candidate(17, 4)==1\n    "}
{"task_id": "Open/16", "prompt": "def isDefeat ( s1 , s2 , n ) :\n    \"\"\"Write a function that takes two strings, s1 and s2, and an integer n.\n    The function checks if there is a defeat condition between the two strings.\n    A defeat condition is defined as follows: if at any index i, s1[i] is '0' and s2[i] is '1', or s1[i] is '1' and s2[i] is '0', or s1[i] is '0' and s2[i] is 'Z', or s1[i] is 'Z' and s2[i] is '0', then the function returns True.\n    If no defeat condition is found after iterating through all indices, the function returns False.\n    \"\"\"\n", "entry_point": "isDefeat", "canonical_solution": "    for i in range ( n ) :\n        if ( ( s1 [ i ] == '0' and s2 [ i ] == '1' ) or ( s1 [ i ] == '1' and s2 [ i ] == '0' ) ) :\n            continue\n        elif ( ( s1 [ i ] == '0' and s2 [ i ] == 'Z' ) or ( s1 [ i ] == 'Z' and s2 [ i ] == '0' ) ) :\n            continue\n        else :\n            return True\n    return False\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    assert candidate('10001', '10001', 5)==True\n    \n    # test case 2\n    assert candidate('0000', 'ZZZZ', 4)==False\n    \n    # test case 3\n    assert candidate('11111', '11111', 5)==True\n    \n    # test case 4\n    assert candidate('11111', '00011', 2)==False\n    \n    # test case 5\n    assert candidate('01Z00', '0Z101', 5)==True\n    "}
{"task_id": "Open/17", "prompt": "def sum ( a , b , c , d , x ) :\n    \"\"\"Write a function that takes five parameters (a, b, c, d, x) and returns the result of the following equation: (x * (a + b) * (c - d)) / ((a * d) - (b * c)).\n    \"\"\"\n", "entry_point": "sum", "canonical_solution": "    ans = ( ( x * ( a + b ) * ( c - d ) ) / ( ( a * d ) - ( b * c ) ) ) ;\n    return ans ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    assert candidate(1, 2, 3, 4, 5)==7.5\n    \n    # test case 2\n    assert candidate(5, 2, 3, 1, 10)==-140.0\n    \n    # test case 3\n    assert candidate(10, 20, 30, 40, 5)==7.5\n    \n    # test case 4\n    assert candidate(10, 10, 20, 10, 30)==-60.0\n    \n    # test case 5\n    assert candidate(3, 4, 2, 5, 1)==-3.0\n    "}
{"task_id": "Open/18", "prompt": "def minReplacement ( s , length ) :\n    \"\"\"Write a function that takes a string and its length as input and returns the minimum number of replacements needed to make the string alternate between '0' and '1' in the most efficient way.\n    The function should count the number of positions where the character at an even index is '1' and the character at an odd index is '0', and vice versa.\n    The function should then return the minimum of this count and the difference between the length of the string and the count.\n    \"\"\"\n", "entry_point": "minReplacement", "canonical_solution": "    ans = 0\n    for i in range ( 0 , length ) :\n        if i % 2 == 0 and s [ i ] == '1' :\n            ans += 1\n        if i % 2 == 1 and s [ i ] == '0' :\n            ans += 1\n    return min ( ans , length - ans )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    array=\"010101\"\n    length=6\n    assert candidate(array, length)==0\n    \n    # test case 2\n    array=\"101010\"\n    length=6\n    assert candidate(array, length)==0\n    \n    # test case 3\n    array=\"110000\"\n    length=6\n    assert candidate(array, length)==3\n    \n    # test case 4\n    array=\"111000\"\n    length=6\n    assert candidate(array, length)==2\n    \n    # test case 5\n    array=\"100000\"\n    length=6\n    assert candidate(array, length)==2\n    \n    "}
{"task_id": "Open/19", "prompt": "import math\n\ndef powerNumbers ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the number of power numbers less than or equal to n.\n    A power number is a number that can be expressed as the power of another number.\n    \"\"\"\n", "entry_point": "powerNumbers", "canonical_solution": "    v = [ ]\n    for i in range ( 2 , int ( math . pow ( n , 1.0 / 3.0 ) ) + 1 ) :\n        j = i * i\n        while ( j * i <= n ) :\n            j = j * i\n            s = int ( math . sqrt ( j ) )\n            if ( s * s != j ) :\n                v . append ( j )\n    v . sort ( )\n    v = list ( dict . fromkeys ( v ) )\n    return len ( v ) + int ( math . sqrt ( n ) )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1\n    assert candidate(n) == 1\n    # test case 2\n    n = 10\n    assert candidate(n) == 4\n    \n    # test case 3\n    n = 100\n    assert candidate(n) == 13\n    \n    # test case 4\n    n = 1000\n    assert candidate(n) == 40\n    \n    # test case 5\n    n = 10000\n    assert candidate(n) == 125\n    \n    "}
{"task_id": "Open/20", "prompt": "def product ( x , y ) :\n    \"\"\"Write a function that takes two numbers, x and y, and returns their product.\n    The function uses recursion to calculate the product by repeatedly adding x to itself y times.\n    \"\"\"\n", "entry_point": "product", "canonical_solution": "    if x < y :\n        return product ( y , x )\n    elif y != 0 :\n        return ( x + product ( x , y - 1 ) )\n    else :\n        return 0\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    x = 3\n    y = 5\n    assert candidate(x, y) == 15\n    # test case 2\n    x = 0\n    y = 10\n    assert candidate(x, y) == 0\n    \n    # test case 3\n    x = 10\n    y = 0\n    assert candidate(x, y) == 0\n    \n    # test case 4\n    x = 2\n    y = 3\n    assert candidate(x, y) == 6\n    \n    # test case 5\n    x = 7\n    y = 4\n    assert candidate(x, y) == 28\n    \n    \n    "}
{"task_id": "Open/21", "prompt": "def decideWinner ( a , n ) :\n    \"\"\"Write a function that takes a list of integers and the length of the list as input.\n    The function counts the number of integers in the list that are divisible by 4 and assigns the count to variables count0, count1, count2, and count3 based on the remainder of the division by 4.\n    If the count of integers divisible by 4 is even for all four possible remainders (0, 1, 2, and 3), the function returns 1.\n    Otherwise, it returns 2.\n    \"\"\"\n", "entry_point": "decideWinner", "canonical_solution": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if ( a [ i ] % 4 == 0 ) :\n            count0 += 1\n        elif ( a [ i ] % 4 == 1 ) :\n            count1 += 1\n        elif ( a [ i ] % 4 == 2 ) :\n            count2 += 1\n        elif ( a [ i ] % 4 == 3 ) :\n            count3 += 1\n    if ( count0 % 2 == 0 and count1 % 2 == 0 and count2 % 2 == 0 and count3 == 0 ) :\n        return 1\n    else :\n        return 2\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a = [4, 8, 12]\n    n = 3\n    assert candidate(a, n) == 2\n    # test case 2\n    a = [4, 8, 12, 7]\n    n = 4\n    assert candidate(a, n) == 2\n    \n    # test case 3\n    a = [4, 8, 12, 7, 16]\n    n = 5\n    assert candidate(a, n) == 2\n    # test case 4\n    a = [4, 8, 12, 7, 16, 3]\n    n = 6\n    assert candidate(a, n) == 2\n    # test case 5\n    a = [4, 8, 12, 7, 16, 3, 15]\n    n = 7\n    assert candidate(a, n) == 2\n    "}
{"task_id": "Open/22", "prompt": "def lenOfLongIncSubArr ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the length of the longest increasing subarray in the given array.\n    \"\"\"\n", "entry_point": "lenOfLongIncSubArr", "canonical_solution": "    m = 1\n    l = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            l = l + 1\n        else :\n            if ( m < l ) :\n                m = l\n            l = 1\n    if ( m < l ) :\n        m = l\n    return m\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1,2,3,4,5]\n    n = 5\n    assert candidate(arr, n) == 5\n    \n    # test case 2\n    arr = [1,2,3,2,4,5]\n    n = 6\n    assert candidate(arr, n) == 3\n    # test case 3\n    arr = [7,6,5,4,3,2,1]\n    n = 7\n    assert candidate(arr, n) == 1\n    # test case 4\n    arr = [1,2,1,2]\n    n = 4\n    assert candidate(arr, n) == 2\n    # test case 5\n    arr = [5,5,5]\n    n = 3\n    assert candidate(arr, n) == 1\n    "}
{"task_id": "Open/23", "prompt": "def subsetSum ( arr , n , i , sum , count ) :\n    \"\"\"Write a function that takes an array of integers, the length of the array, the current index, a target sum, and a count.\n    The function recursively calculates the number of subsets of the array that sum up to the target sum.\n    The base case is when the current index is equal to the length of the array.\n    If the sum is equal to 0, the count is incremented.\n    The function then calls itself twice, once subtracting the current element from the sum and once without subtracting.\n    Finally, the function returns the count.\n    \"\"\"\n", "entry_point": "subsetSum", "canonical_solution": "    if ( i == n ) :\n        if ( sum == 0 ) :\n            count += 1\n        return count\n    count = subsetSum ( arr , n , i + 1 , sum - arr [ i ] , count )\n    count = subsetSum ( arr , n , i + 1 , sum , count )\n    return count\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1,2,3,4]\n    n = 4\n    i = 0\n    sum = 5\n    count = 0\n    assert candidate(arr, n, i, sum, count) == 2\n    \n    # test case 2\n    arr = [1,1,1,1]\n    n = 4\n    i = 0\n    sum = 2\n    count = 0\n    assert candidate(arr, n, i, sum, count) == 6\n    \n    # test case 3\n    arr = [2,3,4,5]\n    n = 4\n    i = 0\n    sum = 6\n    count = 0\n    assert candidate(arr, n, i, sum, count) == 1\n    \n    # test case 4\n    arr = [1,2,3,4,5]\n    n = 5\n    i = 0\n    sum = 9\n    count = 0\n    assert candidate(arr, n, i, sum, count) == 3\n    \n    # test case 5\n    arr = [10,20,15,5,25]\n    n = 5\n    i = 0\n    sum = 40\n    count = 0\n    assert candidate(arr, n, i, sum, count) == 3\n    "}
{"task_id": "Open/24", "prompt": "def center_hexadecagonal_num ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the center hexadecagonal number for that value.\n    \"\"\"\n", "entry_point": "center_hexadecagonal_num", "canonical_solution": "    return 8 * n * n - 8 * n + 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1\n    assert candidate(n) == 1\n    # test case 2\n    n = 2\n    assert candidate(n) == 17\n    \n    # test case 3\n    n = 3\n    assert candidate(n) == 49\n    \n    # test case 4\n    n = 4\n    assert candidate(n) == 97\n    # test case 5\n    n = 5\n    assert candidate(n) == 161\n    \n    \n    "}
{"task_id": "Open/25", "prompt": "def seriesFunc ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the sum of the squares of the first n natural numbers, the sum of the first n natural numbers, and adds 1 to the total sum.\n    \"\"\"\n", "entry_point": "seriesFunc", "canonical_solution": "    sumSquare = ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6\n    sumNatural = ( n * ( n + 1 ) / 2 )\n    return ( sumSquare + sumNatural + 1 )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1\n    assert candidate(n) == 3.0\n    # test case 2\n    n = 2\n    assert candidate(n) == 9.0\n    # test case 3\n    n = 3\n    assert candidate(n) == 21.0\n    # test case 4\n    n = 4\n    assert candidate(n) == 41.0\n    # test case 5\n    n = 5\n    assert candidate(n) == 71.0\n    \n    "}
{"task_id": "Open/26", "prompt": "def maxSumLCM ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the maximum sum of all the factors of n.\n    \"\"\"\n", "entry_point": "maxSumLCM", "canonical_solution": "    max_sum = 0\n    i = 1\n    while ( i * i <= n ) :\n        if ( n % i == 0 ) :\n            max_sum = max_sum + i\n            if ( n // i != i ) :\n                max_sum = max_sum + ( n // i )\n        i = i + 1\n    return max_sum\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1\n    assert candidate(n) == 1\n    # test case 2\n    n = 2\n    assert candidate(n) == 3\n    # test case 3\n    n = 3\n    assert candidate(n) == 4\n    # test case 4\n    n = 4\n    assert candidate(n) == 7\n    # test case 5\n    n = 5\n    assert candidate(n) == 6\n    \n    "}
{"task_id": "Open/27", "prompt": "def findGreater ( x , y ) :\n    \"\"\"Write a function that takes two numbers, x and y, and returns True if x is less than or equal to y, and False otherwise.\n    \"\"\"\n", "entry_point": "findGreater", "canonical_solution": "    if ( x > y ) :\n        return False ;\n    else :\n        return True ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    x = 1\n    y = 2\n    assert candidate(x, y) == True\n    \n    # test case 2\n    x = 3\n    y = 3\n    assert candidate(x, y) == True\n    \n    # test case 3\n    x = 5\n    y = 4\n    assert candidate(x, y) == False\n    \n    # test case 4\n    x = 2\n    y = 8\n    assert candidate(x, y) == True\n    \n    # test case 5\n    x = 6\n    y = 2\n    assert candidate(x, y) == False\n    \n    "}
{"task_id": "Open/28", "prompt": "def center_octadecagon_num ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the center octadecagon number.\n    The center octadecagon number is calculated using the formula 9 * n * n - 9 * n + 1.\n    \"\"\"\n", "entry_point": "center_octadecagon_num", "canonical_solution": "    return ( 9 * n * n - 9 * n + 1 )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1\n    assert candidate(n) == 1\n    \n    # test case 2\n    n = 2\n    assert candidate(n) == 19\n    # test case 3\n    n = 3\n    assert candidate(n) == 55\n    \n    # test case 4\n    n = 4\n    assert candidate(n) == 109\n    \n    # test case 5\n    n = 5\n    assert candidate(n) == 181\n    \n    \n    "}
{"task_id": "Open/29", "prompt": "def percent ( a , b ) :\n    \"\"\"Write a function that takes two numbers, a and b, and returns the percentage increase or decrease from a to b.\n    \"\"\"\n", "entry_point": "percent", "canonical_solution": "    result = int ( ( ( b - a ) * 100 ) / a )\n    return result\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a = 1\n    b = 2\n    assert candidate(a, b) == 100\n    \n    # test case 2\n    a = 12\n    b = 25\n    assert candidate(a, b) == 108\n    \n    # test case 3\n    a = 12\n    b = 3\n    assert candidate(a, b) == -75\n    # test case 4\n    a = 1\n    b = 20\n    assert candidate(a, b) == 1900\n    # test case 5\n    a = 213\n    b = 3232\n    assert candidate(a, b) == 1417\n    "}
{"task_id": "Open/30", "prompt": "def AvgofSquareN ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the average of the squares of the first n natural numbers.\n    \"\"\"\n", "entry_point": "AvgofSquareN", "canonical_solution": "    return ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1\n    assert candidate(n) == 1.0\n    \n    # test case 2\n    n = 2\n    assert candidate(n) == 2.5\n    \n    # test case 3\n    n = 4\n    assert candidate(n) == 7.5\n    \n    # test case 4\n    n = 10\n    assert candidate(n) == 38.5\n    \n    # test case 5\n    n = 100\n    assert candidate(n) == 3383.5\n    "}
{"task_id": "Open/31", "prompt": "def ksmallest ( arr , n , k ) :\n    \"\"\"Write a function that takes an array, its length, and an integer k as input.\n    The function returns the kth smallest element in the array.\n    \"\"\"\n", "entry_point": "ksmallest", "canonical_solution": "    for i in range ( n ) :\n        if ( arr [ i ] <= k ) :\n            k = k + 1 ;\n        else :\n            break ;\n    return k ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1,2,3,4,5]\n    n = 5\n    k = 3\n    assert candidate(arr, n, k) == 8\n    \n    # test case 2\n    arr = [5,4,3,2,1]\n    n = 5\n    k = 5\n    assert candidate(arr, n, k) == 10\n    \n    # test case 3\n    arr = [1,2,3,4,5]\n    n = 5\n    k = 10\n    assert candidate(arr, n, k) == 15\n    \n    # test case 4\n    arr = [10,20,30,40,50]\n    n = 5\n    k = 30\n    assert candidate(arr, n, k) == 33\n    \n    # test case 5\n    arr = [1,2,3,4,5]\n    n = 5\n    k = 0\n    assert candidate(arr, n, k) == 0\n    \n    \n    "}
{"task_id": "Open/32", "prompt": "def getChicks ( n ) :\n    \"\"\"Write a function that takes an integer n as input and returns the number of chicks.\n    The number of chicks is calculated by raising 3 to the power of (n-1).\n    \"\"\"\n", "entry_point": "getChicks", "canonical_solution": "    chicks = pow ( 3 , n - 1 )\n    return chicks\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1\n    assert candidate(n) == 1.0\n    \n    # test case 2\n    n = 2\n    assert candidate(n) == 3.0\n    \n    # test case 3\n    n = 3\n    assert candidate(n) == 9.0\n    \n    # test case 4\n    n = 4\n    assert candidate(n) == 27.0\n    \n    # test case 5\n    n = 5\n    assert candidate(n) == 81.0\n    \n    \n    "}
{"task_id": "Open/33", "prompt": "def findTerm ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth term of a sequence.\n    The sequence starts with 1 and each subsequent term is calculated by multiplying the previous term by 2 and adding the difference between the current index and 1.\n    \"\"\"\n", "entry_point": "findTerm", "canonical_solution": "    if n == 1 :\n        return n\n    else :\n        term = 7\n        for i in range ( 2 , n + 1 ) :\n            term = term * 2 + ( i - 1 ) ;\n    return term ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1\n    assert candidate(n) == 1\n    \n    # test case 2\n    n = 2\n    assert candidate(n) == 15\n    # test case 3\n    n = 3\n    assert candidate(n) == 32\n    # test case 4\n    n = 4\n    assert candidate(n) == 67\n    # test case 5\n    n = 5\n    assert candidate(n) == 138\n    \n    \n    "}
{"task_id": "Open/34", "prompt": "def countSubArrayProductLessThanK ( a , k ) :\n    \"\"\"Write a function that takes in a list of integers and a target integer, and returns the number of subarrays in the list whose product is less than the target integer.\n    \"\"\"\n", "entry_point": "countSubArrayProductLessThanK", "canonical_solution": "    n = len ( a )\n    p = 1\n    res = 0\n    start = 0\n    end = 0\n    while ( end < n ) :\n        p *= a [ end ]\n        while ( start < end and p >= k ) :\n            p = int ( p // a [ start ] )\n            start += 1\n        if ( p < k ) :\n            l = end - start + 1\n            res += l\n        end += 1\n    return res\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a = [1,2,3,4]\n    k = 5\n    assert candidate(a, k) == 5\n    \n    # test case 2\n    a = [2,5,3,10]\n    k = 30\n    assert candidate(a, k) == 6\n    \n    # test case 3\n    a = [1,2,3,4,5]\n    k = 20\n    assert candidate(a, k) == 9\n    # test case 4\n    a = [1,2,0,4]\n    k = 5\n    assert candidate(a, k) == 10\n    \n    # test case 5\n    a = [3,1,2]\n    k = 5\n    assert candidate(a, k) == 5\n    \n    \n    "}
{"task_id": "Open/35", "prompt": "import math\n\ndef getOccurence ( n , d ) :\n    \"\"\"Write a function that takes two integers, n and d, and returns the number of times the digit d occurs in the numbers from 1 to n (inclusive).\n    \"\"\"\n", "entry_point": "getOccurence", "canonical_solution": "    result = 0 ;\n    itr = d ;\n    while ( itr <= n ) :\n        if ( itr % 10 == d ) :\n            result += 1 ;\n        if ( itr != 0 and math . floor ( itr / 10 ) == d ) :\n            result += 1 ;\n            itr += 1 ;\n        elif ( math . floor ( itr / 10 ) == d - 1 ) :\n            itr = itr + ( 10 - d ) ;\n        else :\n            itr = itr + 10 ;\n    return result ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 24\n    d = 2\n    assert candidate(n, d) == 8\n    \n    # test case 2\n    n = 105\n    d = 5\n    assert candidate(n, d) == 16\n    # test case 3\n    n = 12345\n    d = 1\n    assert candidate(n, d) == 12\n    # test case 4\n    n = 100\n    d = 0\n    assert candidate(n, d) == 11\n    # test case 5\n    n = 90\n    d = 9\n    assert candidate(n, d) == 10"}
{"task_id": "Open/36", "prompt": "def findMissingPositive ( arr , n ) :\n    \"\"\"Write a function that takes an array of integers and its length as input and returns the smallest positive integer that is missing from the array.\n    \"\"\"\n", "entry_point": "findMissingPositive", "canonical_solution": "    m = 1\n    x = [ ]\n    for i in range ( n ) :\n        if ( m < arr [ i ] ) :\n            x . append ( arr [ i ] )\n        elif ( m == arr [ i ] ) :\n            m = m + 1\n            while ( x . count ( m ) ) :\n                x . remove ( m )\n                m = m + 1\n    return m\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [3,4,-1,1]\n    n = 4\n    assert candidate(arr, n) == 2\n    # test case 2\n    arr = [1,2,0]\n    n = 3\n    assert candidate(arr, n) == 3\n    # test case 3\n    arr = [7,8,9,11,12]\n    n = 5\n    assert candidate(arr, n) == 1\n    # test case 4\n    arr = [4,5,6,7,8,1,2,3]\n    n = 8\n    assert candidate(arr, n) == 9\n    # test case 5\n    arr = [-3,-2,0,1,2]\n    n = 5\n    assert candidate(arr, n) == 3\n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/37", "prompt": "def ways ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the number of ways to climb a staircase with n steps.\n    Each time, you can either climb 1 or 2 steps.\n    \"\"\"\n", "entry_point": "ways", "canonical_solution": "    first = 2 ;\n    second = 3 ;\n    res = 0 ;\n    for i in range ( 3 , n + 1 ) :\n        res = first + second ;\n        first = second ;\n        second = res ;\n    return res ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1\n    assert candidate(n) == 0\n    \n    # test case 2\n    n = 2\n    assert candidate(n) == 0\n    \n    # test case 3\n    n = 3\n    assert candidate(n) == 5\n    \n    # test case 4\n    n = 4\n    assert candidate(n) == 8\n    \n    # test case 5\n    n = 5\n    assert candidate(n) == 13\n    \n    "}
{"task_id": "Open/38", "prompt": "def calculateAreaSum ( l , b ) :\n    \"\"\"Write a function that takes two parameters, l and b, representing the length and breadth of a rectangle.\n    The function calculates the sum of the areas of all the squares that can fit inside the rectangle.\n    It starts with a square of size 1 and gradually increases the size until it reaches the maximum size that can fit inside the rectangle.\n    The function returns the total area of all the squares.\n    \"\"\"\n", "entry_point": "calculateAreaSum", "canonical_solution": "    size = 1\n    maxSize = min ( l , b )\n    totalArea = 0\n    for i in range ( 1 , maxSize + 1 ) :\n        totalSquares = ( ( l - size + 1 ) * ( b - size + 1 ) )\n        area = ( totalSquares * size * size )\n        totalArea += area\n        size += 1\n    return totalArea\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    l = 3\n    b = 5\n    assert candidate(l, b) == 74\n    # test case 2\n    l = 2\n    b = 2\n    assert candidate(l, b) == 8\n    # test case 3\n    l = 5\n    b = 3\n    assert candidate(l, b) == 74\n    # test case 4\n    l = 1\n    b = 1\n    assert candidate(l, b) == 1\n    # test case 5\n    l = 4\n    b = 4\n    assert candidate(l, b) == 104\n    \n    "}
{"task_id": "Open/39", "prompt": "def count ( N ) :\n    \"\"\"Write a function that takes an integer N and returns the sum of all numbers from 1 to N.\n    \"\"\"\n", "entry_point": "count", "canonical_solution": "    a = 0 ;\n    a = ( N * ( N + 1 ) ) / 2 ;\n    return int ( a ) ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    N = 1\n    assert candidate(N) == 1\n    # test case 2\n    N = 2\n    assert candidate(N) == 3\n    # test case 3\n    N = 3\n    assert candidate(N) == 6\n    # test case 4\n    N = 4\n    assert candidate(N) == 10\n    # test case 5\n    N = 5\n    assert candidate(N) == 15\n    "}
{"task_id": "Open/40", "prompt": "def countIterations ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the maximum number of consecutive zeros between two ones in the array.\n    If there are no ones in the array, the function should return -1.\n    \"\"\"\n", "entry_point": "countIterations", "canonical_solution": "    oneFound = False ;\n    res = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        if ( arr [ i ] == 1 ) :\n            oneFound = True ;\n        while ( i < n and arr [ i ] == 1 ) :\n            i += 1 ;\n        count_zero = 0 ;\n        while ( i < n and arr [ i ] == 0 ) :\n            count_zero += 1 ;\n            i += 1 ;\n        if ( oneFound == False and i == n ) :\n            return - 1 ;\n        curr_count = 0 ;\n        if ( i < n and oneFound == True ) :\n            if ( ( count_zero & 1 ) == 0 ) :\n                curr_count = count_zero // 2 ;\n            else :\n                curr_count = ( count_zero + 1 ) // 2 ;\n            count_zero = 0 ;\n        else :\n            curr_count = count_zero ;\n            count_zero = 0 ;\n        res = max ( res , curr_count ) ;\n    return res ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1,0,0,2]\n    n=3\n    assert candidate(arr,n)==2\n    \n    # test case 2\n    arr=[1,3,5,7,9]\n    n=1\n    assert candidate(arr,n)==0\n    \n    # test case 3\n    arr=[1,0,3,2,5]\n    n=2\n    assert candidate(arr,n)==1\n    \n    # test case 4\n    arr=[1,10,2,8,0]\n    n=1\n    assert candidate(arr,n)==0\n    \n    # test case 5\n    arr=[0,0,0]\n    n=2\n    assert candidate(arr,n)==-1"}
{"task_id": "Open/41", "prompt": "def longestSubArray ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the length of the longest subarray that contains at least one zero.\n    If the array does not contain any zeros, the function should return 0.\n    \"\"\"\n", "entry_point": "longestSubArray", "canonical_solution": "    isZeroPresent = False\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            isZeroPresent = True\n            break\n    if ( isZeroPresent ) :\n        return n\n    return 0\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1,2,3,4,5]\n    n=3\n    assert candidate(arr,n)==0\n    \n    # test case 2\n    arr=[1,3,5,7,9]\n    n=4\n    assert candidate(arr,n)==0\n    \n    # test case 3\n    arr=[1,0,3,2,5]\n    n=5\n    assert candidate(arr,n)==5\n    \n    # test case 4\n    arr=[1,10,2,8,0]\n    n=3\n    assert candidate(arr,n)==0\n    \n    # test case 5\n    arr=[10,2,8,9,3,0]\n    n=6\n    assert candidate(arr,n)==6"}
{"task_id": "Open/42", "prompt": "def maxOfSegmentMins ( a , n , k ) :\n    \"\"\"Write a function that takes an array 'a', its length 'n', and an integer 'k' as input and returns the maximum value of the minimum elements in each segment of size 'k' in the array.\n    If 'k' is equal to 1, the function should return the minimum element in the array.\n    If 'k' is equal to 2, the function should return the maximum value between the first and last element in the array.\n    Otherwise, the function should return the maximum element in the array.\n    \"\"\"\n", "entry_point": "maxOfSegmentMins", "canonical_solution": "    if k == 1 :\n        return min ( a )\n    if k == 2 :\n        return max ( a [ 0 ] , a [ n - 1 ] )\n    return max ( a )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a=[1,2,3,4,5]\n    n=3\n    k=1\n    assert candidate(a,n,k)==1\n    \n    # test case 2\n    a=[3,2,4,1,2]\n    n=3\n    k=1\n    assert candidate(a,n,k)==1\n    \n    # test case 3\n    a=[1,2,3,4,5]\n    n=3\n    k=2\n    assert candidate(a,n,k)==3\n    \n    # test case 4\n    a=[3,2,4,1,2]\n    n=5\n    k=2\n    assert candidate(a,n,k)==3\n    \n    # test case 5\n    a=[1,2,3,4,5]\n    n=3\n    k=3\n    assert candidate(a,n,k)==5"}
{"task_id": "Open/43", "prompt": "def countsubarray ( array , n , k ) :\n    \"\"\"Write a function that takes an array, its length, and a number k as input and returns the count of subarrays whose product is less than or equal to k.\n    \"\"\"\n", "entry_point": "countsubarray", "canonical_solution": "    count = 0\n    for i in range ( 0 , n ) :\n        if array [ i ] <= k :\n            count += 1\n        mul = array [ i ]\n        for j in range ( i + 1 , n ) :\n            mul = mul * array [ j ]\n            if mul <= k :\n                count += 1\n            else :\n                break\n    return count\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    array=[1,2,3,4,5]\n    n=3\n    k=5\n    assert candidate(array,n,k)==4\n    \n    # test case 2\n    array=[3,2,4,1,2]\n    n=4\n    k=2\n    assert candidate(array,n,k)==2\n    \n    # test case 3\n    array=[1,5,6,0,3]\n    n=4\n    k=3\n    assert candidate(array,n,k)==3\n    \n    # test case 4\n    array=[1,3,5,7,9]\n    n=5\n    k=2\n    assert candidate(array,n,k)==1\n    \n    # test case 5\n    array=[1,2,3,4,5]\n    n=4\n    k=3\n    assert candidate(array,n,k)==4"}
{"task_id": "Open/44", "prompt": "def make_permutation ( arr , n ) :\n    \"\"\"Write a function that takes an array and an integer as input and returns the sum of absolute differences between each element in the sorted array and its corresponding index plus one.\n    \"\"\"\n", "entry_point": "make_permutation", "canonical_solution": "    arr . sort ( ) ;\n    ans = 0 ;\n    for i in range ( n ) :\n        ans += abs ( i + 1 - arr [ i ] ) ;\n    return ans ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1,2,3,4,5]\n    n=1\n    assert candidate(arr,n)==0\n    \n    # test case 2\n    arr=[1,10,100]\n    n=3\n    assert candidate(arr,n)==105\n    \n    # test case 3\n    arr=[3,2,4,5,2,6]\n    n=4\n    assert candidate(arr,n)==1\n    \n    # test case 4\n    arr=[-1,-3,-2,0]\n    n=4\n    assert candidate(arr,n)==16\n    \n    # test case 5\n    arr=[-1,-20,1,4]\n    n=2\n    assert candidate(arr,n)==24"}
{"task_id": "Open/45", "prompt": "def getMinCost ( arr , n ) :\n    \"\"\"Write a function that takes an array of integers and the length of the array as input.\n    The function should find the minimum element in the array and return the product of the minimum element and (n - 1), where n is the length of the array.\n    \"\"\"\n", "entry_point": "getMinCost", "canonical_solution": "    min_ele = min ( arr )\n    return min_ele * ( n - 1 )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1,2,3,4]\n    n=4\n    assert candidate(arr,n)==3\n    \n    # test case 2\n    arr=[1,10,100]\n    n=5\n    assert candidate(arr,n)==4\n    \n    # test case 3\n    arr=[3,2,4,5,2,6]\n    n=4\n    assert candidate(arr,n)==6\n    \n    # test case 4\n    arr=[-1,-3,-2,0]\n    n=1\n    assert candidate(arr,n)==0\n    \n    # test case 5\n    arr=[-1,-20,1,4]\n    n=2\n    assert candidate(arr,n)==-20"}
{"task_id": "Open/46", "prompt": "def maxDistance ( array ) :\n    \"\"\"Write a function that takes an array of integers and returns the maximum difference between any two elements in the array, where the difference is calculated by adding or subtracting the index of the element from the element itself.\n    \"\"\"\n", "entry_point": "maxDistance", "canonical_solution": "    max1 = - 2147483648\n    min1 = + 2147483647\n    max2 = - 2147483648\n    min2 = + 2147483647\n    for i in range ( len ( array ) ) :\n        max1 = max ( max1 , array [ i ] + i )\n        min1 = min ( min1 , array [ i ] + i )\n        max2 = max ( max2 , array [ i ] - i )\n        min2 = min ( min2 , array [ i ] - i )\n    return max ( max1 - min1 , max2 - min2 )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    array=[1,2,3,4,5]\n    assert candidate(array)==8\n    \n    # test case 2\n    array=[1,10,100]\n    assert candidate(array)==101\n    \n    # test case 3\n    array=[3,2,4,5,2,6]\n    assert candidate(array)==8\n    \n    # test case 4\n    array=[-1,-3,-2,0]\n    assert candidate(array)==5\n    \n    # test case 5\n    array=[-1,-20,1,4]\n    assert candidate(array)==26"}
{"task_id": "Open/47", "prompt": "def pointsAreOnSameSideOfLine ( a , b , c , x1 , y1 , x2 , y2 ) :\n    \"\"\"Write a function that takes in six parameters: a, b, c, x1, y1, x2, y2.\n    The function checks if two points (x1, y1) and (x2, y2) are on the same side of a line defined by the equation ax + by = c.\n    The function returns True if the points are on the same side and False otherwise.\n    \"\"\"\n", "entry_point": "pointsAreOnSameSideOfLine", "canonical_solution": "    fx1 = 0\n    fx2 = 0\n    fx1 = a * x1 + b * y1 - c\n    fx2 = a * x2 + b * y2 - c\n    if ( ( fx1 * fx2 ) > 0 ) :\n        return True\n    return False\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a=1\n    b=2\n    c=3\n    x1=4\n    y1=5\n    x2=6\n    y2=7\n    assert candidate(a,b,c,x1,y1,x2,y2)==True\n    \n    # test case 2\n    a=-1\n    b=2\n    c=-3\n    x1=4\n    y1=-5\n    x2=6\n    y2=-7\n    assert candidate(a,b,c,x1,y1,x2,y2)==True\n    \n    # test case 3\n    a=-1\n    b=-2\n    c=-3\n    x1=4\n    y1=5\n    x2=-6\n    y2=-7\n    assert candidate(a,b,c,x1,y1,x2,y2)==False\n    \n    # test case 4\n    a=-2\n    b=3\n    c=1\n    x1=5\n    y1=2\n    x2=3\n    y2=4\n    assert candidate(a,b,c,x1,y1,x2,y2)==False\n    \n    # test case 5\n    a=1\n    b=0\n    c=3\n    x1=2\n    y1=-1\n    x2=3\n    y2=4\n    assert candidate(a,b,c,x1,y1,x2,y2)==False"}
{"task_id": "Open/48", "prompt": "def countSolutions ( a ) :\n    \"\"\"Write a function that takes an integer as input and counts the number of solutions to the equation a = i + (a XOR i), where i ranges from 0 to a (inclusive).\n    The function should return the count of solutions.\n    \"\"\"\n", "entry_point": "countSolutions", "canonical_solution": "    count = 0\n    for i in range ( a + 1 ) :\n        if ( a == ( i + ( a ^ i ) ) ) :\n            count += 1\n    return count\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a=1\n    assert candidate(a)==2\n    \n    # test case 2\n    a=2\n    assert candidate(a)==2\n    \n    # test case 3\n    a=3\n    assert candidate(a)==4\n    \n    # test case 4\n    a=4\n    assert candidate(a)==2\n    \n    # test case 5\n    a=5\n    assert candidate(a)==4"}
{"task_id": "Open/49", "prompt": "def maxAND ( L , R ) :\n    \"\"\"Write a function that takes two integers, L and R, and returns the maximum value of the bitwise AND operation between L and R.\n    \"\"\"\n", "entry_point": "maxAND", "canonical_solution": "    if ( L == R ) :\n        return L ;\n    elif ( ( R - L ) == 1 ) :\n        return ( R & L ) ;\n    else :\n        if ( ( ( R - 1 ) & R ) > ( ( R - 2 ) & ( R - 1 ) ) ) :\n            return ( ( R - 1 ) & R ) ;\n        else :\n            return ( ( R - 2 ) & ( R - 1 ) ) ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    L=1\n    R=1\n    assert candidate(L,R)==1\n    \n    # test case 2\n    L=2\n    R=3\n    assert candidate(L,R)==2\n    \n    # test case 3\n    L=4\n    R=10\n    assert candidate(L,R)==8\n    \n    # test case 4\n    L=-1\n    R=0\n    assert candidate(L,R)==0\n    \n    # test case 5\n    L=3\n    R=-1\n    assert candidate(L,R)==-2"}
{"task_id": "Open/50", "prompt": "def findSmallest ( a , n ) :\n    \"\"\"Write a function that takes an array of integers and its length as input and returns the smallest number in the array that is a factor of all other numbers in the array.\n    If there is no such number, the function should return -1.\n    \"\"\"\n", "entry_point": "findSmallest", "canonical_solution": "    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( ( a [ j ] % a [ i ] ) >= 1 ) :\n                break\n            if ( j == n - 1 ) :\n                return a [ i ]\n        return - 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a=[1,2,3,4,5]\n    n=3\n    assert candidate(a,n)==1\n    \n    # test case 2\n    a=[1,3,5,7,9]\n    n=4\n    assert candidate(a,n)==1\n    \n    # test case 3\n    a=[1,0,3,2,5]\n    n=5\n    assert candidate(a,n)==1\n    \n    # test case 4\n    a=[1,10,2,8,0]\n    n=3\n    assert candidate(a,n)==1\n    \n    # test case 5\n    a=[10, 2, 8, 9, 3]\n    n=4\n    assert candidate(a,n)==-1"}
{"task_id": "Open/51", "prompt": "def sum ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the sum of the series 1/3^n for n terms.\n    \"\"\"\n", "entry_point": "sum", "canonical_solution": "    if n == 0 :\n        return 1\n    return 1 / pow ( 3 , n ) + sum ( n - 1 )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=0\n    assert candidate(n)==1\n    \n    # test case 2\n    n=1\n    assert candidate(n)==1.3333333333333333\n    \n    # test case 3\n    n=2\n    assert candidate(n)==1.4444444444444444\n    \n    # test case 4\n    n=3\n    assert candidate(n)==1.4814814814814814\n    \n    # test case 5\n    n=4\n    assert candidate(n)==1.4938271604938271"}
{"task_id": "Open/52", "prompt": "def submatrixXor ( arr , n ) :\n    \"\"\"Write a function that takes a 2D array `arr` and an integer `n` as input and returns the XOR of all elements in the submatrices of size (i+1) x (j+1) where i and j range from 0 to n-1.\n    The XOR operation is performed only on the submatrices where the product of the top left element and the bottom right element is odd.\n    \"\"\"\n", "entry_point": "submatrixXor", "canonical_solution": "    ans = 0\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            top_left = ( i + 1 ) * ( j + 1 )\n            bottom_right = ( n - i ) * ( n - j )\n            if ( top_left % 2 == 1 and bottom_right % 2 == 1 ) :\n                ans = ( ans ^ arr [ i ] [ j ] )\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[[1,2,3,4],[5,6,7,8]]\n    n=1\n    assert candidate(arr,n)==1\n    \n    # test case 2\n    arr=[[1,10,100],[-100,-10,-1]]\n    n=2\n    assert candidate(arr,n)==0\n    \n    # test case 3\n    arr=[[-1,333,-2,0],[2,333,1,100]]\n    n=2\n    assert candidate(arr,n)==0\n    \n    # test case 4\n    arr=[[-1,-3,-2,0],[3,2,4,5]]\n    n=1\n    assert candidate(arr,n)==-1\n    \n    # test case 5\n    arr=[[-1,-20,1,4],[0,0,3,-1]]\n    n=1\n    assert candidate(arr,n)==-1"}
{"task_id": "Open/53", "prompt": "def xorEqualsOrCount ( N ) :\n    \"\"\"Write a function that takes an integer N and returns the count of numbers from 0 to N (inclusive) where the bitwise XOR of the number with its own bitwise OR is equal to the number itself.\n    \"\"\"\n", "entry_point": "xorEqualsOrCount", "canonical_solution": "    count = 0\n    while ( N > 0 ) :\n        bit = N % 2\n        if bit == 0 :\n            count += 1\n        N //= 2\n    return int ( pow ( 2 , count ) )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    N=0\n    assert candidate(N)==1\n    \n    # test case 2\n    N=1\n    assert candidate(N)==1\n    \n    # test case 3\n    N=2\n    assert candidate(N)==2\n    \n    # test case 4\n    N=3\n    assert candidate(N)==1\n    \n    # test case 5\n    N=4\n    assert candidate(N)==4"}
{"task_id": "Open/54", "prompt": "def isUnique ( a , n , k ) :\n    \"\"\"Write a function that takes an array of integers, the length of the array, and an integer k.\n    The function should return True if the sum of the array elements plus the length of the array minus 1 is equal to k, and False otherwise.\n    \"\"\"\n", "entry_point": "isUnique", "canonical_solution": "    sum = 0\n    for i in range ( 0 , n , 1 ) :\n        sum += a [ i ]\n    sum += n - 1\n    return ( sum == k )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a=[1,2,3,4]\n    n=2\n    k=3\n    assert candidate(a,n,k)==False\n    \n    # test case 2\n    a=[1,2,3,4]\n    n=2\n    k=4\n    assert candidate(a,n,k)==True\n    \n    # test case 3\n    a=[1,10,100]\n    n=3\n    k=2\n    assert candidate(a,n,k)==False\n    \n    # test case 4\n    a=[1,10,100]\n    n=2\n    k=113\n    assert candidate(a,n,k)==False\n    \n    # test case 5\n    a=[1,-2,3,-4,5]\n    n=2\n    k=0\n    assert candidate(a,n,k)==True"}
{"task_id": "Open/55", "prompt": "def onlyFirstAndLastAreSet ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns True if only the first and last bits of the binary representation of the integer are set to 1, or False otherwise.\n    \"\"\"\n", "entry_point": "onlyFirstAndLastAreSet", "canonical_solution": "    if ( n == 1 ) :\n        return True\n    if ( n == 2 ) :\n        return False\n    return ( ( ( n - 1 ) & ( n - 2 ) ) == 0 )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=1\n    assert candidate(n)==True\n    \n    # test case 2\n    n=2\n    assert candidate(n)==False\n    \n    # test case 3\n    n=3\n    assert candidate(n)==True\n    \n    # test case 4\n    n=4\n    assert candidate(n)==False\n    \n    # test case 5\n    n=5\n    assert candidate(n)==True"}
{"task_id": "Open/56", "prompt": "def maxPartition ( s ) :\n    \"\"\"Write a function that takes a string as input and returns the maximum number of partitions that can be made such that each partition consists of consecutive identical characters.\n    \"\"\"\n", "entry_point": "maxPartition", "canonical_solution": "    n = len ( s )\n    P = 0\n    current = \"\"\n    previous = \"\"\n    for i in range ( n ) :\n        current += s [ i ]\n        if ( current != previous ) :\n            previous = current\n            current = \"\"\n            P += 1\n    return P\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    s='abc'\n    assert candidate(s)==3\n    \n    # test case 2\n    s='aab'\n    assert candidate(s)==2\n    \n    # test case 3\n    s='aaa'\n    assert candidate(s)==2\n    \n    # test case 4\n    s='2321'\n    assert candidate(s)==4\n    \n    # test case 5\n    s='abc123'\n    assert candidate(s)==6"}
{"task_id": "Open/57", "prompt": "def findNum ( N , K ) :\n    \"\"\"Write a function that takes two integers, N and K, and returns N if N is divisible by K, otherwise it returns N minus the remainder of N divided by K.\n    \"\"\"\n", "entry_point": "findNum", "canonical_solution": "    rem = N % K\n    if ( rem == 0 ) :\n        return N\n    else :\n        return N - rem\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    N=3\n    K=2\n    assert candidate(N,K)==2\n    \n    # test case 2\n    N=4\n    K=2\n    assert candidate(N,K)==4\n    \n    # test case 3\n    N=5\n    K=2\n    assert candidate(N,K)==4\n    \n    # test case 4\n    N=10\n    K=3\n    assert candidate(N,K)==9\n    \n    # test case 5\n    N=20\n    K=11\n    assert candidate(N,K)==11"}
{"task_id": "Open/58", "prompt": "def successiveChange ( arr , N ) :\n    \"\"\"Write a function that takes an array and an integer N as input and returns the result of a successive change calculation.\n    The function initializes a variable \"result\" to 0.\n    It then assigns the first element of the array to a variable \"var1\" and the second element to a variable \"var2\".\n    The \"result\" variable is updated by adding \"var1\" and \"var2\" and adding the product of \"var1\" and \"var2\" divided by 100.\n    \n\nThe function then enters a loop that iterates from 2 to N.\n    In each iteration, the \"result\" variable is updated by adding the current element of the array and adding the product of \"result\" and the current element divided by 100.\n    \n\nFinally, the function returns the final value of the \"result\" variable.\n    \"\"\"\n", "entry_point": "successiveChange", "canonical_solution": "    result = 0 ;\n    var1 = arr [ 0 ] ;\n    var2 = arr [ 1 ] ;\n    result = float ( var1 + var2 + ( float ( var1 * var2 ) / 100 ) ) ;\n    for i in range ( 2 , N ) :\n        result = ( result + arr [ i ] + ( float ( result * arr [ i ] ) / 100 ) ) ;\n    return result ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1,2,3,4,5]\n    N=3\n    assert candidate(arr,N)==6.1106\n    \n    # test case 2\n    arr=[1,3,5,7,9]\n    N=4\n    assert candidate(arr,N)==16.877705\n    \n    # test case 3\n    arr=[1,0,3,2,5]\n    N=5\n    assert candidate(arr,N)==11.416129999999999\n    \n    # test case 4\n    arr=[1,10,2,8,0]\n    N=3\n    assert candidate(arr,N)==13.322\n    \n    # test case 5\n    arr=[10, 2, 8, 9, 3]\n    N=4\n    assert candidate(arr,N)==32.08184"}
{"task_id": "Open/59", "prompt": "def answer ( arr , ranges , reversals , index ) :\n    \"\"\"Write a function that takes in four parameters: an array, a list of ranges, the number of reversals, and an index.\n    The function returns the value at the given index after performing the specified number of reversals on the array.\n    Each reversal involves swapping the elements within a given range.\n    \"\"\"\n", "entry_point": "answer", "canonical_solution": "    i = reversals - 1\n    while ( i >= 0 ) :\n        left = ranges [ i ] [ 0 ]\n        right = ranges [ i ] [ 1 ]\n        if ( left <= index and right >= index ) :\n            index = right + left - index\n        i -= 1\n    return arr [ index ]\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1,2,3,4,5]\n    ranges=[[0,1],[2,3],[4,5]]\n    reversals=3\n    index=2\n    assert candidate(arr,ranges,reversals,index)==4\n    \n    # test case 2\n    arr=[1,10,4,2,3]\n    ranges=[[0,1],[2,3],[4,5]]\n    reversals=3\n    index=3\n    assert candidate(arr,ranges,reversals,index)==4\n    \n    # test case 3\n    arr=[1,10,100]\n    ranges=[[4,5],[1,3],[4,2]]\n    reversals=2\n    index=2\n    assert candidate(arr,ranges,reversals,index)==100\n    \n    # test case 4\n    arr=[1,0,3]\n    ranges=[[4,5],[1,3],[4,2]]\n    reversals=1\n    index=2\n    assert candidate(arr,ranges,reversals,index)==3\n    \n    # test case 5\n    arr=[5,2,4]\n    ranges=[[10,1],[2,-3],[-4,1]]\n    reversals=1\n    index=2\n    assert candidate(arr,ranges,reversals,index)==4"}
{"task_id": "Open/60", "prompt": "def judgeSquareSum ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns True if the integer can be expressed as the sum of two squares, and False otherwise.\n    \"\"\"\n", "entry_point": "judgeSquareSum", "canonical_solution": "    i = 2 ;\n    while ( i * i <= n ) :\n        count = 0 ;\n        if ( n % i == 0 ) :\n            while ( n % i == 0 ) :\n                count += 1 ;\n                n = int ( n / i ) ;\n            if ( i % 4 == 3 and count % 2 != 0 ) :\n                return False ;\n        i += 1 ;\n    return n % 4 != 3 ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=1\n    assert candidate(n)==True\n    \n    # test case 2\n    n=2\n    assert candidate(n)==True\n    \n    # test case 3\n    n=3\n    assert candidate(n)==False\n    \n    # test case 4\n    n=4\n    assert candidate(n)==True\n    \n    # test case 5\n    n=5\n    assert candidate(n)==True"}
{"task_id": "Open/61", "prompt": "def getCount ( a , b ) :\n    \"\"\"Write a function that takes two strings, `a` and `b`, and returns the number of times `a` can be repeated to form `b`.\n    If `a` cannot be repeated to form `b`, the function should return -1.\n    \"\"\"\n", "entry_point": "getCount", "canonical_solution": "    if ( len ( b ) % len ( a ) != 0 ) :\n        return - 1 ;\n    count = int ( len ( b ) / len ( a ) )\n    a = a * count\n    if ( a == b ) :\n        return count\n    return - 1 ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a = \"abcd\"\n    b = \"abcdabcdabcd\"\n    assert candidate( a , b )==3\n    # test case 2\n    a = \"a\"\n    b = \"aa\"\n    assert candidate( a , b )==2\n    # test case 3\n    a = \"abc\"\n    b = \"def\"\n    assert candidate( a , b )==-1\n    # test case 4\n    a = \"abcd\"\n    b = \"abcdabcdabcdabcdabcd\"\n    assert candidate( a , b )==5\n    # test case 5\n    a = \"abcde\"\n    b = \"abcdeabcde\"\n    assert candidate( a , b )==2\n    \n    "}
{"task_id": "Open/62", "prompt": "def tidyNum ( str , len ) :\n    \"\"\"Write a function that takes a string and its length as input and returns a modified string.\n    The function iterates through the string from the second-to-last character to the first character.\n    If a character is greater than the next character, it subtracts 1 from that character and sets all subsequent characters to 9.\n    The modified string is then returned.\n    \"\"\"\n", "entry_point": "tidyNum", "canonical_solution": "    for i in range ( len - 2 , - 1 , - 1 ) :\n        if ( str [ i ] > str [ i + 1 ] ) :\n            str [ i ] -= 1\n            for j in range ( i + 1 , len ) :\n                str [ j ] = 9\n    return str\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    str = [1,3,2]\n    len = 3\n    # print(tidyNum(str,len))\n    assert candidate(str, len)==[1, 2, 9]\n    # test case 2\n    str=[1,0,0,0]\n    len=4\n    assert candidate(str, len)==[0, 9, 9, 9]\n    # test case 3\n    str=[7]\n    len=1\n    assert candidate(str, len)==[7]\n    # test case 4\n    str = [4,3,9]\n    len = 3\n    assert candidate(str, len)==[3, 9, 9]\n    # test case 5\n    str = [1,1,1]\n    len = 3\n    assert candidate(str, len)==[1, 1, 1]"}
{"task_id": "Open/63", "prompt": "import math\n\ndef findMinValue ( arr , n ) :\n    \"\"\"Write a function that takes an array of numbers and its length as input and returns the minimum value of a number such that the sum of the logarithms of all the numbers in the array is less than the logarithm of the minimum value multiplied by the length of the array.\n    \"\"\"\n", "entry_point": "findMinValue", "canonical_solution": "    arr . sort ( )\n    val = 0\n    for i in range ( n ) :\n        val += ( math . log ( arr [ i ] ) )\n    left = arr [ 0 ]\n    right = arr [ n - 1 ] + 1\n    while ( left <= right ) :\n        mid = ( left + right ) // 2\n        temp = n * ( math . log ( mid ) )\n        if ( val < temp ) :\n            ans = mid\n            right = mid - 1\n        else :\n            left = mid + 1\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1, 2, 3, 4, 5]\n    n=5\n    assert candidate(arr,n)==3\n    # test case 2\n    arr = [2, 4, 6, 8, 10]\n    n = 5\n    assert candidate(arr,n)==6\n    # test case 3\n    arr = [2, 3, 4, 5, 6]\n    n = 5\n    assert candidate(arr,n)==4\n    # test case 4\n    arr=[5, 10, 15, 20, 25]\n    n=5\n    assert candidate(arr,n)==14\n    # test case 5\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    n = 7\n    assert candidate(arr,n)==4"}
{"task_id": "Open/64", "prompt": "def largestSubStr ( s ) :\n    \"\"\"Write a function that takes a string as input and returns the largest substring of the input string that does not end with the character '1'.\n    If the input string is empty or consists only of '1' characters, the function should return \"-1\".\n    \"\"\"\n", "entry_point": "largestSubStr", "canonical_solution": "    while ( len ( s ) and s [ len ( s ) - 1 ] == '1' ) :\n        s = s [ : len ( s ) - 1 ] ;\n    if ( len ( s ) == 0 ) :\n        return \"-1\" ;\n    else :\n        return s ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    s=\"111000111\"\n    # print(largestSubStr(s))\n    assert candidate(s)==\"111000\"\n    # test case 2\n    s=\"111\"\n    assert candidate(s)==\"-1\"\n    # test case 3\n    s=\"01010101\"\n    assert candidate(s)==\"0101010\"\n    # test case 4\n    s=\"101\"\n    assert candidate(s)==\"10\"\n    # test case 5\n    s=\"101110101\"\n    assert candidate(s)==\"10111010\""}
{"task_id": "Open/65", "prompt": "def MinRemove ( a , n , k ) :\n    \"\"\"Write a function that takes an array 'a', its length 'n', and an integer 'k' as input.\n    The function removes the minimum number of elements from the array such that the count of each element is at most 'k'.\n    The function returns the length of the modified array.\n    \"\"\"\n", "entry_point": "MinRemove", "canonical_solution": "    cnt = [ 0 ] * k\n    for i in range ( n ) :\n        if ( a [ i ] == 0 ) :\n            cnt [ 0 ] += 1 ;\n        elif ( cnt [ a [ i ] - 1 ] > 0 ) :\n            cnt [ a [ i ] - 1 ] -= 1 ;\n            cnt [ a [ i ] ] += 1 ;\n    return n - ( k * cnt [ k - 1 ] ) ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a=[0,1,2,3,4,0]\n    n=6\n    k=5\n    # print(MinRemove(a,n,k))\n    assert candidate(a,n,k)==1\n    # test case 2\n    a=[0,0,0,0,0]\n    n=5\n    k=1\n    assert candidate(a,n,k)==0\n    # test case 3\n    a=[1,2,3,0,0,0]\n    n=6\n    k=3\n    assert candidate(a,n,k)==6\n    # test case 4\n    a = [0, 0, 0, 1, 2, 1]\n    n = 6\n    k = 3\n    assert candidate(a,n,k)==3\n    # test case 5\n    a = [0, 1, 2, 0, 1, 2]\n    n = 6\n    k = 3\n    assert candidate(a,n,k)==0\n    "}
{"task_id": "Open/66", "prompt": "def getMaxMedian ( arr , n , k ) :\n    \"\"\"Write a function that takes an array, its size, and an integer k as input and returns the maximum median of the array after adding k elements to it.\n    The function first calculates the size of the array after adding k elements.\n    It then sorts the array in ascending order.\n    If the size is even, the function calculates the median by taking the average of the two middle elements.\n    If the size is odd, the function simply returns the middle element as the median.\n    \"\"\"\n", "entry_point": "getMaxMedian", "canonical_solution": "    size = n + k\n    arr . sort ( reverse = False )\n    if ( size % 2 == 0 ) :\n        median = ( arr [ int ( size / 2 ) - 1 ] + arr [ int ( size / 2 ) ] ) / 2\n        return median\n    median = arr [ int ( size / 2 ) ]\n    return median\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1, 2, 3, 4, 5]\n    n=5\n    k=2\n    # print(getMaxMedian(arr,n,k))\n    assert candidate(arr,n,k)==4\n    # test case 2\n    arr=[10, 20, 30, 40, 50, 60]\n    n=6\n    k=3\n    assert candidate(arr,n,k)==50\n    # test case 3\n    arr=[100, 200, 300, 400]\n    n=4\n    k=2\n    assert candidate(arr,n,k)==350.0\n    # test case 4\n    arr=[1, 2, 3, 4, 5, 6, 7]\n    n=7\n    k=3\n    assert candidate(arr,n,k)==5.5\n    # test case 5\n    arr=[1, 3, 5, 7, 9]\n    n=5\n    k=4\n    assert candidate(arr,n,k)==9"}
{"task_id": "Open/67", "prompt": "def MinStep ( a , n ) :\n    \"\"\"Write a function that takes an array of integers and its length as input and returns the minimum number of steps required to make all the elements of the array equal to either 1 or -1.\n    The function calculates the number of positive, negative, and zero elements in the array.\n    For each negative element, the function adds the absolute difference between the element and -1 to the step count.\n    For each positive element, the function adds the absolute difference between the element and 1 to the step count.\n    If the number of negative elements is even, the function adds the number of zero elements to the step count.\n    If the number of negative elements is odd, the function checks if there are any zero elements.\n    If there are zero elements, it adds the number of zero elements to the step count.\n    If there are no zero elements, it adds 2 to the step count.\n    Finally, the function returns the total step count.\n    \"\"\"\n", "entry_point": "MinStep", "canonical_solution": "    positive = 0 ;\n    negative = 0 ;\n    zero = 0 ;\n    step = 0 ;\n    for i in range ( n ) :\n        if ( a [ i ] == 0 ) :\n            zero += 1 ;\n        elif ( a [ i ] < 0 ) :\n            negative += 1 ;\n            step = step + ( - 1 - a [ i ] ) ;\n        else :\n            positive += 1 ;\n            step = step + ( a [ i ] - 1 ) ;\n    if ( negative % 2 == 0 ) :\n        step = step + zero ;\n    else :\n        if ( zero > 0 ) :\n            step = step + zero ;\n        else :\n            step = step + 2 ;\n    return step ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a=[-1,2,3,-2,0]\n    n=5\n    assert candidate(a,n)==5\n    # test case 2\n    a=[1,2,3,4,5]\n    n=5\n    assert candidate(a,n)==10\n    # test case 3\n    a=[0,0,0,0,0]\n    n=5\n    assert candidate(a,n)==5\n    # test case 4\n    a=[-2,0,2,-1,1]\n    n=5\n    assert candidate(a,n)==3\n    # test case 5\n    a=[-1,-1,0,0,1,1]\n    n=6\n    assert candidate(a,n)==2"}
{"task_id": "Open/68", "prompt": "def findNthEvenDigitNumber ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth even digit number.\n    The function first checks if n is equal to 1, in which case it returns 0.\n    Otherwise, it creates an empty list v and subtracts 1 from n.\n    It then enters a while loop where it appends the remainder of n divided by 5 to the list v and updates n to be the floor division of n by 5.\n    After the loop, the function initializes a variable result to 0.\n    It then iterates over the elements in the list v in reverse order and updates the result by multiplying it by 10 and adding the current element.\n    Finally, the function returns 2 times the result.\n    \"\"\"\n", "entry_point": "findNthEvenDigitNumber", "canonical_solution": "    if ( n == 1 ) :\n        return 0\n    v = [ ]\n    n = n - 1\n    while ( n > 0 ) :\n        v . append ( n % 5 )\n        n = n // 5\n    result = 0\n    for i in range ( len ( v ) - 1 , - 1 , - 1 ) :\n        result = result * 10\n        result = result + v [ i ]\n    return 2 * result\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=1\n    \n    assert candidate(n)==0\n    # test case 2\n    n=2\n    assert candidate(n)==2\n    # test case 3\n    n=3\n    assert candidate(n)==4\n    # test case 4\n    n=4\n    assert candidate(n)==6\n    # test case 5\n    n=5\n    assert candidate(n)==8"}
{"task_id": "Open/69", "prompt": "import sys\n\ndef areSetBitsIncreasing ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns True if the number has a sequence of increasing set bits (bits that are set to 1) and False otherwise.\n    \"\"\"\n", "entry_point": "areSetBitsIncreasing", "canonical_solution": "    prev_count = sys . maxsize\n    while ( n > 0 ) :\n        while ( n > 0 and n % 2 == 0 ) :\n            n = int ( n / 2 )\n        curr_count = 1\n        while ( n > 0 and n % 2 == 1 ) :\n            n = n / 2\n            curr_count += 1\n        if ( curr_count >= prev_count ) :\n            return False\n        prev_count = curr_count\n    return True\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=9\n    assert candidate(n)==False\n    # test case 2\n    n=16\n    assert candidate(n)==False\n    # test case 3\n    n=8\n    assert candidate(n)==False\n    # test case 4\n    n=100\n    assert candidate(n)==False\n    # test case 5\n    n=8\n    assert candidate(n)==False"}
{"task_id": "Open/70", "prompt": "def closestMultiple ( n , x ) :\n    \"\"\"Write a function that takes two integers, n and x, and returns the closest multiple of x to n.\n    If x is greater than n, it returns x.\n    \"\"\"\n", "entry_point": "closestMultiple", "canonical_solution": "    if x > n :\n        return x ;\n    z = ( int ) ( x / 2 ) ;\n    n = n + z ;\n    n = n - ( n % x ) ;\n    return n ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 10\n    x = 4\n    assert candidate(n,x)==12\n    # test case 2\n    n = 15\n    x = 5\n    assert candidate(n,x)==15\n    # test case 3\n    n = 19\n    x = 4\n    assert candidate(n,x)==20\n    # test case 4\n    n = 22\n    x = 6\n    assert candidate(n,x)==24\n    # test case 5\n    n = 100\n    x = 7\n    assert candidate(n,x)==98"}
{"task_id": "Open/71", "prompt": "def sumOfTheSeries ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the sum of a series.\n    The series is generated by starting with 0 and adding 2 to each subsequent number in the series.\n    The series should include all numbers from 0 to n (inclusive).\n    \"\"\"\n", "entry_point": "sumOfTheSeries", "canonical_solution": "    sum = 0\n    for i in range ( 0 , n + 1 ) :\n        k = 2\n        for j in range ( 1 , i + 1 ) :\n            sum = sum + k ;\n            k = k + 2\n    return sum ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=1\n    assert candidate(n)==2\n    # test case 2\n    n=2\n    assert candidate(n)==8\n    # test case 3\n    n=3\n    assert candidate(n)==20\n    # test case 4\n    n=4\n    assert candidate(n)==40\n    # test case 5\n    n=5\n    assert candidate(n)==70"}
{"task_id": "Open/72", "prompt": "def sumOfTheSeries ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the sum of a series.\n    The series is calculated as follows: for each number i from 1 to n, a new series is generated.\n    In this new series, the first term is 1 and each subsequent term is obtained by adding 2 to the previous term.\n    The sum of all the terms in each series is then added together to get the final sum.\n    \"\"\"\n", "entry_point": "sumOfTheSeries", "canonical_solution": "    sum = 0\n    for i in range ( 1 , n + 1 ) :\n        k = 1\n        for j in range ( 1 , i + 1 ) :\n            sum += k\n            k += 2\n    return sum\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=1\n    assert candidate(n)==1\n    # test case 2\n    n=2\n    assert candidate(n)==5\n    # test case 3\n    n=3\n    assert candidate(n)==14\n    # test case 4\n    n=6\n    assert candidate(n)==91\n    # test case 5\n    n=25\n    assert candidate(n)==5525"}
{"task_id": "Open/73", "prompt": "def find_maxm ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the maximum value in the array that occurs the same number of times as its value.\n    \"\"\"\n", "entry_point": "find_maxm", "canonical_solution": "    mpp = { }\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] in mpp ) :\n            mpp . update ( { arr [ i ] : mpp [ arr [ i ] ] + 1 } )\n        else :\n            mpp [ arr [ i ] ] = 1\n    ans = 0\n    for value , freq in mpp . items ( ) :\n        if ( value == freq ) :\n            ans = max ( ans , value )\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1, 2, 3, 2, 3]\n    n=5\n    assert candidate(arr,n)==2\n    # test case 2\n    arr=[1, 2, 2, 2, 3]\n    n=5\n    assert candidate(arr,n)==1\n    # test case 3\n    arr=[1, 1, 1, 2, 2]\n    n=5\n    assert candidate(arr,n)==2\n    # test case 4\n    arr=[1, 2, 3, 4, 5]\n    n=5\n    assert candidate(arr,n)==1\n    # test case 5\n    arr=[1, 2, 3, 2, 1]\n    n=5\n    assert candidate(arr,n)==2\n    "}
{"task_id": "Open/74", "prompt": "def countPairs ( a , n ) :\n    \"\"\"Write a function that takes a list of integers and the length of the list as input.\n    The function counts the number of pairs of integers in the list where one integer is the power of 2 greater than the other integer.\n    The function returns the count of such pairs.\n    \"\"\"\n", "entry_point": "countPairs", "canonical_solution": "    mp = dict . fromkeys ( a , 0 )\n    for i in range ( n ) :\n        mp [ a [ i ] ] += 1\n    a . sort ( reverse = True )\n    count = 0\n    for i in range ( n ) :\n        if ( mp [ a [ i ] ] < 1 ) :\n            continue\n        cur = 1\n        while ( cur <= a [ i ] ) :\n            cur = cur << 1\n        if ( cur - a [ i ] in mp . keys ( ) ) :\n            if ( cur - a [ i ] == a [ i ] and mp [ a [ i ] ] == 1 ) :\n                continue\n            count += 1\n            mp [ cur - a [ i ] ] -= 1\n            mp [ a [ i ] ] -= 1\n    return count\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case\n    a=[1,2,3,4,5]\n    n=5\n    assert candidate(a,n)==1\n    # test case 2\n    a=[1,1,1,1,1]\n    n=5\n    assert candidate(a,n)==2\n    # test case 3\n    a=[5,6,7,8,9]\n    n=5\n    assert candidate(a,n)==1\n    # test case 4\n    a=[5,5,10,20,15]\n    n=5\n    assert candidate(a,n)==0\n    # test case 5\n    a=[1,3,5,7,9]\n    n=5\n    assert candidate(a,n)==2"}
{"task_id": "Open/75", "prompt": "def toggle ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the result of toggling all the bits in the binary representation of the integer.\n    \"\"\"\n", "entry_point": "toggle", "canonical_solution": "    temp = 1\n    while ( temp <= n ) :\n        n = n ^ temp\n        temp = temp << 1\n    return n\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=1\n    assert candidate(n)==0\n    # test case 2\n    n=5\n    assert candidate(n)==2\n    # test case 3\n    n=100\n    assert candidate(n)==27\n    # test case 4\n    n=55\n    assert candidate(n)==8\n    # test case 5\n    n=125\n    assert candidate(n)==2"}
{"task_id": "Open/76", "prompt": "def minChanges ( A , n ) :\n    \"\"\"Write a function that takes a list A and an integer n as input and returns the minimum number of changes needed in the list A to satisfy the following condition: if A[i-1] = 1, A[i+1] = 1, and A[i] = 0, then A[i+1] should be changed to 0.\n    The function should return the total number of changes made.\n    \"\"\"\n", "entry_point": "minChanges", "canonical_solution": "    cnt = 0\n    for i in range ( n - 2 ) :\n        if ( ( i - 1 >= 0 ) and A [ i - 1 ] == 1 and A [ i + 1 ] == 1 and A [ i ] == 0 ) :\n            A [ i + 1 ] = 0\n            cnt = cnt + 1\n    return cnt\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    A = [0, 0, 1, 0, 1]\n    n = 5\n    assert candidate(A,n)==0\n    # test case 2\n    A = [0, 0, 0, 1, 0]\n    n = 5\n    assert candidate(A,n)==0\n    # test case 3\n    A = [1, 0, 1, 0, 1, 0]\n    n = 6\n    assert candidate(A,n)==1\n    # test case 4\n    A = [1, 0, 1, 0, 0, 1, 0]\n    n = 7\n    assert candidate(A,n)==1\n    # test case 5\n    A = [1, 0, 0, 1, 0, 1, 0, 1]\n    n = 8\n    assert candidate(A,n)==1"}
{"task_id": "Open/77", "prompt": "def Convert ( radian ) :\n    \"\"\"Write a function that takes a radian value as input and converts it to degrees.\n    The function should return the degree value.\n    \"\"\"\n", "entry_point": "Convert", "canonical_solution": "    pi = 3.14159\n    degree = radian * ( 180 / pi )\n    return degree\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    radian=0.5\n    assert candidate(radian)==28.647913954398888\n    # test case 2\n    radian=1.0\n    assert candidate(radian)==57.295827908797776\n    # test case 3\n    radian=2.0\n    assert candidate(radian)==114.59165581759555\n    # test case 4\n    radian=5.0\n    assert candidate(radian)==286.4791395439889\n    # test case 5\n    radian=2.5\n    assert candidate(radian)==143.23956977199444"}
{"task_id": "Open/78", "prompt": "import math\n\ndef edgeDisjoint ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the floor division of that number by 2.\n    \"\"\"\n", "entry_point": "edgeDisjoint", "canonical_solution": "    result = 0\n    result = math . floor ( n / 2 )\n    return result\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=1\n    assert candidate(n)==0\n    # test case 2\n    n=100\n    assert candidate(n)==50\n    # test case 3\n    n=200\n    assert candidate(n)==100\n    # test case 4\n    n=300\n    assert candidate(n)==150\n    # test case 5\n    n=444\n    assert candidate(n)==222"}
{"task_id": "Open/79", "prompt": "def sumOfAP ( a , d , n ) :\n    \"\"\"Write a function that takes three parameters: `a` (the first term of an arithmetic progression), `d` (the common difference), and `n` (the number of terms).\n    The function calculates and returns the sum of the arithmetic progression.\n    \"\"\"\n", "entry_point": "sumOfAP", "canonical_solution": "    sum = 0\n    i = 0\n    while i < n :\n        sum = sum + a\n        a = a + d\n        i = i + 1\n    return sum\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a = 2\n    d = 1\n    n = 5\n    assert candidate(a,d,n)==20\n    # test case 2\n    a = 3\n    d = 2\n    n = 6\n    assert candidate(a,d,n)==48\n    # test case 3\n    a = 1\n    d = 3\n    n = 4\n    assert candidate(a,d,n)==22\n    # test case 4\n    a = 5\n    d = -1\n    n = 5\n    assert candidate(a,d,n)==15\n    # test case 5\n    a = 0\n    d = 4\n    n = 3\n    assert candidate(a,d,n)==12"}
{"task_id": "Open/80", "prompt": "def makeOdd ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the largest power of 2 that divides the input number.\n    If the input number is odd, the function should return 1.\n    \"\"\"\n", "entry_point": "makeOdd", "canonical_solution": "    if ( n % 2 != 0 ) :\n        return 1 ;\n    resul = 1 ;\n    while ( n % 2 == 0 ) :\n        n = n / 2 ;\n        resul = resul * 2 ;\n    return resul ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=10\n    assert candidate(n)==2\n    # test case 2\n    n=20\n    assert candidate(n)==4\n    # test case 3\n    n=30\n    assert candidate(n)==2\n    # test case 4\n    n=40\n    assert candidate(n)==8\n    # test case 5\n    n=50\n    assert candidate(n)==2"}
{"task_id": "Open/81", "prompt": "def Square ( row , column , moves ) :\n    \"\"\"Write a function that takes three parameters: `row`, `column`, and `moves`.\n    The function calculates the number of squares that can be reached by moving `moves` steps in any direction (up, down, left, right) from the given `row` and `column` position on an 8x8 chessboard.\n    The function returns the total number of squares that can be reached, excluding the starting position.\n    \"\"\"\n", "entry_point": "Square", "canonical_solution": "    a = 0 ; b = 0 ; c = 0 ;\n    d = 0 ; total = 0 ;\n    a = row - moves ;\n    b = row + moves ;\n    c = column - moves ;\n    d = column + moves ;\n    if ( a < 1 ) :\n        a = 1 ;\n    if ( c < 1 ) :\n        c = 1 ;\n    if ( b > 8 ) :\n        b = 8 ;\n    if ( d > 8 ) :\n        d = 8 ;\n    total = ( b - a + 1 ) * ( d - c + 1 ) - 1 ;\n    return total ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    row=4\n    column=5\n    moves=1\n    assert candidate(row,column,moves)==8\n    # test case 2\n    row=1\n    column=1\n    moves=2\n    assert candidate(row,column,moves)==8\n    # test case 3\n    row=3\n    column=3\n    moves=3\n    assert candidate(row,column,moves)==35\n    # test case 4\n    row=8\n    column=8\n    moves=1\n    assert candidate(row,column,moves)==3\n    # test case 5\n    row=2\n    column=2\n    moves=4\n    assert candidate(row,column,moves)==35"}
{"task_id": "Open/82", "prompt": "def findNumber ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the next number in a sequence where each number is the sum of the previous number and the current index.\n    \"\"\"\n", "entry_point": "findNumber", "canonical_solution": "    n -= 1\n    i = 1\n    while n >= 0 :\n        n -= i\n        i += 1\n    return ( n + i )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=1\n    assert candidate(n)==1\n    # test case 2\n    n=10\n    assert candidate(n)==4\n    # test case 3\n    n=15\n    assert candidate(n)==5\n    # test case 4\n    n=100\n    assert candidate(n)==9\n    # test case 5\n    n=109\n    assert candidate(n)==4"}
{"task_id": "Open/83", "prompt": "def findSmallest ( s ) :\n    \"\"\"Write a function that takes a string as input and returns the string with the smallest lexicographically possible permutation.\n    The function first finds the last occurrence of each character in the string and stores it in a list.\n    Then, it sorts the string and compares each character with its corresponding character in the sorted string.\n    If a character is not in the correct position, the function swaps it with the character at its last occurrence.\n    Finally, the function returns the modified string.\n    \"\"\"\n", "entry_point": "findSmallest", "canonical_solution": "    length = len ( s ) ;\n    loccur = [ - 1 ] * 26 ;\n    for i in range ( length - 1 , - 1 , - 1 ) :\n        chI = ord ( s [ i ] ) - ord ( 'a' ) ;\n        if ( loccur [ chI ] == - 1 ) :\n            loccur [ chI ] = i ;\n    sorted_s = s ;\n    sorted_s . sort ( ) ;\n    for i in range ( length ) :\n        if ( s [ i ] != sorted_s [ i ] ) :\n            chI = ord ( sorted_s [ i ] ) - ord ( 'a' ) ;\n            last_occ = loccur [ chI ] ;\n            s [ i ] , s [ last_occ ] = s [ last_occ ] , s [ i ]\n            break ;\n    return \"\" . join ( s ) ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    s=['d','c','b','a']\n    assert candidate(s)==\"abcd\"\n    # test case 2\n    s=['d','c','a','b']\n    assert candidate(s)==\"abcd\"\n    # test case 3\n    s=['e','c','d','a']\n    assert candidate(s)==\"acde\"\n    # test case 4\n    s=['z','l','b','a']\n    assert candidate(s)==\"ablz\"\n    # test case 5\n    s=['m','o','e','c']\n    assert candidate(s)==\"cemo\""}
{"task_id": "Open/84", "prompt": "def rangesum ( n , l , r ) :\n    \"\"\"Write a function that takes three parameters: n, l, and r.\n    The function creates an array of length n and fills it with consecutive odd numbers followed by consecutive even numbers.\n    It then calculates the sum of the elements in the array from index l-1 to index r and returns the sum.\n    \"\"\"\n", "entry_point": "rangesum", "canonical_solution": "    arr = [ 0 ] * n ;\n    c = 1 ; i = 0 ;\n    while ( c <= n ) :\n        arr [ i ] = c ;\n        i += 1 ;\n        c += 2 ;\n    c = 2 ;\n    while ( c <= n ) :\n        arr [ i ] = c ;\n        i += 1 ;\n        c += 2 ;\n    sum = 0 ;\n    for i in range ( l - 1 , r , 1 ) :\n        sum += arr [ i ] ;\n    return sum ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=10\n    l=3\n    r=7\n    assert candidate(n,l,r)==27\n    # test case 2\n    n=5\n    l=32\n    r=4\n    assert candidate(n,l,r)==0\n    # test case 3\n    n=7\n    l=1\n    r=7\n    assert candidate(n,l,r)==28\n    # test case 4\n    n=8\n    l=3\n    r=5\n    assert candidate(n,l,r)==14\n    # test case 5\n    n=6\n    l=1\n    r=4\n    assert candidate(n,l,r)==11"}
{"task_id": "Open/85", "prompt": "def getHCF ( x , y ) :\n    \"\"\"Write a function that takes two integers, x and y, and returns their highest common factor (HCF).\n    The function first finds the minimum of x and y.\n    If both x and y are divisible by the minimum, the function returns the minimum as the HCF.\n    Otherwise, the function iterates from the minimum divided by 2 to 1, checking if both x and y are divisible by the current number.\n    If a common factor is found, the function returns that number as the HCF.\n    If no common factor is found, the function returns 1.\n    \"\"\"\n", "entry_point": "getHCF", "canonical_solution": "    minimum = min ( x , y )\n    if ( x % minimum == 0 and y % minimum == 0 ) :\n        return minimum\n    for i in range ( minimum // 2 , 1 , - 1 ) :\n        if ( x % i == 0 and y % i == 0 ) :\n            return i\n    return 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    x= 10\n    y= 20\n    assert candidate(x,y) == 10\n    \n    # test case 2\n    x= 3\n    y= 6\n    assert candidate(x,y) == 3\n    \n    # test case 3\n    x= 7\n    y= 14\n    assert candidate(x,y) == 7\n    \n    # test case 4\n    x= 5\n    y= 10\n    assert candidate(x,y) == 5\n    \n    # test case 5\n    x= 2\n    y= 4\n    assert candidate(x,y) == 2"}
{"task_id": "Open/86", "prompt": "def findNthNumber ( A , B , N ) :\n    \"\"\"Write a function that takes three parameters A, B, and N and returns the Nth number in a sequence.\n    The sequence starts with A and B, and each subsequent number is the sum of the previous two numbers.\n    \"\"\"\n", "entry_point": "findNthNumber", "canonical_solution": "    sum = 0\n    for i in range ( 2 , N ) :\n        sum = A + B\n        A = B\n        B = sum\n    return sum\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    A = 1\n    B = 2\n    N = 10\n    assert candidate ( A , B , N ) == 89\n    \n    # test case 2\n    A = 1\n    B = 3\n    N = 5\n    assert candidate ( A , B , N ) == 11\n    \n    # test case 3\n    A = 2\n    B = 6\n    N = 12\n    assert candidate ( A , B , N ) == 644\n    \n    # test case 4\n    A = 1\n    B = 1\n    N = 10\n    assert candidate ( A , B , N ) == 55\n    \n    # test case 5\n    A = 1\n    B = 1\n    N = 1\n    assert candidate ( A , B , N ) == 0"}
{"task_id": "Open/87", "prompt": "def findOccurrences ( str , substr ) :\n    \"\"\"Write a function that takes two strings, `str` and `substr`, and returns the number of times `substr` appears in `str`.\n    \"\"\"\n", "entry_point": "findOccurrences", "canonical_solution": "    counter = 0\n    for i in range ( 0 , len ( str ) ) :\n        if ( str [ i ] == substr [ 0 ] ) :\n            for j in range ( i + 1 , len ( str ) ) :\n                if ( str [ j ] == substr [ 1 ] ) :\n                    for k in range ( j + 1 , len ( str ) ) :\n                        if ( str [ k ] == substr [ 2 ] ) :\n                            counter = counter + 1\n    return counter\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    str = \"abcabcabc\"\n    substr = \"abc\"\n    assert candidate( str , substr ) == 10\n    \n    # test case 2\n    str = \"abababab\"\n    substr = \"abfg\"\n    assert candidate( str , substr ) == 0\n    \n    # test case 3\n    str = \"abababab\"\n    substr = \"abcf\"\n    assert candidate( str , substr ) == 0\n    \n    # test case 4\n    str = \"ababababaa\"\n    substr = \"aba\"\n    assert candidate( str , substr ) == 30\n    \n    # test case 5\n    str = \"ababababaaaa\"\n    substr = \"aba\"\n    assert candidate( str , substr ) == 50\n    "}
{"task_id": "Open/88", "prompt": "def emi_calculator ( p , r , t ) :\n    \"\"\"Write a function that calculates the equated monthly installment (EMI) for a loan.\n    The function takes three parameters: the principal amount (p), the annual interest rate (r), and the loan tenure in years (t).\n    The function first converts the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n    It then converts the loan tenure from years to months by multiplying it by 12.\n    The EMI is calculated using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    Finally, the function returns the calculated EMI.\n    \"\"\"\n", "entry_point": "emi_calculator", "canonical_solution": "    r = r / ( 12 * 100 )\n    t = t * 12\n    emi = ( p * r * pow ( 1 + r , t ) ) / ( pow ( 1 + r , t ) - 1 )\n    return emi\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    p = 100000\n    r = 10\n    t = 20\n    assert candidate( p , r , t ) == 965.0216450740089\n    \n    # test case 2\n    p = 200000\n    r = 10\n    t = 20\n    assert candidate( p , r , t ) == 1930.0432901480178\n    \n    # test case 3\n    p = 300000\n    r = 10\n    t = 20\n    assert candidate( p , r , t ) == 2895.064935222027\n    \n    # test case 4\n    p = 400000\n    r = 10\n    t = 20\n    assert candidate( p , r , t ) == 3860.0865802960357\n    \n    # test case 5\n    p = 500000\n    r = 10\n    t = 20\n    assert candidate( p , r , t ) == 4825.108225370045"}
{"task_id": "Open/89", "prompt": "def countTriplets ( A , B , C ) :\n    \"\"\"Write a function that takes three integers A, B, and C as input and returns the number of triplets (i, j, k) that satisfy the condition i * k > j * j.\n    \"\"\"\n", "entry_point": "countTriplets", "canonical_solution": "    ans = 0\n    for i in range ( 1 , A + 1 ) :\n        for j in range ( 1 , B + 1 ) :\n            for k in range ( 1 , C + 1 ) :\n                if ( i * k > j * j ) :\n                    ans += 1\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    A = 1\n    B = 1\n    C = 1\n    assert candidate( A , B , C ) == 0\n    \n    # test case 2\n    A = 2\n    B = 2\n    C = 2\n    assert candidate( A , B , C ) == 3\n    \n    # test case 3\n    A = 1\n    B = 2\n    C = 3\n    assert candidate( A , B , C ) == 2\n    \n    # test case 4\n    A = 2\n    B = 3\n    C = 4\n    assert candidate( A , B , C ) == 9\n    \n    \n    # test case 5\n    A = 3\n    B = 4\n    C = 5\n    assert candidate( A , B , C ) == 25"}
{"task_id": "Open/90", "prompt": "def countNums ( l , r ) :\n    \"\"\"Write a function that takes two integers, l and r, and returns the count of numbers between l and r (inclusive) whose last digit is either 2, 3, or 9.\n    \"\"\"\n", "entry_point": "countNums", "canonical_solution": "    cnt = 0 ;\n    for i in range ( l , r + 1 ) :\n        lastDigit = ( i % 10 ) ;\n        if ( ( lastDigit % 10 ) == 2 or ( lastDigit % 10 ) == 3 or ( lastDigit % 10 ) == 9 ) :\n            cnt += 1 ;\n    return cnt ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    l = 1\n    r = 10\n    assert candidate( l , r ) == 3\n    \n    # test case 2\n    l = 2\n    r = 100\n    assert candidate( l , r ) == 30\n    \n    # test case 3\n    l = 6\n    r = 1023\n    assert candidate( l , r ) == 306\n    \n    # test case 4\n    l = 8\n    r = 10010\n    assert candidate( l , r ) == 3001\n    \n    # test case 5\n    l = 12\n    r = 103000\n    assert candidate( l , r ) == 30897"}
{"task_id": "Open/91", "prompt": "def longestAr ( n , arr ) :\n    \"\"\"Write a function that takes an integer n and a list of integers arr.\n    The function should find the length of the longest arithmetic subsequence in arr.\n    An arithmetic subsequence is a sequence of numbers in which the difference between any two consecutive numbers is the same.\n    The function should return the length of the longest arithmetic subsequence.\n    \"\"\"\n", "entry_point": "longestAr", "canonical_solution": "    count = dict ( )\n    for i in arr :\n        count [ i ] = count . get ( i , 0 ) + 1\n    kset = count . keys ( )\n    maxm = 0\n    for it in list ( kset ) :\n        a = it\n        cur = 0\n        cur1 = 0\n        cur2 = 0\n        if ( ( a + 1 ) in count ) :\n            cur1 = count [ a + 1 ]\n        if ( ( a - 1 ) in count ) :\n            cur2 = count [ a - 1 ]\n        cur = count [ a ] + max ( cur1 , cur2 )\n        if ( cur > maxm ) :\n            maxm = cur\n    return maxm\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 7\n    arr = [ 1 , 2 , 22 , 3 , 4 , 4 , 2 ]\n    assert candidate( n , arr ) == 3\n    \n    # test case 2\n    n = 7\n    arr = [ 8 , 2 , 2 , 3 , 1 , 41 , 2 ]\n    assert candidate( n , arr ) == 4\n    \n    # test case 3\n    n = 7\n    arr = [ 1 , 22 , 27 , 2 , 1 , 4 , 2 ]\n    assert candidate( n , arr ) == 4\n    \n    # test case 4\n    n = 7\n    arr = [ 14 , 2 , 2 , 3 , 1 , 4 , 45 ]\n    assert candidate( n , arr ) == 3\n    \n    # test case 5\n    n = 7\n    arr = [ 1 , 2 , 27 , 3 , 12 , 4 , 2 ]\n    assert candidate( n , arr ) == 3"}
{"task_id": "Open/92", "prompt": "def findMaxLenEven ( str ) :\n    \"\"\"Write a function that takes a string as input and returns the longest even-length substring that consists of only alphanumeric characters.\n    If there is no such substring, the function should return \"-1\".\n    \"\"\"\n", "entry_point": "findMaxLenEven", "canonical_solution": "    n = len ( str )\n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = - 1\n    while ( i < n ) :\n        if ( str [ i ] == ' ' ) :\n            if ( currlen % 2 == 0 ) :\n                if ( maxlen < currlen ) :\n                    maxlen = currlen\n                    st = i - currlen\n            currlen = 0\n        else :\n            currlen += 1\n        i += 1\n    if ( currlen % 2 == 0 ) :\n        if ( maxlen < currlen ) :\n            maxlen = currlen\n            st = i - currlen\n    if ( st == - 1 ) :\n        print ( \"trie\" )\n        return \"-1\"\n    return str [ st : st + maxlen ]\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    str = \"geeks for geeks\"\n    assert candidate( str ) == \"-1\"\n    \n    # test case 2\n    str = \"geeks for geeks a\"\n    assert candidate( str ) == \"-1\"\n    \n    # test case 3\n    str = \"haha this is a test case \"\n    assert candidate( str ) == \"haha\"\n    \n    # test case 4\n    str = \"test case 4 this is xxiioo\"\n    assert candidate( str ) == \"xxiioo\"\n    \n    # test case 5\n    str = \"ppooii this haha is test xxiioo case five five!\"\n    assert candidate( str ) == \"ppooii\""}
{"task_id": "Open/93", "prompt": "def count ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the number of times the integer can be divided by 2 before it becomes less than or equal to 1.\n    \"\"\"\n", "entry_point": "count", "canonical_solution": "    cnt = 0\n    p = 1\n    while ( p <= n ) :\n        cnt = cnt + 1\n        p *= 2\n    return cnt\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 5\n    assert candidate( n ) == 3\n    \n    # test case 2\n    n = 13\n    assert candidate( n ) == 4\n    \n    # test case 3\n    n = 1024\n    assert candidate( n ) == 11\n    \n    # test case 4\n    n = 1023\n    assert candidate( n ) == 10\n    \n    # test case 5\n    n = 1\n    assert candidate( n ) == 1\n    "}
{"task_id": "Open/94", "prompt": "def lexo_small ( n , k ) :\n    \"\"\"Write a function that takes two integers, n and k, and returns a string.\n    The function creates a string of length n, consisting of all 'a' characters.\n    It then modifies the string by replacing some of the 'a' characters with other lowercase letters.\n    The number of replacements is determined by the value of k.\n    The function iterates through the string in reverse order and performs the following steps for each character:\n- Subtract the current index from k.\n   \n- If k is greater than or equal to 0, check if k is greater than or equal to 26.\n    If it is, replace the character at the current index with 'z' and subtract 26 from k.\n    Otherwise, calculate the ASCII value of the character to be replaced by adding k to 97 and subtracting 1.\n    Replace the character at the current index with the corresponding lowercase letter and subtract the difference between the ASCII values of the replaced character and 'a' from k.\n   \n- If k is less than 0, exit the loop.\n   \n- Add the current index to k.\n   \n- Repeat the above steps for the previous index.\n   \nFinally, return the modified string.\n    \"\"\"\n", "entry_point": "lexo_small", "canonical_solution": "    arr = \"\" ;\n    for i in range ( n ) :\n        arr += 'a' ;\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        k -= i ;\n        if ( k >= 0 ) :\n            if ( k >= 26 ) :\n                arr = arr [ : i ] + 'z' + arr [ i + 1 : ] ;\n                k -= 26 ;\n            else :\n                c = ( k + 97 - 1 ) ;\n                arr = arr [ : i ] + chr ( c ) + arr [ i + 1 : ] ;\n                k -= ord ( arr [ i ] ) - ord ( 'a' ) + 1 ;\n        else :\n            break ;\n        k += i ;\n    return arr ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 3\n    k = 27\n    assert candidate( n , k ) == 'aay'\n    \n    # test case 2\n    n = 5\n    k = 73\n    assert candidate( n , k ) == 'aaszz'\n    \n    # test case 3\n    n = 3\n    k = 1\n    assert candidate( n , k ) == 'aaa'\n    \n    # test case 4\n    n = 3\n    k = 2\n    assert candidate( n , k ) == 'aa`'\n    \n    # test case 5\n    n = 3\n    k = 3\n    assert candidate( n , k ) == 'aaa'\n    "}
{"task_id": "Open/95", "prompt": "def maxDistance ( n , fuel ) :\n    \"\"\"Write a function that takes two parameters, n and fuel, and returns the maximum distance that can be covered given the number of stops (n) and the amount of fuel available.\n    The function calculates the distance covered by dividing the fuel by the number of stops and adding it to the total distance covered.\n    It then decrements the number of stops by 1 and repeats the process until there are no more stops.\n    Finally, it returns the total distance covered.\n    \"\"\"\n", "entry_point": "maxDistance", "canonical_solution": "    dist_covered = 0\n    while ( n > 0 ) :\n        dist_covered = dist_covered + ( fuel / n )\n        n = n - 1\n    return dist_covered\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 3\n    fuel = 10\n    assert candidate( n , fuel ) == 18.333333333333336\n    \n    # test case 2\n    n = 4\n    fuel = 205\n    assert candidate( n , fuel ) == 427.0833333333333\n    \n    # test case 3\n    n = 2\n    fuel = 100\n    assert candidate( n , fuel ) == 150.0\n    \n    # test case 4\n    n = 1\n    fuel = 100\n    assert candidate( n , fuel ) == 100\n    \n    # test case 5\n    n = 5\n    fuel = 100\n    assert candidate( n , fuel ) == 228.33333333333334"}
{"task_id": "Open/96", "prompt": "def findSplit ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns 1 if there exists a split point in the array such that the sum of the elements before the split point is equal to one-third of the total sum of the array and the sum of the elements after the split point is equal to two-thirds of the total sum of the array.\n    If such a split point does not exist, the function returns 0.\n    \"\"\"\n", "entry_point": "findSplit", "canonical_solution": "    preSum = 0\n    ind1 = - 1\n    ind2 = - 1\n    S = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        S += arr [ i ]\n    if ( S % 3 != 0 ) :\n        return 0\n    S1 = S / 3\n    S2 = 2 * S1\n    for i in range ( 0 , n ) :\n        preSum += arr [ i ]\n        if ( preSum % S1 == 0 and ind1 == - 1 ) :\n            ind1 = i\n        elif ( preSum % S2 == 0 ) :\n            ind2 = i\n            break\n    if ( ind1 != - 1 and ind2 != - 1 ) :\n        print ( \"({}, {})\" . format ( ind1 , ind2 ) )\n        return 1\n    return 0\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [ 0 , 2 , 1 , - 6 , 6 , - 7 , 9 , 1 , 2 , 0 , 1 ]\n    n = 11\n    assert candidate(arr, n) == 1\n    \n    # test case 2\n    arr = [ 0 , 2 , 1 , - 6 , 6 , 7 , 9 , - 1 , 2 , 0 , 1 ]\n    n = 11\n    assert candidate(arr, n) == 0\n    \n    # test case 3\n    arr = [ 3 , 4 , 5 , - 3 , 100 , 1 , 89 , 54 , 23 , 20 ]\n    n = 10\n    assert candidate(arr, n) == 0\n    \n    # test case 4\n    arr = [ 1 , 2 , 3 , 0 , 3 ]\n    n = 5\n    assert candidate(arr, n) == 1\n    \n    # test case 5\n    arr = [ 1 , 2 , 3 ]\n    n = 3\n    assert candidate(arr, n) == 0"}
{"task_id": "Open/97", "prompt": "def isWordPresent ( sentence , word ) :\n    \"\"\"Write a function that takes a sentence and a word as input and returns True if the word is present in the sentence, and False otherwise.\n    \"\"\"\n", "entry_point": "isWordPresent", "canonical_solution": "    s = sentence . split ( \" \" )\n    for i in s :\n        if ( i == word ) :\n            return True\n    return False\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    sentence = \"I am a good programmer\"\n    word = \"am\"\n    assert candidate( sentence , word ) == True\n    \n    # test case 2\n    sentence = \"I am a good programmer\"\n    word = \"good\"\n    assert candidate( sentence , word ) == True\n    \n    # test case 3\n    sentence = \"I am a good programmer\"\n    word = \"programmer\"\n    assert candidate( sentence , word ) == True\n    \n    # test case 4\n    sentence = \"I am a good programmer\"\n    word = \"I\"\n    assert candidate( sentence , word ) == True\n    \n    # test case 5\n    sentence = \"I am a good programmer\"\n    word = \"you\"\n    assert candidate( sentence , word ) == False"}
{"task_id": "Open/98", "prompt": "import math\n\ndef countDigit ( n ) :\n    \"\"\"Write a function that takes an integer and returns the number of digits in that integer.\n    \"\"\"\n", "entry_point": "countDigit", "canonical_solution": "    return math . floor ( math . log ( n , 10 ) + 1 )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1234\n    assert candidate( n ) == 4\n    \n    # test case 2\n    n = 114514\n    assert candidate( n ) == 6\n    \n    # test case 3\n    n = 1\n    assert candidate( n ) == 1\n    \n    # test case 4\n    n = 100\n    assert candidate( n ) == 3\n    \n    # test case 5\n    n = 19192156\n    assert candidate( n ) == 8\n    \n    "}
{"task_id": "Open/99", "prompt": "def canBeEqual ( a , b , c , k ) :\n    \"\"\"Write a function that takes four integers (a, b, c, k) and returns True if it is possible to make all three integers (a, b, c) equal by adding or subtracting a value k, or False otherwise.\n    \"\"\"\n", "entry_point": "canBeEqual", "canonical_solution": "    arr = [ 0 ] * 3 ;\n    arr [ 0 ] = a ;\n    arr [ 1 ] = b ;\n    arr [ 2 ] = c ;\n    arr . sort ( )\n    diff = 2 * arr [ 2 ] - arr [ 1 ] - arr [ 0 ] ;\n    k = k - diff ;\n    if ( k < 0 or k % 3 != 0 ) :\n        return False ;\n    return True ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a = 1\n    b = 2\n    c = 3\n    k = 3\n    assert candidate( a , b , c , k ) == True\n    \n    # test case 2\n    a = 6\n    b = 2\n    c = 3\n    k = 4\n    assert candidate( a , b , c , k ) == False\n    \n    # test case 3\n    a = 1\n    b = 29348\n    c = 29348\n    k = 29348\n    assert candidate( a , b , c , k ) == False\n    \n    # test case 4\n    a = 1\n    b = 123\n    c = 123\n    k = 145\n    assert candidate( a , b , c , k ) == False\n    \n    # test case 5\n    a = 15\n    b = 12\n    c = 14\n    k = 198\n    assert candidate( a , b , c , k ) == False"}
{"task_id": "Open/100", "prompt": "def isRotation ( x , y ) :\n    \"\"\"Write a function that takes two integers, x and y, and returns True if y is a rotation of x or False otherwise.\n    A rotation of x is defined as shifting the binary representation of x to the left by 32 bits and performing a bitwise OR operation with the original x.\n    The function checks if the resulting value is equal to y and returns True if it is, otherwise it continues shifting the value to the right by 1 bit until it is less than y.\n    If the value becomes less than y without being equal to it, the function returns False.\n    \"\"\"\n", "entry_point": "isRotation", "canonical_solution": "    x64 = x | ( x << 32 )\n    while ( x64 >= y ) :\n        if ( ( x64 ) == y ) :\n            return True\n        x64 >>= 1\n    return False\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    x = 8\n    y = 0b0000000000000000000000000000000000000000000000000000000000000001\n    assert candidate( x , y ) == True\n    \n    # test case 2\n    x = 0b1000000000000000000000000000000000000000000000000000000000000000\n    y = 0b0000000000000000000000000000000000000000000000000000000000000010\n    assert candidate( x , y ) == True\n    \n    # test case 3\n    x = 0b1000000000000000000000000000000000000000000000000000000000000000\n    y = 15\n    assert candidate( x , y ) == False\n    \n    # test case 4\n    x = 0b1000000000000000000000000000000000000000000000000000000000000000\n    y = 0b0000000000000000000000000000000000000000000000000000000000000001\n    assert candidate( x , y ) == True\n    \n    # test case 5\n    x = 0b1000000000000000000000000000000000000000000000000000000000000000\n    y = 0b0000000000000000000000000000000000000000000000010000000000000001\n    assert candidate( x , y ) == False"}
{"task_id": "Open/101", "prompt": "def countConsecutive ( s ) :\n    \"\"\"Write a function that takes a string as input and counts the number of consecutive characters that are not the same.\n    The function should return the count.\n    \"\"\"\n", "entry_point": "countConsecutive", "canonical_solution": "    count = - 1\n    for i in range ( len ( s ) - 1 ) :\n        if ( i <= len ( s ) ) :\n            if ( s [ i ] is s [ i + 1 ] ) :\n                i += 1\n            else :\n                count += 1\n    return count\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    s = \"10000111\"\n    assert candidate( s ) == 1\n    \n    # test case 2\n    s = \"11110000\"\n    assert candidate( s ) == 0\n    \n    # test case 3\n    s = \"10101010\"\n    assert candidate( s ) == 6\n    \n    # test case 4\n    s = \"abcd\"\n    assert candidate( s ) == 2\n    \n    # test case 5\n    s = \"11111111\"\n    assert candidate( s ) == -1"}
{"task_id": "Open/102", "prompt": "def countChars ( string , n ) :\n    \"\"\"Write a function that takes a string and an integer as input and returns the count of characters in the string.\n    The function counts the characters in the string by iterating through each character and incrementing the count by 1.\n    If the character is '0', the function increments the index by 1.\n    Otherwise, it increments the index by 2.\n    Finally, the function returns the count of characters.\n    \"\"\"\n", "entry_point": "countChars", "canonical_solution": "    i = 0 ; cnt = 0 ;\n    while ( i < n ) :\n        if ( string [ i ] == '0' ) :\n            i += 1 ;\n        else :\n            i += 2 ;\n        cnt += 1 ;\n    return cnt ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    string = \"0100110101\"\n    n=10\n    assert candidate(string, n) == 7\n    \n    # test case 2\n    string = \"0111100010\"\n    n=10\n    assert candidate(string, n) == 7\n    \n    # test case 3\n    string = \"pos011s90221lpdd\"\n    n=16\n    assert candidate(string, n) == 9\n    \n    # test case 4\n    string = \"pos011s90221lp00\"\n    n=16\n    assert candidate(string, n) == 9\n    \n    # test case 5\n    string = \"p00011s90221lp00\"\n    n=16\n    assert candidate(string, n) == 10"}
{"task_id": "Open/103", "prompt": "def findMinRemoval ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the minimum number of elements that need to be removed from the array such that the absolute difference between adjacent elements is minimized.\n    \"\"\"\n", "entry_point": "findMinRemoval", "canonical_solution": "    value = 0\n    maximum = 0\n    if ( n == 1 ) :\n        return 0\n    for i in range ( n ) :\n        if ( i != 0 and i != n - 1 ) :\n            value = value + abs ( arr [ i ] - arr [ i + 1 ] )\n            temp = ( abs ( arr [ i ] - arr [ i + 1 ] ) + abs ( arr [ i ] - arr [ i - 1 ] ) - abs ( arr [ i - 1 ] - arr [ i + 1 ] ) )\n        elif ( i == 0 ) :\n            value = value + abs ( arr [ i ] - arr [ i + 1 ] )\n            temp = abs ( arr [ i ] - arr [ i + 1 ] )\n        else :\n            temp = abs ( arr [ i ] - arr [ i - 1 ] )\n        maximum = max ( maximum , temp )\n    return ( value - maximum )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [ 1 , 2 , 3 , 4 , 5 ]\n    n = 5\n    assert candidate( arr , n ) == 3\n    \n    # test case 2\n    arr = [ 5 , 4 , 3 , 2 , 1 ]\n    n = 5\n    assert candidate( arr , n ) == 3\n    \n    # test case 3\n    arr = [ 986 , 2 , 3 , 12 , 5 , 6 , 7 , 234 , 9 , 10 ]\n    n = 10\n    assert candidate( arr , n ) == 472\n    \n    # test case 4\n    arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 ]\n    n = 20\n    assert candidate( arr , n ) == 18\n    \n    # test case 5\n    arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 ]\n    n = 50\n    assert candidate( arr , n ) == 48"}
{"task_id": "Open/104", "prompt": "def countMaxSetBits ( left , right ) :\n    \"\"\"Write a function that takes two integers, `left` and `right`, and returns the maximum number that can be formed by setting the maximum number of consecutive bits in the binary representation of `left` to 1, without exceeding `right`.\n    \"\"\"\n", "entry_point": "countMaxSetBits", "canonical_solution": "    while ( left | ( left + 1 ) ) <= right :\n        left |= left + 1\n    return left\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    left = 2\n    right = 3\n    assert candidate( left , right ) == 3\n    \n    # test case 2\n    left = 3\n    right = 5\n    assert candidate( left , right ) == 3\n    \n    # test case 3\n    left = 146\n    right = 150\n    assert candidate( left , right ) == 147\n    \n    # test case 4\n    left = 187\n    right = 10006\n    assert candidate( left , right ) == 8191\n    \n    # test case 5\n    left = 165\n    right = 10000\n    assert candidate( left , right ) == 8191"}
{"task_id": "Open/105", "prompt": "def setBitNumber ( n ) :\n    \"\"\"Write a function that takes an integer and returns the next power of 2 that is greater than or equal to the input number.\n    \"\"\"\n", "entry_point": "setBitNumber", "canonical_solution": "    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n = n + 1\n    return ( n >> 1 )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 6\n    assert candidate( n ) == 4\n    \n    # test case 2\n    n = 13\n    assert candidate( n ) == 8\n    \n    # test case 3\n    n = 1\n    assert candidate( n ) == 1\n    \n    # test case 4\n    n = 3\n    assert candidate( n ) == 2\n    \n    # test case 5\n    n = 114514\n    assert candidate( n ) == 65536"}
{"task_id": "Open/106", "prompt": "def isPerfect ( n ) :\n    \"\"\"Write a function that takes an integer and returns True if the integer is a perfect number or False otherwise.\n    A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding the number itself.\n    \"\"\"\n", "entry_point": "isPerfect", "canonical_solution": "    sum = 1\n    i = 2\n    while i * i <= n :\n        if n % i == 0 :\n            sum = sum + i + n / i\n        i += 1\n    return ( True if sum == n and n != 1 else False )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 28\n    assert candidate(n) == True\n    \n    # test case 2\n    n = 6\n    assert candidate(n) == True\n    \n    # test case 3\n    n = 496\n    assert candidate(n) == True\n    \n    # test case 4\n    n = 8128\n    assert candidate(n) == True\n    \n    # test case 5\n    n = 2\n    assert candidate(n) == False"}
{"task_id": "Open/107", "prompt": "def oddDays ( N ) :\n    \"\"\"Write a function that takes a year as input and returns the number of odd days in that year.\n    An odd day is a day that does not occur in a complete week.\n    The function calculates the number of odd days by dividing the year by 100 and 400 to determine the number of centuries and leap centuries respectively.\n    It then calculates the number of leap years by shifting the year by 2 bits.\n    The function subtracts the number of leap years from the total number of days in the year to get the number of non-leap years.\n    If there are any centuries or leap centuries, the function adjusts the number of non-leap years and leap years accordingly.\n    Finally, the function calculates the total number of days by adding the number of non-leap years and twice the number of leap years.\n    The number of odd days is obtained by taking the modulus of the total number of days divided by 7.\n    \"\"\"\n", "entry_point": "oddDays", "canonical_solution": "    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap\n    if ( hund1 ) :\n        ordd += hund1\n        leap -= hund1\n    if ( hund4 ) :\n        ordd -= hund4\n        leap += hund4\n    days = ordd + leap * 2\n    odd = days % 7\n    return odd\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    N = 2019\n    assert candidate( N ) == 2\n    \n    # test case 2\n    N = 2020\n    assert candidate( N ) == 4\n    \n    # test case 3\n    N = 2021\n    assert candidate( N ) == 5\n    \n    # test case 4\n    N = 2022\n    assert candidate( N ) == 6\n    \n    # test case 5\n    N = 98776521\n    assert candidate( N ) == 3"}
{"task_id": "Open/108", "prompt": "def pentdiagonal ( a ) :\n    \"\"\"Write a function that takes a number as input and returns the pentagonal diagonal length.\n    If the input number is negative, the function should return -1.\n    \"\"\"\n", "entry_point": "pentdiagonal", "canonical_solution": "    if ( a < 0 ) :\n        return - 1\n    d = 1.22 * a\n    return d\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a=1\n    assert candidate(a) == 1.22\n    \n    # test case 2\n    a=2\n    assert candidate(a) == 2.44\n    \n    # test case 3\n    a=3\n    assert candidate(a) == 3.66\n    \n    # test case 4\n    a=10\n    assert candidate(a) == 12.2\n    \n    # test case 5\n    a=100\n    assert candidate(a) == 122"}
{"task_id": "Open/109", "prompt": "def frequencyDigits ( n , d ) :\n    \"\"\"Write a function that takes two integers, n and d, and returns the frequency of the digit d in the number n.\n    \"\"\"\n", "entry_point": "frequencyDigits", "canonical_solution": "    c = 0 ;\n    while ( n > 0 ) :\n        if ( n % 10 == d ) :\n            c += 1 ;\n        n = int ( n / 10 ) ;\n    return c ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1 \n    n=100\n    d=1\n    assert candidate(n, d)==1\n    \n    # test case 2\n    n=1000\n    d=0\n    assert candidate(n, d)==3\n    \n    # test case 3 \n    n=12345\n    d=1\n    assert candidate(n, d)==1\n    \n    # test case 4 \n    n=9999\n    d=9\n    assert candidate(n, d)==4\n    \n    # test case 5 \n    n=15642\n    d=9\n    assert candidate(n, d)==0"}
{"task_id": "Open/110", "prompt": "def validate ( n ) :\n    \"\"\"Write a function that takes an integer and checks if it is a valid number.\n    A valid number is one that does not contain any repeated digits.\n    The function should return True if the number is valid and False otherwise.\n    \"\"\"\n", "entry_point": "validate", "canonical_solution": "    count = [ 0 for i in range ( 10 ) ]\n    while ( n > 0 ) :\n        r = n % 10\n        if ( count [ r ] == r ) :\n            return False\n        count [ r ] += 1\n        n = n // 10\n    return True\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=110\n    assert candidate(n)==False\n    \n    # test case 2\n    n=12345689\n    assert candidate(n)==True\n    \n    # test case 3\n    n=1010101\n    assert candidate(n)==False\n    \n    # test case 4\n    n=0\n    assert candidate(n)==True\n    \n    # test case 5\n    n=-10\n    assert candidate(n)==True\n    "}
{"task_id": "Open/111", "prompt": "def canMakeEqual ( a , n ) :\n    \"\"\"Write a function that takes a list of integers and an integer n as input.\n    The function checks if it is possible to make all the elements in the list equal by repeatedly dividing each element by 5 and 3 until they are no longer divisible by either.\n    If it is possible to make all the elements equal, the function returns True.\n    Otherwise, it returns False.\n    \"\"\"\n", "entry_point": "canMakeEqual", "canonical_solution": "    for i in range ( n ) :\n        while ( a [ i ] % 5 == 0 ) :\n            a [ i ] //= 5 ;\n        while ( a [ i ] % 3 == 0 ) :\n            a [ i ] //= 3 ;\n    last = a [ 0 ] ;\n    for i in range ( 1 , n ) :\n        if ( a [ i ] != last ) :\n            return False ;\n    return True ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a=[1,3,4,5]\n    n=4\n    assert candidate(a, n)==False\n    \n    # test case 2\n    a=[5,3,5,15,3]\n    n=5\n    assert candidate(a, n)==True\n    \n    # test case 3\n    a=[3,2,5]\n    n=3\n    assert candidate(a, n)==False\n    \n    # test case 4\n    a=[6,6,6,6,6,6]\n    n=6\n    assert candidate(a, n)==True\n    \n    # test case 5\n    a=[5555,3333]\n    n=2\n    assert candidate(a, n)==True"}
{"task_id": "Open/112", "prompt": "def printNthElement ( n ) :\n    \"\"\"Write a function that takes an integer n as input and returns the nth element of an array.\n    The array is initialized with 0s and has a length of n+1.\n    The first element of the array is set to 4 and the second element is set to 7.\n    For each index i from 3 to n+1, if i is odd, the value at index i is set to the value at index i//2 multiplied by 10 and added to 4.\n    If i is even, the value at index i is set to the value at index (i//2)-1 multiplied by 10 and added to 7.\n    Finally, the function returns the value at index n of the array.\n    \"\"\"\n", "entry_point": "printNthElement", "canonical_solution": "    arr = [ 0 ] * ( n + 1 ) ;\n    arr [ 1 ] = 4\n    arr [ 2 ] = 7\n    for i in range ( 3 , n + 1 ) :\n        if ( i % 2 != 0 ) :\n            arr [ i ] = arr [ i // 2 ] * 10 + 4\n        else :\n            arr [ i ] = arr [ ( i // 2 ) - 1 ] * 10 + 7\n    return arr [ n ]\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=3\n    assert candidate(n)==44\n    \n    # test case 2\n    n=4\n    assert candidate(n)==47\n    \n    # test case 3\n    n=5\n    assert candidate(n)==74\n    \n    # test case 4\n    n=6\n    assert candidate(n)==77\n    \n    # test case 5\n    n=7\n    assert candidate(n)==444"}
{"task_id": "Open/113", "prompt": "def printNthElement ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth element of an array.\n    The array is initialized with 0s and has a length of n+1.\n    The first element is set to 3 and the second element is set to 5.\n    For each index i from 3 to n+1, if i is odd, the element at index i is set to the element at index i//2 multiplied by 10 and added with 3.\n    If i is even, the element at index i is set to the element at index (i//2)-1 multiplied by 10 and added with 5.\n    Finally, the function returns the element at index n.\n    \"\"\"\n", "entry_point": "printNthElement", "canonical_solution": "    arr = [ 0 ] * ( n + 1 ) ;\n    arr [ 1 ] = 3\n    arr [ 2 ] = 5\n    for i in range ( 3 , n + 1 ) :\n        if ( i % 2 != 0 ) :\n            arr [ i ] = arr [ i // 2 ] * 10 + 3\n        else :\n            arr [ i ] = arr [ ( i // 2 ) - 1 ] * 10 + 5\n    return arr [ n ]\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=3\n    assert candidate(n)==33\n    \n    # test case 2\n    n=4\n    assert candidate(n)==35\n    \n    # test case 3\n    n=5\n    assert candidate(n)==53\n    \n    # test case 4\n    n=6\n    assert candidate(n)==55\n    \n    # test case 5\n    n=7\n    assert candidate(n)==333"}
{"task_id": "Open/114", "prompt": "def printNthElement ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth element of an array.\n    The array is initialized with 0s and has a length of n+1.\n    The first element is set to 1 and the second element is set to 2.\n    For each subsequent element, if the index is odd, the element is calculated by multiplying the element at index i//2 by 10 and adding 1.\n    If the index is even, the element is calculated by multiplying the element at index (i//2)-1 by 10 and adding 2.\n    The function returns the element at index n.\n    \"\"\"\n", "entry_point": "printNthElement", "canonical_solution": "    arr = [ 0 ] * ( n + 1 ) ;\n    arr [ 1 ] = 1\n    arr [ 2 ] = 2\n    for i in range ( 3 , n + 1 ) :\n        if ( i % 2 != 0 ) :\n            arr [ i ] = arr [ i // 2 ] * 10 + 1\n        else :\n            arr [ i ] = arr [ ( i // 2 ) - 1 ] * 10 + 2\n    return arr [ n ]\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n=3\n    assert candidate(n)==11\n    \n    # test case 2\n    n=4\n    assert candidate(n)==12\n    \n    # test case 3\n    n=5\n    assert candidate(n)==21\n    \n    # test case 4\n    n=6\n    assert candidate(n)==22\n    \n    # test case 5\n    n=7\n    assert candidate(n)==111"}
{"task_id": "Open/115", "prompt": "def isPossibleToZero ( a , n ) :\n    \"\"\"Write a function that takes an array of integers and its length as input and returns True if it is possible to form a number by concatenating the elements of the array such that the resulting number is divisible by 11.\n    Otherwise, it returns False.\n    \"\"\"\n", "entry_point": "isPossibleToZero", "canonical_solution": "    num = 0 ;\n    for i in range ( n ) :\n        num = num * 10 + a [ i ] ;\n    return ( num % 11 == 0 ) ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a=[1,2,3,4,5]\n    n=5\n    assert candidate(a, n)==False\n    \n    # test case 2\n    a=[0,0,0,0]\n    n=4\n    assert candidate(a, n)==True\n    \n    # test case 3\n    a=[1,-1,1,-1]\n    n=4\n    assert candidate(a, n)==False\n    \n    # test case 4\n    a=[11,11,11,11,11]\n    n=5\n    assert candidate(a, n)==True\n    \n    # test case 5\n    a=[ ]\n    n=0\n    assert candidate(a, n)==True"}
{"task_id": "Open/116", "prompt": "def squareArea ( l , b , h ) :\n    \"\"\"Write a function that takes three parameters representing the length, breadth, and height of a square.\n    The function should return the area of the square if all the parameters are positive, otherwise it should return -1.\n    \"\"\"\n", "entry_point": "squareArea", "canonical_solution": "    if l < 0 or b < 0 or h < 0 :\n        return - 1\n    a = ( l * b ) / ( l + b )\n    return a * a\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    l=-1\n    b=2\n    h=2\n    assert candidate( l , b , h )==-1\n    \n    \n    # test case 2\n    l=2\n    b=-1\n    h=-1\n    assert candidate( l , b , h )==-1\n    \n    \n    # test case 3\n    l=2\n    b=3\n    h=0\n    assert candidate( l , b , h )==1.44\n    \n    # test case 4\n    l=3\n    b=3\n    h=5\n    assert candidate( l , b , h )==2.25\n    \n    # test case 5\n    l=2\n    b=0\n    h=2\n    assert candidate( l , b , h )==0"}
{"task_id": "Open/117", "prompt": "def FirstAndLast ( string ) :\n    \"\"\"Write a function that takes a string as input and returns a new string where the first and last letter of each word in the input string are capitalized.\n    The function should ignore any non-alphabetic characters.\n    \"\"\"\n", "entry_point": "FirstAndLast", "canonical_solution": "    ch = list ( string ) ;\n    i = 0 ;\n    while i < len ( ch ) :\n        k = i ;\n        while ( i < len ( ch ) and ch [ i ] != ' ' ) :\n            i += 1 ;\n        if ( ord ( ch [ k ] ) >= 97 and ord ( ch [ k ] ) <= 122 ) :\n            ch [ k ] = chr ( ord ( ch [ k ] ) - 32 ) ;\n        else :\n            ch [ k ] = ch [ k ]\n        if ( ord ( ch [ i - 1 ] ) >= 90 and ord ( ch [ i - 1 ] ) <= 122 ) :\n            ch [ i - 1 ] = chr ( ord ( ch [ i - 1 ] ) - 32 ) ;\n        else :\n            ch [ i - 1 ] = ch [ i - 1 ]\n        i += 1\n    return \"\" . join ( ch ) ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    #test case 1\n    string=\"asdfg\"\n    assert candidate(string)==\"AsdfG\"\n    \n    #test case 2\n    string=\"\"\n    assert candidate(string)==\"\"\n    \n    #test case 3\n    string=\"ASDFG\"\n    assert candidate(string)==\"ASDFG\"\n    \n    #test case 4\n    string=\"AsdfG\"\n    assert candidate(string)==\"AsdfG\"\n    \n    #test case 5\n    string=\"asdfG\"\n    assert candidate(string)==\"AsdfG\""}
{"task_id": "Open/118", "prompt": "import math\n\ndef findBucketNo ( p ) :\n    \"\"\"Write a function that takes an integer p and returns the bucket number where p belongs.\n    The bucket number is calculated by taking the ceiling of the square root of (8 * p + 1) minus 1, divided by 2.\n    \"\"\"\n", "entry_point": "findBucketNo", "canonical_solution": "    return math . ceil ( ( math . sqrt ( 8 * p + 1 ) - 1 ) / 2 )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    #test case 1\n    p=0\n    assert candidate ( p )==0\n    \n    #test case 2\n    p=1\n    assert candidate( p )==1\n    \n    #test case 3\n    p=2\n    assert candidate( p )==2\n    \n    #test case 4\n    p=5\n    assert candidate( p )==3\n    \n    #test case 5\n    p=10\n    assert candidate ( p )==4\n    "}
{"task_id": "Open/119", "prompt": "def areDistinct ( arr ) :\n    \"\"\"Write a function that takes an array as input and returns True if all the elements in the array are distinct (i.\n   e.\n   , there are no duplicate elements), and False otherwise.\n    \"\"\"\n", "entry_point": "areDistinct", "canonical_solution": "    n = len ( arr )\n    s = set ( )\n    for i in range ( 0 , n ) :\n        s . add ( arr [ i ] )\n    return ( len ( s ) == len ( arr ) )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    #test case 1\n    arr=[1,2,3]\n    assert candidate(arr)==True\n    \n    #test case 2\n    arr=[1,1,2,2]\n    assert candidate(arr)==False\n    \n    #test case 3\n    arr=[1,2,3,4,5,6]\n    assert candidate(arr)==True\n    \n    #test case 4\n    arr=[5,1,3,5]\n    assert candidate(arr)==False\n    \n    #test case 5\n    arr=[]\n    assert candidate(arr)==True"}
{"task_id": "Open/120", "prompt": "def countDistinctCode ( string ) :\n    \"\"\"Write a function that takes a string as input and returns the count of distinct two-character codes in the string.\n    \"\"\"\n", "entry_point": "countDistinctCode", "canonical_solution": "    codes = set ( )\n    for i in range ( 0 , len ( string ) - 1 ) :\n        codes . add ( string [ i : i + 2 ] )\n    return len ( codes )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    #test case 1\n    string=\"asdfg\"\n    assert candidate(string)==4\n    \n    #test case 2\n    string=\"\"\n    assert candidate(string)==0\n    \n    #test case 3\n    string=\"ASDF\"\n    assert candidate(string)==3\n    \n    #test case 4\n    string=\"aaaaa\"\n    assert candidate(string)==1\n    \n    #test case 5\n    string=\"aa\"\n    assert candidate(string)==1"}
{"task_id": "Open/121", "prompt": "def mostCommon ( lower , higher ) :\n    \"\"\"Write a function that takes two numbers, lower and higher, and returns the most common number between them.\n    If lower and higher are equal, the function should return lower.\n    Otherwise, the function should return 2.\n    \"\"\"\n", "entry_point": "mostCommon", "canonical_solution": "    if ( lower == higher ) :\n        return lower\n    else :\n        return 2\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    #test case 1\n    lower=1\n    higher=2\n    assert candidate( lower , higher )==2\n    \n    #test case 2\n    lower=11\n    higher=11\n    assert candidate( lower , higher )==11\n    \n    #test case 3\n    lower=123\n    higher=321\n    assert candidate( lower , higher )==2\n    \n    #test case 4\n    lower=12\n    higher=21\n    assert candidate( lower , higher )==2\n    \n    #test case 5\n    lower=123\n    higher=123\n    assert candidate( lower , higher )==123\n    "}
{"task_id": "Open/122", "prompt": "def extractMaximum ( ss ) :\n    \"\"\"Write a function that takes a string as input and returns the maximum number that can be extracted from the string.\n    The function iterates through each character in the string and checks if it is a digit.\n    If it is, the function builds a number by multiplying the previous number by 10 and adding the current digit.\n    If the character is not a digit, the function compares the current number with the previous maximum number and updates the maximum if necessary.\n    Finally, the function returns the maximum number extracted from the string.\n    \"\"\"\n", "entry_point": "extractMaximum", "canonical_solution": "    num , res = 0 , 0\n    for i in range ( len ( ss ) ) :\n        if ss [ i ] >= \"0\" and ss [ i ] <= \"9\" :\n            num = num * 10 + int ( int ( ss [ i ] ) - 0 )\n        else :\n            res = max ( res , num )\n            num = 0\n    return max ( res , num )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    ss=\"12345\"\n    assert candidate( ss )==12345\n    \n    # test case 2\n    ss=\"1a3b5\"\n    assert candidate( ss )==5\n    \n    # test case 3\n    ss=\"aa001\"\n    assert candidate( ss )==1\n    \n    # test case 4\n    ss=\"aabbcc\"\n    assert candidate( ss )==0\n    \n    # test case 5\n    ss=\"As12sf\"\n    assert candidate( ss )==12"}
{"task_id": "Open/123", "prompt": "def longestInteger ( s , length ) :\n    \"\"\"Write a function that takes a string and its length as input and returns the longest substring of consecutive integers in the string.\n    \"\"\"\n", "entry_point": "longestInteger", "canonical_solution": "    count = 0\n    maximum = 0\n    pos = - 1\n    l = 0\n    for i in range ( length ) :\n        pre_pos = pos\n        pre_len = l\n        count = 0\n        l = 0\n        if ( s [ i ] . isdecimal ( ) ) :\n            pos = i\n        while ( s [ i ] . isdecimal ( ) ) :\n            count += 1\n            i += 1\n            l += 1\n        if ( count > maximum ) :\n            maximum = count\n        else :\n            pos = pre_pos\n            l = pre_len\n    return ( s [ pos : pos + l ] )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    #test case 1\n    s=\"asfd\"\n    length=4\n    assert candidate( s , length )==\"\"\n    \n    #test case 2\n    s=\"as22fd\"\n    length=6\n    assert candidate( s , length )==\"22\"\n    \n    #test case 3\n    s=\"11asdf1\"\n    length=6\n    assert candidate( s , length )==\"11\"\n    \n    #test case 4\n    s=\"f71addsfd2\"\n    length=9\n    assert candidate( s , length )==\"71\"\n    \n    #test case 5\n    s=\"a22sf12345d3\"\n    length=11\n    assert candidate( s , length )==\"12345\""}
{"task_id": "Open/124", "prompt": "def remainingArea ( N , M , K ) :\n    \"\"\"Write a function that takes three integers N, M, and K as input and returns the remaining area after performing a series of operations.\n    The function subtracts the smaller value between N and M from the larger value until K becomes 0 or either N or M becomes 0.\n    If both N and M are greater than 0 after the loop, the function returns the product of N and M.\n    Otherwise, it returns 0.\n    \"\"\"\n", "entry_point": "remainingArea", "canonical_solution": "    while ( K > 0 and N > 0 and M > 0 ) :\n        if ( N > M ) :\n            N = N - M ;\n        else :\n            M = M - N ;\n        K = K - 1 ;\n    if ( N > 0 and M > 0 ) :\n        return N * M ;\n    else :\n        return 0 ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    #test case 1\n    N=0\n    M=0\n    K=1\n    assert candidate( N , M , K )==0\n    \n    #test case 2\n    N=3\n    M=5\n    K=1\n    assert candidate( N , M , K )==6\n    \n    #test case 3\n    N=3\n    M=12\n    K=0\n    assert candidate( N , M , K )==36\n    \n    #test case 4\n    N=3\n    M=12\n    K=3\n    assert candidate( N , M , K )==9\n    \n    #test case 5\n    N=2\n    M=2\n    K=1\n    assert candidate( N , M , K )==0"}
{"task_id": "Open/125", "prompt": "def isValid ( string , length ) :\n    \"\"\"Write a function that takes a string and a length as input and returns True if the string is valid or False otherwise.\n    A string is considered valid if no two consecutive characters are the same.\n    \"\"\"\n", "entry_point": "isValid", "canonical_solution": "    for i in range ( 1 , length ) :\n        if string [ i ] == string [ i - 1 ] :\n            return False\n    return True\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    string=\"112233\"\n    length=6\n    assert candidate( string , length )==False\n    \n    # test case 2\n    string=\"uwliqu\"\n    length=6\n    assert candidate( string , length )==True\n    \n    # test case 3\n    string=\"123456\"\n    length=6\n    assert candidate( string , length )==True\n    \n    # test case 4\n    string=\"123321\"\n    length=6\n    assert candidate( string , length )==False\n    \n    # test case 5\n    string=\"\"\n    length=0\n    assert candidate( string , length )==True"}
{"task_id": "Open/126", "prompt": "def getValue ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the largest power of 2 that is less than or equal to n.\n    \"\"\"\n", "entry_point": "getValue", "canonical_solution": "    i = 0 ;\n    k = 1 ;\n    while ( i < n ) :\n        i = i + k ;\n        k = k * 2 ;\n    return int ( k / 2 ) ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    #test case 1\n    n=0\n    assert candidate(n)==0\n    \n    #test case 2\n    n=1\n    assert candidate(n)==1\n    \n    #test case 3\n    n=3\n    assert candidate(n)==2\n    \n    #test case 4\n    n=10\n    assert candidate(n)==8\n    \n    #test case 5\n    n=20\n    assert candidate(n)==16"}
{"task_id": "Open/127", "prompt": "def sameLength ( A , B ) :\n    \"\"\"Write a function that takes two integers, A and B, and returns True if both A and B have the same number of digits, and False otherwise.\n    \"\"\"\n", "entry_point": "sameLength", "canonical_solution": "    while ( A > 0 and B > 0 ) :\n        A = A / 10 ;\n        B = B / 10 ;\n    if ( A == 0 and B == 0 ) :\n        return True ;\n    return False ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    #test case 1\n    A=-1\n    B=10\n    assert candidate( A , B )==False\n    \n    #test case 2\n    A=10\n    B=10\n    assert candidate( A , B )==True\n    \n    #test case 3\n    A=123\n    B=12\n    assert candidate( A , B )==False\n    \n    #test case 4\n    A=0\n    B=1\n    assert candidate( A , B )==False\n    \n    #test case 5\n    A=321\n    B=123\n    assert candidate( A , B )==False"}
{"task_id": "Open/128", "prompt": "def isPossible ( x , y ) :\n    \"\"\"Write a function that takes two integers, x and y, and returns True if the difference between x and y is not equal to 1, or False otherwise.\n    \"\"\"\n", "entry_point": "isPossible", "canonical_solution": "    if ( ( x - y ) == 1 ) :\n        return False\n    return True\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    x=1\n    y=0\n    assert candidate( x , y )==False\n    \n    # test case 2\n    x=2\n    y=1\n    assert candidate( x , y )==False\n    \n    # test case 3\n    x=0\n    y=1\n    assert candidate( x , y )==True\n    \n    # test case 4\n    x=0\n    y=0\n    assert candidate( x , y )==True\n    \n    # test case 5\n    x=2\n    y=0\n    assert candidate( x , y )==True"}
{"task_id": "Open/129", "prompt": "def tribWord ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth Tribonacci word.\n    The Tribonacci word is a sequence of strings where each string is formed by concatenating the previous two strings in the sequence.\n    The first three strings in the sequence are \"1\", \"12\", and \"1213\".\n    The function should iterate from 3 to n and update the values of Sn_1, Sn_2, and Sn_3 accordingly.\n    Finally, it should return Sn_3, which represents the nth Tribonacci word.\n    \"\"\"\n", "entry_point": "tribWord", "canonical_solution": "    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    for i in range ( 3 , n + 1 ) :\n        tmp = Sn_3\n        Sn_3 += ( Sn_2 + Sn_1 )\n        Sn_1 = Sn_2\n        Sn_2 = tmp\n    return Sn_3\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    #test case 1\n    n=0\n    assert candidate(n)==\"1213\"\n    \n    #test case 2\n    n=1\n    assert candidate(n)==\"1213\"\n    \n    #test case 3\n    n=2\n    assert candidate(n)==\"1213\"\n    \n    #test case 4\n    n=3\n    assert candidate(n)==\"1213121\"\n    \n    #test case 5\n    n=4\n    assert candidate(n)==\"1213121121312\""}
{"task_id": "Open/130", "prompt": "def minSteps ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the minimum number of steps required to reach each element in the array.\n    The number of steps is calculated by taking the absolute difference between each element and the previous element in the array, and summing them up.\n    \"\"\"\n", "entry_point": "minSteps", "canonical_solution": "    min_Steps = 0\n    for i in range ( n ) :\n        if ( i > 0 ) :\n            min_Steps += abs ( arr [ i ] - arr [ i - 1 ] )\n        else :\n            min_Steps += abs ( arr [ i ] )\n    return min_Steps\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1,0,1,0,1]\n    n=5\n    assert candidate( arr , n )==5\n    \n    # test case 2\n    arr=[1,1,1,1,1]\n    n=5\n    assert candidate( arr , n )==1\n    \n    # test case 3\n    arr=[1,0,2,3,1]\n    n=5\n    assert candidate( arr , n )==7\n    \n    # test case 4\n    arr=[1,3,1,0,1]\n    n=5\n    assert candidate( arr , n )==7\n    \n    # test case 5\n    arr=[0,0,0,0]\n    n=4\n    assert candidate( arr , n )==0"}
{"task_id": "Open/131", "prompt": "def fnMod ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns 0 if the remainder of dividing the integer by 4 is 0 or 3, and returns 1 if the remainder is 1 or 2.\n    \"\"\"\n", "entry_point": "fnMod", "canonical_solution": "    rem = n % 4\n    if ( rem == 0 or rem == 3 ) :\n        return 0\n    elif ( rem == 1 or rem == 2 ) :\n        return 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 0\n    assert candidate(n)==0\n    \n    # test case 2\n    n = 1\n    assert candidate(n)==1\n    \n    # test case 3\n    n = 2\n    assert candidate(n)==1\n    \n    # test case 4\n    n = 3\n    assert candidate(n)==0\n    \n    # test case 5\n    n = -1\n    assert candidate(n)==0"}
{"task_id": "Open/132", "prompt": "def calculate_sum ( a , N ) :\n    \"\"\"Write a function that takes two parameters, `a` and `N`, and calculates the sum of all numbers that are multiples of `a` up to `N`.\n    The function first calculates the number of multiples of `a` up to `N` and stores it in the variable `m`.\n    Then, it calculates the sum of all numbers from 1 to `m` using the formula `(m * (m + 1)) / 2` and stores it in the variable `sum`.\n    Finally, it multiplies `a` by `sum` and returns the result as `ans`.\n    \"\"\"\n", "entry_point": "calculate_sum", "canonical_solution": "    m = N / a\n    sum = m * ( m + 1 ) / 2\n    ans = a * sum\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a = 1\n    N = 2\n    assert candidate(a, N)==3.0\n    \n    # test case 2\n    a = 2\n    N = 1\n    assert candidate(a, N)==0.75\n    \n    # test case 3\n    a = 1\n    N = 0\n    assert candidate(a, N)==0\n    \n    # test case 4\n    a = 1\n    N = 3\n    assert candidate(a, N)==6.0\n    \n    # test case 5\n    a = 1\n    N = 1\n    assert candidate(a, N)==1.0"}
{"task_id": "Open/133", "prompt": "def MDAS_Factorial ( N ) :\n    \"\"\"Write a function that takes an integer N and returns a value based on the following conditions:\n- If N is less than or equal to 2, return N.\n   \n- If N is less than or equal to 4, return N + 3.\n   \n- If (N - 4) is divisible by 4, return N + 1.\n   \n- If (N - 4) modulo 4 is less than or equal to 2, return N + 2.\n   \n- Otherwise, return N - 1.\n    \"\"\"\n", "entry_point": "MDAS_Factorial", "canonical_solution": "    if N <= 2 :\n        return N\n    if N <= 4 :\n        return N + 3\n    if ( N - 4 ) % 4 == 0 :\n        return N + 1\n    elif ( N - 4 ) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    N = -1\n    assert candidate(N)==-1\n    \n    # test case 2\n    N = 3\n    assert candidate(N)==6\n    \n    # test case 3\n    N = 8\n    assert candidate(N)==9\n    \n    # test case 4\n    N = 5\n    assert candidate(N)==7\n    \n    # test case 5\n    N = 7\n    assert candidate(N)==6"}
{"task_id": "Open/134", "prompt": "def checkArray ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns True if the first element of the array, the last element of the array, and the length of the array are all odd numbers.\n    Otherwise, it returns False.\n    \"\"\"\n", "entry_point": "checkArray", "canonical_solution": "    return ( ( arr [ 0 ] % 2 ) and ( arr [ n - 1 ] % 2 ) and ( n % 2 ) )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr=[1]\n    n=1\n    assert candidate(arr, n)==1\n    \n    # test case 2\n    arr=[1,2]\n    n=1\n    assert candidate(arr, n)==1\n    \n    # test case 3\n    arr=[1,2]\n    n=2\n    assert candidate(arr, n)==0\n    \n    # test case 4\n    arr=[1,2,3]\n    n=3\n    assert candidate(arr, n)==1\n    \n    # test case 5\n    arr=[1,2,3]\n    n=2\n    assert candidate(arr, n)==0"}
{"task_id": "Open/135", "prompt": "def countSum ( N , L , R ) :\n    \"\"\"Write a function that takes three parameters: N, L, and R.\n    The function returns the count of numbers between L and R (inclusive) that can be formed by adding N-1 numbers.\n    If N is equal to 1, the function returns the count of numbers between L and R (inclusive).\n    If N is greater than 1, the function returns the count of numbers between L and R (inclusive) that can be formed by adding N-2 numbers, plus 1.\n    If none of the conditions are met, the function returns 0.\n    \"\"\"\n", "entry_point": "countSum", "canonical_solution": "    if ( L > R ) :\n        return 0 ;\n    if ( N == 1 ) :\n        return R - L + 1 ;\n    if ( N > 1 ) :\n        return ( N - 2 ) * ( R - L ) + 1 ;\n    return 0 ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    N = -1\n    L = 1\n    R = 0\n    assert candidate(N, L, R)==0\n    \n    # test case 2\n    N = -1\n    L = 0\n    R = 1\n    assert candidate(N, L, R)==0\n    \n    # test case 3\n    N = 1\n    L = 0\n    R = 1\n    assert candidate(N, L, R)==2\n    \n    # test case 4\n    N = 2\n    L = 0\n    R = 1\n    assert candidate(N, L, R)==1\n    \n    # test case 5\n    N = 4\n    L = 0\n    R = 1\n    assert candidate(N, L, R)==3"}
{"task_id": "Open/136", "prompt": "def findMin ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the smallest positive integer that is not present in the array.\n    \"\"\"\n", "entry_point": "findMin", "canonical_solution": "    m = 0\n    for i in range ( n ) :\n        m = max ( m , arr [ i ] )\n    freq = [ 0 ] * ( m + 2 )\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += 1\n    for i in range ( 1 , m + 2 ) :\n        j = i\n        cnt = 0\n        while ( j <= m ) :\n            cnt += freq [ j ]\n            j += i\n        if ( not cnt ) :\n            return i\n    return m + 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1]\n    n = 1\n    assert candidate(arr, n)==2\n    \n    # test case 2\n    arr = [1,2]\n    n = 2\n    assert candidate(arr, n)==3\n    \n    # test case 3\n    arr = [1,2,3]\n    n = 2\n    assert candidate(arr, n)==3\n    \n    # test case 4\n    arr = [1,2,3]\n    n = -1\n    assert candidate(arr, n)==1\n    \n    # test case 5\n    arr = [1,2,3]\n    n = -2\n    assert candidate(arr, n)==1"}
{"task_id": "Open/137", "prompt": "def smallestPoss ( s , n ) :\n    \"\"\"Write a function that takes a string and an integer as input and returns the smallest possible number that can be formed by rearranging the digits of the string.\n    \"\"\"\n", "entry_point": "smallestPoss", "canonical_solution": "    ans = \"\" ;\n    arr = [ 0 ] * 10 ;\n    for i in range ( n ) :\n        arr [ ord ( s [ i ] ) - 48 ] += 1 ;\n    for i in range ( 10 ) :\n        for j in range ( arr [ i ] ) :\n            ans = ans + str ( i ) ;\n    return ans ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    s = [\"1\"]\n    n = 1\n    assert candidate(s, n)==\"1\"\n    \n    # test case 2\n    s = [\"1\",\"2\"]\n    n = 2\n    assert candidate(s, n)==\"12\"\n    \n    # test case 3\n    s = [\"1\",\"2\",\"3\"]\n    n = 2\n    assert candidate(s, n)==\"12\"\n    \n    # test case 4\n    s = [\"1\",\"2\",\"3\"]\n    n = -1\n    assert candidate(s, n)==\"\"\n    \n    # test case 5\n    s = [\"1\",\"2\",\"3\"]\n    n = 3\n    assert candidate(s, n)==\"123\""}
{"task_id": "Open/138", "prompt": "def totalBoxesRemoved ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the total number of boxes removed.\n    The function iterates through the array and compares each element with the previous element.\n    If the current element is greater than the previous element, the difference is added to the count and the current element is replaced with the previous element.\n    If the current element is less than or equal to the previous element, the previous element is updated to the current element.\n    Finally, the function returns the count.\n    \"\"\"\n", "entry_point": "totalBoxesRemoved", "canonical_solution": "    count = 0\n    prev = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > prev ) :\n            count += ( arr [ i ] - prev )\n            arr [ i ] = prev\n            prev = arr [ i ]\n        else :\n            prev = arr [ i ]\n    return count\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1]\n    n = 1\n    assert candidate(arr, n)==0\n    \n    # test case 2\n    arr = [1,2]\n    n = 1\n    assert candidate(arr, n)==0\n    \n    # test case 3\n    arr = [1,2,3]\n    n = 1\n    assert candidate(arr, n)==0\n    \n    # test case 4\n    arr = [1,2,3]\n    n = -1\n    assert candidate(arr, n)==0\n    \n    # test case 5\n    arr = [1,2,3]\n    n = -2\n    assert candidate(arr, n)==0"}
{"task_id": "Open/139", "prompt": "def averageValue ( s ) :\n    \"\"\"Write a function that takes a string as input and returns the average value of the ASCII codes of its characters.\n    \"\"\"\n", "entry_point": "averageValue", "canonical_solution": "    sum_char = 0\n    for i in range ( len ( s ) ) :\n        sum_char += ord ( s [ i ] )\n    return sum_char // len ( s )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    s = [\"1\"]\n    assert candidate(s)==49\n    \n    # test case 2\n    s = [\"1\",\"2\"]\n    assert candidate(s)==49\n    \n    # test case 3\n    s = [\"1\",\"2\",\"3\"]\n    assert candidate(s)==50\n    \n    # test case 4\n    s = [\"1\",\"2\",\"3\",\"2\"]\n    assert candidate(s)==50\n    \n    # test case 5\n    s = [\"1\",\"2\",\"3\",\"2\",\"3\"]\n    assert candidate(s)==50"}
{"task_id": "Open/140", "prompt": "def bankNotes ( A , B , S , N ) :\n    \"\"\"Write a function that takes four parameters: A, B, S, and N.\n    The function calculates the number of banknotes needed to reach a certain amount S, given that each banknote has a value of A and there are N banknotes of value B.\n    The function returns the minimum number of banknotes needed, or -1 if it is not possible to reach the desired amount.\n    \"\"\"\n", "entry_point": "bankNotes", "canonical_solution": "    numerator = S - ( B * N )\n    denominator = A - B\n    if ( numerator % denominator == 0 ) :\n        return ( numerator // denominator )\n    return - 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    A = 2\n    B = 1\n    S = 1\n    N = 1\n    assert candidate(A, B, S, N)==0\n    \n    # test case 2\n    A = 2\n    B = 1\n    S = 0\n    N = 1\n    assert candidate(A, B, S, N)==-1\n    \n    # test case 3\n    A = 2\n    B = 1\n    S = 1\n    N = -1\n    assert candidate(A, B, S, N)==2\n    \n    # test case 4\n    A = 1\n    B = 2\n    S = 1\n    N = 1\n    assert candidate(A, B, S, N)==1\n    \n    # test case 5\n    A = 2\n    B = 1\n    S = 1\n    N = 0\n    assert candidate(A, B, S, N)==1"}
{"task_id": "Open/141", "prompt": "import math\n\ndef lcm ( x , y ) :\n    \"\"\"Write a function that takes two integers, x and y, and returns their least common multiple (LCM).\n    \"\"\"\n", "entry_point": "lcm", "canonical_solution": "    return ( x * y ) // math . gcd ( x , y )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    x = 2\n    y = 1\n    assert candidate(x, y)==2\n    \n    # test case 2\n    x = 0\n    y = 1\n    assert candidate(x, y)==0\n    \n    # test case 3\n    x = 2\n    y = 0\n    assert candidate(x, y)==0\n    \n    # test case 4\n    x = -2\n    y = 1\n    assert candidate(x, y)==-2\n    \n    # test case 5\n    x = 2\n    y = -1\n    assert candidate(x, y)==-2"}
{"task_id": "Open/142", "prompt": "def CountTrailingZeros ( n ) :\n    \"\"\"Write a function that takes an integer as input and counts the number of trailing zeros in its binary representation.\n    The function should return the count of trailing zeros.\n    \"\"\"\n", "entry_point": "CountTrailingZeros", "canonical_solution": "    bit = bin ( n ) [ 2 : ]\n    bit = bit [ : : - 1 ]\n    zero = 0 ;\n    for i in range ( len ( bit ) ) :\n        if ( bit [ i ] == '0' ) :\n            zero += 1\n        else :\n            break\n    return zero\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = -1\n    assert candidate(n)==0\n    \n    # test case 2\n    n = 3\n    assert candidate(n)==0\n    \n    # test case 3\n    n = 8\n    assert candidate(n)==3\n    \n    # test case 4\n    n = 5\n    assert candidate(n)==0\n    \n    # test case 5\n    n = 7\n    assert candidate(n)==0"}
{"task_id": "Open/143", "prompt": "def Xor_Sum ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the index of the element in the array such that the sum of the XOR of all elements to the left of it and the XOR of all elements to the right of it is maximum.\n    \"\"\"\n", "entry_point": "Xor_Sum", "canonical_solution": "    sum = 0\n    index , left_xor = 0 , 0\n    right_xor = 0\n    for i in range ( n ) :\n        left_xor = left_xor ^ arr [ i ]\n        right_xor = 0\n        for j in range ( i + 1 , n ) :\n            right_xor = right_xor ^ arr [ j ]\n        if ( left_xor + right_xor > sum ) :\n            sum = left_xor + right_xor\n            index = i\n    return index + 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1]\n    n = 1\n    assert candidate(arr, n)==1\n    \n    # test case 2\n    arr = [1,2]\n    n = 2\n    assert candidate(arr, n)==1\n    \n    # test case 3\n    arr = [1,2,3]\n    n = 2\n    assert candidate(arr, n)==1\n    \n    # test case 4\n    arr = [1,2,3]\n    n = -1\n    assert candidate(arr, n)==1\n    \n    # test case 5\n    arr = [1,2,3]\n    n = -2\n    assert candidate(arr, n)==1"}
{"task_id": "Open/144", "prompt": "def lds ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the length of the longest decreasing subsequence in the array.\n    \"\"\"\n", "entry_point": "lds", "canonical_solution": "    lds = [ 0 for i in range ( n ) ]\n    lds [ 0 ] = 1\n    for i in range ( n ) :\n        lds [ i ] = 1\n        for j in range ( i ) :\n            if ( lds [ j ] != 0 and arr [ i ] % arr [ j ] == 0 ) :\n                lds [ i ] = max ( lds [ i ] , lds [ j ] + 1 )\n    return max ( lds )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1]\n    n = 1\n    assert candidate(arr, n)==1\n    \n    # test case 2\n    arr = [1,2]\n    n = 2\n    assert candidate(arr, n)==2\n    \n    # test case 3\n    arr = [1,2,3]\n    n = 2\n    assert candidate(arr, n)==2\n    \n    # test case 4\n    arr = [1,2,3]\n    n = 3\n    assert candidate(arr, n)==2\n    \n    # test case 5\n    arr = [1,2,3,4]\n    n = 4\n    assert candidate(arr, n)==3"}
{"task_id": "Open/145", "prompt": "def equalize ( arr , n , k ) :\n    \"\"\"Write a function that takes an array, its length, and a value k.\n    The function checks if it is possible to make all elements of the array equal by adding or subtracting k from each element.\n    If it is possible, the function returns the minimum element of the array plus k.\n    Otherwise, it returns -1.\n    \"\"\"\n", "entry_point": "equalize", "canonical_solution": "    min_ele = min ( arr ) ;\n    flag = True ;\n    for i in range ( n ) :\n        if ( not ( ( arr [ i ] + k ) >= ( min_ele + k ) and ( min_ele + k ) >= ( arr [ i ] - k ) ) ) :\n            flag = False ;\n            break ;\n    if ( flag ) :\n        return min_ele + k ;\n    else :\n        return - 1 ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1]\n    n = 1\n    k = 1\n    assert candidate(arr, n, k)==2\n    \n    # test case 2\n    arr = [1,2]\n    n = 2\n    k = 1\n    assert candidate(arr, n, k)==2\n    \n    # test case 3\n    arr = [1,2,3]\n    n = 2\n    k = 1\n    assert candidate(arr, n, k)==2\n    \n    # test case 4\n    arr = [1,2,3]\n    n = -1\n    k = 1\n    assert candidate(arr, n, k)==2\n    \n    # test case 5\n    arr = [1,2,3]\n    n = -2\n    k = 1\n    assert candidate(arr, n, k)==2"}
{"task_id": "Open/146", "prompt": "def numLen ( K ) :\n    \"\"\"Write a function that takes an integer K and returns the length of the smallest repeating sequence of the number 1 when divided by K.\n    If there is no repeating sequence, return -1.\n    \"\"\"\n", "entry_point": "numLen", "canonical_solution": "    if ( K % 2 == 0 or K % 5 == 0 ) :\n        return - 1\n    number = 0\n    len = 1\n    for len in range ( 1 , K + 1 ) :\n        number = ( number * 10 + 1 ) % K\n        if number == 0 :\n            return len\n    return - 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    K = -1\n    assert candidate(K)==-1\n    \n    # test case 2\n    K = 3\n    assert candidate(K)==3\n    \n    # test case 3\n    K = 8\n    assert candidate(K)==-1\n    \n    # test case 4\n    K = 5\n    assert candidate(K)==-1\n    \n    # test case 5\n    K = 7\n    assert candidate(K)==6"}
{"task_id": "Open/147", "prompt": "import sys\n\ndef changeTheArray ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the minimum number of operations required to change all elements of the array to the same number.\n    Each operation involves subtracting or adding 1 to an element of the array.\n    \"\"\"\n", "entry_point": "changeTheArray", "canonical_solution": "    minEle = min ( arr )\n    maxEle = max ( arr )\n    minOperations = sys . maxsize\n    for num in range ( minEle , maxEle + 1 ) :\n        operations = 0\n        for i in range ( n ) :\n            if arr [ i ] != num :\n                operations += ( abs ( num - arr [ i ] ) - 1 )\n        minOperations = min ( minOperations , operations )\n    return minOperations\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1]\n    n = 1\n    assert candidate(arr, n)==0\n    \n    # test case 2\n    arr = [1,2]\n    n = 2\n    assert candidate(arr, n)==0\n    \n    # test case 3\n    arr = [1,2,3]\n    n = 2\n    assert candidate(arr, n)==0\n    \n    # test case 4\n    arr = [1,2,3]\n    n = -1\n    assert candidate(arr, n)==0\n    \n    # test case 5\n    arr = [1,2,3]\n    n = -2\n    assert candidate(arr, n)==0"}
{"task_id": "Open/148", "prompt": "def calSum ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the sum of the first n numbers in a specific sequence.\n    The sequence starts with 3, followed by 3, 5, and then each subsequent number is the sum of the previous two numbers.\n    \"\"\"\n", "entry_point": "calSum", "canonical_solution": "    a = 3\n    b = 0\n    c = 2\n    if ( n == 0 ) :\n        return 3\n    if ( n == 1 ) :\n        return 3\n    if ( n == 2 ) :\n        return 5\n    sum = 5\n    while ( n > 2 ) :\n        d = a + b\n        sum = sum + d\n        a = b\n        b = c\n        c = d\n        n = n - 1\n    return sum\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = -1\n    assert candidate(n)==5\n    \n    # test case 2\n    n= 0\n    assert candidate(n)==3\n    \n    # test case 3\n    n = 1\n    assert candidate(n)==3\n    \n    # test case 4\n    n = 2\n    assert candidate(n)==5\n    \n    # test case 5\n    n = 3\n    assert candidate(n)==8"}
{"task_id": "Open/149", "prompt": "def sqroot ( s ) :\n    \"\"\"Write a function that takes a number as input and returns its square root.\n    \"\"\"\n", "entry_point": "sqroot", "canonical_solution": "    pSq = 0 ;\n    N = 0 ;\n    for i in range ( int ( s ) , 0 , - 1 ) :\n        for j in range ( 1 , i ) :\n            if ( j * j == i ) :\n                pSq = i ;\n                N = j ;\n                break ;\n        if ( pSq > 0 ) :\n            break ;\n    d = s - pSq ;\n    P = d / ( 2.0 * N ) ;\n    A = N + P ;\n    sqrt_of_s = A - ( ( P * P ) / ( 2.0 * A ) ) ;\n    return sqrt_of_s ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    s = 4\n    assert candidate(s)==2.0\n    \n    # test case 2\n    s = 9\n    assert candidate(s)==3.0\n    \n    # test case 3\n    s = 16\n    assert candidate(s)==4.0\n    \n    # test case 4\n    s = 25\n    assert candidate(s)==5.0\n    \n    # test case 5\n    s = 36\n    assert candidate(s)==6.0"}
{"task_id": "Open/150", "prompt": "def getProbability ( p , q ) :\n    \"\"\"Write a function that takes two numbers, p and q, and returns the probability calculated using the formula (p^2 + q^2) / (p + q), where p and q are divided by 100 before the calculation.\n    \"\"\"\n", "entry_point": "getProbability", "canonical_solution": "    p /= 100\n    q /= 100\n    probability = ( p * p + q * q ) / ( p + q )\n    return probability\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    p = -1\n    q = -1\n    assert candidate(p, q)==-0.01\n    \n    # test case 2\n    p = 0\n    q = -1\n    assert candidate(p, q)==-0.01\n    \n    # test case 3\n    p = -1\n    q = 0\n    assert candidate(p, q)==-0.01\n    \n    # test case 4\n    p = 1\n    q = 1\n    assert candidate(p, q)==0.01\n    \n    # test case 5\n    p = 100\n    q = 100\n    assert candidate(p, q)==1.0"}
{"task_id": "Open/151", "prompt": "def XorAscii ( str1 , len1 ) :\n    \"\"\"Write a function that takes a string and its length as input and returns the XOR of the ASCII values of all the characters in the string.\n    \"\"\"\n", "entry_point": "XorAscii", "canonical_solution": "    ans = ord ( str1 [ 0 ] )\n    for i in range ( 1 , len1 ) :\n        ans = ( ans ^ ( ord ( str1 [ i ] ) ) )\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    str1 = [\"1\"]\n    len1 = 1\n    assert candidate(str1, len1)==49\n    \n    # test case 2\n    arr = [\"1\",\"2\"]\n    n = 2\n    assert candidate(str1, len1)==49\n    \n    # test case 3\n    arr = [1,2,3]\n    n = 2\n    assert candidate(str1, len1)==49\n    \n    # test case 4\n    arr = [1,2,3]\n    n = -1\n    assert candidate(str1, len1)==49\n    \n    # test case 5\n    arr = [1,2,3]\n    n = -2\n    assert candidate(str1, len1)==49"}
{"task_id": "Open/152", "prompt": "def check_binary ( n ) :\n    \"\"\"Write a function that takes an integer as input and checks if its binary representation contains consecutive 1's.\n    If it does, the function should return False.\n    Otherwise, it should return True.\n    \"\"\"\n", "entry_point": "check_binary", "canonical_solution": "    prev_last = 0\n    while ( n ) :\n        if ( ( n & 1 ) and prev_last ) :\n            return False\n        prev_last = n & 1\n        n >>= 1\n    return True\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = -1\n    assert candidate(n)==False\n    \n    # test case 2\n    n = 3\n    assert candidate(n)==False\n    \n    # test case 3\n    n = 8\n    assert candidate(n)==True\n    \n    # test case 4\n    n = 5\n    assert candidate(n)==True\n    \n    # test case 5\n    n = 7\n    assert candidate(n)==False"}
{"task_id": "Open/153", "prompt": "def areVowelsInOrder ( s ) :\n    \"\"\"Write a function that takes a string as input and returns True if the vowels in the string are in alphabetical order, and False otherwise.\n    \"\"\"\n", "entry_point": "areVowelsInOrder", "canonical_solution": "    n = len ( s )\n    c = chr ( 64 )\n    for i in range ( 1 , n ) :\n        if ( s [ i ] == 'a' or s [ i ] == 'e' or s [ i ] == 'i' or s [ i ] == 'o' or s [ i ] == 'u' ) :\n            if s [ i ] < c :\n                return False\n            else :\n                c = s [ i ]\n    return True\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    s = []\n    assert candidate(s)==True\n    \n    # test case 2\n    s = [1]\n    assert candidate(s)==True\n    \n    # test case 3\n    s = [1,2]\n    assert candidate(s)==True\n    \n    # test case 4\n    s = [1,2,3]\n    assert candidate(s)==True\n    \n    # test case 5\n    s = [1,2,3,4]\n    assert candidate(s)==True"}
{"task_id": "Open/154", "prompt": "def countLastDigitK ( low , high , k ) :\n    \"\"\"Write a function that takes three integers (low, high, k) and returns the count of numbers between low and high (inclusive) whose last digit is greater than or equal to k.\n    \"\"\"\n", "entry_point": "countLastDigitK", "canonical_solution": "    count = ( high - low ) / 10\n    if ( high % 10 >= k ) :\n        count += 1\n    if ( low % 10 > k ) :\n        count -= 1\n    return int ( count )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    low = 10\n    high = 100\n    k = 0\n    assert candidate(low, high, k) == 10\n    \n    # test case 2\n    low = 12\n    high = 99\n    k = 2\n    assert candidate(low, high, k) == 9\n    \n    # test case 3\n    low = 1\n    high = 1000\n    k = 5\n    assert candidate(low, high, k) == 99\n    \n    # test case 4\n    low = 100\n    high = 500\n    k = 1\n    assert candidate(low, high, k) == 40\n    \n    # test case 5\n    low = 345\n    high = 600\n    k = 3\n    assert candidate(low, high, k) == 24"}
{"task_id": "Open/155", "prompt": "import math\n\ndef minAbsDiff ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the minimum absolute difference between the input number and the nearest power of 2.\n    \"\"\"\n", "entry_point": "minAbsDiff", "canonical_solution": "    left = 1 << ( int ) ( math . floor ( math . log2 ( n ) ) )\n    right = left * 2\n    return min ( ( n - left ) , ( right - n ) )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 3\n    assert candidate(n) == 1\n    \n    # test case 2\n    n = 6\n    assert candidate(n) == 2\n    \n    # test case 3\n    n = 15\n    assert candidate(n) == 1\n    \n    # test case 4\n    n = 16\n    assert candidate(n) == 0\n    \n    # test case 5\n    n = 100\n    assert candidate(n) == 28\n    \n    "}
{"task_id": "Open/156", "prompt": "def ReuleauxArea ( r ) :\n    \"\"\"Write a function that takes a radius as input and returns the area of a Reuleaux triangle with that radius.\n    If the input radius is negative, the function should return -1.\n    \"\"\"\n", "entry_point": "ReuleauxArea", "canonical_solution": "    if ( r < 0 ) :\n        return - 1\n    A = 0.70477 * 2 * pow ( r , 2 )\n    return A\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    r = 3\n    assert candidate(r) == 12.68586\n    \n    # test case 2\n    r = 4\n    assert candidate(r) == 22.55264\n    \n    # test case 3\n    r = 1\n    assert candidate(r) == 1.40954\n    \n    # test case 4\n    r = 5\n    assert candidate(r) == 35.2385\n    \n    # test case 5\n    r = 2\n    assert candidate(r) == 5.63816\n    \n    "}
{"task_id": "Open/157", "prompt": "def newString ( s ) :\n    \"\"\"Write a function that takes a string as input and returns a new string that contains all the characters from the input string sorted in alphabetical order.\n    \"\"\"\n", "entry_point": "newString", "canonical_solution": "    l = len ( s )\n    freq = [ 0 ] * ( 26 )\n    for i in range ( 0 , l ) :\n        freq [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1\n    ans = \"\"\n    for i in range ( 0 , 26 ) :\n        for j in range ( 0 , freq [ i ] ) :\n            ans += chr ( 97 + i )\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert candidate(s) == \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # test case 2\n    s = \"zzzzzzzzzzz\"\n    assert candidate(s) == \"zzzzzzzzzzz\"\n    \n    # test case 3\n    s = \"aaaabbbbcccc\"\n    assert candidate(s) == \"aaaabbbbcccc\"\n    \n    # test case 4\n    s = \"abcz\"\n    assert candidate(s) == \"abcz\"\n    \n    # test case 5\n    s = \"cba\"\n    assert candidate(s) == \"abc\"\n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/158", "prompt": "def search ( ar , size ) :\n    \"\"\"Write a function that takes an array and its size as input and returns the missing number in the array.\n    The array is sorted in ascending order and contains consecutive integers, except for one missing number.\n    The function uses binary search to find the missing number.\n    \"\"\"\n", "entry_point": "search", "canonical_solution": "    a = 0\n    b = size - 1\n    mid = 0\n    while b > a + 1 :\n        mid = ( a + b ) // 2\n        if ( ar [ a ] - a ) != ( ar [ mid ] - mid ) :\n            b = mid\n        elif ( ar [ b ] - b ) != ( ar [ mid ] - mid ) :\n            a = mid\n    return ar [ mid ] + 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    ar = [1]\n    size = 1\n    assert candidate(ar, size) == 2\n    \n    # test case 2\n    ar = [1, 2]\n    size = 2\n    assert candidate(ar, size) == 2\n    \n    # test case 3\n    ar = [3, 2, 1]\n    size = 3\n    assert candidate(ar, size) == 3\n    \n    \n    # test case 4\n    ar = [2, 4, 6, 8]\n    size = 4\n    assert candidate(ar, size) == 5\n    \n    # test case 5\n    ar = [7, 5, 3, 1]\n    size = 4\n    assert candidate(ar, size) == 6\n    "}
{"task_id": "Open/159", "prompt": "def minSteps ( str ) :\n    \"\"\"Write a function that takes a string as input and counts the number of occurrences of the substring \"010\" in the string.\n    The function returns the count.\n    \"\"\"\n", "entry_point": "minSteps", "canonical_solution": "    count = 0\n    i = 0\n    while i < len ( str ) - 2 :\n        if str [ i ] == '0' :\n            if ( str [ i + 1 ] == '1' ) :\n                if ( str [ i + 2 ] == '0' ) :\n                    count = count + 1\n                    i = i + 2\n        i = i + 1\n    return count\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    str = \"100100100100100\"\n    assert candidate(str) == 4\n    \n    # test case 2\n    str = \"100010001\"\n    assert candidate(str) == 1\n    \n    # test case 3\n    str = \"10101\"\n    assert candidate(str) == 1\n    \n    # test case 4 \n    str = \"1011010\"\n    assert candidate(str) == 1\n    \n    # test case 5 \n    str = \"0101010101\"\n    assert candidate(str) == 2\n    "}
{"task_id": "Open/160", "prompt": "def firstEven ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the first element in the array that appears an odd number of times.\n    \"\"\"\n", "entry_point": "firstEven", "canonical_solution": "    map1 = { }\n    for i in range ( 0 , n ) :\n        if arr [ i ] not in map1 :\n            map1 [ arr [ i ] ] = False\n        else :\n            map1 [ arr [ i ] ] = not map1 [ arr [ i ] ]\n    for j in range ( 0 , n ) :\n        if map1 [ arr [ j ] ] == True :\n            break\n    return arr [ j ]\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1, 2, 3, 4, 5]\n    n = 5\n    assert candidate(arr, n) == 5\n    \n    # test case 2\n    arr = [1, 1, 2, 3, 4, 4]\n    n = 6\n    assert candidate(arr, n) == 1\n    \n    # test case 3\n    arr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n    n = 10\n    assert candidate(arr, n) == 1\n    \n    # test case 4\n    arr = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]\n    n = 13\n    assert candidate(arr, n) == 2\n    \n    # test case 5\n    arr = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\n    n = 10\n    assert candidate(arr, n) == 1\n    \n    \n    \n    "}
{"task_id": "Open/161", "prompt": "def maxXOR ( arr , n ) :\n    \"\"\"Write a function that takes an array of integers and the length of the array as input.\n    The function calculates the XOR of all the elements in the array and stores it in a variable called xorArr.\n    Then, it initializes a variable called ans to 0.\n    The function then iterates through the array and calculates the XOR of xorArr and the current element.\n    It compares this XOR value with the current value of ans and updates ans if the XOR value is greater.\n    Finally, the function returns the value of ans.\n    \"\"\"\n", "entry_point": "maxXOR", "canonical_solution": "    xorArr = 0\n    for i in range ( n ) :\n        xorArr ^= arr [ i ]\n    ans = 0\n    for i in range ( n ) :\n        ans = max ( ans , ( xorArr ^ arr [ i ] ) )\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1, 2, 3, 4, 5]\n    n = 5\n    assert candidate(arr, n) == 5\n    \n    # test case 2\n    arr = [0, 0, 0, 0, 0]\n    n = 5\n    assert candidate(arr, n) == 0\n    \n    # test case 3\n    arr = [1, 1, 1, 1, 1]\n    n = 5\n    assert candidate(arr, n) == 0\n    \n    # test case 4\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    n = 10\n    assert candidate(arr, n) == 15\n    \n    # test case 5\n    arr = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23]\n    n = 10\n    assert candidate(arr, n) == 23"}
{"task_id": "Open/162", "prompt": "def isReachable ( sx , sy , dx , dy ) :\n    \"\"\"Write a function that takes four integers (sx, sy, dx, dy) and returns True if it is possible to reach the destination point (dx, dy) starting from the source point (sx, sy) by only moving in two directions: either adding the y-coordinate to the x-coordinate or adding the x-coordinate to the y-coordinate.\n    Otherwise, it returns False.\n    \"\"\"\n", "entry_point": "isReachable", "canonical_solution": "    if ( sx > dx or sy > dy ) :\n        return False\n    if ( sx == dx and sy == dy ) :\n        return True\n    return ( isReachable ( sx + sy , sy , dx , dy ) or isReachable ( sx , sy + sx , dx , dy ) )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    sx = 1\n    sy = 1\n    dx = 3\n    dy = 3\n    assert candidate(sx, sy, dx, dy) == False\n    \n    # test case 2 \n    sx = 2\n    sy = 2\n    dx = 5\n    dy = 4\n    assert candidate(sx, sy, dx, dy) == False\n    \n    # test case 3\n    sx = 1\n    sy = 1\n    dx = 4\n    dy = 4\n    assert candidate(sx, sy, dx, dy) == False\n    \n    # test case 4\n    sx = 1\n    sy = 2\n    dx = 3\n    dy = 2\n    assert candidate(sx, sy, dx, dy) == True\n    \n    # test case 5 \n    sx = 0\n    sy = 1\n    dx = 2\n    dy = 1\n    assert candidate(sx, sy, dx, dy) == True"}
{"task_id": "Open/163", "prompt": "def cntWays ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the number of ways to divide n into pairs of numbers, such that each pair consists of two consecutive numbers and the sum of each pair is divisible by 4.\n    If n is odd, the function should return 0.\n    \"\"\"\n", "entry_point": "cntWays", "canonical_solution": "    if n % 2 == 1 :\n        return 0\n    else :\n        return ( n - 2 ) // 4\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 3\n    assert candidate(n) == 0\n    \n    # test case 2\n    n = 4\n    assert candidate(n) == 0\n    \n    # test case 3\n    n = 1\n    assert candidate(n) == 0\n    \n    # test case 4\n    n = 5\n    assert candidate(n) == 0\n    \n    # test case 5\n    n = 2\n    assert candidate(n) == 0\n    "}
{"task_id": "Open/164", "prompt": "def countSubseq ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the count of all possible subsequences in the array.\n    A subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\n    The function uses a dictionary to count the occurrences of each element in the array and then calculates the count by multiplying the values of the dictionary.\n    \"\"\"\n", "entry_point": "countSubseq", "canonical_solution": "    um = { i : 0 for i in range ( 8 ) }\n    count = 1\n    for i in range ( n ) :\n        um [ arr [ i ] ] += 1\n    for key , values in um . items ( ) :\n        if ( values > 0 ) :\n            count *= values\n    return count\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1, 2, 3, 4, 5]\n    n = 5\n    assert candidate(arr, n) == 1\n    \n    # test case 2\n    arr = [1, 1, 2, 3, 3]\n    n = 5\n    assert candidate(arr, n) == 4\n    \n    # test case 3\n    arr = [1, 2, 2, 2, 3]\n    n = 5\n    assert candidate(arr, n) == 3\n    \n    # test case 4\n    arr = [1, 1, 1, 1, 1, 1, 1, 1]\n    n = 8\n    assert candidate(arr, n) == 8\n    \n    # test case 5\n    arr = [2, 2, 2, 2, 2, 2, 2, 2]\n    n = 8\n    assert candidate(arr, n) == 8"}
{"task_id": "Open/165", "prompt": "def AVLnodes ( height ) :\n    \"\"\"Write a function that takes an integer height and returns the number of nodes in an AVL tree of that height.\n    \"\"\"\n", "entry_point": "AVLnodes", "canonical_solution": "    if ( height == 0 ) :\n        return 1\n    elif ( height == 1 ) :\n        return 2\n    return ( 1 + AVLnodes ( height - 1 ) + AVLnodes ( height - 2 ) )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    height = 0\n    assert candidate(height) == 1\n    \n    # test case 2\n    height = 1\n    assert candidate(height) == 2\n    \n    # test case 3\n    height = 2\n    assert candidate(height) == 4\n    \n    # test case 4\n    height = 3\n    assert candidate(height) == 7\n    \n    # test case 5\n    height = 4\n    assert candidate(height) == 12"}
{"task_id": "Open/166", "prompt": "import sys\n\ndef steps ( source , step , dest ) :\n    \"\"\"Write a function that takes three integers: source, step, and dest.\n    The function calculates the minimum number of steps needed to reach the destination (dest) starting from the source, where each step can be either positive or negative.\n    If it is not possible to reach the destination, the function returns sys.\n   maxsize.\n    \"\"\"\n", "entry_point": "steps", "canonical_solution": "    if ( abs ( source ) > ( dest ) ) :\n        return sys . maxsize\n    if ( source == dest ) :\n        return step\n    pos = steps ( source + step + 1 , step + 1 , dest )\n    neg = steps ( source - step - 1 , step + 1 , dest )\n    return min ( pos , neg )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    source = 0\n    step = 1\n    dest = 2\n    assert candidate(source, step, dest) == 2\n    \n    # test case 2\n    source = 2\n    step = 2\n    dest = -1\n    assert candidate(source, step, dest) == 9223372036854775807\n    \n    # test case 3\n    source = 3\n    step = 1\n    dest = 9\n    assert candidate(source, step, dest) == 5\n    \n    # test case 4\n    source = -2\n    step = 3\n    dest = 5\n    assert candidate(source, step, dest) == 10\n    \n    # test case 5\n    source = 0\n    step = 2\n    dest = 0\n    assert candidate(source, step, dest) == 2\n    "}
{"task_id": "Open/167", "prompt": "def countnndSay ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth term of the \"Count and Say\" sequence.\n    The \"Count and Say\" sequence starts with \"1\" and each subsequent term is generated by counting the number of consecutive digits and saying them out loud.\n    For example, the second term is \"11\" because there is one \"1\" in the first term.\n    The third term is \"21\" because there are two \"1\"s in the second term.\n    The fourth term is \"1211\" because there is one \"2\" and one \"1\" in the third term.\n    And so on.\n    \"\"\"\n", "entry_point": "countnndSay", "canonical_solution": "    if ( n == 1 ) :\n        return \"1\"\n    if ( n == 2 ) :\n        return \"11\"\n    s = \"11\"\n    for i in range ( 3 , n + 1 ) :\n        s += '$'\n        l = len ( s )\n        cnt = 1\n        tmp = \"\"\n        for j in range ( 1 , l ) :\n            if ( s [ j ] != s [ j - 1 ] ) :\n                tmp += str ( cnt + 0 )\n                tmp += s [ j - 1 ]\n                cnt = 1\n            else :\n                cnt += 1\n        s = tmp\n    return s ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 1\n    assert candidate(n) == \"1\"\n    \n    # test case 2\n    n = 2\n    assert candidate(n) == \"11\"\n    \n    # test case 3\n    n = 3\n    assert candidate(n) == \"21\"\n    \n    # test case 4\n    n = 4\n    assert candidate(n) == \"1211\"\n    \n    # test case 5\n    n = 5\n    assert candidate(n) == \"111221\"\n    "}
{"task_id": "Open/168", "prompt": "def maxLength ( arr , N ) :\n    \"\"\"Write a function that takes an array and an integer N as input and returns the maximum length of a subarray such that the product of all its elements is non-negative.\n    If the product of all elements in the array is non-negative, the function should return N.\n    Otherwise, the function should find the maximum length of a subarray such that the product of all its elements is non-negative and return that length.\n    \"\"\"\n", "entry_point": "maxLength", "canonical_solution": "    product = 1\n    Len = 0\n    for i in arr :\n        product *= i\n    if ( product >= 0 ) :\n        return N\n    for i in range ( N ) :\n        if ( arr [ i ] < 0 ) :\n            Len = max ( Len , max ( N - i - 1 , i ) )\n    return Len\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1, 2, 3, 4, 5]\n    N = 5\n    assert candidate(arr, N) == 5\n    \n    # test case 2\n    arr = [-1, -2, -3, -4, -5]\n    N = 5\n    assert candidate(arr, N) == 4\n    \n    # test case 3\n    arr = [-1, 2, 3, 4, -5]\n    N = 5\n    assert candidate(arr, N) == 5\n    \n    # test case 4\n    arr = [1, 2, -3, 4, 5]\n    N = 5\n    assert candidate(arr, N) == 2\n    \n    # test case 5\n    arr = [1, 2, -3, -4, -5]\n    N = 5\n    assert candidate(arr, N) == 4\n    "}
{"task_id": "Open/169", "prompt": "import math\n\ndef normal ( m , n ) :\n    \"\"\"Write a function that takes two numbers, m and n, and calculates the normal value using the formula: N = (|m| * |n|) / sqrt((|m| * |m|) + (|n| * |n|)).\n    The function then returns the calculated normal value.\n    \"\"\"\n", "entry_point": "normal", "canonical_solution": "    N = ( ( abs ( m ) * abs ( n ) ) / math . sqrt ( ( abs ( m ) * abs ( m ) ) + ( abs ( n ) * abs ( n ) ) ) ) ;\n    return N ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    m = 2\n    n = 3\n    assert candidate(m, n) == 1.6641005886756874\n    \n    # test case 2\n    m = -4\n    n = 5\n    assert candidate(m, n) == 3.1234752377721215\n    \n    # test case 3\n    m = 0\n    n = 6\n    assert candidate(m, n) == 0.0\n    \n    # test case 4\n    m = 7\n    n = -8\n    assert candidate(m, n) == 5.268036862948144\n    \n    # test case 5\n    m = -1\n    n = 1\n    assert candidate(m, n) == 0.7071067811865475\n    "}
{"task_id": "Open/170", "prompt": "def countSubarray ( arr , n , k ) :\n    \"\"\"Write a function that takes an array, its length, and a target number as input and returns the count of subarrays whose sum is less than the target number.\n    \"\"\"\n", "entry_point": "countSubarray", "canonical_solution": "    count = 0\n    for i in range ( 0 , n ) :\n        sum = 0 ;\n        for j in range ( i , n ) :\n            if ( sum + arr [ j ] < k ) :\n                sum = arr [ j ] + sum\n                count += 1\n            else :\n                break\n    return count ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    arr = [1, 2, 3, 4]\n    n = 4\n    k = 4\n    assert candidate(arr, n, k) == 4\n    \n    # test case 2 \n    arr = [1, 2, 3, 4, 5]\n    n = 5\n    k = 5\n    assert candidate(arr, n, k) == 5\n    \n    # test case 3\n    arr = [1, 1, 1, 1]\n    n = 4\n    k = 2\n    assert candidate(arr, n, k) == 4\n    \n    # test case 4\n    arr = [5, 5, 5, 5]\n    n = 4\n    k = 10\n    assert candidate(arr, n, k) == 4\n    \n    # test case 5\n    arr = [1, 2, 3, 4, 5, 6]\n    n = 6\n    k = 10\n    assert candidate(arr, n, k) == 12"}
{"task_id": "Open/171", "prompt": "def countTripletsLessThanL ( n , L , arr ) :\n    \"\"\"Write a function that takes three parameters: an integer n, an integer L, and a list of integers arr.\n    The function sorts the list arr in ascending order.\n    It then counts the number of triplets (i, j, k) where i < j < k and arr[k] - arr[i] is less than or equal to L.\n    The function returns the total number of such triplets.\n    \"\"\"\n", "entry_point": "countTripletsLessThanL", "canonical_solution": "    arr . sort ( )\n    ways = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            for k in range ( j + 1 , n ) :\n                mostDistantDistance = arr [ k ] - arr [ i ]\n                if ( mostDistantDistance <= L ) :\n                    ways += 1\n    return ways\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 5\n    L = 4\n    arr = [1, 2, 3, 4, 5]\n    assert candidate(n, L, arr) == 10\n    \n    # test case 2\n    n = 6\n    L = 3\n    arr = [1, 2, 3, 4, 5, 6]\n    assert candidate(n, L, arr) == 10\n    \n    # test case 3\n    n = 5\n    L = 5\n    arr = [5, 4, 3, 2, 1]\n    assert candidate(n, L, arr) == 10\n    \n    # test case 4\n    n = 4\n    L = 2 \n    arr = [3, 1, 4, 2]\n    assert candidate(n, L, arr) == 2\n    \n    # test case 5\n    n = 3\n    L = 1\n    arr = [1, 1, 1]\n    assert candidate(n, L, arr) == 1"}
{"task_id": "Open/172", "prompt": "def findTwoThreePrime ( l , r ) :\n    \"\"\"Write a function that takes two integers, l and r, and returns the count of numbers between l and r (inclusive) that can be expressed as the product of only 2 and 3.\n    \"\"\"\n", "entry_point": "findTwoThreePrime", "canonical_solution": "    if ( l == 1 ) :\n        l += 1\n    count = 0\n    for i in range ( l , r + 1 ) :\n        num = i\n        while ( num % 2 == 0 ) :\n            num //= 2 ;\n        while ( num % 3 == 0 ) :\n            num //= 3\n        if ( num == 1 ) :\n            count += 1\n    return count\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    l = 1\n    r = 20\n    assert candidate(l, r) == 9\n    \n    # test case 2\n    l = 10\n    r = 20\n    assert candidate(l, r) == 3\n    \n    # test case 3\n    l = 15\n    r = 25\n    assert candidate(l, r) == 3\n    \n    # test case 4\n    l = 20\n    r = 30\n    assert candidate(l, r) == 2\n    \n    # test case 5\n    l = 1\n    r = 100\n    assert candidate(l, r) == 19\n    "}
{"task_id": "Open/173", "prompt": "def toggleLastMBits ( n , m ) :\n    \"\"\"Write a function that takes two integers, n and m, and returns the result of toggling the last m bits of n.\n    \"\"\"\n", "entry_point": "toggleLastMBits", "canonical_solution": "    num = ( 1 << m ) - 1\n    return ( n ^ num )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 11\n    m = 2\n    assert candidate(n, m) == 8\n    \n    # test case 2\n    n = 25\n    m = 3\n    assert candidate(n, m) == 30\n    \n    # test case 3\n    n = 100\n    m = 5\n    assert candidate(n, m) == 123\n    \n    # test case 4\n    n = 7\n    m = 3\n    assert candidate(n, m) == 0\n    \n    # test case 5\n    n = 30\n    m = 4\n    assert candidate(n, m) == 17\n    \n    \n    "}
{"task_id": "Open/174", "prompt": "def countNumbers ( L , R , K ) :\n    \"\"\"Write a function that takes three integers L, R, and K as input and returns the count of numbers between L and R (inclusive) that are divisible by 9 or have a remainder of K when divided by 9.\n    If K is equal to 9, it is replaced with 0 before performing the calculations.\n    The function calculates the total number of numbers between L and R, divides it by 9 to get the number of numbers divisible by 9, and calculates the remainder.\n    It then iterates through the numbers from R to R - rem (inclusive) and checks if the remainder of each number divided by 9 is equal to K.\n    If it is, it increments the count.\n    Finally, it returns the count.\n    \"\"\"\n", "entry_point": "countNumbers", "canonical_solution": "    if ( K == 9 ) :\n        K = 0\n    totalnumbers = R - L + 1\n    factor9 = totalnumbers // 9\n    rem = totalnumbers % 9\n    ans = factor9\n    for i in range ( R , R - rem , - 1 ) :\n        rem1 = i % 9\n        if ( rem1 == K ) :\n            ans += 1\n    return ans\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    L = 1\n    R = 10\n    K = 5 \n    assert candidate(L, R, K) == 1\n    \n    # test case 2\n    L = 5\n    R = 100\n    K = 5\n    assert candidate(L, R, K) == 11\n    \n    # test case 3\n    L = 1\n    R = 100\n    K = 9\n    assert candidate(L, R, K) == 11\n    \n    # test case 4\n    L = 1\n    R = 100\n    K = 0 \n    assert candidate(L, R, K) == 11\n    \n    # test case 5\n    L = 5\n    R = 20\n    K = 3\n    assert candidate(L, R, K) == 1"}
{"task_id": "Open/175", "prompt": "import math\n\ndef firstkdigits ( n , k ) :\n    \"\"\"Write a function that takes two integers, n and k, and returns the first k digits of the product of n and the logarithm of n to the base 10.\n    \"\"\"\n", "entry_point": "firstkdigits", "canonical_solution": "    product = n * math . log ( n , 10 ) ;\n    decimal_part = product - math . floor ( product ) ;\n    decimal_part = pow ( 10 , decimal_part ) ;\n    digits = pow ( 10 , k - 1 ) ;\n    return math . floor ( decimal_part * digits ) ;\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    n = 100\n    k = 3\n    assert candidate(n ,k) == 100\n    \n    # test case 2\n    n = 1000\n    k = 4\n    assert candidate(n ,k) == 9999\n    \n    # test case 3\n    n = 10000\n    k = 5\n    assert candidate(n ,k) == 10000\n    \n    # test case 4\n    n = 100000\n    k = 6\n    assert candidate(n ,k) == 100000\n    \n    # test case 5\n    n = 1000000\n    k = 7\n    assert candidate(n ,k) == 9999999"}
{"task_id": "Open/176", "prompt": "def FindElement ( A , n ) :\n    \"\"\"Write a function that takes a list of integers and the length of the list as input.\n    The function should find and return the first element in the list that is greater than all the elements before it and less than all the elements after it.\n    If no such element exists, the function should return -1.\n    \"\"\"\n", "entry_point": "FindElement", "canonical_solution": "    for i in range ( 0 , n , 1 ) :\n        flag = 0\n        for j in range ( 0 , i , 1 ) :\n            if ( A [ j ] >= A [ i ] ) :\n                flag = 1\n                break\n        for j in range ( i + 1 , n , 1 ) :\n            if ( A [ j ] <= A [ i ] ) :\n                flag = 1\n                break\n        if ( flag == 0 ) :\n            return A [ i ]\n    return - 1\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    A = [4, 3, 2, 5, 1]\n    n = 5\n    assert candidate(A, n) == -1\n    \n    # test case 2\n    A = [5, 2, 4, 1, 3]\n    n = 5\n    assert candidate(A, n) == -1\n    \n    # test case 3\n    A = [1, 2, 3, 4, 5]\n    n = 5\n    assert candidate(A, n) == 1\n    \n    # test case 4\n    A = [1]\n    n = 1\n    assert candidate(A, n) == 1\n    \n    # test case 5\n    A = [1, 2, 3, 4, 4, 5]\n    n = 6\n    assert candidate(A, n) == 1\n    "}
{"task_id": "Open/177", "prompt": "def minimumIncrease ( a , b , c ) :\n    \"\"\"Write a function that takes three integers as input and returns the minimum increase needed to make the sum of the two smallest integers greater than or equal to the largest integer.\n    \"\"\"\n", "entry_point": "minimumIncrease", "canonical_solution": "    arr = [ a , b , c ]\n    arr . sort ( )\n    if arr [ 0 ] + arr [ 1 ] >= arr [ 2 ] :\n        return 0\n    else :\n        return arr [ 2 ] - ( arr [ 0 ] + arr [ 1 ] )\n", "test": "\nMETADATA = {\n    'author': 'yg',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    # test case 1\n    a = 2\n    b = 3\n    c = 4\n    assert candidate(a, b, c) == 0\n    \n    # test case 2\n    a = 1\n    b = 2\n    c = 4\n    assert candidate(a, b, c) == 1\n    \n    # test case 3\n    a = 3\n    b = 7\n    c = 10\n    assert candidate(a, b, c) == 0\n    \n    # test case 4\n    a = 1\n    b = 1\n    c = 7\n    assert candidate(a, b, c) == 5\n    \n    # test case 5\n    a = 2\n    b = 4\n    c = 8\n    assert candidate(a, b, c) == 2\n    \n    \n    "}
