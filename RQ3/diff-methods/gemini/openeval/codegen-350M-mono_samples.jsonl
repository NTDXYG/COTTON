{"task_id": "Open/0", "completion": "    sum = 0\n    for i in range(N) :\n        sum += arr[i]\n    for i in range(N-K) :\n        sum += arr[i]\n    return sum\n"}
{"task_id": "Open/1", "completion": "    minimum = arr[0]\n    frequency = 0\n    for i in range(1,n):\n        if arr[i] < minimum:\n            minimum = arr[i]\n            frequency += 1\n    return frequency\n"}
{"task_id": "Open/2", "completion": "    mask = bin(n)[2:]\n    for i in range(l, r+1) :\n        if (i & mask) == mask :\n            return \"Yes\"\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "    \n    # Initialize the dictionary to store the frequency of remainders.\n    remainders = {}\n    \n    # Iterate through the array.\n    for i in range(n) :\n        # Calculate the remainder of the current element when divided by K.\n        remainder = A[i] % K\n        \n        # Check if the remainder is present in the dictionary.\n        if remainder in remainders :\n            remainders[remainder] += 1\n        else :\n            remainders[remainder] = 1\n    \n    # Iterate through the dictionary.\n    for remainder in remainders :\n        # If K - remainder is also present in the dictionary.\n        if remainder in remainders :\n            # Add the product of their counts to the result.\n            remainders[remainder] *= remainders[remainder]\n    \n    # Return the result.\n    return remainders\n"}
{"task_id": "Open/4", "completion": "    sum = 0\n    for i in range(n) :\n        sum += a[i]\n    if sum % 2!= 0 :\n        return False\n    else :\n        left_sum = sum // 2\n        right_sum = sum % 2\n        if left_sum == right_sum :\n            return True\n        else :\n            return False\n"}
{"task_id": "Open/5", "completion": "    parity = 0\n    for i in range(8) :\n        if x & 1 << i :\n            parity ^= 1\n    return parity\n"}
{"task_id": "Open/6", "completion": "    missing_elements = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            missing_elements.append(abs(vec[i]))\n        else:\n            missing_elements.append(abs(vec[i] + 1))\n    return missing_elements\n"}
{"task_id": "Open/7", "completion": "    n = len(arr)\n    dp = [[1 for i in range(10)] for j in range(n)]\n    for i in range(n):\n        for j in range(10):\n            if arr[i][j] == '0':\n                dp[i][j] = 0\n            else:\n                dp[i][j] = 1\n    max_val = 0\n    for i in range(n):\n        for j in range(10):\n            if dp[i][j] > max_val:\n                max_val = dp[i][j]\n    return max_val\n"}
{"task_id": "Open/8", "completion": "    prime_factors = set()\n    for i in range(2, math.sqrt(a) + 1):\n        if a % i == 0:\n            prime_factors.add(i)\n    return len(prime_factors)\n"}
{"task_id": "Open/9", "completion": "    arr.sort()\n    return arr[k-1] - arr[0]\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    for i in range(len(A)) :\n        if A[i] == B[i] :\n            total_time += 1\n        else :\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range (size) :\n        if array[i] % 2 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    \n    # Initialize the dictionary to store the frequency of characters in the current substring.\n    dictionary = {}\n    \n    # Initialize the count of substrings with at most k distinct characters.\n    count = 0\n    \n    # Initialize the left pointer to the start of the current substring.\n    left = 0\n    \n    # Initialize the right pointer to the end of the current substring.\n    right = len(s) - 1\n    \n    # While the right pointer is less than the length of the string:\n    while right >= 0:\n        \n        # Add the character at the right pointer to the dictionary.\n        dictionary[s[right]] = dictionary.get(s[right], 0) + 1\n        \n        # If the number of distinct characters in the dictionary is greater than k, remove characters from the left pointer until the number of distinct characters is at most k.\n        if dictionary.get(s[right], 0) > k:\n            dictionary[s[right]] = dictionary.get(s[right], 0) - 1\n            \n        # Increment the count of substrings with at most k"}
{"task_id": "Open/13", "completion": "    current_number = 2\n    while current_number <= n :\n        if current_number % 2 == 0 :\n            return False\n        current_number = current_number + 1\n    return True\n"}
{"task_id": "Open/14", "completion": "    # Your code here\n    if n % 4 == 0:\n        return n\n    elif n % 4 == 1:\n        return 1\n    elif n % 4 == 2:\n        return n + 1\n    elif n % 4 == 3:\n        return 0\n    else:\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2, n-1)\n    b = random.randint(2, n-1)\n    for i in range(t) :\n        a = pow(a, n-1, n)\n        b = pow(b, n-1, n)\n        if a == b :\n            return 1\n    return -1\n"}
{"task_id": "Open/16", "completion": "    def isDefeat ( s1, s2, n ) :\n        for i in range(n) :\n            if s1[i] == '0' and s2[i] == '1' :\n                return True\n            elif s1[i] == '1' and s2[i] == '0' :\n                return True\n            elif s1[i] == '0' and s2[i] == 'Z' :\n                return True\n            elif s1[i] == 'Z' and s2[i] == '0' :\n                return True\n            elif s1[i] == '0' and s2[i] == 'Z' :\n                return True\n            elif s1[i] == 'Z' and s2[i] == '0' :\n                return True\n            elif s1[i] == '0' and s2[i] == 'Z' :\n                return True\n            elif s1[i] == 'Z' and s2[i] == '0' :\n                return True\n            elif s1[i"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    length = len(s)\n    for i in range(length):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n    return count\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1) :\n        if n%i == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if x == y :\n        return x\n    else :\n        return x * y\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(len(a)):\n        if a[i] % 4 == 0:\n            count0 += 1\n        elif a[i] % 4 == 1:\n            count1 += 1\n        elif a[i] % 4 == 2:\n            count2 += 1\n        elif a[i] % 4 == 3:\n            count3 += 1\n    if count0 % 2 == 0:\n        return 1\n    elif count1 % 2 == 0:\n        return 2\n    elif count2 % 2 == 0:\n        return 2\n    elif count3 % 2 == 0:\n        return 2\n    else:\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 0\n    current_len = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            current_len += 1\n        else :\n            current_len = 1\n        if current_len > max_len :\n            max_len = current_len\n    return max_len\n"}
{"task_id": "Open/23", "completion": "    if i == n:\n        if sum == 0:\n            count += 1\n        return count\n    if sum == 0:\n        return 0\n    count += 1\n    return subsetSum(arr, n, i+1, sum-arr[i], count)\n"}
{"task_id": "Open/24", "completion": "    center_hexadecagonal_num = 1\n    for i in range(2, n+1) :\n        center_hexadecagonal_num = center_hexadecagonal_num * 15 + i\n    return center_hexadecagonal_num\n"}
{"task_id": "Open/25", "completion": "    sum_of_squares = 0\n    sum_of_numbers = 0\n    total_sum = 0\n    \n    for i in range(1, n+1) :\n        sum_of_squares += i**2\n        sum_of_numbers += i\n        total_sum += sum_of_squares + sum_of_numbers\n    \n    return total_sum\n"}
{"task_id": "Open/26", "completion": "    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    \n    # Step 1\n    diff = b - a\n    \n    # Step 2\n    percent = diff / a * 100\n    \n    # Step 3\n    return percent\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        sum += i**2\n    return sum/n\n"}
{"task_id": "Open/31", "completion": "    arr = sorted(arr)\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    chicks = 1\n    for i in range(1, n) :\n        chicks *= 3\n    return chicks\n"}
{"task_id": "Open/33", "completion": "    if n == 1 :\n        return 1\n    else :\n        return findTerm(n-1) + findTerm(n-2)\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    product = 1\n    left = 0\n    for i in range(len(a)) :\n        product *= a[i]\n        if product < k :\n            product /= a[i]\n            count += 1\n        else :\n            left += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1, n+1) :\n        if d == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    \n    # Step 1\n    # Create a set of all elements in the array.\n    set_of_elements = set(arr)\n    \n    # Step 2\n    # Iterate from 1 to n+1.\n    for i in range(1, n+1):\n        # If i is not in the set, return i.\n        if i not in set_of_elements:\n            return i\n    \n    # Step 3\n    # Return n+1.\n    return n+1\n"}
{"task_id": "Open/37", "completion": "    \n    # Step 1\n    dp = [1] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    # Step 2\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    area_sum = 0\n    for i in range(1, min(l, b) + 1):\n        area_sum += i * i\n    return area_sum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    current_zeros = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            current_zeros += 1\n        else :\n            max_zeros = max(max_zeros, current_zeros)\n            current_zeros = 0\n    return max_zeros\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    # Step 1\n    # Initialize a deque 'dq' to store indices of elements of the array.\n    dq = deque()\n    # Iterate through the array from 0 to n-k.\n    for i in range(n):\n        # While 'dq' is not empty and the element at the back of 'dq' is smaller than the current element, pop the back of 'dq'.\n        while len(dq) > 0 and a[i] < a[dq[-1]]:\n            dq.pop()\n        # While 'dq' is not empty and the element at the front of 'dq' is out of the current window, pop the front of 'dq'.\n        while len(dq) > 0 and a[i] > a[dq[0]]:\n            dq.popleft()\n        # Push the current index to the back of 'dq'.\n        dq.append(i)\n    # Step 2\n    # Iterate through the array from k to n-1.\n    for i in range(k):\n        # While 'dq' is not empty and the element at the front of 'dq' is smaller than"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= array[j]\n        if product <= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    # Step 1\n    arr = sorted(arr)\n    # Step 2\n    for i in range(n):\n        arr[i] += abs(arr[i+1] - i)\n    # Step 3\n    return sum(arr)\n"}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        diff = array[i] - i\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    # Step 1\n    # Calculate the value of ax1 + by1 - c\n    a1 = (b - a) / (c - a)\n    b1 = (a1 * a1 + b - a) / (c - a)\n    # Calculate the value of ax2 + by2 - c\n    a2 = (b - a) / (c - a)\n    b2 = (a2 * a2 + b - a) / (c - a)\n    # Step 2\n    # Calculate the value of ax1 + by1 - c\n    a1 = (b - a) / (c - a)\n    b1 = (a1 * a1 + b - a) / (c - a)\n    # Calculate the value of ax2 + by2 - c\n    a2 = (b - a) / (c - a)\n    b2 = (a2 * a2 + b - a) / (c - a)\n    # Step 3\n    # If both values have the same sign, then the points are on the same side of the line.\n    if (a1 *"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a) :\n        if (a ^ i) == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_and = 0\n    for i in range(L, R+1) :\n        if (i & R) > max_and :\n            max_and = i\n    return max_and\n"}
{"task_id": "Open/50", "completion": "    smallest_factor = -1\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        gcd = a[i]\n        for j in range(i, n):\n            gcd = gcd % a[j]\n        if gcd == 0:\n            continue\n        smallest_factor = gcd\n    return smallest_factor\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    n = len(arr)\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif arr[i][j] % 2 == 0:\n                dp[i][j] = dp[i][j-1] ^ dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] ^ dp[i][j-1]\n    return dp\n"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(N) :\n        count += (1 << i)\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(n):\n        sum += a[i]\n    if sum == k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/55", "completion": "    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n & 1 == 1:\n        return True\n    return False\n"}
{"task_id": "Open/56", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            count = 0\n    return count\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2, N) :\n        result += var1 * var2\n        var1 = var2\n        var2 = var1 + var2\n    return result\n"}
{"task_id": "Open/59", "completion": "    \n    # Step 1. Create a copy of the array.\n    arrCopy = arr.copy()\n    \n    # Step 2. Iterate through the reversals.\n    for i in range(reversals) :\n        # Step 3. Return the value at the given index in the copied array.\n        arrCopy[index] = arr[index]\n        index += 1\n    \n    # Step 4. Return the value at the given index in the copied array.\n    return arrCopy[index]\n    \n    "}
{"task_id": "Open/60", "completion": "    left = 0\n    right = n\n    while left < right:\n        if left + right == n:\n            return True\n        elif left + right < n:\n            left += 1\n        else:\n            right -= 1\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            count += 1\n        else:\n            return -1\n    return count\n"}
{"task_id": "Open/62", "completion": "    if len == 0 :\n        return \"\"\n    else :\n        return str[len - 1] + tidyNum(str, len - 1)\n"}
{"task_id": "Open/63", "completion": "    sum = 0\n    for i in range(n):\n        sum += math.log(arr[i])\n    return sum / n\n"}
{"task_id": "Open/64", "completion": "    if len(s) == 0:\n        return \"-1\"\n    \n    largest = -1\n    for i in range(len(s)):\n        if s[i] == '1':\n            if i == 0 or s[i-1]!= '1':\n                largest = s[i:]\n                break\n    return largest\n"}
{"task_id": "Open/65", "completion": "    # Step 1\n    freq = {}\n    for i in range(n) :\n        freq[a[i]] = freq.get(a[i], 0) + 1\n    \n    # Step 2\n    for i in range(n) :\n        if freq[a[i]] > k :\n            freq[a[i]] = 0\n    \n    # Step 3\n    return len(a) - sum(freq.values())\n"}
{"task_id": "Open/66", "completion": "    if ( n % 2 == 0 ) :\n        return ( arr[n//2] + arr[n//2-1] ) / 2\n    else :\n        return arr[n//2]\n"}
{"task_id": "Open/67", "completion": "    step_count = 0\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    for i in range(n) :\n        if a[i] == 1 :\n            positive_count += 1\n        elif a[i] == -1 :\n            negative_count += 1\n        elif a[i] == 0 :\n            zero_count += 1\n    if positive_count % 2 == 0 :\n        step_count += positive_count\n    if negative_count % 2 == 0 :\n        step_count += negative_count\n    if zero_count % 2 == 0 :\n        step_count += zero_count\n    return step_count\n"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    else :\n        v = [0]\n        for i in range(n) :\n            v.append(v[i]*10 + i)\n        return v[n-1]\n"}
{"task_id": "Open/69", "completion": "    prev = -1\n    for i in range(n+1) :\n        if prev == -1 :\n            prev = 0\n        elif prev == 0 :\n            prev = 1\n        elif prev == 1 :\n            prev = -1\n        else :\n            return False\n    return True\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        return n + (x - n)\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(0, n):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/73", "completion": "    \n    # Step 1\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = arr.count(arr[i])\n    \n    # Step 2\n    max_freq = 0\n    for i in range(n):\n        if freq[arr[i]] > max_freq:\n            max_freq = freq[arr[i]]\n    \n    # Step 3\n    for i in range(n):\n        if freq[arr[i]] == max_freq:\n            return arr[i]\n    \n    # Step 4\n    return -1\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i]**2 == a[j]**2:\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    result = 0\n    for i in range(n) :\n        result = result ^ (1 << i)\n    return result\n"}
{"task_id": "Open/76", "completion": "    count = 0\n    for i in range(n):\n        if A[i-1] == 1:\n            A[i+1] = 0\n            count += 1\n        if A[i+1] == 1:\n            A[i] = 0\n            count += 1\n    return count\n"}
{"task_id": "Open/77", "completion": "    # Step 1. Multiply radian by 180/pi to convert it to degrees.\n    degrees = radian * 180 / pi\n    # Step 2. Return the result.\n    return degrees\n"}
{"task_id": "Open/78", "completion": "    return n // 2\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += a + (i-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 0 :\n        return 1\n    else :\n        return n * makeOdd(n//2)\n"}
{"task_id": "Open/81", "completion": "    chessboard = [[0 for x in range(8)] for y in range(8)]\n    chessboard[row][column] = 1\n    moves = moves - 1\n    queue = [(row, column)]\n    visited = []\n    while queue:\n        row, column = queue.pop(0)\n        if (row, column) not in visited:\n            visited.append((row, column))\n            if moves > 0:\n                moves = moves - 1\n                queue.append((row + 1, column))\n                queue.append((row - 1, column))\n                queue.append((row, column + 1))\n                queue.append((row, column - 1))\n            if moves > 0:\n                moves = moves - 1\n                queue.append((row - 1, column))\n                queue.append((row + 1, column))\n                queue.append((row, column - 1))\n                queue.append((row, column + 1))\n    return len(visited)\n"}
{"task_id": "Open/82", "completion": "    result = 0\n    for i in range(1, n+1) :\n        result += i\n    return result\n"}
{"task_id": "Open/83", "completion": "    s = list(s)\n    lastOcc = []\n    for i in range(len(s)):\n        lastOcc.append(s[i])\n    lastOcc.sort()\n    for i in range(len(s)):\n        s[i] = lastOcc[i]\n    return \"\".join(s)\n"}
{"task_id": "Open/84", "completion": "    \n    # Step 1\n    odd = 1\n    even = 2\n    sum = 0\n    \n    # Step 2\n    for i in range(l, r+1) :\n        if i % 2 == 0 :\n            sum += odd\n            odd += 2\n        else :\n            sum += even\n            even += 2\n    \n    # Step 3\n    for i in range(l, r+1) :\n        if i % 2 == 0 :\n            sum += odd\n            odd += 2\n        else :\n            sum += even\n            even += 2\n    \n    # Step 4\n    sum = sum + sum\n    \n    # Step 5\n    for i in range(l, r+1) :\n        sum += odd\n        odd += 2\n    \n    # Step 6\n    return sum\n"}
{"task_id": "Open/85", "completion": "    x = min(x, y)\n    y = max(x, y)\n    for i in range(2, x + 1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    \n    # Step 1\n    A = A + B\n    \n    # Step 2\n    for i in range(2, N+1):\n        A = A + B\n        \n    # Step 3\n    return A\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            count += 1\n        else:\n            if substr[1:] in str:\n                count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    # Step 1. Convert annual interest rate to monthly interest rate.\n    r = r / 12\n    \n    # Step 2. Convert loan tenure from years to months.\n    t = t / 12\n    \n    # Step 3. Calculate EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = (p * r * (1 + r) ** t) / ((1 + r) ** t - 1)\n    \n    # Step 4. Return the calculated EMI.\n    return emi\n"}
{"task_id": "Open/89", "completion": "    # Step 1\n    A = sorted(A)\n    B = sorted(B)\n    C = sorted(C)\n    \n    # Step 2\n    left = 0\n    right = len(A) - 1\n    count = 0\n    \n    # Step 3\n    while left < right:\n        if A[left] * C[right] > B[left] * B[left]:\n            count += right - left\n            right -= 1\n        else:\n            left += 1\n    \n    # Step 4\n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l, r+1) :\n        if i % 10 == 2 :\n            count += 1\n        elif i % 10 == 3 :\n            count += 1\n        elif i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] - arr[j] == arr[j] - arr[i]:\n                dp[i][j] = 2\n            else:\n                dp[i][j] = max(dp[j][i] + 1, dp[i][j])\n    return dp[n-1][n-1]\n"}
{"task_id": "Open/92", "completion": "    max_len = 0\n    start = 0\n    for i in range(len(str)):\n        if str[i].isalnum():\n            end = i\n            if end % 2 == 0:\n                start = end + 1\n            else:\n                start = end\n            if start - end + 1 > max_len:\n                max_len = start - end + 1\n    if max_len == 0:\n        return \"-1\"\n    else:\n        return max_len\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            count += 1\n        n = n / 2\n    return count\n"}
{"task_id": "Open/94", "completion": "    \n    # Step 1\n    # Initialize a string of length n with all 'a' characters.\n    string = \"a\" * n\n    \n    # Iterate through the string in reverse order.\n    for i in range(n - 1, -1, -1):\n        # Subtract the current index from k.\n        string = string[:i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i + 1] + string[i] + string[i"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += n * fuel\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    totalSum = 0\n    for i in range(0, n):\n        totalSum += arr[i]\n    \n    if totalSum == totalSum / 3:\n        return 1\n    else:\n        return 0\n"}
{"task_id": "Open/97", "completion": "    #Step 1\n    for word in sentence.split() :\n        if word == word :\n            return True\n    #Step 2\n    for word in sentence.split() :\n        if word!= word :\n            return False\n    #Step 3\n    return False\n"}
{"task_id": "Open/98", "completion": "    if n == 0 :\n        return 0\n    else :\n        return countDigit( n // 10 ) + 1\n"}
{"task_id": "Open/99", "completion": "    if k < 0 :\n        return False\n    elif k == 0 :\n        return True\n    elif a < b :\n        return canBeEqual(a, b, c, k - a)\n    elif a < c :\n        return canBeEqual(a, c, b, k - a)\n    elif b < c :\n        return canBeEqual(b, c, a, k - b)\n    else :\n        return canBeEqual(a, c, b, k - c)\n"}
{"task_id": "Open/100", "completion": "    x = x & 0xffffffff\n    y = y & 0xffffffff\n    x = x | (x << 32)\n    y = y | (y << 32)\n    while x!= y :\n        x = x & 0xffffffff\n        y = y & 0xffffffff\n    return x == y\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i]!= s[i-1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    minimum_difference = INT_MAX\n    for i in range(n-1):\n        current_difference = abs(arr[i] - arr[i+1])\n        if current_difference < minimum_difference:\n            minimum_difference = current_difference\n    return minimum_difference\n"}
{"task_id": "Open/104", "completion": "    result = 0\n    for i in range(left, right+1) :\n        if (i & 1) == 1 :\n            result = result * 2 + 1\n        else :\n            result = result * 2\n    return result\n"}
{"task_id": "Open/105", "completion": "    result = 1\n    while result <= n :\n        result = result * 2\n    return result\n"}
{"task_id": "Open/106", "completion": "    if n == 0:\n        return False\n    if n == 1:\n        return True\n    sum = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    return False\n"}
{"task_id": "Open/107", "completion": "    days = N // 100\n    N = N % 100\n    days = days * 100\n    days = days * 400\n    days = days * 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days + days % 7\n    days = days +"}
{"task_id": "Open/108", "completion": "    if a < 0:\n        return -1\n    elif a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    else:\n        return (3 * a ** 2 - a) / 2\n"}
{"task_id": "Open/109", "completion": "    count = 0\n    for i in range(n) :\n        if n % 10 == d :\n            count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/110", "completion": "    \n    # Step 1. Convert the number to a string.\n    # Step 2. Iterate through the string and check if any digit is repeated.\n    # Return True.\n    \n    # Step 3. Return True.\n    \n    # Step 1. Convert the number to a string.\n    # Step 2. Iterate through the string and check if any digit is repeated.\n    # Return False.\n    \n    # Step 2. Convert the number to a string.\n    # Step 3. Iterate through the string and check if any digit is repeated.\n    # Return False.\n    \n    # Step 1. Convert the number to a string.\n    # Step 2. Iterate through the string and check if any digit is repeated.\n    # Return False.\n    \n    # Step 2. Convert the number to a string.\n    # Step 3. Iterate through the string and check if any digit is repeated.\n    # Return False.\n    \n    # Step 1. Convert the number to a string.\n    # Step 2. Iterate through the string and check if any digit is repeated.\n    # Return False.\n    \n    # Step"}
{"task_id": "Open/111", "completion": "    # Step 1\n    # Initialize a dictionary to store the frequency of each element in the list.\n    frequency = {}\n    \n    # Iterate through the list and update the frequency of each element in the dictionary.\n    for i in a:\n        frequency[i] = frequency.get(i, 0) + 1\n    \n    # Step 2\n    # Initialize a variable to store the minimum frequency of all the elements in the list.\n    minimum = frequency.get(a[0], 0)\n    \n    # Step 3\n    # Iterate through the dictionary and find the minimum frequency.\n    for i in frequency:\n        if frequency[i] < minimum:\n            minimum = frequency[i]\n    \n    # Step 4\n    # Check if the minimum frequency is greater than 0.\n    if minimum == 0:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/112", "completion": "    n = n+1\n    for i in range(3,n+1):\n        if i%2==0:\n            n = n*10 + 4\n        else:\n            n = n*10 + 7\n    return n\n"}
{"task_id": "Open/113", "completion": "    n = n+1\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            print(3*(10**i), end=\" \")\n        else:\n            print(5*(10**i), end=\" \")\n    print()\n    return n\n"}
{"task_id": "Open/114", "completion": "    # Step 1\n    # Initialize an array of size n+1 with all elements set to 0.\n    array = [0] * (n+1)\n    # Step 2\n    # Set the first element to 1 and the second element to 2.\n    array[0] = 1\n    # Step 3\n    # Iterate through the array from index 2 to n.\n    for i in range(2, n+1):\n        # If the index is odd, calculate the element by multiplying the element at index i//2 by 10 and adding 1.\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 1\n        # If the index is even, calculate the element by multiplying the element at index (i//2)-1 by 10 and adding 2.\n        else:\n            array[i] = array[(i//2)-1] * 10 + 2\n    # Step 4\n    # Return the element at index n.\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "    sum = 0\n    for i in range(n) :\n        sum += a[i]\n    if sum % 11 == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/116", "completion": "    if l < 0 or b < 0 or h < 0:\n        return -1\n    else:\n        return l * b * h\n"}
{"task_id": "Open/117", "completion": "    result = \"\"\n    for letter in string:\n        if letter.isalpha():\n            result += letter.upper()\n        else:\n            result += letter\n    return result\n"}
{"task_id": "Open/118", "completion": "    \n    # Step 1\n    # Calculate the value of (8 * p + 1).\n    # Step 2\n    # Find the ceiling of the square root of the value obtained in step 1.\n    # Step 3\n    # Subtract 1 from the value obtained in step 2.\n    # Step 4\n    # Divide the value obtained in step 3 by 2.\n    # Step 5\n    # Return the result of step 4.\n    \n    # Step 2\n    # Calculate the value of (8 * p + 1).\n    # Step 3\n    # Find the ceiling of the square root of the value obtained in step 1.\n    # Step 4\n    # Subtract 1 from the value obtained in step 2.\n    # Step 5\n    # Divide the value obtained in step 3 by 2.\n    # Step 6\n    # Return the result of step 5.\n    \n    # Step 3\n    # Calculate the value of (8 * p + 1).\n    # Step 4\n    # Find the ceiling of the square root of the value obtained in step 1.\n    # Step 5\n    # Subtract 1 from the value obtained"}
{"task_id": "Open/119", "completion": "    \n    # Step 1. Create a set to store unique elements.\n    unique_elements = set(arr)\n    \n    # Step 2. Iterate through the array.\n    for i in range(len(arr)):\n        # If the length of the set is equal to the length of the array, return True.\n        if len(unique_elements) == len(arr):\n            return True\n        # If the length of the set is not equal to the length of the array, return False.\n        elif len(unique_elements) > len(arr):\n            return False\n        # Add the element to the set.\n        unique_elements.add(arr[i])\n    \n    # Step 3. If the length of the set is not equal to the length of the array, return False.\n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/120", "completion": "    \n    # Step 1. Initialize a set to store distinct two-character codes.\n    distinct_two_character_codes = set()\n    \n    # Step 2. Iterate through the string.\n    for i in range(len(string)):\n        # If the current character and the next character form a two-character code, add it to the set.\n        if string[i] == string[i+1]:\n            distinct_two_character_codes.add(string[i])\n            \n    # Step 3. Return the length of the set.\n    return len(distinct_two_character_codes)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    elif lower == higher :\n        return 2\n    else :\n        return lower\n"}
{"task_id": "Open/122", "completion": "    maximum = 0\n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            maximum = maximum * 10 + int(ss[i])\n        else :\n            if ss[i] == '0' :\n                maximum = maximum * 10 + 0\n            else :\n                maximum = maximum * 10 + int(ss[i])\n    return maximum\n"}
{"task_id": "Open/123", "completion": "    longest_substring = \"\"\n    current_substring = \"\"\n    start = 0\n    end = 0\n    for i in range(length):\n        if s[i] in \"0123456789\":\n            current_substring += s[i]\n        else:\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n                start = i\n            current_substring = \"\"\n    if len(current_substring) > len(longest_substring):\n        longest_substring = current_substring\n        start = i\n    return longest_substring\n"}
{"task_id": "Open/124", "completion": "    if K == 0:\n        return N * M\n    else:\n        return N * M - K\n"}
{"task_id": "Open/125", "completion": "    prev = string[0]\n    for i in range(1, length):\n        if prev!= string[i]:\n            return False\n        prev = string[i]\n    return True\n"}
{"task_id": "Open/126", "completion": "    result = 1\n    while result <= n :\n        result = result * 2\n    return result\n"}
{"task_id": "Open/127", "completion": "    # Step 1. Convert A and B to strings.\n    A = str(A)\n    B = str(B)\n    \n    # Step 2. Check if the length of both strings are equal.\n    if len(A)!= len(B):\n        return False\n    \n    # Step 3. Return True if both strings have the same number of digits.\n    return True\n"}
{"task_id": "Open/128", "completion": "    if x!= y :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/129", "completion": "    # Step 1\n    # Initialize Sn_1, Sn_2, and Sn_3 as \"1\", \"12\", and \"1213\".\n    # Iterate from 3 to n.\n    # Set Sn_3 to the concatenation of Sn_1 and Sn_2.\n    # Set Sn_2 to Sn_1.\n    # Set Sn_1 to Sn_3.\n    # Return Sn_3.\n    \n    # Step 2\n    # Initialize Sn_1, Sn_2, and Sn_3 as \"1\", \"12\", and \"1213\".\n    # Iterate from 3 to n.\n    # Set Sn_2 to Sn_1.\n    # Set Sn_1 to Sn_3.\n    # Set Sn_3 to Sn_2.\n    # Return Sn_3.\n    \n    # Step 3\n    # Initialize Sn_1, Sn_2, and Sn_3 as \"1\", \"12\", and \"1213\".\n    # Iterate from 3 to n.\n    # Set Sn_2 to Sn_1.\n    # Set Sn_1 to Sn_3."}
{"task_id": "Open/130", "completion": "    min_steps = 0\n    for i in range(1, n):\n        min_steps += abs(arr[i] - arr[i-1])\n    return min_steps\n"}
{"task_id": "Open/131", "completion": "    if n % 4 == 0:\n        return 0\n    elif n % 4 == 3:\n        return 1\n    else:\n        return 1\n"}
{"task_id": "Open/132", "completion": "    m = int(N/2)\n    sum = 0\n    for i in range(1, m+1):\n        if i % a == 0:\n            sum += i\n    ans = sum * (m * (m + 1)) / 2\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2:\n        return N\n    elif N <= 4:\n        return N + 3\n    elif (N - 4) % 4 == 0:\n        return N + 1\n    else:\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if len(arr) == 0 :\n        return False\n    if len(arr) == 1 :\n        return True\n    if len(arr) == 2 :\n        if arr[0] % 2!= 0 or arr[1] % 2!= 0 :\n            return False\n        else :\n            return True\n    if len(arr) == 3 :\n        if arr[0] % 2!= 0 or arr[1] % 2!= 0 or arr[2] % 2!= 0 :\n            return False\n        else :\n            return True\n    if len(arr) == 4 :\n        if arr[0] % 2!= 0 or arr[1] % 2!= 0 or arr[2] % 2!= 0 or arr[3] % 2!= 0 :\n            return False\n        else :\n            return True\n    else :\n        return False\n"}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return R - L + 1\n    elif N == 2 :\n        return countSum(N-1, L, R) + 1\n    else :\n        return countSum(N-2, L, R) + 1\n"}
{"task_id": "Open/136", "completion": "    \n    # Step 1\n    # Initialize a boolean array of size n+1.\n    # Iterate through the array and mark the elements as True in the boolean array.\n    # Step 2\n    # Iterate through the boolean array and find the first index that is False.\n    # Step 3\n    # Return the index as the smallest positive integer that is not present in the array.\n    \n    # Step 1\n    # Initialize a boolean array of size n+1.\n    # Iterate through the array and mark the elements as True in the boolean array.\n    # Step 2\n    # Iterate through the boolean array and find the first index that is False.\n    # Step 3\n    # Return the index as the smallest positive integer that is not present in the array.\n    \n    # Step 2\n    # Initialize a boolean array of size n+1.\n    # Iterate through the array and mark the elements as True in the boolean array.\n    # Step 3\n    # Iterate through the boolean array and find the first index that is False.\n    # Step 4\n    # Return the index as the smallest positive integer that is not present"}
{"task_id": "Open/137", "completion": "    \n    # Step 1\n    s = list(s)\n    s.sort()\n    \n    # Step 2\n    n = len(s)\n    \n    # Step 3\n    for i in range(n):\n        s[i] = int(s[i])\n    \n    # Step 4\n    s = \"\".join(str(i) for i in s)\n    \n    # Step 2\n    s = list(s)\n    s.sort()\n    \n    # Step 3\n    for i in range(n):\n        s[i] = int(s[i])\n    \n    # Step 4\n    return int(\"\".join(str(i) for i in s))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n        elif arr[i] < arr[i-1] :\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    for i in range(len(s)) :\n        sum += ord(s[i])\n    return sum/len(s)\n"}
{"task_id": "Open/140", "completion": "    total_B = B * N\n    if total_B > S :\n        return -1\n    elif total_B == S :\n        return 0\n    else :\n        num_A = (S - total_B) // A\n        if num_A > 0 :\n            return num_A\n        else :\n            return -1\n"}
{"task_id": "Open/141", "completion": "    \n    # Step 1. Find the greatest common divisor (GCD) of x and y.\n    gcd = math.gcd(x, y)\n    \n    # Step 2. LCM of x and y is x * y / gcd.\n    return x * y // gcd\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n > 0 :\n        if n & 1 :\n            count += 1\n        n >>= 1\n    return count\n"}
{"task_id": "Open/143", "completion": "    left_xor = [0] * n\n    right_xor = [0] * n\n    for i in range(n):\n        left_xor[i] = arr[i]\n    for i in range(n-1, -1, -1):\n        right_xor[i] = arr[i]\n    for i in range(n):\n        left_xor[i] = left_xor[i] ^ right_xor[i]\n    return left_xor.index(max(left_xor))\n"}
{"task_id": "Open/144", "completion": "    \n    # Step 1\n    dp = [1] * n\n    \n    # Step 2\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j] and dp[j] < dp[j] + 1:\n                dp[j] = dp[j] + 1\n    \n    # Step 3\n    return max(dp)\n"}
{"task_id": "Open/145", "completion": "    \n    # Step 1. Sort the array in ascending order.\n    arr = sorted(arr)\n    \n    # Step 2. Find the minimum element of the array.\n    minimum = arr[0]\n    \n    # Step 3. Check if it is possible to make all elements of the array equal by adding or subtracting k from each element.\n    for i in range(1, n) :\n        if arr[i] - k < minimum :\n            minimum = arr[i] - k\n    \n    # Return the minimum element of the array plus k.\n    return minimum\n"}
{"task_id": "Open/146", "completion": "    remainders = set()\n    for i in range(1, K+1):\n        remainders.add(i)\n    for i in range(1, len(remainders)):\n        if remainders[i] in remainders:\n            remainders.remove(remainders[i])\n    if len(remainders) == 0:\n        return -1\n    else:\n        return len(remainders)\n"}
{"task_id": "Open/147", "completion": "    arr.sort()\n    median = arr[len(arr)//2]\n    diff = median - arr[len(arr)//2]\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i] - diff\n    return sum\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(3, n+1):\n        sum += i\n        first = i\n        second = 3\n        while first < n:\n            sum += first\n            first += second\n            second += 1\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return (s ** 0.5)\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    # Step 1. Convert the number to binary representation.\n    binary = bin(n)\n    # Step 2. Iterate through the binary representation.\n    for i in range(len(binary) - 1) :\n        # If two consecutive 1's are found, return False.\n        if binary[i] == '1' and binary[i + 1] == '1':\n            return False\n    # Step 3. Return True.\n    return True\n"}
{"task_id": "Open/153", "completion": "    prev = 'a'\n    for i in s:\n        if i == prev:\n            return False\n        else:\n            prev = i\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high + 1) :\n        if i % 10 == k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    \n    # Step 1\n    # Find the nearest power of 2 to the input number.\n    # Step 2\n    # Calculate the absolute difference between the input number and the nearest power of 2.\n    # Step 3\n    # Return the minimum absolute difference.\n    \n    # Step 1\n    # Find the nearest power of 2 to the input number.\n    # Step 2\n    # Calculate the absolute difference between the input number and the nearest power of 2.\n    # Step 3\n    # Return the minimum absolute difference.\n    \n    # Step 1\n    # Find the nearest power of 2 to the input number.\n    # Step 2\n    # Calculate the absolute difference between the input number and the nearest power of 2.\n    # Step 3\n    # Return the minimum absolute difference.\n    \n    # Step 1\n    # Find the nearest power of 2 to the input number.\n    # Step 2\n    # Calculate the absolute difference between the input number and the nearest power of 2.\n    # Step 3\n    # Return the minimum absolute difference.\n    \n    # Step 1\n    # Find the nearest power of 2 to the input number."}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        return (3 * sqrt(3) * r**2) / 2\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    low = 0\n    high = size - 1\n    mid = (low + high) // 2\n    while low <= high:\n        if ar[mid] == mid:\n            return ar[mid] + 1\n        elif ar[mid] < mid:\n            low = mid + 1\n        else:\n            high = mid - 1\n        mid = (low + high) // 2\n    return ar[mid] + 1\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == '0' and str[i+1] == '1' and str[i+2] == '0':\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    # Step 1\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = arr.count(arr[i])\n    # Step 2\n    for i in range(n):\n        if freq[arr[i]] % 2!= 0:\n            return arr[i]\n    # Step 3\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n    ans = xorArr\n    return ans\n"}
{"task_id": "Open/162", "completion": "    # Step 1\n    if ( dx == 0 and dy == 0 ) :\n        return True\n    \n    # Step 2\n    if ( dx == 0 and dy == 1 ) :\n        return ( sx == dx and sy == dy )\n    \n    # Step 3\n    if ( dx == 1 and dy == 0 ) :\n        return ( sx == dx and sy == dy )\n    \n    # Step 4\n    if ( dx == 1 and dy == 1 ) :\n        return ( sx == dx and sy == dy )\n    \n    return False\n"}
{"task_id": "Open/163", "completion": "    if n % 2 == 0:\n        return 0\n    \n    count = 0\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count += count\n            \n    return count\n"}
{"task_id": "Open/164", "completion": "    count = 0\n    d = {}\n    for i in range(n):\n        d[arr[i]] = d.get(arr[i], 0) + 1\n    for i in range(n):\n        for j in range(i+1, n):\n            count += d.get(arr[i], 0) * d.get(arr[j], 0)\n    return count\n"}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 1\n    elif height == 1 :\n        return 2\n    else :\n        return AVLnodes(height - 1) + AVLnodes(height - 2) + 1\n"}
{"task_id": "Open/166", "completion": "    queue = [source]\n    current = source\n    steps = 0\n    while queue!= [] :\n        current = queue.pop(0)\n        if current == dest :\n            return steps\n        if current > dest :\n            return sys.maxsize\n        steps += 1\n        queue.append(current + step)\n        queue.append(current - step)\n    return steps\n"}
{"task_id": "Open/167", "completion": "    result = \"1\"\n    count = 0\n    for i in range(2, n+1):\n        if result[i-2] == result[i-1]:\n            count += 1\n        else:\n            result = result + str(count) + result[i-1]\n            count = 0\n    return result\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    current_length = 0\n    product = 1\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            product *= arr[i]\n        else:\n            current_length += 1\n        if product > 0:\n            product //= arr[i]\n        else:\n            current_length -= 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\n"}
{"task_id": "Open/169", "completion": "    m = abs(m)\n    n = abs(n)\n    \n    if m == 0 :\n        return 0\n    elif n == 0 :\n        return 0\n    else :\n        return (m * n) / (math.sqrt(m * m + n * n))\n"}
{"task_id": "Open/170", "completion": "    sum = 0\n    count = 0\n    for i in range(n):\n        sum += arr[i]\n        if sum <= k:\n            count += 1\n        else:\n            sum -= arr[i]\n            count -= 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    # Step 1\n    # Sort the array in ascending order\n    arr.sort()\n    # Iterate through the array\n    for i in range(len(arr) - 1):\n        # Find the number of pairs (j, k) such that j > i and k > j and arr[k] - arr[i] <= L\n        # Move the pointers until the difference between the two elements is greater than L\n        # The number of pairs is the difference between the two pointers.\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[j] - arr[i] <= L:\n                j += 1\n            else:\n                k -= 1\n        # Add the number of pairs to the total count\n        total_count += (j - i)\n    return total_count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r + 1) :\n        if (i % 2 == 0 and i % 3 == 0) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    # Step 1\n    mask = (1 << m) - 1\n    n = n & mask\n    # Step 2\n    n = n ^ mask\n    # Step 3\n    return n\n"}
{"task_id": "Open/174", "completion": "    # Step 1\n    if K == 9 :\n        return 0\n    \n    # Step 2\n    total = 0\n    for i in range(L, R+1) :\n        if i % 9 == 0 :\n            total += 1\n        else :\n            total += 0\n    \n    # Step 3\n    rem = total % 9\n    if rem == 0 :\n        total = 0\n    else :\n        total += rem\n    \n    # Step 4\n    total = total // 9\n    \n    # Step 5\n    for i in range(R, R+1) :\n        if i % 9 == 0 :\n            total += 1\n        else :\n            total += 0\n    \n    # Step 6\n    rem = total % 9\n    if rem == 0 :\n        total = 0\n    else :\n        total += rem\n    \n    # Step 7\n    for i in range(L, R+1) :\n        if i % 9 == 0 :\n            total += 1\n        else :\n            total += 0\n    \n    # Step 8\n    return total\n"}
{"task_id": "Open/175", "completion": "    \n    # Step 1. Calculate the product of n and log10(n).\n    product = n * math.log10(n)\n    \n    # Step 2. Convert the product to string.\n    string = str(product)\n    \n    # Step 3. Return the first k digits of the string.\n    return string[:k]\n"}
{"task_id": "Open/176", "completion": "    left = 0\n    right = len(A) - 1\n    while left < right:\n        if A[left] > A[right]:\n            right -= 1\n        else:\n            left += 1\n    return A[left]\n"}
{"task_id": "Open/177", "completion": "    if a > b :\n        if a > c :\n            return a - c\n        else :\n            return c - a\n    else :\n        if b > c :\n            return b - c\n        else :\n            return c - b\n"}
