{"task_id": "Open/0", "completion": "    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] + K > sum:\n            count += 1\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nN = len(arr)\nK = 10", "result": "failed: ", "passed": false}
{"task_id": "Open/1", "completion": "    \n    min_val = arr[0]\n    freq = 0\n    \n    for i in range(1,n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] == min_val:\n            freq += 1\n            \n    return freq\n", "result": "failed: ", "passed": false}
{"task_id": "Open/2", "completion": "    mask = ( 1 << ( r - l + 1 ) ) - 1\n    return \"Yes\" if ( n & mask ) == mask else \"No\"\n", "result": "failed: ", "passed": false}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range( n ) :\n        for j in range( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/4", "completion": "    sum = 0\n    for i in a :\n        sum += i\n    if sum % 2!= 0 :\n        return False\n    left_sum = 0\n    right_sum = sum\n    for i in a :\n        left_sum += i\n        right_sum -= i\n        if left_sum == right_sum :\n            return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/5", "completion": "    parity = 0\n    while x > 0:\n        if x % 2 == 1:\n            parity = parity ^ 1\n        x = x // 2\n    return parity\n", "result": "passed", "passed": true}
{"task_id": "Open/6", "completion": "    missing_elements = []\n    for i in vec:\n        if i < 0:\n            i = -i\n        missing_elements.append(i+1)\n    return missing_elements\n", "result": "failed: ", "passed": false}
{"task_id": "Open/7", "completion": "    dp = [[1 for _ in range(10)] for _ in range(n)]\n    for i in range(1, n) :\n        for j in range(10) :\n            if arr[i] % 10 == j :\n                dp[i][j] = dp[i-1][j] + 1\n    return max(max(row) for row in dp)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/8", "completion": "    # Step 1. Initialize a list to store the number of distinct prime factors for each integer in the list.\n    distinct_prime_factors = []\n    \n    # Step 2. Iterate through the list of integers.\n    for i in a :\n        # Initialize a set to store the prime factors of the current integer.\n        prime_factors = set()\n        \n        # Iterate through the integers from 2 to the square root of the current integer.\n        for j in range(2, int(math.sqrt(i)) + 1) :\n            # If the current integer is divisible by the current integer, add the current integer to the set of prime factors.\n            if i % j == 0 :\n                prime_factors.add(j)\n                prime_factors.add(i // j)\n        \n        # Add the length of the set of prime factors to the list of distinct prime factors.\n        distinct_prime_factors.append(len(prime_factors))\n    \n    # Step 3. Return the list of distinct prime factors.\n    return distinct_prime_factors\n", "result": "failed: ", "passed": false}
{"task_id": "Open/9", "completion": "    arr.sort()\n    kth = arr[n-k]\n    diff1 = abs(kth - arr[0])\n    diff2 = 0\n    for i in range(1,k):\n        diff2 += abs(kth - arr[i])\n    return min(diff1,diff2)\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 3", "result": "failed: ", "passed": false}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            total_time += 1\n            A.popleft()\n            B.pop()\n        else:\n            B.appendleft(A[0])\n            A.pop()\n            B.append(A[0])\n            A.pop()\n            total_time += 2\n    return total_time\n", "result": "failed: ", "passed": false}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/12", "completion": "    freq = {}\n    count = 0\n    left = 0\n    right = 0\n    while right < len(s) :\n        if s[right] not in freq :\n            freq[s[right]] = 1\n        else :\n            freq[s[right]] += 1\n        while len(freq) > k :\n            if freq[s[left]] == 1 :\n                del freq[s[left]]\n            else :\n                freq[s[left]] -= 1\n            left += 1\n        count += 1\n        right += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/13", "completion": "    current_number = 2\n    while current_number <= n:\n        if n % current_number == 0:\n            return False\n        n = n // current_number\n        current_number += 1\n    if n == 1:\n        return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/14", "completion": "    if n%4 == 0 :\n        return n\n    elif n%4 == 1 :\n        return 1\n    elif n%4 == 2 :\n        return n+1\n    elif n%4 == 3 :\n        return 0\n    else :\n        return \"\"\n", "result": "passed", "passed": true}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    for i in range(t):\n        if (pow(a,(n-1)//2,n)!=1) and (pow(a,(n-1)//2,n)!=n-1):\n            return -1\n    return 1\n", "result": "passed", "passed": true}
{"task_id": "Open/16", "completion": "    for i in range(n) :\n        if ( s1[i] == '0' and s2[i] == '1' ) or ( s1[i] == '1' and s2[i] == '0' ) or ( s1[i] == '0' and s2[i] == 'Z' ) or ( s1[i] == 'Z' and s2[i] == '0' ) :\n            return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n", "result": "passed", "passed": true}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range( len( s ) ) :\n        if i % 2 == 0 and s[ i ] == '1' :\n            count += 1\n        elif i % 2 == 1 and s[ i ] == '0' :\n            count += 1\n    return min( count, length - count )\n", "result": "passed", "passed": true}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1,n+1):\n        if math.log(i,2) == math.floor(math.log(i,2)):\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n", "result": "passed", "passed": true}
{"task_id": "Open/21", "completion": "    count0 = count1 = count2 = count3 = 0\n    for i in range(n) :\n        if a[i]%4 == 0 :\n            if a[i]%4 == 0 :\n                count0 += 1\n            elif a[i]%4 == 1 :\n                count1 += 1\n            elif a[i]%4 == 2 :\n                count2 += 1\n            elif a[i]%4 == 3 :\n                count3 += 1\n    if count0%2 == 0 and count1%2 == 0 and count2%2 == 0 and count3%2 == 0 :\n        return 1\n    else :\n        return 2\n", "result": "failed: ", "passed": false}
{"task_id": "Open/22", "completion": "    \n    max_len = 0\n    current_len = 0\n    \n    for i in range(n):\n        if arr[i] > arr[i-1]:\n            current_len += 1\n        else:\n            current_len = 1\n        max_len = max(max_len, current_len)\n    \n    return max_len\n", "result": "passed", "passed": true}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        count = subsetSum ( arr, n, i + 1, sum, count )\n        count = subsetSum ( arr, n, i + 1, sum - arr[i], count )\n        return count\n\narr = [ 3, 34, 4, 12, 5, 2 ]\nn = len(arr)\nsum = 9\ncount = 0", "result": "passed", "passed": true}
{"task_id": "Open/24", "completion": "    center_hexadecagonal_num = 1\n    for i in range(2, n+1):\n        center_hexadecagonal_num += 15\n    return center_hexadecagonal_num\n", "result": "failed: ", "passed": false}
{"task_id": "Open/25", "completion": "    sum_of_squares = 0\n    sum_of_numbers = 0\n    total_sum = 0\n    for i in range(1,n+1):\n        sum_of_squares += i**2\n        sum_of_numbers += i\n        total_sum += 1\n    return total_sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/26", "completion": "    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n", "result": "passed", "passed": true}
{"task_id": "Open/27", "completion": "    return x <= y\n", "result": "passed", "passed": true}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n", "result": "passed", "passed": true}
{"task_id": "Open/29", "completion": "    return ( b - a ) / a * 100\n", "result": "failed: ", "passed": false}
{"task_id": "Open/30", "completion": "    return sum( [ x**2 for x in range( 1, n + 1 ) ] ) / n\n", "result": "passed", "passed": true}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/32", "completion": "    return 3 ** (n-1)\n", "result": "passed", "passed": true}
{"task_id": "Open/33", "completion": "    term = 1\n    for i in range(2,n+1):\n        term = term * 2 + i - 1\n    return term\n", "result": "failed: ", "passed": false}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in range ( len ( a ) ) :\n        prod = 1\n        for j in range ( i, len ( a ) ) :\n            prod *= a [ j ]\n            if prod < k :\n                count += 1\n            else :\n                break\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1):\n        s = str(i)\n        for j in s:\n            if j == str(d):\n                count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/36", "completion": "    # Create a set of all elements in the array\n    set_arr = set( arr )\n    \n    # Iterate from 1 to n+1\n    for i in range( 1, n+1 ) :\n        # If i is not in the set, return i\n        if i not in set_arr :\n            return i\n    \n    # Return n+1\n    return n+1\n", "result": "passed", "passed": true}
{"task_id": "Open/37", "completion": "    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2,n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/38", "completion": "    area_sum = 0\n    for i in range(1, min(l, b)+1):\n        area_sum += i**2\n    return area_sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/39", "completion": "    sum = 0\n    for i in range(1,N+1):\n        sum += i\n    return sum\n", "result": "passed", "passed": true}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    current_zeros = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_zeros += 1\n        else:\n            max_zeros = max(max_zeros, current_zeros)\n            current_zeros = 0\n    return max_zeros\n\narr = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]\nn = len(arr)", "result": "failed: ", "passed": false}
{"task_id": "Open/41", "completion": "    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_length += 1\n        else:\n            current_length = 0\n        max_length = max(max_length, current_length)\n    return max_length\n", "result": "failed: ", "passed": false}
{"task_id": "Open/42", "completion": "    dq = deque()\n    for i in range(n):\n        while dq and a[dq[-1]] > a[i]:\n            dq.pop()\n        while dq and i - dq[0] >= k:\n            dq.popleft()\n        dq.append(i)\n    return a[dq[0]]\n", "result": "failed: name 'deque' is not defined", "passed": false}
{"task_id": "Open/43", "completion": "    count = 0\n    product = 1\n    for i in range(n):\n        product *= array[i]\n        if product <= k:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/44", "completion": "    arr.sort()\n    return sum(abs(i-j) for i,j in zip(arr,range(1,n+1)))\n", "result": "passed", "passed": true}
{"task_id": "Open/45", "completion": "    min_ele = min(arr)\n    return min_ele * (n - 1)\n", "result": "passed", "passed": true}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        diff = array[i] - i\n        max_diff = max(max_diff, diff)\n    return max_diff\n", "result": "failed: ", "passed": false}
{"task_id": "Open/47", "completion": "    # Step 1. Calculate the value of ax1 + by1 - c.\n    ax1by1 = a * x1 + b * y1\n    c = c\n    # Step 2. Calculate the value of ax2 + by2 - c.\n    ax2by2 = a * x2 + b * y2\n    # Step 3. If both values have the same sign, then the points are on the same side of the line.\n    if ( ax1by1 * ax2by2 ) >= 0 :\n        # Step 4. Otherwise, the points are on different sides of the line.\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a + 1):\n        if (i ^ a) == a:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/49", "completion": "    max_and = 0\n    for i in range(L,R+1):\n        max_and = max(max_and,i&R)\n    return max_and\n", "result": "failed: ", "passed": false}
{"task_id": "Open/50", "completion": "    smallest_factor = -1\n    for i in range(n) :\n        if a[i] == 0 :\n            return -1\n        if smallest_factor == -1 :\n            smallest_factor = a[i]\n        else :\n            smallest_factor = gcd(smallest_factor, a[i])\n    return smallest_factor\n", "result": "failed: name 'gcd' is not defined", "passed": false}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(n):\n        sum += 1/3**i\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/52", "completion": "    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = arr[i][j]\n            elif i == 0:\n                dp[i][j] = arr[i][j] ^ dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = arr[i][j] ^ dp[i-1][j]\n            else:\n                dp[i][j] = arr[i][j] ^ dp[i-1][j] ^ dp[i][j-1] ^ dp[i-1][j-1]\n    return dp\n", "result": "failed: ", "passed": false}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(N+1):\n        if (i^i) == i:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(n):\n        sum += a[i]\n    sum += n - 1\n    if sum == k:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/55", "completion": "    if n == 0 or n == 1:\n        return False\n    elif n & (n - 1) == 0:\n        return True\n    else:\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/56", "completion": "    count = 0\n    prev = s[0]\n    for char in s :\n        if char == prev :\n            count += 1\n        else :\n            count += 1\n            prev = char\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/57", "completion": "    return N if N % K == 0 else N - N % K\n", "result": "passed", "passed": true}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = result + var1 + var2 + (var1 * var2)/100\n    for i in range(2,N):\n        result = result + arr[i] + (result * arr[i])/100\n    return result\n", "result": "passed", "passed": true}
{"task_id": "Open/59", "completion": "    arr = arr.copy()\n    for i in range( reversals ) :\n        start = ranges[i][0]\n        end = ranges[i][1]\n        arr[start], arr[end] = arr[end], arr[start]\n    return arr[index]\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/60", "completion": "    left = 0\n    right = int(n ** 0.5)\n    while left <= right :\n        square_sum = left ** 2 + right ** 2\n        if square_sum == n :\n            return True\n        elif square_sum < n :\n            left += 1\n        else :\n            right -= 1\n    return False\n", "result": "passed", "passed": true}
{"task_id": "Open/61", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/62", "completion": "    # Initialize a variable to store the modified string.\n    modifiedStr = \"\"\n    \n    # Iterate through the string from the second-to-last character to the first character.\n    for i in range(len-1,-1,-1):\n        # If the current character is greater than the next character, subtract 1 from the current character and set all subsequent characters to 9.\n        if str[i] > str[i+1]:\n            str[i] -= 1\n            str[i+1:] = \"9\" * (len-i-1)\n            break\n        # Append the current character to the modified string.\n        modifiedStr += str[i]\n    \n    # Return the modified string.\n    return modifiedStr\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/63", "completion": "    sum = 0\n    for i in range(n):\n        sum += math.log(arr[i])\n    return math.exp(sum/n)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/64", "completion": "    largest = \"\"\n    for i in s :\n        if i == \"1\" :\n            largest = \"\"\n        else :\n            largest += i\n    return largest\n", "result": "failed: ", "passed": false}
{"task_id": "Open/65", "completion": "    freq = {}\n    for i in range(n):\n        if a[i] in freq:\n            freq[a[i]] += 1\n        else:\n            freq[a[i]] = 1\n    \n    for i in range(n):\n        if freq[a[i]] > k:\n            del freq[a[i]]\n    \n    return len(freq)", "result": "failed: ", "passed": false}
{"task_id": "Open/66", "completion": "    arr.sort()\n    size = n + k\n    if size % 2 == 0 :\n        return ( arr[ size // 2 - 1 ] + arr[ size // 2 ] ) / 2\n    else :\n        return arr[ size // 2 ]\n\narr = [ 1, 2, 3, 4, 5 ]\nn = len( arr )\nk = 3", "result": "passed", "passed": true}
{"task_id": "Open/67", "completion": "    step_count = 0\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    for i in range(n):\n        if a[i] == 1:\n            positive_count += 1\n            step_count += abs(a[i] - 1)\n        elif a[i] == -1:\n            negative_count += 1\n            step_count += abs(a[i] - -1)\n        else:\n            zero_count += 1\n    if negative_count % 2 == 0:\n        step_count += zero_count\n    else:\n        if zero_count > 0:\n            step_count += zero_count\n        else:\n            step_count += 2\n    return step_count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    else :\n        v = []\n        n -= 1\n        while n > 0 :\n            v.append( n % 5 )\n            n = n // 5\n        result = 0\n        for i in range( len( v ) - 1, -1, -1 ) :\n            result = result * 10 + v[ i ]\n        return 2 * result\n", "result": "passed", "passed": true}
{"task_id": "Open/69", "completion": "    prev = -1\n    for i in range(31,-1,-1):\n        if (n & (1<<i))!= 0:\n            if prev == -1:\n                prev = 0\n            elif prev == 0:\n                return False\n            else:\n                prev = -1\n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        quotient = n // x\n        remainder = n % x\n        if remainder == 0 :\n            return n\n        else :\n            return n + (x - remainder)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(0, n+1):\n        sum += 2\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1,n+1):\n        series_sum = 1\n        for j in range(2,n+1):\n            series_sum += 2\n        sum += series_sum\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/73", "completion": "    freq = {}\n    for i in range(n) :\n        if arr[i] in freq :\n            freq[arr[i]] += 1\n        else :\n            freq[arr[i]] = 1\n    max_freq = max(freq.values())\n    for i in range(n) :\n        if freq[arr[i]] == max_freq :\n            return arr[i]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in a :\n        if i & (i-1) == 0 :\n            if (i//2) in a :\n                count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/75", "completion": "    result = 0\n    for i in range(32):\n        if n & (1<<i):\n            result |= (1<<i)\n        else:\n            result &= ~(1<<i)\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/76", "completion": "    \n    count = 0\n    for i in range(n):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/77", "completion": "    return radian * 180/pi\n", "result": "failed: name 'pi' is not defined", "passed": false}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n", "result": "passed", "passed": true}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += a + (i-1)*d\n    return sum\n", "result": "passed", "passed": true}
{"task_id": "Open/80", "completion": "    if n % 2 == 1 :\n        return 1\n    else :\n        while n % 2 == 0 :\n            n = n / 2\n        return n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/81", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/82", "completion": "    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/83", "completion": "    # Step 1. Find the last occurrence of each character in the string and store it in a list.\n    last_occurrence = []\n    for i in range(len(s)) :\n        last_occurrence.append(s.rfind(s[i]))\n    \n    # Step 2. Sort the string.\n    s = sorted(s)\n    \n    # Step 3. Iterate through the string and compare each character with its corresponding character in the sorted string.\n    for i in range(len(s)) :\n        if s[i]!= s[last_occurrence[i]] :\n            s[i], s[last_occurrence[i]] = s[last_occurrence[i]], s[i]\n    \n    # Step 4. If a character is not in the correct position, swap it with the character at its last occurrence.\n    \n    # Step 5. Return the modified string.\n    return \"\".join(s)\n", "result": "failed: 'list' object has no attribute 'rfind'", "passed": false}
{"task_id": "Open/84", "completion": "    # Create an array of length n.\n    arr = [0] * n\n    \n    # Initialize two variables, odd and even, to 1 and 2 respectively.\n    odd = 1\n    even = 2\n    \n    # Iterate through the array.\n    for i in range(n) :\n        # If the current index is odd, assign the value of odd to the current index and increment odd by 2.\n        if i % 2 == 1 :\n            arr[i] = odd\n            odd += 2\n        # If the current index is even, assign the value of even to the current index and increment even by 2.\n        else :\n            arr[i] = even\n            even += 2\n    \n    # Initialize sum to 0.\n    sum = 0\n    \n    # Iterate from l-1 to r.\n    for i in range(l-1, r) :\n        # Add the value at the current index to sum.\n        sum += arr[i]\n    \n    # Return sum.\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/85", "completion": "    if x < y :\n        x, y = y, x\n    while x % y!= 0 :\n        x, y = y, x % y\n    return y\n", "result": "passed", "passed": true}
{"task_id": "Open/86", "completion": "    # Step 1. Initialize a list with first two numbers A and B.\n    sequence = [A, B]\n    \n    # Step 2. Iterate from 2 to N-1.\n    for i in range(2, N) :\n        # Calculate the next number by adding last two numbers in the list.\n        next_number = sequence[i-1] + sequence[i-2]\n        \n        # Append the next number to the list.\n        sequence.append(next_number)\n        \n    # Step 3. Return the Nth number from the list.\n    return sequence[N-1]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            if str[i:i+len(substr)] == substr:\n                count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/88", "completion": "    r = r / 1200\n    t = t * 12\n    emi = p * r * (1 + r)**t / ((1 + r)**t - 1)\n    return emi\n\nemi_calculator(10000, 5, 10)\n", "result": "passed", "passed": true}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range ( 1, A + 1 ) :\n        for j in range ( 1, B + 1 ) :\n            for k in range ( 1, C + 1 ) :\n                if ( i * k > j * j ) :\n                    count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1):\n        if i%10==2 or i%10==3 or i%10==9:\n            count+=1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/91", "completion": "    dp = [[2 for _ in range(n)] for _ in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            diff = arr[i] - arr[j]\n            if dp[j][diff] > 0:\n                dp[i][diff] = max(dp[i][diff], dp[j][diff] + 1)\n    return max(max(row) for row in dp)\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/92", "completion": "    max_len = 0\n    start = 0\n    end = 0\n    for i in range(len(str)) :\n        if str[i].isalnum() :\n            end += 1\n        else :\n            start = end = i + 1\n        if end - start + 1 > max_len and end - start + 1 % 2 == 0 :\n            max_len = end - start + 1\n    if max_len == 0 :\n        return \"-1\"\n    else :\n        return max_len\n", "result": "failed: ", "passed": false}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        n = n / 2\n        count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/94", "completion": "    # Initialize a string of length n with all 'a' characters.\n    string = \"a\"*n\n    # Iterate through the string in reverse order.\n    for i in range(n-1,-1,-1):\n        # Subtract the current index from k.\n        k = k - i\n        # If k is greater than or equal to 0, check if k is greater than or equal to 26.\n        if k >= 0:\n            # If it is, replace the character at the current index with 'z' and subtract 26 from k.\n            if k >= 26:\n                string[i] = 'z'\n                k = k - 26\n            # Otherwise, calculate the ASCII value of the character to be replaced by adding k to 97 and subtracting 1.\n            else:\n                string[i] = chr(k+97)\n                k = k - 1\n        # If k is less than 0, exit the loop.\n        if k < 0:\n            break\n        # Add the current index to k.\n        k = k + i\n    # Return the modified string.\n    return string\n", "result": "failed: 'str' object does not support item assignment", "passed": false}
{"task_id": "Open/95", "completion": "    total_distance = 0\n    while n > 0:\n        total_distance += fuel / n\n        n -= 1\n    return total_distance\n", "result": "passed", "passed": true}
{"task_id": "Open/96", "completion": "    totalSum = 0\n    for i in range(n):\n        totalSum += arr[i]\n    currentSum = 0\n    for i in range(n):\n        currentSum += arr[i]\n        if currentSum == totalSum/3:\n            return 1\n    return 0\n", "result": "passed", "passed": true}
{"task_id": "Open/97", "completion": "    words = sentence.split()\n    for word in words :\n        if word == word :\n            return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/98", "completion": "    return math.floor( math.log10( n ) + 1 )\n", "result": "passed", "passed": true}
{"task_id": "Open/99", "completion": "    \n    max_val = max(a, b, c)\n    min_val = min(a, b, c)\n    \n    if max_val - min_val <= k :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/100", "completion": "    return x ^ ( x << 32 ) == y\n", "result": "failed: ", "passed": false}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)):\n        if i == 0:\n            continue\n        if s[i]!= s[i-1]:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/102", "completion": "    count = 0\n    index = 0\n    while index < len(string) :\n        if string[index] == '0' :\n            index += 1\n        else :\n            index += 2\n        count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/103", "completion": "    \n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference as INT_MAX\n    min_diff = float('inf')\n    \n    # Iterate through the array from 1 to n-1\n    for i in range(1, n) :\n        # Calculate the absolute difference between current and previous element\n        diff = abs(arr[i] - arr[i-1])\n        \n        # Update minimum difference if it is less than current difference\n        if diff < min_diff :\n            min_diff = diff\n            \n    # Return minimum difference\n    return min_diff\n", "result": "failed: ", "passed": false}
{"task_id": "Open/104", "completion": "    result = 0\n    for i in range( left, right + 1 ) :\n        if i & 1 :\n            result = result * 2 + 1\n        else :\n            result = result * 2\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/105", "completion": "    result = 1\n    while result <= n :\n        result *= 2\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/106", "completion": "    sum = 0\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/107", "completion": "    # Step 1. Initialize total days to 365.\n    totalDays = 365\n    \n    # Step 2. Calculate number of centuries and leap centuries.\n    centuries = N // 100\n    leapCenturies = N // 400\n    \n    # Step 3. Calculate number of leap years.\n    leapYears = N >> 2\n    \n    # Step 4. Calculate number of non-leap years.\n    nonLeapYears = (centuries - leapCenturies) * 2\n    \n    # Step 5. Calculate total number of days.\n    totalDays = (nonLeapYears + leapYears) * 365\n    \n    # Step 6. Calculate number of odd days.\n    oddDays = totalDays % 7\n    \n    # Step 7. Return number of odd days.\n    return oddDays\n", "result": "failed: ", "passed": false}
{"task_id": "Open/108", "completion": "    if a < 0:\n        return -1\n    else:\n        return (3 * a**2 - a) / 2\n", "result": "failed: ", "passed": false}
{"task_id": "Open/109", "completion": "    count = 0\n    n = str(n)\n    for i in n:\n        if i == d:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/110", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/111", "completion": "    # Initialize a dictionary to store the frequency of each element in the list.\n    freq = {}\n    \n    # Iterate through the list and update the frequency of each element in the dictionary.\n    for i in a :\n        if i not in freq :\n            freq[i] = 1\n        else :\n            freq[i] += 1\n    \n    # Initialize a variable to store the minimum frequency of all the elements in the list.\n    min_freq = min(freq.values())\n    \n    # Iterate through the dictionary and find the minimum frequency.\n    for i in freq :\n        if freq[i] == min_freq :\n            return True\n    \n    # Check if the minimum frequency is greater than 0.\n    if min_freq > 0 :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/112", "completion": "    # Initialize an array of size n+1 with all elements set to 0.\n    array = [0]*(n+1)\n    # Set the first element of the array to 4 and the second element to 7.\n    array[0] = 4\n    array[1] = 7\n    # Iterate through the array from index 3 to n+1.\n    for i in range(3,n+1):\n        # If the current index i is odd, set the value at index i to the value at index i//2 multiplied by 10 and added to 4.\n        if i%2 == 1:\n            array[i] = array[i//2]*10 + 4\n        # If the current index i is even, set the value at index i to the value at index (i//2)-1 multiplied by 10 and added to 7.\n        else:\n            array[i] = array[i//2-1]*10 + 7\n    # Return the value at index n of the array.\n    return array[n]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/113", "completion": "    array = [0]*(n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(3, n+1):\n        if i%2 == 1:\n            array[i] = array[i//2]*10 + 3\n        else:\n            array[i] = array[i//2-1]*10 + 5\n    return array[n]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/114", "completion": "    arr = [0] * ( n + 1 )\n    arr[0] = 1\n    arr[1] = 2\n    for i in range( 2, n + 1 ) :\n        if i % 2 == 1 :\n            arr[i] = arr[i // 2] * 10 + 1\n        else :\n            arr[i] = arr[i // 2 - 1] * 10 + 2\n    return arr[n]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/115", "completion": "    sum = 0\n    for i in range(n) :\n        sum += a[i]\n        if sum % 11 == 0 :\n            return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/116", "completion": "    if l <= 0 or b <= 0 or h <= 0 :\n        return -1\n    else :\n        return l * b\n", "result": "failed: ", "passed": false}
{"task_id": "Open/117", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += char.upper()\n        else:\n            result += char\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt( 8 * p + 1 ) / 2 ) - 1\n", "result": "passed", "passed": true}
{"task_id": "Open/119", "completion": "    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/120", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n", "result": "passed", "passed": true}
{"task_id": "Open/122", "completion": "    maximum = 0\n    for character in ss :\n        if character.isdigit() :\n            maximum = maximum * 10 + int(character)\n        else :\n            maximum = max(maximum, int(character))\n    return maximum\n", "result": "failed: invalid literal for int() with base 10: 'a'", "passed": false}
{"task_id": "Open/123", "completion": "    longest_substring = \"\"\n    current_substring = \"\"\n    start = 0\n    end = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            current_substring += s[i]\n            end += 1\n        else:\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n                start = end\n            current_substring = \"\"\n            end += 1\n    if len(current_substring) > len(longest_substring):\n        longest_substring = current_substring\n    return longest_substring\n", "result": "passed", "passed": true}
{"task_id": "Open/124", "completion": "    if N > M :\n        N, M = M, N\n    while K > 0 :\n        if N == 0 or M == 0 :\n            return 0\n        elif N > M :\n            N -= M\n        else :\n            M -= N\n        K -= 1\n    return N * M\n", "result": "passed", "passed": true}
{"task_id": "Open/125", "completion": "    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/126", "completion": "    result = 1\n    while result <= n :\n        result *= 2\n    return result // 2\n", "result": "passed", "passed": true}
{"task_id": "Open/127", "completion": "    return len(str(A)) == len(str(B))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/128", "completion": "    return ( x - y )!= 1", "result": "passed", "passed": true}
{"task_id": "Open/129", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/130", "completion": "    min_steps = 0\n    for i in range(1,n):\n        min_steps += abs(arr[i] - arr[i-1])\n    return min_steps\n", "result": "failed: ", "passed": false}
{"task_id": "Open/131", "completion": "    return 0 if n % 4 == 0 or n % 4 == 3 else 1\n", "result": "passed", "passed": true}
{"task_id": "Open/132", "completion": "    m = (N - 1) // a\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n", "result": "failed: ", "passed": false}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n", "result": "passed", "passed": true}
{"task_id": "Open/134", "completion": "    \n    # Step 1. Check if the first element of the array is odd.\n    if arr[0] % 2 == 1 :\n        # Step 2. Check if the last element of the array is odd.\n        if arr[n-1] % 2 == 1 :\n            # Step 3. Check if the length of the array is odd.\n            if n % 2 == 1 :\n                # Step 4. If all three conditions are met, return True. Otherwise, return False.\n                return True\n            else :\n                return False\n        else :\n            return False\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return R - L + 1\n    elif N > 1 :\n        return countSum(N-1, L, R) + 1\n    else :\n        return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/136", "completion": "    # Initialize a boolean array of size n+1\n    arr_bool = [False] * (n+1)\n    \n    # Iterate through the array and mark the elements as True in the boolean array\n    for i in range(n):\n        arr_bool[arr[i]] = True\n    \n    # Iterate through the boolean array and find the first index that is False\n    for i in range(n+1):\n        if arr_bool[i] == False:\n            return i\n", "result": "failed: ", "passed": false}
{"task_id": "Open/137", "completion": "    \n    # Step 1. Convert string to list of characters.\n    s = list(s)\n    \n    # Step 2. Sort the list of characters in ascending order.\n    s.sort()\n    \n    # Step 3. Convert the sorted list of characters back to a string.\n    s = ''.join(s)\n    \n    # Step 4. Return the string as an integer.\n    return int(s)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1,n):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/139", "completion": "    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum/len(s)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/140", "completion": "    total_B = B * N\n    if total_B >= S :\n        return 0\n    num_A = (S - total_B) // A\n    if num_A >= 0 :\n        return num_A\n    else :\n        return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/141", "completion": "    return ( x * y ) / math.gcd ( x, y )\n", "result": "passed", "passed": true}
{"task_id": "Open/142", "completion": "    count = 0\n    while n % 2 == 0:\n        count += 1\n        n = n / 2\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/143", "completion": "    left_xor = [0] * n\n    right_xor = [0] * n\n    \n    for i in range(n):\n        left_xor[i] = arr[i]\n        for j in range(i):\n            left_xor[i] = left_xor[i] ^ arr[j]\n    \n    for i in range(n-1,-1,-1):\n        right_xor[i] = arr[i]\n        for j in range(i+1,n):\n            right_xor[i] = right_xor[i] ^ arr[j]\n    \n    max_xor = 0\n    max_index = 0\n    \n    for i in range(n):\n        xor = left_xor[i] ^ right_xor[i]\n        if xor > max_xor:\n            max_xor = xor\n            max_index = i\n    \n    return max_index\n", "result": "failed: ", "passed": false}
{"task_id": "Open/144", "completion": "    dp = [1] * n\n    for i in range(1, n) :\n        for j in range(0, i) :\n            if arr[i] < arr[j] and dp[i] < dp[j] + 1 :\n                dp[i] = dp[j] + 1\n    return max(dp)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/145", "completion": "    \n    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 2. Find the minimum element of the array.\n    min_ele = arr[0]\n    \n    # Step 3. Check if it is possible to make all elements of the array equal by adding or subtracting k from each element.\n    if ( arr[n-1] - min_ele ) % k == 0 :\n        return ( arr[n-1] - min_ele ) + k\n    else :\n        return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/146", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/147", "completion": "    arr.sort()\n    median = arr[n//2]\n    diff = [abs(i-median) for i in arr]\n    return sum(diff)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/148", "completion": "    sum = 0\n    first = 3\n    second = 3\n    for i in range(3, n+1):\n        sum += first\n        first = second\n        second = sum\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n", "result": "passed", "passed": true}
{"task_id": "Open/150", "completion": "    return ( p ** 2 + q ** 2 ) / ( p + q ) / 100\n", "result": "passed", "passed": true}
{"task_id": "Open/151", "completion": "    xor = 0\n    for i in range(len1) :\n        xor ^= ord(str1[i])\n    return xor\n", "result": "passed", "passed": true}
{"task_id": "Open/152", "completion": "    binary = bin(n)\n    binary = binary[2:]\n    for i in range(len(binary)-1):\n        if binary[i] == '1' and binary[i+1] == '1':\n            return False\n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/153", "completion": "    prev = None\n    for char in s :\n        if char in \"aeiou\" :\n            if prev is not None and prev > char :\n                return False\n            prev = char\n    return True\n", "result": "failed: 'in <string>' requires string as left operand, not int", "passed": false}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1):\n        if i % 10 >= k:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/155", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/156", "completion": "    if r < 0:\n        return -1\n    else:\n        return (3 * math.sqrt(3) * r**2) / 2\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n", "result": "passed", "passed": true}
{"task_id": "Open/158", "completion": "    low = 0\n    high = size-1\n    while low <= high :\n        mid = (low+high)//2\n        if ar[mid] == mid :\n            return mid+1\n        elif ar[mid] < mid :\n            low = mid+1\n        else :\n            high = mid-1\n    return low\n", "result": "failed: ", "passed": false}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)) :\n        if str[i] == '0' and str[i+1] == '1' and str[i+2] == '0' :\n            count += 1\n    return count\n", "result": "failed: string index out of range", "passed": false}
{"task_id": "Open/160", "completion": "    freq = {}\n    for i in range( n ) :\n        if arr[i] in freq :\n            freq[ arr[i] ] += 1\n        else :\n            freq[ arr[i] ] = 1\n    \n    for key in freq :\n        if freq[key] % 2 == 1 :\n            return key\n    return -1\n\narr = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\nn = len( arr )", "result": "failed: ", "passed": false}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n        for j in range(n):\n            if xorArr ^ arr[j] > ans:\n                ans = xorArr ^ arr[j]\n    return ans\n", "result": "failed: ", "passed": false}
{"task_id": "Open/162", "completion": "    if ( dx == sx and dy == sy ) :\n        return True\n    elif ( dx == sx and dy!= sy ) :\n        return True\n    elif ( dx!= sx and dy == sy ) :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/163", "completion": "    return 0\n", "result": "passed", "passed": true}
{"task_id": "Open/164", "completion": "    count = {}\n    for i in range(n):\n        count[arr[i]] = count.get(arr[i],0) + 1\n    return reduce(lambda x,y:x*y,count.values())\n", "result": "failed: name 'reduce' is not defined", "passed": false}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 1\n    elif height == 1 :\n        return 2\n    else :\n        return AVLnodes(height - 1) + AVLnodes(height - 2) + 1\n", "result": "passed", "passed": true}
{"task_id": "Open/166", "completion": "    queue = []\n    queue.append(source)\n    steps = 0\n    while queue:\n        current = queue.pop(0)\n        if current == dest:\n            return steps\n        queue.append(current + step)\n        queue.append(current - step)\n        steps += 1\n    return sys.maxsize\n", "result": "failed: ", "passed": false}
{"task_id": "Open/167", "completion": "    result = \"1\"\n    for i in range(2, n+1) :\n        count = 0\n        say = \"\"\n        prev = result[0]\n        for j in range(len(result)) :\n            if result[j] == prev :\n                count += 1\n            else :\n                say += str(count) + prev\n                count = 1\n                prev = result[j]\n        say += str(count) + prev\n        result = say\n    return result\n", "result": "passed", "passed": true}
{"task_id": "Open/168", "completion": "    max_length = 0\n    current_length = 0\n    product = 1\n    \n    for i in range( N ) :\n        if arr[i] >= 0 :\n            product *= arr[i]\n        else :\n            product = 1\n        \n        current_length += 1\n        \n        if current_length > max_length :\n            max_length = current_length\n    \n    return max_length\n", "result": "failed: ", "passed": false}
{"task_id": "Open/169", "completion": "    return ( abs(m) * abs(n) ) / math.sqrt( ( abs(m) * abs(m) ) + ( abs(n) * abs(n) ) )\n", "result": "passed", "passed": true}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range ( n ) :\n        curr_sum = 0\n        for j in range ( i, n ) :\n            curr_sum += arr [ j ]\n            if curr_sum < k :\n                count += 1\n    return count\n\narr = [ 1, 2, 3, 4, 5 ]\nn = len ( arr )\nk = 10", "result": "passed", "passed": true}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range( len( arr ) - 2 ) :\n        for j in range( i + 1, len( arr ) - 1 ) :\n            for k in range( j + 1, len( arr ) ) :\n                if arr[ k ] - arr[ i ] <= L :\n                    count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l,r+1):\n        if i%2==0 and i%3==0:\n            count+=1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/173", "completion": "    \n    mask = 1 << ( m - 1 )\n    \n    return n ^ mask\n", "result": "failed: ", "passed": false}
{"task_id": "Open/174", "completion": "    if K == 9 :\n        K = 0\n    count = 0\n    total = R - L + 1\n    rem = total % 9\n    for i in range( R, R - rem, -1 ) :\n        if i % 9 == K :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/175", "completion": "    product = n * math.log10(n)\n    product = str(product)\n    return product[:k]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/176", "completion": "    left = 0\n    right = n - 1\n    \n    while left < right:\n        if A[left] > A[right]:\n            right -= 1\n        else:\n            left += 1\n    \n    if left == right:\n        return A[left]\n    else:\n        return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/177", "completion": "    a = sorted(a)\n    if a[0] + a[1] >= c :\n        return 0\n    else :\n        return c - ( a[0] + a[1] )\n", "result": "failed: 'int' object is not iterable", "passed": false}
