{"task_id": "Open/0", "completion": "    \n    # Step 1\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    \n    # Step 2\n    count = 0\n    for i in range(N):\n        if arr[i] + K > sum:\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/1", "completion": "    \n    if n == 0 :\n        return 0\n    \n    minimum = arr[0]\n    frequency = 0\n    \n    for i in range(1, n) :\n        if arr[i] < minimum :\n            minimum = arr[i]\n        \n        if arr[i] == minimum :\n            frequency += 1\n    \n    return frequency\n"}
{"task_id": "Open/2", "completion": "    \n    # Step 1.\n    mask = (1 << r) - 1\n    \n    # Step 2.\n    n_mask = n & mask\n    \n    # Step 3.\n    if n_mask == mask :\n        return \"Yes\"\n    \n    # Step 4.\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    sum = 0\n    for i in a:\n        sum += i\n    if sum % 2!= 0:\n        return False\n    left_sum = 0\n    right_sum = sum\n    for i in a:\n        left_sum += i\n        right_sum -= i\n        if left_sum == right_sum:\n            return True\n    return False\n"}
{"task_id": "Open/5", "completion": "    \n    # Initialize parity as 0.\n    parity = 0\n    \n    # Iterate through bits of x.\n    for i in range(0, 32) :\n        # If bit is 1, parity = parity XOR 1.\n        if ( x & (1 << i) ) :\n            parity = parity ^ 1\n    \n    # Return parity.\n    return parity\n"}
{"task_id": "Open/6", "completion": "    missing_elements = []\n    for i in range(len(vec)):\n        vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            missing_elements.append(i+1)\n    return missing_elements\n"}
{"task_id": "Open/7", "completion": "    \n    # Step 1\n    dp = [[0 for i in range(10)] for j in range(n)]\n    \n    # Step 2\n    dp[0][arr[0]] = 1\n    \n    # Step 3\n    for i in range(1, n):\n        for j in range(10):\n            if arr[i] >= j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    \n    # Step 4\n    return max(dp[n-1])\n"}
{"task_id": "Open/8", "completion": "    \n    # Initialize a list to store the number of distinct prime factors for each integer in the list.\n    distinct_prime_factors = [0] * len(a)\n    \n    # Iterate through the list of integers.\n    for i in range(len(a)) :\n        # Initialize a set to store the prime factors of the current integer.\n        prime_factors = set()\n        \n        # Iterate through the integers from 2 to the square root of the current integer.\n        for j in range(2, int(math.sqrt(a[i])) + 1) :\n            # If the current integer is divisible by the current integer, add the current integer to the set of prime factors.\n            if a[i] % j == 0 :\n                prime_factors.add(j)\n            # Divide the current integer by the current integer.\n            a[i] = a[i] // j\n        \n        # Add the length of the set of prime factors to the list of distinct prime factors.\n        distinct_prime_factors[i] = len(prime_factors)\n    "}
{"task_id": "Open/9", "completion": "    arr.sort()\n    kthLargest = arr[k-1]\n    diff = kthLargest - arr[0]\n    for i in range(1,k):\n        diff = min(diff, kthLargest - arr[i])\n    return diff\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.appendleft(B.pop())\n            A.append(A.pop())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    \n    # Step 1\n    d = {}\n    \n    # Step 2\n    count = 0\n    \n    # Step 3\n    left = 0\n    right = 0\n    \n    # Step 4\n    while right < len(s) :\n        \n        # Step 5\n        if s[right] not in d :\n            d[s[right]] = 1\n        else :\n            d[s[right]] += 1\n        \n        if len(d) > k :\n            \n            # Step 6\n            while len(d) > k :\n                \n                # Step 7\n                d[s[left]] -= 1\n                if d[s[left]] == 0 :\n                    del d[s[left]]\n                \n                # Step 8\n                left += 1\n        \n        # Step 9\n        count += len(d)\n        \n        # Step 10\n        right += 1\n    \n    # Step 11\n    return count\n"}
{"task_id": "Open/13", "completion": "    current_number = 2\n    while current_number <= n:\n        if n % current_number == 0:\n            return False\n        current_number *= 2\n    return True\n"}
{"task_id": "Open/14", "completion": "    \n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    \n    for i in range(t) :\n        a = random.randint(2, n-1)\n        if pow(a, (n-1)/2, n)!= 1 and pow(a, (n-1)/2, n)!= n-1 :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "Write a function that takes two strings, s1 and s2, and an integer i.\n        The function returns True if s1[i] and s2[i] satisfy any of the defeat conditions.\n        A defeat condition is defined as follows: if at any index i, s1[i] is '0' and s2[i] is '1', or s1[i] is '1' and s2[i] is '0', or s1[i] is '0' and s2[i] is 'Z', or s1[i] is 'Z' and s2[i] is '0', then the function returns True.\n        \"\"\"\n        if s1[i] == '0' and s2[i] == '1' :\n            return True\n        elif s1[i] == '1' and s2[i] == '0' :\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            return True\n        elif s1"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(length) :\n        if i % 2 == 0 :\n            if s[i] == '0' :\n                count += 1\n        else :\n            if s[i] == '1' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1):\n        if isPowerNumber(i):\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n):\n        if a[i] % 4 == 0:\n            count0 += 1\n        elif a[i] % 4 == 1:\n            count1 += 1\n        elif a[i] % 4 == 2:\n            count2 += 1\n        elif a[i] % 4 == 3:\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n:\n        return 1\n    else:\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 0\n    current_len = 0\n    for i in range(n):\n        if arr[i] > arr[i-1]:\n            current_len += 1\n        else:\n            current_len = 1\n        max_len = max(max_len, current_len)\n    return max_len\n"}
{"task_id": "Open/23", "completion": "    if i == len(arr) :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        return subsetSum(arr, n, i+1, sum - arr[i], count) + subsetSum(arr, n, i+1, sum, count)\n"}
{"task_id": "Open/24", "completion": "    \n    center_hexadecagonal_num = 1\n    for i in range(2, n+1) :\n        center_hexadecagonal_num += 15\n    return center_hexadecagonal_num\n"}
{"task_id": "Open/25", "completion": "    \n    sum_of_squares = 0\n    sum_of_numbers = 0\n    total_sum = 0\n    \n    for i in range(1, n+1) :\n        sum_of_squares += i**2\n        sum_of_numbers += i\n    total_sum = sum_of_numbers + sum_of_squares + 1\n    \n    return total_sum\n"}
{"task_id": "Open/26", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            sum += i\n    return sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    \n    return (b - a) / a * 100\n"}
{"task_id": "Open/30", "completion": "    return sum(i*i for i in range(1,n+1))/n\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "    term = 1\n    for i in range(2, n+1):\n        term *= 2\n        term += (i - 1)\n    return term\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    product = 1\n    left = 0\n    for i in range(len(a)):\n        product *= a[i]\n        while product >= k:\n            product /= a[left]\n            left += 1\n        count += i - left + 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1, n+1):\n        num = str(i)\n        for j in num:\n            if j == d:\n                count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    \n    # Step 1.\n    arrSet = set(arr)\n    \n    # Step 2.\n    for i in range(1, n+1):\n        if i not in arrSet:\n            return i\n    \n    # Step 3.\n    return n+1\n"}
{"task_id": "Open/37", "completion": "    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    area_sum = 0\n    for i in range(1, min(l, b) + 1) :\n        area_sum += i * i\n    return area_sum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(N+1))\n"}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    current_zeros = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_zeros += 1\n        elif arr[i] == 1:\n            max_zeros = max(max_zeros, current_zeros)\n            current_zeros = 0\n    return max_zeros\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_length += 1\n        else:\n            current_length = 0\n        max_length = max(max_length, current_length)\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    \n    dq = deque()\n    ans = a[0]\n    for i in range(n-k+1):\n        while dq and a[i] < a[dq[-1]]:\n            dq.pop()\n        while dq and i-dq[0] >= k:\n            dq.popleft()\n        dq.append(i)\n        ans = max(ans, a[dq[0]])\n    return ans\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    product = 1\n    for i in range(n):\n        product *= array[i]\n        if product <= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    \n    # Sort the array\n    arr.sort()\n    \n    # Iterate through the sorted array\n    sum = 0\n    for i in range(n) :\n        sum += abs(arr[i] - (i + 1))\n    \n    return sum\n"}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        diff = array[i] - i\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    # Your code here\n    return ( (a * x1 + b * y1) - c ) * (a * x2 + b * y2) > 0\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a+1) :\n        xor = i ^ a\n        if xor == a :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_and = 0\n    for i in range(L,R+1) :\n        if i & R > max_and :\n            max_and = i & R\n    return max_and\n"}
{"task_id": "Open/50", "completion": "    smallest_factor = -1\n    for i in range(n):\n        if a[i] == 0:\n            return -1\n        smallest_factor = gcd(smallest_factor, a[i])\n    return smallest_factor\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(0, n) :\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    \n    # Step 1\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Step 2\n    for i in range(n):\n        for j in range(n):\n            # Calculate the XOR of all elements in the submatrices of size (i+1) x (j+1) where i and j range from 0 to n-1\n            dp[i+1][j+1] = arr[i][j] ^ (arr[i][j] * arr[n-1][n-1])\n            \n            # If the product of `arr[i][j]` and `arr[n][n]` is odd, then add the XOR of all elements in the submatrices of size (i+1) x (j+1) where i and j range from 0 to n-1 to the `dp` array.\n            if (arr[i][j] * arr[n-1][n-1]) % 2 == 1:\n                dp[i+1][j+1] += arr[i][j] ^ (arr[i"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(N+1) :\n        if i & i == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum == k or sum == k - 1\n"}
{"task_id": "Open/55", "completion": "    if n == 0 or n == 1 :\n        return False\n    if n & (n - 1) == 0 :\n        return True\n    return False\n"}
{"task_id": "Open/56", "completion": "    count = 0\n    for i in range(len(s)) :\n        if i == 0 :\n            count += 1\n        elif s[i] == s[i-1] :\n            count += 1\n        else :\n            count += 1\n    return count\n"}
{"task_id": "Open/57", "completion": "    return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2, N):\n        result = result + var1 + var2\n        var1 = var1 * 10\n        var2 = var2 * 10\n    return result\n"}
{"task_id": "Open/59", "completion": "    arr = arr[:]\n    for i in range(reversals) :\n        for j in range(len(ranges)) :\n            arr[ranges[j][0]:ranges[j][1]+1] = arr[ranges[j][0]:ranges[j][1]+1][::-1]\n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "    left = 0\n    right = int(n**0.5)\n    while left <= right:\n        left_sq = left * left\n        right_sq = right * right\n        if left_sq + right_sq == n:\n            return True\n        elif left_sq + right_sq < n:\n            left += 1\n        else:\n            right -= 1\n    return False\n"}
{"task_id": "Open/61", "completion": "    if a in b :\n        return b.count(a)\n    else :\n        return -1\n"}
{"task_id": "Open/62", "completion": "    \n    # Initialize a variable to store the modified string.\n    modifiedString = \"\"\n    \n    # Iterate through the string from the second-to-last character to the first character.\n    for i in range( len - 2, -1, -1 ) :\n        \n        # If the current character is greater than the next character, subtract 1 from the current character and set all subsequent characters to 9.\n        if str[i] > str[i + 1] :\n            modifiedString = modifiedString + str[i] - 1\n        \n        # Append the current character to the modified string.\n        else :\n            modifiedString = modifiedString + str[i]\n    \n    # Return the modified string.\n    return modifiedString\n"}
{"task_id": "Open/63", "completion": "    \n    sum = 0\n    for i in range(n):\n        sum += math.log(arr[i])\n    \n    return math.exp(sum/n)\n"}
{"task_id": "Open/64", "completion": "    \n    # Initialize a variable to store the largest substring.\n    largestSubStr = \"\"\n    \n    # Iterate through the string.\n    for i in range(len(s)) :\n        # If the current character is not '1', add it to the largest substring.\n        if s[i]!= '1' :\n            largestSubStr += s[i]\n        # If the current character is '1', reset the largest substring.\n        else :\n            largestSubStr = \"\"\n    \n    # Return the largest substring.\n    return largestSubStr\n"}
{"task_id": "Open/65", "completion": "    \n    # Step 1. Create a dictionary to store the frequency of each element in the array.\n    d = {}\n    for i in range(n) :\n        if a[i] in d :\n            d[a[i]] += 1\n        else :\n            d[a[i]] = 1\n    \n    # Step 2. Iterate through the dictionary and remove the elements whose frequency is greater than k.\n    for i in d :\n        if d[i] > k :\n            d[i] -= 1\n    \n    # Step 3. Return the length of the modified array.\n    return n - len(d)\n"}
{"task_id": "Open/66", "completion": "    \n    # Step 1. Calculate the size of the array after adding k elements.\n    size = len(arr) + k\n    \n    # Step 2. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 3. If the size is even, calculate the median by taking the average of the two middle elements.\n    if size % 2 == 0 :\n        median = (arr[size/2-1] + arr[size/2]) / 2\n    \n    # Step 4. If the size is odd, return the middle element as the median.\n    else :\n        median = arr[size/2]\n    \n    return median\n"}
{"task_id": "Open/67", "completion": "    stepCount = 0\n    posCount = 0\n    negCount = 0\n    zeroCount = 0\n    for i in range(n):\n        if a[i] > 0:\n            posCount += 1\n            stepCount += abs(a[i] - 1)\n        elif a[i] < 0:\n            negCount += 1\n            stepCount += abs(a[i] - -1)\n        else:\n            zeroCount += 1\n    if negCount % 2 == 0:\n        stepCount += zeroCount\n    else:\n        if zeroCount > 0:\n            stepCount += zeroCount + 2\n        else:\n            stepCount += 2\n    return stepCount\n"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)) :\n        result = result * 10 + v[len(v) - i - 1]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "    n = abs ( n )\n    if n == 0 :\n        return True\n    if n == 1 :\n        return False\n    if n & 1 == 0 :\n        return False\n    while n > 1 :\n        if n & 1 == 1 :\n            return False\n        n = n >> 1\n    return True\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        return n + (x - (n % x))\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1):\n        series_sum = 1\n        for j in range(2, i+1):\n            series_sum += 2\n        sum += series_sum\n    return sum\n"}
{"task_id": "Open/73", "completion": "    \n    # Step 1\n    dic = {}\n    for i in range(n):\n        if arr[i] in dic:\n            dic[arr[i]] += 1\n        else:\n            dic[arr[i]] = 1\n    \n    # Step 2\n    for i in range(n):\n        dic[arr[i]] -= 1\n    \n    # Step 3\n    max_freq = 0\n    for i in dic:\n        if dic[i] > max_freq:\n            max_freq = dic[i]\n    \n    # Step 4\n    for i in range(n):\n        if dic[arr[i]] == max_freq:\n            return arr[i]\n    \n    "}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n):\n        if (a[i] & (a[i] - 1)) == 0:\n            if (a[i] >> 1) in a:\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    return int( ''.join( [ str( 1 - int( i ) ) for i in bin( n )[ 2 : ] ] ), 2 )\n"}
{"task_id": "Open/76", "completion": "    count = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/77", "completion": "    return radian * 180/pi\n"}
{"task_id": "Open/78", "completion": "    return n // 2\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += a + (i-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 0 :\n        return n\n    else :\n        return 1\n"}
{"task_id": "Open/81", "completion": "    \n    # Initialize a 2D array to represent the chessboard, with all values initially set to 0.\n    chessboard = [[0 for i in range(8)] for j in range(8)]\n    \n    # Mark the starting position as visited by setting `chessboard[row][column]` to 1.\n    chessboard[row][column] = 1\n    \n    # Create a queue to store the positions that need to be explored.\n    queue = []\n    \n    # Add the starting position to the queue.\n    queue.append((row, column))\n    \n    # While the queue is not empty:\n    while len(queue) > 0:\n        \n        # Dequeue the first position from the queue.\n        (row, column) = queue.pop(0)\n        \n        # For each of the four directions (up, down, left, right):\n        for direction in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            \n            # Calculate the new position by adding or subtracting `moves` from the current position.\n            new_row"}
{"task_id": "Open/82", "completion": "    result = 0\n    for i in range(1, n+1):\n        result = result + i\n    return result\n"}
{"task_id": "Open/83", "completion": "    \n    # Step 1.\n    last_occurrence = []\n    for i in range(len(s)) :\n        last_occurrence.append(s.rfind(s[i]))\n    \n    # Step 2.\n    sorted_string = sorted(s)\n    \n    # Step 3.\n    for i in range(len(s)) :\n        if last_occurrence[i]!= i :\n            s = s[:last_occurrence[i]] + s[i] + s[last_occurrence[i]+1:]\n    \n    # Step 4.\n    return s\n"}
{"task_id": "Open/84", "completion": "    arr = [ i for i in range(1, n+1) if i % 2 == 1 ]\n    arr += [ i for i in range(1, n+1) if i % 2 == 0 ]\n    return sum(arr[l-1:r])\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range(1, smaller + 1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    \n    # Initialize a list with first two numbers A and B.\n    lst = [A,B]\n    \n    # Iterate from 2 to N-1.\n    for i in range(2,N):\n        lst.append(lst[i-1] + lst[i-2])\n    \n    # Return the Nth number from the list.\n    return lst[N-1]\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            if str[i:i+len(substr)] == substr:\n                count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    \n    # Convert annual interest rate to monthly interest rate.\n    r = r / 100\n    \n    # Convert loan tenure from years to months.\n    t = t * 12\n    \n    # Calculate EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    \n    # Return the calculated EMI.\n    return emi\n"}
{"task_id": "Open/89", "completion": "    \n    A.sort()\n    B.sort()\n    C.sort()\n    \n    count = 0\n    \n    left = 0\n    right = len(A) - 1\n    \n    while left < right:\n        if A[left] * C[right] > B[left] * B[left]:\n            count += right - left\n            right -= 1\n        else:\n            left += 1\n    \n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    \n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 2\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff in dp[i]:\n                dp[j][diff] = dp[i][diff] + 1\n            else:\n                dp[j][diff] = 2\n    \n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, max(dp[i]))\n    \n    return max_length\n"}
{"task_id": "Open/92", "completion": "    max_len = 0\n    start = 0\n    end = 0\n    for i in range(len(str)):\n        if str[i].isalnum():\n            end += 1\n        else:\n            start = i + 1\n            end = i + 1\n        if end - start + 1 > max_len and (end - start + 1) % 2 == 0:\n            max_len = end - start + 1\n    if max_len == 0:\n        return \"-1\"\n    else:\n        return max_len\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        n = n / 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    \n    # Initialize a string of length n with all 'a' characters.\n    # Step 1.\n    s = 'a' * n\n    # Step 2.\n    for i in range(n-1, -1, -1) :\n        # Step 3.\n        k = k - 1\n        # Step 4.\n        if k >= 0 :\n            if k >= 26 :\n                s[i] = 'z'\n                k = k - 26\n            else :\n                s[i] = chr(97 + k)\n                k = k - k\n        # Step 5.\n        if k < 0 :\n            break\n        # Step 6.\n        k = k + 1\n    # Step 7.\n    return s\n"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    totalSum = 0\n    for i in range(n):\n        totalSum += arr[i]\n    currentSum = 0\n    for i in range(n):\n        currentSum += arr[i]\n        if currentSum == totalSum/3:\n            return 1\n    return 0\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    count = 0\n    while n > 0 :\n        n = n / 10\n        count = count + 1\n    return count\n"}
{"task_id": "Open/99", "completion": "    \n    max_a = max(a, b, c)\n    min_a = min(a, b, c)\n    \n    if max_a - min_a <= k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/100", "completion": "    \n    # Step 1\n    x = x << 32\n    \n    # Step 2\n    if x | y == y :\n        return True\n    \n    # Step 3\n    x = x >> 1\n    \n    # Step 4\n    while x | y!= y :\n        if x | y == y :\n            return True\n        x = x >> 1\n    \n    # Step 5\n    return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    arr.sort()\n    min_diff = INT_MAX\n    for i in range(1, n):\n        min_diff = min(min_diff, abs(arr[i] - arr[i-1]))\n    return min_diff\n"}
{"task_id": "Open/104", "completion": "    result = 0\n    for i in range(left, right + 1) :\n        if i & (i - 1) == 0 :\n            result = result * 2 + 1\n        else :\n            result = result * 2\n    return result\n"}
{"task_id": "Open/105", "completion": "    result = 1\n    while result <= n :\n        result *= 2\n    return result\n"}
{"task_id": "Open/106", "completion": "    if n < 0 :\n        return False\n    if n == 0 :\n        return False\n    divisors = []\n    for i in range(1, n) :\n        if n % i == 0 :\n            divisors.append(i)\n    return sum(divisors) == n\n"}
{"task_id": "Open/107", "completion": "    totalDays = 365\n    centuries = int(N/100)\n    leapCenturies = int(N/400)\n    leapYears = int(N/4)\n    nonLeapYears = totalDays - (leapYears*2)\n    oddDays = nonLeapYears % 7\n    return oddDays\n"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return (3 * a * a - a) / 2\n"}
{"task_id": "Open/109", "completion": "    count = 0\n    n = str(n)\n    for i in n:\n        if i == d:\n            count += 1\n    return count\n"}
{"task_id": "Open/110", "completion": "    return len(str(n)) == len(set(str(n)))\n"}
{"task_id": "Open/111", "completion": "    if a == []:\n        return True\n    else:\n        if a[0] % 5 == 0:\n            return canMakeEqual(a[1:], n)\n        elif a[0] % 3 == 0:\n            return canMakeEqual(a[1:], n)\n        else:\n            return False\n"}
{"task_id": "Open/112", "completion": "    \n    # Initialize an array of size n+1 with all elements set to 0.\n    array = [0] * (n+1)\n    \n    # Set the first element of the array to 4 and the second element to 7.\n    array[0] = 4\n    array[1] = 7\n    \n    # Iterate through the array from index 3 to n+1.\n    for i in range(3, n+1):\n        # If the current index i is odd, set the value at index i to the value at index i//2 multiplied by 10 and added to 4.\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 4\n        # If the current index i is even, set the value at index i to the value at index (i//2)-1 multiplied by 10 and added to 7.\n        else:\n            array[i] = array[i//2 - 1] * 10 + 7\n    \n    # Return the value at index n of the array.\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "Write a function that takes an integer n and returns the nth element of an array.\n        The array is initialized with 0s and has a length of n+1.\n        The first element is set to 3 and the second element is set to 5.\n        For each index i from 3 to n+1, if i is odd, the element at index i is set to the element at index i//2 multiplied by 10 and added with 3.\n        If i is even, the element at index i is set to the element at index (i//2)-1 multiplied by 10 and added with 5.\n        Finally, the function returns the element at index n.\n        \n        How to solve:\n        Step 1. Initialize an array of size n+1 with all elements set to 0.\n        Step 2. Set the first element to 3 and the second element to 5.\n        Step 3. Iterate through the array from index 3 to n+1.\n            - If the current index is odd, set the element at the current index to the element at index current_index//2 multiplied by 10 and added with 3."}
{"task_id": "Open/114", "completion": "Write a function that takes an integer n and returns the nth element of an array.\n        The array is initialized with 0s and has a length of n+1.\n        The first element is set to 1 and the second element is set to 2.\n        For each subsequent element, if the index is odd, the element is calculated by multiplying the element at index i//2 by 10 and adding 1.\n        If the index is even, the element is calculated by multiplying the element at index (i//2)-1 by 10 and adding 2.\n        The function returns the element at index n.\n        \n        How to solve:\n        Step 1. Initialize an array of size n+1 with all elements set to 0.\n        Step 2. Set the first element to 1 and the second element to 2.\n        Step 3. Iterate through the array from index 2 to n.\n            - If the index is odd, calculate the element by multiplying the element at index i//2 by 10 and adding 1.\n            - If the index is even, calculate the element by multiplying the element at index"}
{"task_id": "Open/115", "completion": "    \n    sum = 0\n    for i in range(n):\n        sum += a[i]\n        if sum % 11 == 0:\n            return True\n    return False\n"}
{"task_id": "Open/116", "completion": "    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return l * b\n"}
{"task_id": "Open/117", "completion": "    return \"\".join( [ word[0].upper() + word[1:-1] + word[-1].upper() for word in string.split() ] )\n"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "    return len(arr) == len(set(arr))\n"}
{"task_id": "Open/120", "completion": "    \n    # Initialize a set to store distinct two-character codes.\n    distinct_codes = set()\n    \n    # Iterate through the string.\n    for i in range(len(string)-1) :\n        \n        # If the current character and the next character form a two-character code, add it to the set.\n        if string[i] + string[i+1] in distinct_codes :\n            distinct_codes.add(string[i] + string[i+1])\n    \n    # Return the length of the set.\n    return len(distinct_codes)\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    maximum = 0\n    for c in ss:\n        if c.isdigit():\n            maximum = maximum * 10 + int(c)\n        else:\n            if maximum > maximum:\n                maximum = maximum\n            else:\n                maximum = maximum * 10\n    return maximum\n"}
{"task_id": "Open/123", "completion": "    longest_substring = \"\"\n    current_substring = \"\"\n    start = 0\n    end = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            current_substring += s[i]\n            end += 1\n        else:\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n                start = end\n            current_substring = \"\"\n            end = i\n    if len(current_substring) > len(longest_substring):\n        longest_substring = current_substring\n    return longest_substring\n"}
{"task_id": "Open/124", "completion": "    \n    N, M, K = int(N), int(M), int(K)\n    \n    while K > 0 and N > 0 and M > 0:\n        if N < M:\n            N -= M\n            K -= 1\n        else:\n            M -= N\n            K -= 1\n    \n    if N > 0 and M > 0:\n        return N * M\n    else:\n        return 0\n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    result = 1\n    while result <= n :\n        result *= 2\n    return result / 2\n"}
{"task_id": "Open/127", "completion": "    \n    return len(str(A)) == len(str(B))\n"}
{"task_id": "Open/128", "completion": "    if x - y!= 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "    Sn_1, Sn_2, Sn_3 = \"1\", \"12\", \"1213\"\n    for i in range(3, n+1) :\n        Sn_3 = Sn_1 + Sn_2 + Sn_3\n        Sn_2 = Sn_1\n        Sn_1 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    min_steps = 0\n    for i in range(1, n):\n        min_steps += abs(arr[i] - arr[i-1])\n    return min_steps\n"}
{"task_id": "Open/131", "completion": "    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/132", "completion": "    m = N / a\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    \n    if arr[0] % 2!= 0 :\n        return False\n    \n    if arr[-1] % 2!= 0 :\n        return False\n    \n    if len(arr) % 2!= 0 :\n        return False\n    \n    return True\n"}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return R - L + 1\n    elif N > 1 :\n        return countSum(N-1, L, R) + 1\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "    \n    # Initialize a boolean array of size n+1\n    boolean_arr = [False] * (n+1)\n    \n    # Iterate through the array and mark the elements as True in the boolean array\n    for i in range(n):\n        boolean_arr[arr[i]] = True\n    \n    # Iterate through the boolean array and find the first index that is False\n    for i in range(n+1):\n        if boolean_arr[i] == False:\n            return i\n    \n    # Return the index as the smallest positive integer that is not present in the array\n    return n+1\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1. Convert string to list of characters.\n    s = list(s)\n    \n    # Step 2. Sort the list of characters in ascending order.\n    s.sort()\n    \n    # Step 3. Convert the sorted list of characters back to a string.\n    s = ''.join(s)\n    \n    # Step 4. Return the string as an integer.\n    return int(s)\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    for i in s :\n        sum += ord(i)\n    return sum/len(s)\n"}
{"task_id": "Open/140", "completion": "    if ( A * N ) >= S :\n        return 0\n    elif ( A * N ) < S :\n        return -1\n"}
{"task_id": "Open/141", "completion": "    return x * y / math.gcd(x, y)\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n > 0:\n        n = n / 2\n        if n == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/143", "completion": "    left_xor = [0] * n\n    right_xor = [0] * n\n    \n    for i in range(n):\n        left_xor[i] = arr[i]\n        for j in range(i):\n            left_xor[i] ^= arr[j]\n    \n    for i in range(n-1, -1, -1):\n        right_xor[i] = arr[i]\n        for j in range(i+1, n):\n            right_xor[i] ^= arr[j]\n    \n    max_xor = 0\n    max_index = 0\n    for i in range(n):\n        xor = left_xor[i] ^ right_xor[i]\n        if xor > max_xor:\n            max_xor = xor\n            max_index = i\n    \n    return max_index\n"}
{"task_id": "Open/144", "completion": "    \n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    \n    return max(dp)\n"}
{"task_id": "Open/145", "completion": "    arr.sort()\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] - min_val < k:\n            return -1\n        else:\n            min_val = arr[i]\n    return min_val + k\n"}
{"task_id": "Open/146", "completion": "    \n    remainders = set()\n    remainder = 0\n    \n    while remainder not in remainders:\n        remainders.add(remainder)\n        remainder = remainder * 10 % K\n        \n    if remainder == 0:\n        return -1\n    \n    return len(remainders)\n"}
{"task_id": "Open/147", "completion": "    \n    arr.sort()\n    median = arr[n//2]\n    \n    diff = 0\n    for i in range(n):\n        diff += abs(arr[i] - median)\n    \n    return diff\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    first = 3\n    second = 5\n    for i in range ( 3, n + 1 ) :\n        sum = first + second\n        first = second\n        second = sum\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    \n    # Convert the number to binary representation\n    binary = bin(n)\n    \n    # Iterate through the binary representation\n    for i in range(2, len(binary)) :\n        if binary[i] == '1' and binary[i-1] == '1' :\n            return False\n    \n    return True\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)-1) :\n        if s[i] in vowels and s[i+1] in vowels :\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    \n    # Step 1. Find the nearest power of 2 to the input number.\n    power = 1\n    while ( power < n ) :\n        power *= 2\n    \n    # Step 2. Calculate the absolute difference between the input number and the nearest power of 2.\n    diff = abs( n - power )\n    \n    # Step 3. Return the minimum absolute difference.\n    return min( diff, power - diff )\n"}
{"task_id": "Open/156", "completion": "    \n    if r < 0 :\n        return -1\n    else :\n        return (3 * math.sqrt(3) * r**2) / 2\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    low = 0\n    high = size-1\n    while low <= high :\n        mid = (low + high) / 2\n        if ar[mid] == mid :\n            return mid + 1\n        elif ar[mid] < mid :\n            low = mid + 1\n        else :\n            high = mid - 1\n    return low + 1\n"}
{"task_id": "Open/159", "completion": "    return str.count(\"010\")\n"}
{"task_id": "Open/160", "completion": "    \n    # Initialize a dictionary to store the frequency of each element.\n    frequency = {}\n    \n    # Iterate through the array and update the frequency of each element in the dictionary.\n    for i in range(n):\n        if arr[i] in frequency:\n            frequency[arr[i]] += 1\n        else:\n            frequency[arr[i]] = 1\n    \n    # Iterate through the dictionary and find the first element with an odd frequency.\n    for key, value in frequency.items():\n        if value % 2!= 0:\n            return key\n    \n    # Return the element found in Step 3.\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if ( sx + dx ) == ( sy + dy ) or ( sx - dx ) == ( sy - dy ) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/163", "completion": "    if n % 2 == 1 :\n        return 0\n    else :\n        count = 0\n        for i in range(2, n, 2) :\n            if i % 4 == 0 :\n                count += 1\n        return count\n"}
{"task_id": "Open/164", "completion": "    \n    # Initialize the dictionary\n    d = {}\n    \n    # Iterate through the array and add each element to the dictionary\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    \n    # Calculate the count of all possible subsequences by multiplying the values of the dictionary\n    count = 1\n    for i in d:\n        count *= d[i]\n    \n    return count\n"}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 1\n    elif height == 1 :\n        return 2\n    else :\n        return AVLnodes(height - 1) + AVLnodes(height - 2) + 1\n"}
{"task_id": "Open/166", "completion": "    queue = [source]\n    steps = 0\n    while queue :\n        current = queue.pop(0)\n        if current == dest :\n            return steps\n        queue.append(current + step)\n        queue.append(current - step)\n        steps += 1\n    return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "    \n    result = \"1\"\n    for i in range(2, n+1):\n        count = 0\n        say = \"\"\n        for j in range(len(result)):\n            if result[j] == result[j-1]:\n                count += 1\n            else:\n                say += str(count)\n                say += result[j-1]\n                count = 1\n        say += str(count)\n        result = say\n    return result\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    current_length = 0\n    product = 1\n    for i in range(N):\n        if arr[i] >= 0:\n            product *= arr[i]\n        else:\n            product = 1\n        if product >= 0:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n    if current_length > max_length:\n        max_length = current_length\n    return max_length\n"}
{"task_id": "Open/169", "completion": "    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n"}
{"task_id": "Open/170", "completion": "    \n    sum = 0\n    count = 0\n    \n    for i in range(n):\n        sum += arr[i]\n        if sum < k:\n            count += 1\n        elif sum >= k:\n            sum -= arr[i]\n    \n    return count\n"}
{"task_id": "Open/171", "completion": "    \n    arr.sort()\n    \n    count = 0\n    \n    for i in range(len(arr) - 2):\n        j = i + 1\n        k = len(arr) - 1\n        \n        while j < k:\n            if arr[j] - arr[i] <= L:\n                count += k - j\n                j += 1\n            else:\n                k -= 1\n    \n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r+1) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return n ^ ( ( 1 << m ) - 1 )\n"}
{"task_id": "Open/174", "completion": "    \n    # Step 1\n    if K == 9 :\n        K = 0\n    \n    # Step 2\n    total = R - L + 1\n    \n    # Step 3\n    divisible = total / 9\n    \n    # Step 4\n    rem = total % 9\n    \n    # Step 5\n    count = 0\n    for i in range ( R, L - rem, -1 ) :\n        if rem == K :\n            count += 1\n        rem = rem % 9\n    \n    # Step 6\n    return count\n"}
{"task_id": "Open/175", "completion": "    \n    # Step 1\n    product = n * math.log10(n)\n    \n    # Step 2\n    product = str(product)\n    \n    # Step 3\n    return product[:k]\n"}
{"task_id": "Open/176", "completion": "    left = 0\n    right = len(A) - 1\n    while left < right:\n        if A[left] > A[right]:\n            right -= 1\n        else:\n            left += 1\n    return A[left] if left == right else -1\n"}
{"task_id": "Open/177", "completion": "    a.sort()\n    if a[0] + a[1] >= a[2] :\n        return 0\n    else :\n        return a[2] - (a[0] + a[1])\n"}
