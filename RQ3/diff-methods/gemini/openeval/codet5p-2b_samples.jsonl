{"task_id": "Open/0", "completion": "\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] + K > sum :\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    minimum = arr[0]\n    frequency = 0\n    \n    for i in range(1, n) :\n        if arr[i] < minimum :\n            minimum = arr[i]\n        else :\n            frequency += 1\n    \n    return frequency\n"}
{"task_id": "Open/2", "completion": "\n    mask = (1 << l) - 1\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if (A[i]+A[j])%K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    sum = 0\n    left_sum = 0\n    right_sum = 0\n    for i in a :\n        sum += i\n        if sum % 2!= 0 :\n            return False\n        left_sum += i\n        right_sum -= i\n    if left_sum == right_sum :\n        return True\n    return False\n"}
{"task_id": "Open/5", "completion": "\n    parity = 0\n    for i in range(32) :\n        parity = parity ^ (x & 1)\n        x = x >> 1\n    return parity\n"}
{"task_id": "Open/6", "completion": "\n    missing_elements = []\n    for i in range(len(vec)):\n        if vec[i] < 0:\n            vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            missing_elements.append(i + 1)\n    return missing_elements\n"}
{"task_id": "Open/7", "completion": "\n    dp = [[0 for i in range(10)] for j in range(n)]\n    for i in range(n) :\n        dp[i][0] = 1\n    for i in range(1,10) :\n        for j in range(n) :\n            if arr[j] > 0 :\n                dp[j][i] = max(dp[j][i-1], dp[j-1][i] + 1)\n    return max(dp[n-1])\n"}
{"task_id": "Open/8", "completion": "\n    distinct_prime_factors = []\n    for i in a :\n        prime_factors = set()\n        for j in range(2, int(math.sqrt(i))+1) :\n            if i % j == 0 :\n                prime_factors.add(j)\n                i = i / j\n        distinct_prime_factors.append(len(prime_factors))\n    return distinct_prime_factors\n"}
{"task_id": "Open/9", "completion": "\n    arr.sort()\n    kth_largest = arr[-k]\n    diff = kth_largest - arr[0]\n    for i in range(1,k):\n        diff = min(diff,arr[i]-arr[i-1])\n    return diff\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 3"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A)!= 0 and len(B)!= 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.append(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    \n    # Step 1. Initialize a dictionary to store the frequency of characters in the current substring.\n    d = {}\n    \n    # Step 2. Initialize a variable to store the count of substrings with at most k distinct characters.\n    count = 0\n    \n    # Step 3. Initialize two pointers, left and right, to mark the start and end of the current substring.\n    left = 0\n    right = 0\n    \n    # Step 4. While the right pointer is less than the length of the string:\n    while right < len(s) :\n        # Add the character at the right pointer to the dictionary.\n        d[s[right]] = d.get(s[right], 0) + 1\n        \n        # If the number of distinct characters in the dictionary is greater than k, remove characters from the left pointer until the number of distinct characters is at most k.\n        while len(d) > k :\n            d[s[left]] -= 1\n            if d[s[left]] == 0 :\n                del d[s[left]]\n            left += 1\n        \n        # Increment the count of"}
{"task_id": "Open/13", "completion": "\n    current = 2\n    while current <= n:\n        if n % current == 0:\n            return False\n        current = current + 1\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    \n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/15", "completion": "\n    a = random.randint(2, n-1)\n    for i in range(t) :\n        if (a**(n-1) % n) == 1 :\n            return 1\n        a = random.randint(2, n-1)\n    return -1\n"}
{"task_id": "Open/16", "completion": "\n    for i in range(len(s1)):\n        if (s1[i] == '0' and s2[i] == '1') or (s1[i] == '1' and s2[i] == '0') or (s1[i] == '0' and s2[i] == 'Z') or (s1[i] == 'Z' and s2[i] == '0'):\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == '1':\n                count += 1\n        else:\n            if s[i] == '0':\n                count += 1\n    return min(count, len(s) - count)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n+1) :\n        if math.log(i, 2) == int(math.log(i, 2)) :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return 0\n    elif y == 1 :\n        return x\n    else :\n        return x + product(x, y-1)\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        if i % 4 == 1 :\n            count1 += 1\n        if i % 4 == 2 :\n            count2 += 1\n        if i % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 0\n    current_len = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            current_len += 1\n        else :\n            current_len = 1\n        max_len = max(max_len, current_len)\n    return max_len\n\narr = [10, 22, 9, 33, 21, 50, 41, 60]\nn = len(arr)"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        count = subsetSum(arr, n, i+1, sum-arr[i], count)\n        count = subsetSum(arr, n, i+1, sum, count)\n        return count\n"}
{"task_id": "Open/24", "completion": "\n    center_hexadecagonal_num = 1\n    for i in range(2, n+1) :\n        center_hexadecagonal_num += 15\n    return center_hexadecagonal_num\n"}
{"task_id": "Open/25", "completion": "\n    sum_of_squares = 0\n    sum_of_numbers = 0\n    total_sum = 0\n    \n    for i in range(1, n+1) :\n        sum_of_squares += i**2\n        sum_of_numbers += i\n        total_sum += 1\n    \n    total_sum += 1\n    return total_sum\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return ( b - a ) / a * 100\n"}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i**2\n    return sum/n\n"}
{"task_id": "Open/31", "completion": "\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "\n    chicks = 3**(n-1)\n    return chicks\n"}
{"task_id": "Open/33", "completion": "\n    term = 1\n    for i in range(2, n+1) :\n        term = term * 2 + (i-1)\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    count = 0\n    product = 1\n    left = 0\n    for right in range(len(a)):\n        product *= a[right]\n        while product >= k:\n            product /= a[left]\n            left += 1\n        count += right - left + 1\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range(1, n+1) :\n        string = str(i)\n        for j in string :\n            if j == d :\n                count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    arr.sort()\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n    return n+1\n"}
{"task_id": "Open/37", "completion": "\n    dp = [0] * ( n + 1 )\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1 ) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    area_sum = 0\n    for i in range(1, min(l, b) + 1) :\n        area_sum += i * i\n    return area_sum\n"}
{"task_id": "Open/39", "completion": "\n    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "\n    max_zeros = 0\n    current_zeros = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            current_zeros += 1\n        else :\n            current_zeros = 0\n        max_zeros = max(max_zeros, current_zeros)\n    return max_zeros\n\narr = [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_length += 1\n        else:\n            current_length = 0\n        max_length = max(max_length, current_length)\n    return max_length\n"}
{"task_id": "Open/42", "completion": "\n    dq = deque()\n    ans = a[0]\n    for i in range(n):\n        while dq and a[i] < a[dq[-1]]:\n            dq.pop()\n        dq.append(i)\n        if i >= k - 1:\n            ans = max(ans, a[dq[0]])\n    while dq:\n        dq.popleft()\n    return ans\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    product = 1\n    for i in range(n):\n        product *= array[i]\n        if product <= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    \n    arr.sort()\n    sum = 0\n    for i in range(n) :\n        sum += abs(arr[i] - i)\n    return sum\n"}
{"task_id": "Open/45", "completion": "\n    min_element = arr[0]\n    for i in range(1,n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "\n    max_diff = 0\n    for i in range(len(array)):\n        diff = array[i] - i\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "\n    if ( a * x1 + b * y1 - c ) * ( a * x2 + b * y2 - c ) > 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(0, a + 1) :\n        if (i ^ a) == a :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max_and = 0\n    for i in range(L,R+1):\n        max_and = max_and & i\n    return max_and\n"}
{"task_id": "Open/50", "completion": "\n    smallest_factor = -1\n    for i in range(n) :\n        if a[i] == 0 :\n            return -1\n        else :\n            smallest_factor = gcd(smallest_factor, a[i])\n    return smallest_factor\n"}
{"task_id": "Open/51", "completion": "\n    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(n+1) :\n        for j in range(n+1) :\n            if i == 0 or j == 0 :\n                dp[i][j] = arr[i][j]\n            elif arr[i][j] == 0 :\n                dp[i][j] = 0\n            else :\n                dp[i][j] = dp[i-1][j] ^ dp[i][j-1]\n    return dp\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(0, N+1) :\n        count += i & (i ^ (i >> 1))\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    sum = 0\n    for i in range(n) :\n        sum += a[i]\n    return sum + n - 1 == k\n"}
{"task_id": "Open/55", "completion": "\n    if n == 0 or n == 1 :\n        return False\n    if n & (n-1) == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i == 0:\n            count += 1\n        elif s[i] == s[i-1]:\n            count += 1\n        else:\n            count += 1\n    return count\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = var1 + var2\n    for i in range(2,N):\n        result = result + var1 + var2\n        var1 = var2\n        var2 = result\n    return result\n\narr = [1,2,3,4,5,6]\nN = len(arr)"}
{"task_id": "Open/59", "completion": "\n    \n    arr = arr.copy()\n    \n    for i in range(index,index+ranges) :\n        arr[i],arr[i+ranges] = arr[i+ranges],arr[i]\n    \n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    left, right = 0, n\n    while left <= right:\n        sum = left ** 2 + right ** 2\n        if sum == n:\n            return True\n        elif sum < n:\n            left += 1\n        else:\n            right -= 1\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    if not a in b :\n        return -1\n    count = 0\n    for i in range(len(b)):\n        if a == b[i:i+len(a)]:\n            count += 1\n            b = b[:i] + b[i+len(a):]\n    return count\n"}
{"task_id": "Open/62", "completion": "\n    modifiedString = \"\"\n    for i in range(len-1, -1, -1) :\n        if str[i] > str[i+1] :\n            str[i] -= 1\n            modifiedString += str[i]\n            for j in range(i+1, len) :\n                str[j] = 9\n    return modifiedString\n"}
{"task_id": "Open/63", "completion": "\n    min_value = math.inf\n    sum_log = 0\n    for i in range(n) :\n        sum_log += math.log(arr[i])\n    min_value = math.ceil(math.log(sum_log/min_value,n))\n    return min_value\n"}
{"task_id": "Open/64", "completion": "\n    if len(s) == 0 or s[-1] == '1':\n        return \"-1\"\n    \n    largest = s[0]\n    for i in range(len(s)):\n        if s[i]!= '1':\n            largest = s[i:]\n            break\n    return largest\n"}
{"task_id": "Open/65", "completion": "\n    d = {}\n    for i in a :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    \n    for i in d :\n        if d[i] > k :\n            del d[i]\n    \n    return len(d)\n"}
{"task_id": "Open/66", "completion": "\n    \n    arr.sort()\n    if n % 2 == 0 :\n        return (arr[n//2] + arr[n//2 - 1]) / 2\n    else :\n        return arr[n//2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/67", "completion": "\n    step = 0\n    positive = 0\n    negative = 0\n    zero = 0\n    for i in a :\n        if i > 0 :\n            positive += 1\n            step += abs(i-1)\n        elif i < 0 :\n            negative += 1\n            step += abs(i-1)\n        elif i == 0 :\n            zero += 1\n            step += 2\n    if negative % 2 == 0 :\n        step += zero\n    else :\n        step += 2\n    return step\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    while n > 1 :\n        v.append(n % 5)\n        n = n // 5\n    v.append(n)\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return result\n"}
{"task_id": "Open/69", "completion": "\n    if n == 0 :\n        return False\n    while n > 0 :\n        if n & 1 == 0 :\n            return False\n        n = n >> 1\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    if x > n :\n        return x\n    \n    quotient, remainder = divmod( n, x )\n    if remainder == 0 :\n        return n\n    \n    return n + (x - remainder)\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(n+1) :\n        sum += 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        series_sum = 1\n        for j in range(2, i+1) :\n            series_sum += 2\n        sum += series_sum\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    d = {}\n    for i in arr :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    max_freq = max(d.values())\n    for i in d :\n        if d[i] == max_freq :\n            return i\n\narr = [1,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n) :\n        if a[i] > 0 :\n            if a[i] % 2 == 0 :\n                if a[i] // 2 in a :\n                    count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    result = 0\n    for i in range(32) :\n        if n & (1 << i) :\n            result |= (1 << i)\n    return result\n"}
{"task_id": "Open/76", "completion": "\n    count = 0\n    for i in range(n) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/77", "completion": "\n    return 180 * radian / 3.14\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n / 2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range(1,n+1):\n        sum += a + (i-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 0 :\n        return makeOdd ( n // 2 )\n    else :\n        return n\n"}
{"task_id": "Open/81", "completion": "\n    chessboard = [[0 for i in range(8)] for j in range(8)]\n    chessboard[row][column] = 1\n    queue = []\n    queue.append((row, column))\n    while queue:\n        row, column = queue.pop(0)\n        for i in range(4):\n            new_row = row + moves[i]\n            new_column = column + moves[i+1]\n            if new_row >= 0 and new_row < 8 and new_column >= 0 and new_column < 8:\n                if chessboard[new_row][new_column] == 0:\n                    chessboard[new_row][new_column] = 1\n                    queue.append((new_row, new_column))\n    return sum(chessboard) - 1\n"}
{"task_id": "Open/82", "completion": "\n    result = 0\n    for i in range(1, n+1) :\n        result += i\n    return result\n"}
{"task_id": "Open/83", "completion": "\n    \n    if len( s ) == 0 :\n        return s\n    \n    lastOcc = [0] * 26\n    \n    for i in range( len( s ) ) :\n        lastOcc[ord(s[i]) - ord('a')] = i\n    \n    sorted_str = sorted( s )\n    \n    for i in range( len( s ) ) :\n        if sorted_str[i]!= s[i] :\n            swap_idx = lastOcc[ord(sorted_str[i]) - ord('a')]\n            sorted_str[i], sorted_str[swap_idx] = sorted_str[swap_idx], sorted_str[i]\n    \n    return ''.join( sorted_str )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/84", "completion": "\n    \n    odd = 1\n    even = 2\n    sum = 0\n    \n    for i in range(n) :\n        if i % 2 == 0 :\n            sum += even\n            even += 2\n        else :\n            sum += odd\n            odd += 2\n    \n    return sum\n"}
{"task_id": "Open/85", "completion": "\n    if x > y :\n        smaller = y\n    else :\n        smaller = x\n    for i in range(1,smaller+1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "\n    \n    A = [A,B]\n    \n    for i in range(2,N):\n        A.append(A[i-1] + A[i-2])\n    \n    return A[N-1]\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            if substr in str[i+1:]:\n                count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    emi = ( p * r * (1 + r)**t ) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    A.sort()\n    B.sort()\n    C.sort()\n    count = 0\n    for i in range(len(A)):\n        left = 0\n        right = len(C) - 1\n        while left < right:\n            if A[i] * C[right] > B[left] * B[left]:\n                count += right - left\n                right -= 1\n            else:\n                left += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range(l, r + 1) :\n        if ( i % 10 == 2 or i % 10 == 3 or i % 10 == 9 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(1, n) :\n        for j in range(i) :\n            diff = arr[i] - arr[j]\n            if diff == 0 :\n                dp[i][diff] = 0\n            elif diff > 0 :\n                dp[i][diff] = max(dp[j][diff], dp[i][diff] + 1)\n    return max(max(row) for row in dp)\n"}
{"task_id": "Open/92", "completion": "\n    max_len = 0\n    start = 0\n    end = 0\n    for i in range(len(str)):\n        if str[i].isalnum():\n            end += 1\n        else:\n            start = i\n            end = i + 1\n        if end - start + 1 > max_len and end - start + 1 % 2 == 0:\n            max_len = end - start + 1\n    if max_len == 0:\n        return \"-1\"\n    return max_len\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 1:\n        n = n // 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    if n <= 0 or k <= 0 :\n        return \"\"\n    \n    string = \"a\" * n\n    \n    for i in range(n-1, -1, -1) :\n        k -= 1\n        if k <= 0 :\n            break\n        if k > 26 :\n            string = string[:i] + chr(ord('z') - 26 + k) + string[i+1:]\n        else :\n            string = string[:i] + chr(ord('a') + k) + string[i+1:]\n    \n    return string\n"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel/n\n        fuel = fuel - (fuel/n)\n        n = n - 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    totalSum = 0\n    for i in range(n) :\n        totalSum += arr[i]\n    currentSum = 0\n    for i in range(n) :\n        currentSum += arr[i]\n        if currentSum == totalSum/3 :\n            return 1\n    return 0\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    if sentence.find(word)!= -1 :\n        return True\n    else :\n        return False\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nword = \"fox\""}
{"task_id": "Open/98", "completion": "\n    return math.floor(math.log10(n)) + 1\n"}
{"task_id": "Open/99", "completion": "\n    \n    if a > b and a > c :\n        max = a\n    elif b > c :\n        max = b\n    else :\n        max = c\n    \n    if a < b and a < c :\n        min = a\n    elif b < c :\n        min = b\n    else :\n        min = c\n    \n    if max - min <= k :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/100", "completion": "\n    if x == y :\n        return True\n    else :\n        x = x << 32\n        x = x | y\n        while x!= y :\n            if x == y :\n                return True\n            x = x << 1\n            x = x | (x >> 1)\n        return False\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= s[i-1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for char in string :\n        if char == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1,n):\n        diff = abs(arr[i]-arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": "Open/104", "completion": "\n    result = 0\n    while left < right :\n        if left & 1 :\n            result = result * 2 + 1\n        else :\n            result = result * 2\n        left = left >> 1\n    return result\n"}
{"task_id": "Open/105", "completion": "\n    result = 1\n    while result <= n :\n        result = result << 1\n    return result\n"}
{"task_id": "Open/106", "completion": "\n    divisors = []\n    for i in range(1,n) :\n        if n % i == 0 :\n            divisors.append(i)\n    return sum(divisors) == n\n"}
{"task_id": "Open/107", "completion": "\n    total_days = 365\n    centuries = total_days // 100\n    leap_centuries = centuries // 400\n    leap_years = leap_centuries * 2\n    non_leap_years = total_days - leap_years\n    total_days = non_leap_years + leap_years\n    odd_days = total_days % 7\n    return odd_days\n"}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    else :\n        return (3 * a**2 - a) / 2\n"}
{"task_id": "Open/109", "completion": "\n    if n == 0 :\n        return 0\n    if n < 10 :\n        return 1 if n == d else 0\n    if n % 10 == d :\n        return 1 + frequencyDigits ( n // 10, d )\n    return frequencyDigits ( n // 10, d )\n"}
{"task_id": "Open/110", "completion": "\n    \n    if type(n) is not int :\n        return False\n    \n    if n < 0 :\n        return False\n    \n    s = str(n)\n    \n    for i in s :\n        if s.count(i) > 1 :\n            return False\n    \n    return True\n"}
{"task_id": "Open/111", "completion": "\n    \n    d = {}\n    for i in a :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    \n    min_freq = min(d.values())\n    if min_freq > 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/112", "completion": "\n    \n    arr = [0] * (n+1)\n    arr[0] = 4\n    arr[1] = 7\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            arr[i] = arr[i//2] + 4\n        else:\n            arr[i] = arr[i//2] + 7\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "\n    array = [0] * ( n+1 )\n    array[0] = 3\n    array[1] = 5\n    for i in range(2, n+1) :\n        if i % 2 == 1 :\n            array[i] = array[i//2] * 10 + 3\n        else :\n            array[i] = array[i//2] * 10 + 5\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    \n    array = [0] * (n+1)\n    array[1] = 1\n    array[2] = 2\n    \n    for i in range(3, n+1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10 + 1\n        else :\n            array[i] = array[i//2] * 10 + 2\n    \n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    sum = 0\n    for i in a :\n        sum += i\n    if sum % 11 == 0 :\n        return True\n    return False\n"}
{"task_id": "Open/116", "completion": "\n    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "\n    result = \"\"\n    for i in string :\n        if i.isalpha() :\n            result += i.upper()\n        else :\n            result += i\n    return result\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil(math.sqrt(8 * p + 1) - 1) / 2\n"}
{"task_id": "Open/119", "completion": "\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/120", "completion": "\n    \n    set = set()\n    \n    for i in range(len(string) - 1) :\n        if string[i] == string[i + 1] :\n            set.add(string[i])\n    \n    return len(set)\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    elif lower > higher :\n        return 2\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    maximum = 0\n    for i in ss :\n        if i.isdigit() :\n            maximum = max(maximum, int(maximum) * 10 + int(i))\n        else :\n            maximum = max(maximum, int(i))\n    return maximum\n"}
{"task_id": "Open/123", "completion": "\n    if len(s) == 0 :\n        return \"\"\n    \n    longest_substring = \"\"\n    current_substring = \"\"\n    start = 0\n    end = 0\n    \n    while end < len(s) :\n        if s[end].isdigit() :\n            current_substring += s[end]\n            end += 1\n        else :\n            if len(current_substring) > length :\n                if len(longest_substring) < len(current_substring) :\n                    longest_substring = current_substring\n                current_substring = \"\"\n                start = end\n            else :\n                current_substring = \"\"\n                end += 1\n    if len(current_substring) > length :\n        if len(longest_substring) < len(current_substring) :\n            longest_substring = current_substring\n    return longest_substring\n"}
{"task_id": "Open/124", "completion": "\n    N, M, K = N, M, K\n    while K > 0 and N > 0 and M > 0:\n        if N < M:\n            N, M = M, N\n            K -= 1\n        else:\n            M, N = N, M\n            K -= 1\n    if N > 0 and M > 0:\n        return N * M\n    else:\n        return 0\n"}
{"task_id": "Open/125", "completion": "\n    prev = string[0]\n    for i in range(1,length) :\n        if string[i] == prev :\n            return False\n        prev = string[i]\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    result = 1\n    while result <= n :\n        result = result * 2\n    return result // 2\n"}
{"task_id": "Open/127", "completion": "\n    \n    if len(str(A)) == len(str(B)) :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/128", "completion": "\n    if x - y == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    \n    for i in range(3, n+1) :\n        Sn_3 = \"\".join([Sn_1, Sn_2, Sn_3])\n        Sn_2 = Sn_1\n        Sn_1 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    min_steps = 0\n    for i in range(1,n) :\n        min_steps += abs(arr[i] - arr[i-1])\n    return min_steps\n"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    else:\n        return 1\n"}
{"task_id": "Open/132", "completion": "\n    m = (N // a) + 1\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "\n    if arr[0] % 2!= 0 and arr[-1] % 2!= 0 and arr[-1] % 2!= 0 and arr[-1] % 2!= 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/135", "completion": "\n    if N == 1 :\n        return R - L + 1\n    elif N > 1 :\n        return countSum(N-1, L, R) + 1\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "\n    arr.sort()\n    for i in range(n):\n        if arr[i] > 0:\n            return arr[i]\n    return 1\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/137", "completion": "\n    \n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    return int(s)\n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    for char in s :\n        sum += ord(char)\n    return sum/len(s)\n"}
{"task_id": "Open/140", "completion": "\n    if A == 1 and B == 1 and S == 0 and N == 0 :\n        return 0\n    elif A == 1 and B == 1 and S == 0 and N == 1 :\n        return -1\n    elif A == 1 and B == 1 and S == 0 and N == 2 :\n        return -1\n    elif A == 1 and B == 1 and S == 0 and N == 3 :\n        return -1\n    elif A == 1 and B == 1 and S == 0 and N == 4 :\n        return -1\n    elif A == 1 and B == 1 and S == 0 and N == 5 :\n        return -1\n    elif A == 1 and B == 1 and S == 0 and N == 6 :\n        return -1\n    elif A == 1 and B == 1 and S == 0 and N == 7 :\n        return -1\n    elif A == 1 and B == 1 and S == 0 and N == 8 :\n        return -1\n    elif A == 1 and B == 1 and S == 0 and N == 9 :\n        return -1\n    elif A == 1 and B"}
{"task_id": "Open/141", "completion": "\n    return math.gcd(x,y) * (x // math.gcd(x,y)) * (y // math.gcd(x,y))\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n > 0 :\n        count += n & 1\n        n = n >> 1\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    left_xor = [0] * n\n    right_xor = [0] * n\n    for i in range(n):\n        left_xor[i] = arr[i] ^ arr[i-1]\n        right_xor[n-1-i] = arr[n-1-i] ^ arr[i]\n    max_xor = 0\n    max_index = 0\n    for i in range(n):\n        xor = left_xor[i] ^ right_xor[i]\n        if xor > max_xor :\n            max_xor = xor\n            max_index = i\n    return max_index\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/144", "completion": "\n    dp = [1] * n\n    for i in range(1,n) :\n        for j in range(i) :\n            if arr[i] < arr[j] and dp[i] < dp[j] + 1 :\n                dp[i] = dp[j] + 1\n    return max(dp)\n"}
{"task_id": "Open/145", "completion": "\n    arr.sort()\n    min_element = arr[0]\n    for i in range(1,n):\n        if arr[i] - min_element > k:\n            return -1\n    return min_element + k\n"}
{"task_id": "Open/146", "completion": "\n    remainders = set()\n    remainder = 0\n    while remainder not in remainders :\n        remainder = (remainder * 10) % K\n        remainders.add(remainder)\n    if remainder == 0 :\n        return -1\n    return len(remainders)\n"}
{"task_id": "Open/147", "completion": "\n    arr.sort()\n    median = arr[n//2]\n    diff = sys.maxsize\n    for i in range(n):\n        diff = min(diff, abs(arr[i] - median))\n    return diff\n"}
{"task_id": "Open/148", "completion": "\n    sum = 0\n    first = 3\n    second = 3\n    for i in range(n) :\n        sum = first + second\n        first = second\n        second = sum\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "\n    binary = bin(n)\n    binary = binary[2:]\n    \n    for i in range(len(binary) - 1) :\n        if binary[i] == '1' and binary[i+1] == '1' :\n            return False\n    return True\n"}
{"task_id": "Open/153", "completion": "\n    prev = None\n    for char in s:\n        if char.lower() in 'aeiou':\n            if prev is None:\n                prev = char.lower()\n            elif prev.lower() > char.lower():\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low,high+1) :\n        if (i%10) >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 1\n    \n    if n == 3 :\n        return 1\n    \n    if n == 4 :\n        return 1\n    \n    if n == 5 :\n        return 1\n    \n    if n == 6 :\n        return 1\n    \n    if n == 7 :\n        return 1\n    \n    if n == 8 :\n        return 1\n    \n    if n == 9 :\n        return 1\n    \n    if n == 10 :\n        return 1\n    \n    if n == 11 :\n        return 1\n    \n    if n == 12 :\n        return 1\n    \n    if n == 13 :\n        return 1\n    \n    if n == 14 :\n        return 1\n    \n    if n == 15 :\n        return 1\n    \n    if n == 16 :\n        return 1\n    \n    if n == 17 :\n        return 1\n    \n    if n == 18 :\n        return 1\n    \n    if n == 19 :\n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else :\n        return (3 * (3**(1/2) * r**2)) / 2\n"}
{"task_id": "Open/157", "completion": "\n    newString = \"\"\n    for i in s :\n        newString += i\n    newString = sorted(newString)\n    return \"\".join(newString)\n"}
{"task_id": "Open/158", "completion": "\n    \n    if size == 0 :\n        return None\n    \n    if size == 1 :\n        return 0 if ar[0] == 0 else ar[0]+1\n    \n    low = 0\n    high = size-1\n    \n    while low <= high :\n        mid = (low+high)//2\n        if ar[mid] == mid :\n            low = mid+1\n        elif ar[mid] < mid :\n            high = mid-1\n        else :\n            low = mid+1\n    \n    return ar[low] + 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i] == '0' and str[i+1] == '1' and str[i+2] == '0':\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    d = {}\n    for i in arr :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in arr :\n        if d[i] % 2 == 0 :\n            return i\n    return -1\n\narr = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7"}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n\narr = [3, 10, 5, 25, 2, 8]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    if ( sx == dx and sy == dy ) :\n        return True\n    if ( sx == dx and sy + dy == dy ) :\n        return True\n    if ( sx + dx == dx and sy == dy ) :\n        return True\n    if ( sx + dx == dx and sy + dy == dy ) :\n        return True\n    return False\n"}
{"task_id": "Open/163", "completion": "\n    count = 0\n    if n % 2 == 1 :\n        return 0\n    else :\n        for i in range(2, n-1) :\n            if i % 2 == 0 :\n                if i+1 % 4 == 0 :\n                    count += 1\n        return count\n"}
{"task_id": "Open/164", "completion": "\n    count = {}\n    for i in range(n) :\n        count[arr[i]] = count.get(arr[i],0) + 1\n    \n    return (n*(n+1))//2\n"}
{"task_id": "Open/165", "completion": "\n    if height == 0 :\n        return 1\n    elif height == 1 :\n        return 2\n    else :\n        return AVLnodes(height - 1) + AVLnodes(height - 2) + 1\n"}
{"task_id": "Open/166", "completion": "\n    if source == dest:\n        return 0\n    queue = [source]\n    steps = 0\n    while queue:\n        current = queue.pop(0)\n        if current == dest:\n            return steps\n        steps += 1\n        queue.append(current + step)\n        queue.append(current - step)\n    return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "\n    result = \"1\"\n    for i in range(2, n+1) :\n        count = 0\n        say = \"\"\n        for j in range(len(result)) :\n            if result[j] == result[j-1] :\n                count += 1\n            else :\n                say += str(count) + result[j-1]\n                count = 1\n        say += str(count) + result[-1]\n        result = say\n    return result\n"}
{"task_id": "Open/168", "completion": "\n    max_length = 0\n    current_length = 0\n    product = 1\n    for i in arr:\n        if i > 0:\n            product *= i\n        elif i < 0:\n            product = 1\n        if product > 0:\n            current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\n"}
{"task_id": "Open/169", "completion": "\n    m = abs(m)\n    n = abs(n)\n    numerator = m * n\n    denominator = math.sqrt(m * m + n * n)\n    normal = numerator / denominator\n    return normal\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2) :\n        for j in range(i + 1, len(arr) - 1) :\n            k = j + 1\n            while k < len(arr) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n                k += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    return n & ~(1 << m)\n"}
{"task_id": "Open/174", "completion": "\n    count = 0\n    if K == 9:\n        K = 0\n    for i in range(L,R+1):\n        if i % 9 == K:\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    product = n * math.log10(n)\n    product = str(product)\n    product = product[:k]\n    return product\n"}
{"task_id": "Open/176", "completion": "\n    if len(A) == 0 :\n        return -1\n    left = 0\n    right = len(A) - 1\n    while left < right :\n        if A[left] > A[right] :\n            right -= 1\n        else :\n            left += 1\n    if left == right :\n        return A[left]\n    return -1\n"}
{"task_id": "Open/177", "completion": "\n    a.sort()\n    b.sort()\n    c.sort()\n    if a[0] >= b[0] and a[0] >= c[0]:\n        return 0\n    else:\n        return b[0] - a[0]\n"}
