{"task_id": "Open/0", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/1", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/2", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/3", "completion": "    # Step 1\n    freq = {}\n    for i in range(1, K + 1):\n        freq[i] = 0\n    # Step 2\n    count = 0\n    for i in range(n):\n        rem = A[i] % K\n        freq[rem] += 1\n        count += freq[K - rem]\n    # Step 3\n    result = 0\n    for i in range(1, K + 1):\n        if K - i in freq:\n            result += freq[i] * freq[K - i]\n    return result\n", "result": "failed: 0", "passed": false}
{"task_id": "Open/4", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/5", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/6", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/7", "completion": "    dp = [[1] * 10 for _ in range(n)]\n    for i in range(1, n):\n        for digit in range(10):\n            if arr[i] // 10 ** digit % 10 == arr[i] % 10:\n                dp[i][digit] = dp[i-1][digit] + 1\n    return max(dp[-1])\n", "result": "failed: ", "passed": false}
{"task_id": "Open/8", "completion": "    # Step 1\n    distinct_prime_factors = [0] * len(a)\n    \n    # Step 2\n    for i in range(len(a)) :\n        prime_factors = set()\n        for j in range(2, int(math.sqrt(a[i]))+1) :\n            if a[i] % j == 0 :\n                prime_factors.add(j)\n                a[i] //= j\n        distinct_prime_factors[i] = len(prime_factors)\n    \n    # Step 3\n    return distinct_prime_factors\n", "result": "failed: ", "passed": false}
{"task_id": "Open/9", "completion": "    arr.sort()\n    return min(arr[n-k], sum(arr[i] - arr[0] for i in range(1, k)))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/10", "completion": "    total_time = 0\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            total_time += 1\n        else:\n            B.append(A.pop(i))\n            A.append(B.pop(0))\n            total_time += 2\n    return total_time\n", "result": "failed: deque.pop() takes no arguments (1 given)", "passed": false}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n\narray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nsize = len(array)", "result": "passed", "passed": true}
{"task_id": "Open/12", "completion": "    # Step 1\n    d = {}\n    # Step 2\n    count = 0\n    # Step 3\n    left, right = 0, 0\n    # Step 4\n    while right < len(s):\n        # Step 4.1\n        d[s[right]] = d.get(s[right], 0) + 1\n        # Step 4.2\n        while len(d) > k:\n            d[s[left]] -= 1\n            if d[s[left]] == 0:\n                del d[s[left]]\n            left += 1\n        # Step 4.3\n        count += 1\n        right += 1\n    # Step 5\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/13", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/14", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    for i in range(t) :\n        if pow(a, (n-1)//2, n) == 1 or pow(a, (n-1)//2, n) == n-1 :\n            a = random.randint(2,n-1)\n        else :\n            return 1\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/16", "completion": "    for i in range( len( s1 ) ) :\n        if s1[i] == '0' and s2[i] == '1' :\n            return True\n        elif s1[i] == '1' and s2[i] == '0' :\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/17", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/18", "completion": "    # Write your code here\n    count = 0\n    for i in range(0, length, 2):\n        if s[i] == '1':\n            count += 1\n    for i in range(1, length, 2):\n        if s[i] == '0':\n            count += 1\n    return min(count, length - count)\n", "result": "passed", "passed": true}
{"task_id": "Open/19", "completion": "    \n    count = 0\n    \n    for i in range(1, n+1) :\n        if math.pow(i, 2) <= n :\n            count += 1\n            \n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    elif y == 1 :\n        return x\n    else :\n        return x + product(x, y-1)\n", "result": "passed", "passed": true}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n) :\n        if (a[i] % 4 == 0) :\n            count0 += 1\n        elif (a[i] % 4 == 1) :\n            count1 += 1\n        elif (a[i] % 4 == 2) :\n            count2 += 1\n        else :\n            count3 += 1\n    if (count0 == count1 == count2 == count3) :\n        return 1\n    else :\n        return 2\n", "result": "passed", "passed": true}
{"task_id": "Open/22", "completion": "\n    max_len = 0\n    current_len = 0\n\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            current_len += 1\n        else :\n            current_len = 1\n        max_len = max(max_len, current_len)\n\n    return max_len\n\n\narr = [10, 20, 25, 40, 50]\nn = len(arr)\n", "result": "passed", "passed": true}
{"task_id": "Open/23", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/24", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/25", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/26", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n", "result": "passed", "passed": true}
{"task_id": "Open/29", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/30", "completion": "", "result": "failed: ", "passed": false}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/32", "completion": "    chicks = 1\n    for i in range(1, n) :\n        chicks *= 3\n    return chicks\n", "result": "passed", "passed": true}
{"task_id": "Open/33", "completion": "    term = 1\n    for i in range( 2, n + 1 ) :\n        term = term * 2 + i - 1\n    return term\n", "result": "failed: ", "passed": false}
{"task_id": "Open/34", "completion": "    count = 0\n    product = 1\n    left = 0\n    for i in range(len(a)):\n        product *= a[i]\n        while product >= k:\n            product /= a[left]\n            left += 1\n        count += i - left\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1, n+1) :\n        if str(i).count(str(d))!= 0 :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/36", "completion": "    set = set(arr)\n    for i in range(1, n+1):\n        if i not in set:\n            return i\n    return n+1\n", "result": "failed: local variable 'set' referenced before assignment", "passed": false}
{"task_id": "Open/37", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/38", "completion": "    area_sum = 0\n    for i in range(1, min(l, b)+1):\n        area_sum += i**2\n    return area_sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/39", "completion": "    return N * ( N + 1 ) / 2\n", "result": "passed", "passed": true}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    current_zeros = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            current_zeros += 1\n        else :\n            max_zeros = max(max_zeros, current_zeros)\n            current_zeros = 0\n    return max_zeros\n\narr = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0", "result": "failed: invalid syntax (<string>, line 17)", "passed": false}
{"task_id": "Open/41", "completion": "    max_length = 0\n    current_length = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            current_length += 1\n        else :\n            current_length = 0\n        max_length = max(max_length, current_length)\n    return max_length\n\narr = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0", "result": "failed: invalid syntax (<string>, line 17)", "passed": false}
{"task_id": "Open/42", "completion": "    dq = deque()\n    ans = float(\"-inf\")\n    for i in range(n):\n        while dq and a[dq[-1]] > a[i]:\n            dq.pop()\n        while dq and dq[0] < i - k + 1:\n            dq.popleft()\n        dq.append(i)\n        ans = max(ans, a[dq[0]])\n    return ans\n", "result": "failed: name 'deque' is not defined", "passed": false}
{"task_id": "Open/43", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/44", "completion": "    arr.sort()\n    sum = 0\n    for i in range(len(arr)):\n        sum += abs(arr[i] - i+1)\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n    return min_element * (n - 1)\n\narr = [1, 2, 3, 4, 5]", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/46", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/47", "completion": "    return ( ( a * x1 + b * y1 - c ) * ( a * x2 + b * y2 - c ) < 0 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a+1):\n        if (a ^ i) == i:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/49", "completion": "    max_and = 0\n    for i in range(L, R+1):\n        max_and = max(max_and, i & R)\n    return max_and\n", "result": "failed: ", "passed": false}
{"task_id": "Open/50", "completion": "    for i in range(1,n+1):\n        if a[i]%a[0]==0:\n            return a[0]\n    return -1\n", "result": "passed", "passed": true}
{"task_id": "Open/51", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/52", "completion": "\n    # Write your code here.\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n):\n        for j in range(n):\n            if (i+j)%2 == 1:\n                dp[i+1][j+1] = dp[i+1][j+1] ^ arr[i][j]\n    return dp\n", "result": "failed: ", "passed": false}
{"task_id": "Open/53", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/54", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/55", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/56", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/57", "completion": "    return N if N % K == 0 else N - (N % K)\n", "result": "passed", "passed": true}
{"task_id": "Open/58", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/59", "completion": "    # Step 1. Create a copy of the array.\n    arr_copy = arr.copy()\n    # Step 2. Iterate through the reversals.\n    for i in range( reversals ) :\n        # Step 2.1. Swap the elements within the given range.\n        arr_copy[ ranges[ i ][ 0 ] : ranges[ i ][ 1 ] + 1 ] = arr_copy[ ranges[ i ][ 0 ] : ranges[ i ][ 1 ] + 1 ][ ::-1 ]\n    # Step 3. Return the value at the given index in the copied array.\n    return arr_copy[ index ]\n\narr = [ 1, 2, 3, 4, 5 ]\nranges = [ [ 0, 2 ], [ 3, 4 ], [ 1, 3 ] ]\nreversals = 3\nindex = 2", "result": "failed: ", "passed": false}
{"task_id": "Open/60", "completion": "    left, right = 0, int( n ** 0.5 )\n    while left <= right :\n        sum = left ** 2 + right ** 2\n        if sum == n :\n            return True\n        elif sum < n :\n            left += 1\n        else :\n            right -= 1\n    return False\n", "result": "passed", "passed": true}
{"task_id": "Open/61", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/62", "completion": "    # Step 1\n    modified = \"\"\n    \n    # Step 2\n    for i in range(len-1, -1, -1):\n        if str[i] > str[i+1]:\n            str[i] -= 1\n            for j in range(i+1, len):\n                str[j] = 9\n        modified += str[i]\n    \n    # Step 3\n    return modified\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/63", "completion": "    sumOfLog = 0\n    for i in range(n):\n        sumOfLog += math.log(arr[i])\n    minValue = math.exp(sumOfLog/n)\n    return minValue\n\narr = [1, 2, 3, 4, 5]", "result": "failed: ", "passed": false}
{"task_id": "Open/64", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/65", "completion": "    # Step 1\n    freq = {}\n    for i in range(n) :\n        if a[i] in freq :\n            freq[a[i]] += 1\n        else :\n            freq[a[i]] = 1\n    # Step 2\n    for i in range(n) :\n        if freq[a[i]] > k :\n            del freq[a[i]]\n    # Step 3\n    return len(freq)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/66", "completion": "    # Step 1. Calculate the size of the array after adding k elements.\n    size = len(arr) + k\n    # Step 2. Sort the array in ascending order.\n    arr.sort()\n    # Step 3. If the size is even, calculate the median by taking the average of the two middle elements.\n    if size % 2 == 0 :\n        return (arr[size//2 - 1] + arr[size//2]) / 2\n    # Step 4. If the size is odd, return the middle element as the median.\n    else :\n        return arr[size//2]\n\narr = [1, 2, 3, 4, 5]\nk = 2", "result": "passed", "passed": true}
{"task_id": "Open/67", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    v = []\n    n -= 1\n    while n > 0 :\n        v.append( n % 5 )\n        n = n // 5\n    result = 0\n    for i in range( len( v ) - 1, -1, -1 ) :\n        result = result * 10 + v[ i ]\n    return 2 * result\n", "result": "passed", "passed": true}
{"task_id": "Open/69", "completion": "    prev = -1\n    for i in range(32, -1, -1):\n        if n & (1 << i):\n            if prev == -1:\n                prev = 0\n            else:\n                return False\n        else:\n            prev = -1\n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/70", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/71", "completion": "    # TODO: Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/72", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/73", "completion": "    # Write your code here.\n    freq = {}\n    for i in range(n) :\n        if arr[i] in freq :\n            freq[arr[i]] += 1\n        else :\n            freq[arr[i]] = 1\n    max_freq = 0\n    for i in freq :\n        if freq[i] > max_freq :\n            max_freq = freq[i]\n            max_element = i\n    for i in range(n) :\n        if arr[i] == max_element :\n            return arr[i]\n\narr = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1,", "result": "failed: invalid syntax (<string>, line 22)", "passed": false}
{"task_id": "Open/74", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/75", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/76", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/77", "completion": "    return radian * 180 / pi\n", "result": "failed: name 'pi' is not defined", "passed": false}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n", "result": "passed", "passed": true}
{"task_id": "Open/79", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/80", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/81", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/82", "completion": "    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/83", "completion": "    return ''.join( sorted( s ) )\n", "result": "passed", "passed": true}
{"task_id": "Open/84", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/85", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/86", "completion": "    # Step 1\n    list = [A, B]\n    # Step 2\n    for i in range(2, N) :\n        # Step 3\n        list.append(list[i-1] + list[i-2])\n    # Step 4\n    return list[N-1]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/87", "completion": "    \n", "result": "failed: ", "passed": false}
{"task_id": "Open/88", "completion": "    # Step 1. Convert annual interest rate to monthly interest rate.\n    r = r / 1200\n    # Step 2. Convert loan tenure from years to months.\n    t = t * 12\n    # Step 3. Calculate EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = p * r * (1 + r)**t / ((1 + r)**t - 1)\n    # Step 4. Return the calculated EMI.\n    return emi\n", "result": "passed", "passed": true}
{"task_id": "Open/89", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l, r+1):\n        if i%10 == 2 or i%10 == 3 or i%10 == 9:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/91", "completion": "    # Write your code here.\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            diff = arr[i] - arr[j]\n            if dp[j][diff] > 0:\n                dp[i][diff] = dp[j][diff] + 1\n            else:\n                dp[i][diff] = 2\n    return max(max(row) for row in dp)\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/92", "completion": "    max_len = 0\n    start = 0\n    end = 0\n    for i in range( len( str ) ) :\n        if str[ i ].isalnum() :\n            end += 1\n        else :\n            start = end + 1\n            end = i + 1\n            if end - start + 1 > max_len and end - start + 1 % 2 == 0 :\n                max_len = end - start + 1\n    if max_len == 0 :\n        return \"-1\"\n    else :\n        return max_len\n", "result": "failed: ", "passed": false}
{"task_id": "Open/93", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/94", "completion": "", "result": "failed: ", "passed": false}
{"task_id": "Open/95", "completion": "    total = 0\n    while n > 0 :\n        total += fuel / n\n        n -= 1\n    return total\n", "result": "passed", "passed": true}
{"task_id": "Open/96", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/97", "completion": "    words = sentence.split()\n    for word in words :\n        if word == word :\n            return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/98", "completion": "    return len(str(n))\n", "result": "passed", "passed": true}
{"task_id": "Open/99", "completion": "    max_val = max(a, b, c)\n    min_val = min(a, b, c)\n    if max_val - min_val <= k:\n        return True\n    else:\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/100", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/101", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/102", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/103", "completion": "    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n) :\n        diff = abs(arr[i] - arr[i-1])\n        min_diff = min(min_diff, diff)\n    return min_diff\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)", "result": "failed: ", "passed": false}
{"task_id": "Open/104", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/105", "completion": "    result = 1\n    while result <= n:\n        result *= 2\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/106", "completion": "    sum = 0\n    for i in range(1, n//2+1) :\n        if n % i == 0 :\n            sum += i\n    if sum == n :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/107", "completion": "    totalDays = 365\n    centuries, leapCenturies = divmod(N, 100)\n    leapYears = N // 400\n    nonLeapYears = N - leapYears\n    totalDays = totalDays + nonLeapYears + leapYears * 2\n    oddDays = totalDays % 7\n    return oddDays\n", "result": "failed: ", "passed": false}
{"task_id": "Open/108", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/109", "completion": "    count = 0\n    n = str(n)\n    for i in n :\n        if i == d :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/110", "completion": "    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/111", "completion": "    freq = {}\n    for i in range(len(a)):\n        if a[i] in freq:\n            freq[a[i]] += 1\n        else:\n            freq[a[i]] = 1\n    min_freq = min(freq.values())\n    if min_freq > 0:\n        return True\n    else:\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/112", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/113", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/114", "completion": "    # Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/115", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/116", "completion": "    if l <= 0 or b <= 0 or h <= 0:\n        return -1\n    else:\n        return l * b\n", "result": "failed: ", "passed": false}
{"task_id": "Open/117", "completion": "    result = \"\"\n    for word in string.split() :\n        if word[0].isalpha() :\n            result += word[0].upper() + word[1:]\n        else :\n            result += word\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt( 8 * p + 1 ) - 1 ) / 2\n", "result": "passed", "passed": true}
{"task_id": "Open/119", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/120", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/121", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/122", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/123", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/124", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/125", "completion": "    if len(string) < length :\n        return False\n    for i in range(len(string)-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/126", "completion": "    result = 1\n    while result <= n :\n        result *= 2\n    return result // 2\n", "result": "passed", "passed": true}
{"task_id": "Open/127", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/128", "completion": "    if x!= y :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/129", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/130", "completion": "    min_steps = 0\n    for i in range(1, n):\n        min_steps += abs(arr[i] - arr[i-1])\n    return min_steps\n\narr = [1, 3, 5, 7, 9]\nn = len(arr)", "result": "failed: ", "passed": false}
{"task_id": "Open/131", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/132", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/133", "completion": "", "result": "failed: ", "passed": false}
{"task_id": "Open/134", "completion": "    if arr[0] % 2 == 1 and arr[n-1] % 2 == 1 and n % 2 == 1 :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return R - L + 1\n    elif N > 1 :\n        return countSum(N-1, L, R) + 1\n    else :\n        return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/136", "completion": "    # Write your code here\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return i+1\n    return len(arr)+1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/137", "completion": "    return int( ''.join( sorted(s) ) )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/139", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/140", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/141", "completion": "    return math.gcd(x,y) * x // math.gcd(x,y)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/142", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/143", "completion": "\n    left_xor = [0] * n\n    right_xor = [0] * n\n\n    for i in range(n):\n        left_xor[i] = sum([arr[j] for j in range(i)])\n\n    for i in range(n-1, -1, -1):\n        right_xor[i] = sum([arr[j] for j in range(i, n)])\n\n    max_xor = 0\n    max_index = 0\n\n    for i in range(n):\n        xor = left_xor[i] ^ right_xor[i]\n        if xor > max_xor:\n            max_xor = xor\n            max_index = i\n\n    return max_index\n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/144", "completion": "\n\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\nn = len(arr)", "result": "failed: ", "passed": false}
{"task_id": "Open/145", "completion": "    arr.sort()\n    min_element = arr[0]\n    for i in range(1, n) :\n        if arr[i] - min_element == k :\n            return min_element + k\n        elif arr[i] - min_element > k :\n            return -1\n    return -1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nk = 2", "result": "failed: ", "passed": false}
{"task_id": "Open/146", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/147", "completion": "    # Write your code here\n    arr.sort()\n    for i in range(n) :\n        if arr[i]!= i :\n            return i\n    return 0\n", "result": "passed", "passed": true}
{"task_id": "Open/148", "completion": "    sum = 0\n    first = 3\n    second = 3\n    for i in range(3, n+1) :\n        sum += first + second\n        first = second\n        second = sum\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/149", "completion": "    if s < 0 :\n        return -1\n    else :\n        return math.sqrt(s)\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "Open/150", "completion": "    p = p / 100\n    q = q / 100\n    return (p**2 + q**2) / (p + q)\n", "result": "passed", "passed": true}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range( len1 ) :\n        result ^= ord( str1[i] )\n    return result\n", "result": "passed", "passed": true}
{"task_id": "Open/152", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/153", "completion": "    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/154", "completion": "    \n", "result": "failed: ", "passed": false}
{"task_id": "Open/155", "completion": "    # Step 1\n    nearest_power_of_2 = 2**math.ceil(math.log2(n))\n    \n    # Step 2\n    abs_diff = abs(n - nearest_power_of_2)\n    \n    # Step 3\n    return abs_diff\n", "result": "passed", "passed": true}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        return (3 * math.sqrt(3) * r**2) / 2\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "Open/157", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/158", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/159", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/160", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n    for i in range(n) :\n        ans = max(ans, xorArr ^ arr[i])\n    return ans\n\narr = [1, 2, 3, 4, 5]", "result": "passed", "passed": true}
{"task_id": "Open/162", "completion": "    if ( sx + dy == dx and sy + dx == dy ) :\n        return True\n    elif ( sx + dx == dy and sy + dy == dx ) :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/163", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/164", "completion": "    # Write your code here\n    count = 1\n    for i in range(n):\n        count *= arr[i]\n    return count\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)", "result": "failed: ", "passed": false}
{"task_id": "Open/165", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/166", "completion": "    if source == dest:\n        return 0\n    elif source < dest:\n        return steps(source + step, step, dest) + steps(source - step, step, dest)\n    else:\n        return sys.maxsize\n", "result": "failed: maximum recursion depth exceeded in comparison", "passed": false}
{"task_id": "Open/167", "completion": "    result = \"1\"\n    for i in range(2, n+1) :\n        count = 0\n        say = \"\"\n        for j in range(len(result)) :\n            if result[j] == result[j-1] :\n                count += 1\n            else :\n                say += str(count) + result[j-1]\n                count = 1\n        result = say\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/168", "completion": "    max_length = 0\n    current_length = 0\n    product = 1\n    \n    for i in arr :\n        if i >= 0 :\n            product *= i\n        else :\n            product = 1\n        current_length += 1\n        if current_length > max_length :\n            max_length = current_length\n    return max_length\n", "result": "failed: ", "passed": false}
{"task_id": "Open/169", "completion": "    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))", "result": "passed", "passed": true}
{"task_id": "Open/170", "completion": "    sum = 0\n    count = 0\n    for i in range(n) :\n        sum += arr[i]\n        if sum < k :\n            count += 1\n        else :\n            sum -= arr[i-k]\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nk = 10", "result": "failed: ", "passed": false}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(len(arr)) :\n        for j in range(i+1,len(arr)) :\n            for k in range(j+1,len(arr)) :\n                if arr[k]-arr[i] <= L :\n                    count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l,r+1):\n        if i%2==0 and i%3==0:\n            count+=1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/173", "completion": "    mask = 1 << m\n    return n ^ mask\n", "result": "failed: ", "passed": false}
{"task_id": "Open/174", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/175", "completion": "    return str(int(n * math.log10(n)))[:k]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/176", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/177", "completion": "    a.sort()\n    if a[0] + a[1] >= a[2]:\n        return 0\n    else:\n        return a[2] - a[0] - a[1]\n", "result": "failed: 'int' object has no attribute 'sort'", "passed": false}
