{"task_id": "Open/0", "completion": "    count = 0\n    for i in range(N) :\n        arr[i] += K\n        if arr[i] > sum(arr) :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/1", "completion": "    minVal = arr[0]\n    freq = 0\n    for i in range(1, n) :\n        if arr[i] < minVal :\n            minVal = arr[i]\n            freq = 0\n        else :\n            freq += 1\n    return freq\n", "result": "failed: ", "passed": false}
{"task_id": "Open/2", "completion": "    return n & ( 1 << ( r - l + 1 ) ) == 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n):\n        remainder = A[i] % K\n        if remainder in dict:\n            count += dict[remainder]\n    return count\n", "result": "failed: argument of type 'type' is not iterable", "passed": false}
{"task_id": "Open/4", "completion": "    sum = 0\n    left_sum = 0\n    right_sum = sum\n    for i in a :\n        sum += i\n        if sum % 2!= 0 :\n            return False\n        left_sum += i\n        right_sum -= i\n        if left_sum == right_sum :\n            return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/5", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/6", "completion": "    missing_elements = []\n    for i in range ( len ( vec ) ) :\n        vec[i] = abs ( vec[i] ) - 1\n    for i in range ( len ( vec ) ) :\n        if vec[i] > 0 :\n            missing_elements.append ( i + 1 )\n    return missing_elements\n", "result": "failed: ", "passed": false}
{"task_id": "Open/7", "completion": "    dp = [[1 for _ in range(10)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for digit in range(10):\n            dp[i][digit] = max(dp[i-1][digit], dp[i-1][digit] + 1)\n    return max(dp[-1])\n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/8", "completion": "    prime_factors = []\n    for i in range(2, int(math.sqrt(a)) + 1) :\n        if a % i == 0 :\n            prime_factors.append(i)\n    return prime_factors\n", "result": "failed: must be real number, not list", "passed": false}
{"task_id": "Open/9", "completion": "    arr.sort()\n    return arr[k] - arr[0] - findSum( arr[1:k], n - k, k )\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/10", "completion": "    total_time = 0\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            total_time += 1\n        else:\n            B.append(A[i])\n            A.pop(i)\n            total_time += 2\n    return total_time\n", "result": "failed: deque.pop() takes no arguments (1 given)", "passed": false}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/12", "completion": "    d = {}\n    count = 0\n    left = 0\n    right = 0\n    while right < len(s) :\n        if s[right] in d :\n            d[s[right]] += 1\n        else :\n            d[s[right]] = 1\n        if d[s[right]] > k :\n            while d[s[left]] > k :\n                d[s[left]] -= 1\n                left += 1\n            count += 1\n        right += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/13", "completion": "    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/14", "completion": "    result = 0\n    switch n % 4:\n        case 0:\n            return n\n        case 1:\n            return 1\n        case 2:\n            return n + 1\n        case 3:\n            return 0\n    return \"\"\n", "result": "failed: invalid syntax (<string>, line 16)", "passed": false}
{"task_id": "Open/15", "completion": "    if n <= 1 :\n        return -1\n    if n == 2 :\n        return 1\n    if n % 2 == 0 :\n        return -1\n    if n == 3 :\n        return 1\n    if n % 3 == 0 :\n        return -1\n    if n == 5 :\n        return 1\n    if n % 5 == 0 :\n        return -1\n    if n == 7 :\n        return 1\n    if n % 7 == 0 :\n        return -1\n    if n == 11 :\n        return 1\n    if n % 11 == 0 :\n        return -1\n    if n == 13 :\n        return 1\n    if n % 13 == 0 :\n        return -1\n    if n == 17 :\n        return 1\n    if n % 17 == 0 :\n        return -1\n    if n == 19 :\n        return 1\n    if n % 19 == 0 :\n        return -1\n    if n == 23 :\n        return 1\n    if n % 23 == 0 :\n        return -1\n    if n == 29 :\n        return", "result": "passed", "passed": true}
{"task_id": "Open/16", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n", "result": "passed", "passed": true}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n    return min(count, len(s) - count)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1) :\n        if math.factorial(i) <= n :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    else :\n        return x + product(x, y-1)\n", "result": "passed", "passed": true}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( 0, len( a ) ) :\n        if ( a[i] % 4 ) == 0 :\n            count0 += 1\n        elif ( a[i] % 4 ) == 1 :\n            count1 += 1\n        elif ( a[i] % 4 ) == 2 :\n            count2 += 1\n        else :\n            count3 += 1\n    if ( count0 == 4 ) and ( count1 == 4 ) and ( count2 == 4 ) and ( count3 == 4 ) :\n        return 1\n    else :\n        return 2\n", "result": "passed", "passed": true}
{"task_id": "Open/22", "completion": "    max_len = 0\n    current_len = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            current_len += 1\n        else:\n            current_len = 1\n        max_len = max(max_len, current_len)\n    return max_len\n", "result": "passed", "passed": true}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        count += subsetSum(arr, n, i+1, sum, count)\n        count += subsetSum(arr, n, i+1, sum-arr[i], count)\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/24", "completion": "    return 15 * n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/25", "completion": "    sum_of_squares = 0\n    sum_of_numbers = 0\n    total_sum = 0\n    \n    for i in range( 1, n + 1 ) :\n        sum_of_squares += i ** 2\n        sum_of_numbers += i\n        total_sum += 1\n    \n    return total_sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/26", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            sum += i\n    return sum\n", "result": "passed", "passed": true}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n", "result": "passed", "passed": true}
{"task_id": "Open/29", "completion": "    return (b - a) / a * 100\n", "result": "failed: ", "passed": false}
{"task_id": "Open/30", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum/n\n", "result": "passed", "passed": true}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/32", "completion": "    return pow( 3, n - 1 )\n", "result": "passed", "passed": true}
{"task_id": "Open/33", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/34", "completion": "    count = 0\n    product = 1\n    left = 0\n    for i in a :\n        product *= i\n        while product >= k :\n            product /= a[left]\n            left += 1\n        count += abs(left - right)\n    return count\n", "result": "failed: name 'right' is not defined", "passed": false}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1) :\n        num = str(i)\n        for j in range(len(num)) :\n            if num[j] == d :\n                count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/36", "completion": "    set = set(arr)\n    for i in range(1, n+1) :\n        if i not in set :\n            return i\n    return n+1\n", "result": "failed: local variable 'set' referenced before assignment", "passed": false}
{"task_id": "Open/37", "completion": "    dp = [1, 1]\n    for i in range(2, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/38", "completion": "    area_sum = 0\n    for i in range(1, min(l, b) + 1) :\n        area_sum += i * i\n    return area_sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/39", "completion": "    return sum ( range ( 1, N + 1 ) )\n", "result": "passed", "passed": true}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    current_zeros = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            current_zeros += 1\n        else :\n            max_zeros = max(max_zeros, current_zeros)\n            current_zeros = 0\n    return max_zeros\n", "result": "failed: ", "passed": false}
{"task_id": "Open/41", "completion": "    max_length = 0\n    current_length = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            current_length += 1\n        else:\n            current_length = 0\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\n", "result": "failed: ", "passed": false}
{"task_id": "Open/42", "completion": "    dq = deque()\n    ans = a[0]\n    for i in range(1, n):\n        while dq and a[dq[-1]] >= a[i]:\n            dq.pop()\n        dq.append(i)\n    while dq:\n        while dq and a[dq[-1]] >= a[n-1]:\n            dq.pop()\n        dq.append(n-1)\n    return ans\n", "result": "failed: name 'deque' is not defined", "passed": false}
{"task_id": "Open/43", "completion": "    count = 0\n    product = 1\n    for i in range(n):\n        product *= array[i]\n        if product <= k:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/44", "completion": "    arr.sort()\n    sum = 0\n    for i in range(n) :\n        sum += abs(arr[i] - i + 1)\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n    return min_element * (n - 1)\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        diff = array[i] - i\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n", "result": "failed: ", "passed": false}
{"task_id": "Open/47", "completion": "    return ( a * x1 + b * y1 - c ) == ( a * x2 + b * y2 - c )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range ( 0, a ) :\n        xor = a ^ i\n        if xor == a :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/49", "completion": "    max_and = 0\n    for i in range(L,R+1):\n        if (i & R) > max_and:\n            max_and = i\n    return max_and\n", "result": "failed: ", "passed": false}
{"task_id": "Open/50", "completion": "    smallest_factor = -1\n    for i in range(n) :\n        if a[i] == 0 :\n            return -1\n        smallest_factor = gcd(smallest_factor, a[i])\n    return smallest_factor\n", "result": "failed: name 'gcd' is not defined", "passed": false}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(n) :\n        sum += 1/3**i\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/52", "completion": "    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = arr[i][j]\n            else:\n                if arr[i][j] & (arr[i-1][j] ^ arr[i][j-1] ^ arr[i+1][j] ^ arr[i][j+1]) == 0:\n                    dp[i][j] = arr[i][j]\n                else:\n                    dp[i][j] = dp[i-1][j] ^ dp[i][j-1] ^ dp[i+1][j] ^ dp[i][j+1]\n    return dp\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(N):\n        xor = i ^ N\n        or_ = i | N\n        if xor == or_:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in a :\n        sum += i\n    if sum == k :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/55", "completion": "    return ( n & 0x1 ) == 1\n", "result": "passed", "passed": true}
{"task_id": "Open/56", "completion": "    count = 0\n    for i in range(len(s)) :\n        if s[i] == s[i-1] :\n            count += 1\n        else :\n            count = 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - ( N % K )\n", "result": "passed", "passed": true}
{"task_id": "Open/58", "completion": "    result = 0\n    for i in range(2, N+1):\n        result += arr[i-1] * 100\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/59", "completion": "    arr = arr[:]\n    for i in range(reversals) :\n        for j in range(index) :\n            arr[j], arr[index] = arr[index], arr[j]\n    return arr[index]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/60", "completion": "    left, right = 0, n\n    while left <= right:\n        sum = left ** 2 + right ** 2\n        if sum == n:\n            return True\n        elif sum < n:\n            left += 1\n        else:\n            right -= 1\n    return False\n", "result": "passed", "passed": true}
{"task_id": "Open/61", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/62", "completion": "    return str[len-1] - str[len-2]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/63", "completion": "    sum = 0\n    min_val = math.log( arr[0] )\n    for i in range(1,n) :\n        sum += math.log( arr[i] )\n    return math.exp( min_val * n )\n\narr = [1,2,3,4,5]", "result": "failed: ", "passed": false}
{"task_id": "Open/64", "completion": "    \n    # Step 1\n    largest = \"\"\n    \n    # Step 2\n    for i in range ( len ( s ) ) :\n        if s[i]!= \"1\" :\n            largest += s[i]\n    \n    # Step 3\n    return largest\n", "result": "failed: ", "passed": false}
{"task_id": "Open/65", "completion": "    d = {}\n    for i in range(n) :\n        d[a[i]] = d.get(a[i], 0) + 1\n    for i in range(n) :\n        if d[a[i]] > k :\n            del d[a[i]]\n    return len(d)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/66", "completion": "    arr.append(k)\n    arr.sort()\n    if (len(arr) % 2) == 0 :\n        return (arr[len(arr)/2] + arr[len(arr)/2-1])/2\n    else :\n        return arr[len(arr)/2]\n", "result": "failed: list indices must be integers or slices, not float", "passed": false}
{"task_id": "Open/67", "completion": "    stepCount = 0\n    positiveCount = 0\n    negativeCount = 0\n    zeroCount = 0\n    \n    for i in range(len(a)):\n        if a[i] == 1:\n            positiveCount += 1\n            stepCount += abs(i - 1)\n        elif a[i] == -1:\n            negativeCount += 1\n            stepCount += abs(i - 1)\n        elif a[i] == 0:\n            zeroCount += 1\n    \n    if negativeCount % 2 == 0:\n        stepCount += zeroCount\n    elif negativeCount % 2 == 1:\n        stepCount += 2\n    \n    return stepCount\n", "result": "failed: ", "passed": false}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    v = []\n    while n > 1 :\n        v.append( n % 5 )\n        n = n // 5\n    result = 0\n    for i in reversed( v ) :\n        result = result * 10 + i\n    return 2 * result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/69", "completion": "    if n == 0 :\n        return True\n    else :\n        return areSetBitsIncreasing ( n >> 1 ) and ( n & 1 )\n", "result": "passed", "passed": true}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        return n + (x - n % x)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(n) :\n        sum += 2\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/72", "completion": "    series_sum = 1\n    for i in range(2, n + 1) :\n        series_sum += 2\n    return series_sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/73", "completion": "    freq = {}\n    for i in range(n) :\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    max_freq = max(freq.values())\n    max_index = 0\n    for i in range(n) :\n        if freq[arr[i]] == max_freq :\n            max_index = i\n    return arr[max_index]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n) :\n        if (a[i] & (a[i] >> 1)) == 0 :\n            if (a[i] >> 1) in a :\n                count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/75", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/76", "completion": "    count = 0\n    for i in range(n):\n        if A[i] == 1:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/77", "completion": "    return radian * 180 / math.pi\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "Open/78", "completion": "    return math.floor( n / 2 )\n", "result": "passed", "passed": true}
{"task_id": "Open/79", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/80", "completion": "    if n % 2 == 0 :\n        return 1\n    else :\n        return makeOdd( n / 2 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/81", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/82", "completion": "    result = 0\n    for i in range(n) :\n        result += i\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/83", "completion": "    # Write your code here.\n    return s\n", "result": "failed: ", "passed": false}
{"task_id": "Open/84", "completion": "    odd = 1\n    even = 2\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += odd\n        else:\n            sum += even\n        odd += 2\n        even += 2\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/85", "completion": "    if x < y :\n        return getHCF( y, x )\n    elif x == y :\n        return 1\n    else :\n        for i in range( 2, min( x, y ) + 1 ) :\n            if x % i == 0 and y % i == 0 :\n                return i\n        return 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/86", "completion": "    return A + B + N\n", "result": "failed: ", "passed": false}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            if substr[1:] in str[i+1:]:\n                count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/88", "completion": "    return p * r * (1 + r)**t / ((1 + r)**t - 1)\n\nemi_calculator( 1000000, 0.05, 12 )", "result": "failed: ", "passed": false}
{"task_id": "Open/89", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/90", "completion": "    return sum( [1 for i in range(l,r+1) if i % 10 == 2 or i % 10 == 3 or i % 10 == 9] )\n", "result": "passed", "passed": true}
{"task_id": "Open/91", "completion": "    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = 2\n    for i in range(1, n):\n        for j in range(0, i):\n            diff = arr[i] - arr[j]\n            if dp[j][diff] > 0:\n                dp[i][diff] = max(dp[i][diff], dp[j][diff] + 1)\n    return max(dp[i][0] for i in range(n))\n\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/92", "completion": "    max_len = 0\n    start = 0\n    end = 0\n    while end < len(str) :\n        if str[end].isalnum() :\n            end += 1\n        else :\n            start = end + 1\n            end = start + 1\n            if end - start + 1 > max_len and end - start + 1 % 2 == 0 :\n                max_len = end - start + 1\n    return max_len if max_len else -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        n = n // 2\n        count = count + 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/94", "completion": "    if k < 0 :\n        return \"\"\n    if k == 0 :\n        return \"a\"\n    if k == 1 :\n        return \"b\"\n    if k == 2 :\n        return \"c\"\n    if k == 3 :\n        return \"d\"\n    if k == 4 :\n        return \"e\"\n    if k == 5 :\n        return \"f\"\n    if k == 6 :\n        return \"g\"\n    if k == 7 :\n        return \"h\"\n    if k == 8 :\n        return \"i\"\n    if k == 9 :\n        return \"j\"\n    if k == 10 :\n        return \"k\"\n    if k == 11 :\n        return \"l\"\n    if k == 12 :\n        return \"m\"\n    if k == 13 :\n        return \"n\"\n    if k == 14 :\n        return \"o\"\n    if k == 15 :\n        return \"p\"\n    if k == 16 :\n        return \"q\"\n    if k == 17 :\n        return \"r\"\n    if k == 18 :\n        return \"s\"\n    if k == 19 :\n       ", "result": "failed: expected an indented block (<string>, line 65)", "passed": false}
{"task_id": "Open/95", "completion": "    total = 0\n    while n > 0 :\n        distance = ( n * fuel ) / 100\n        total += distance\n        n -= 1\n    return total\n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/96", "completion": "    totalSum = 0\n    for i in range ( len ( arr ) ) :\n        totalSum += arr [ i ]\n    currentSum = 0\n    for i in range ( len ( arr ) ) :\n        currentSum += arr [ i ]\n        if ( currentSum == ( totalSum / 3 ) ) :\n            return 1\n    return 0\n", "result": "passed", "passed": true}
{"task_id": "Open/97", "completion": "    return word in sentence\n", "result": "passed", "passed": true}
{"task_id": "Open/98", "completion": "    return int(math.log10(n))+1\n", "result": "passed", "passed": true}
{"task_id": "Open/99", "completion": "    return a <= b + c and b <= a + c and c <= a + b + k\n", "result": "failed: ", "passed": false}
{"task_id": "Open/100", "completion": "    return x ^ y\n", "result": "failed: ", "passed": false}
{"task_id": "Open/101", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/103", "completion": "\n    arr.sort()\n    minDiff = arr[0]\n    for i in range(1, n) :\n        diff = abs(arr[i] - arr[i-1])\n        if diff < minDiff :\n            minDiff = diff\n    return minDiff\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)", "result": "failed: ", "passed": false}
{"task_id": "Open/104", "completion": "    result = 0\n    for i in range ( left, right + 1 ) :\n        if ( i & 1 ) == 1 :\n            result = result * 2 + 1\n        else :\n            result = result * 2\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/105", "completion": "    if n == 0 :\n        return 1\n    else :\n        return 2**setBitNumber( n - 1 )\n", "result": "timed out", "passed": false}
{"task_id": "Open/106", "completion": "    sum = 0\n    for i in range( 1, n+1 ) :\n        if n % i == 0 :\n            sum += i\n    return sum == n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/107", "completion": "    totalDays = 365\n    centuries = 0\n    leapCenturies = 0\n    leapYears = 0\n    nonLeapYears = 0\n    totalDays = totalDays - 1\n    while totalDays % 400 == 0 :\n        totalDays = totalDays / 400\n        centuries = centuries + 1\n    while totalDays % 100 == 0 :\n        totalDays = totalDays / 100\n        leapCenturies = leapCenturies + 1\n    while totalDays % 4 == 0 :\n        totalDays = totalDays / 4\n        leapYears = leapYears + 1\n    while totalDays % 10 == 0 :\n        totalDays = totalDays / 10\n        nonLeapYears = nonLeapYears + 1\n    return ( mod( totalDays, 7 ) )\n", "result": "failed: name 'mod' is not defined", "passed": false}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return (3 * a ** 2 - a) / 2\n", "result": "failed: ", "passed": false}
{"task_id": "Open/109", "completion": "    count = 0\n    for i in str(n) :\n        if i == d :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/110", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/111", "completion": "    freq = {}\n    for i in a:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    minFreq = min(freq.values())\n    if minFreq > 0:\n        return True\n    else:\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/112", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/113", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/114", "completion": "    pass", "result": "failed: ", "passed": false}
{"task_id": "Open/115", "completion": "    sum = 0\n    for i in range ( n ) :\n        sum += a[i]\n    if sum % 11 == 0 :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/116", "completion": "    if ( l > 0 and b > 0 and h > 0 ) :\n        return l * b\n    else :\n        return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/117", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt( 8 * p + 1 ) / 2 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/119", "completion": "    return len( set( arr ) ) == len( arr )\n", "result": "passed", "passed": true}
{"task_id": "Open/120", "completion": "    count = 0\n    set = set()\n    for i in range(len(string)) :\n        if string[i] == string[i+1] :\n            set.add(string[i])\n            count += 1\n    return len(set)\n", "result": "failed: local variable 'set' referenced before assignment", "passed": false}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n", "result": "passed", "passed": true}
{"task_id": "Open/122", "completion": "    max = 0\n    for c in ss :\n        if c.isdigit() :\n            max = max * 10 + int(c)\n        else :\n            if max < int(c) :\n                max = int(c)\n    return max\n", "result": "failed: invalid literal for int() with base 10: 'a'", "passed": false}
{"task_id": "Open/123", "completion": "    # Write your code here.\n    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/124", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/125", "completion": "    if len(string) < length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/126", "completion": "    return 1 if n == 0 else 2 ** getValue( n - 1 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/127", "completion": "    return len(A) == len(B)\n", "result": "failed: object of type 'int' has no len()", "passed": false}
{"task_id": "Open/128", "completion": "    return x!= y\n", "result": "failed: ", "passed": false}
{"task_id": "Open/129", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/130", "completion": "    min_steps = 0\n    for i in range(1, n) :\n        diff = abs(arr[i] - arr[i-1])\n        min_steps += diff\n    return min_steps\n", "result": "failed: ", "passed": false}
{"task_id": "Open/131", "completion": "    return 0 if n % 4 == 0 or n % 4 == 3 else 1\n", "result": "passed", "passed": true}
{"task_id": "Open/132", "completion": "    m = 0\n    sum = 0\n    for i in range(1, N + 1) :\n        if i % a == 0 :\n            m += 1\n            sum += (i * (i + 1)) / 2\n    return m * sum\n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 == 2 :\n        return N + 2\n    else :\n        return N - 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/134", "completion": "    if ( arr[0] % 2 == 0 ) and ( arr[n-1] % 2 == 0 ) and ( n % 2 == 0 ) :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return R - L + 1\n    elif N > 1 :\n        return countSum(N-1, L, R) + 1\n    else :\n        return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/136", "completion": "    arr = [False] * (n+1)\n    for i in range(n):\n        if not arr[i]:\n            arr[i+1] = True\n            return i+1\n    return n+1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/137", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/139", "completion": "    sum = 0\n    for c in s :\n        sum += ord(c)\n    return sum / len(s)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/140", "completion": "    if ( A <= 0 or B <= 0 or S <= 0 or N <= 0 ) :\n        return -1\n    if ( A * N >= S ) :\n        return 0\n    num_A = ( S - total_B ) // A\n    if ( num_A >= 0 ) :\n        return num_A\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/141", "completion": "    return x * y // math.gcd( x, y )\n", "result": "passed", "passed": true}
{"task_id": "Open/142", "completion": "    count = 0\n    while n > 0 :\n        if n % 2 == 0 :\n            count += 1\n        n = n // 2\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/143", "completion": "    left_xor = [0] * n\n    right_xor = [0] * n\n    for i in range(n):\n        left_xor[i] = arr[i] ^ arr[i+1]\n    for i in range(n-1, -1, -1):\n        right_xor[i] = arr[i] ^ arr[i-1]\n    max_xor = 0\n    max_index = 0\n    for i in range(n):\n        xor = left_xor[i] ^ right_xor[i]\n        if xor > max_xor:\n            max_xor = xor\n            max_index = i\n    return max_index\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/144", "completion": "    dp = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] < arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/145", "completion": "    arr.sort()\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    if min_element + k == arr[0]:\n        return min_element + k\n    else:\n        return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/146", "completion": "    set = {1}\n    remainder = 0\n    length = 0\n    while remainder!= 0:\n        remainder = remainder * 10\n        set.add(remainder % K)\n        length += 1\n    return length if len(set) == 1 else -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/147", "completion": "    arr.sort()\n    median = arr[len(arr)//2]\n    diff = 0\n    for i in range(len(arr)):\n        diff += abs(arr[i] - median)\n    return diff\n", "result": "failed: ", "passed": false}
{"task_id": "Open/148", "completion": "    sum = 0\n    first = 3\n    second = 3\n    for i in range(n):\n        sum = sum + first\n        first = second\n        second = sum\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n", "result": "passed", "passed": true}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1):\n        result ^= ord(str1[i])\n    return result\n", "result": "passed", "passed": true}
{"task_id": "Open/152", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/153", "completion": "    prev = None\n    for c in s :\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' :\n            if prev and prev < c :\n                return False\n            prev = c\n    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low, high+1) :\n        if i % 10 >= k :\n            count += 1\n\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/155", "completion": "    return math.fabs( n - 2 ** math.ceil( math.log( n, 2 ) ) )\n", "result": "passed", "passed": true}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        return (3 * sqrt(3) * r**2) / 2\n", "result": "failed: name 'sqrt' is not defined", "passed": false}
{"task_id": "Open/157", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/158", "completion": "    low = 0\n    high = size - 1\n    mid = (low + high) // 2\n    while low <= high :\n        if ar[mid] == mid :\n            return ar[mid] + 1\n        elif ar[mid] < mid :\n            low = mid + 1\n        else :\n            high = mid - 1\n        mid = (low + high) // 2\n    return ar[mid] + 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range( len(str) ) :\n        if str[i] == '0' and str[i+1] == '1' and str[i+2] == '0' :\n            count += 1\n        i += 1\n    return count\n", "result": "failed: string index out of range", "passed": false}
{"task_id": "Open/160", "completion": "    freq = {}\n    for i in range(n) :\n        if arr[i] in freq :\n            freq[arr[i]] += 1\n        else :\n            freq[arr[i]] = 1\n    for i in freq :\n        if freq[i] % 2 == 0 :\n            return i\n    return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n        ans = ans ^ xorArr\n    return ans\n", "result": "failed: ", "passed": false}
{"task_id": "Open/162", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/163", "completion": "    if n % 2 == 0 :\n        return 0\n    count = 0\n    for i in range( 2, n+1 ) :\n        if i % 4 == 0 :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/164", "completion": "    count = {}\n    for i in range(n) :\n        count[arr[i]] = count.get(arr[i], 0) + 1\n    return count.values()\n", "result": "failed: ", "passed": false}
{"task_id": "Open/165", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/166", "completion": "    if source == dest :\n        return 0\n    if source < dest :\n        return sys.maxsize\n    if source > dest :\n        return 0\n    queue = [source]\n    steps = 0\n    while queue :\n        current = queue.pop(0)\n        if current == dest :\n            return steps\n        if current + step < dest :\n            queue.append(current + step)\n        if current - step > source :\n            queue.append(current - step)\n        steps += 1\n    return sys.maxsize\n", "result": "failed: ", "passed": false}
{"task_id": "Open/167", "completion": "    result = \"1\"\n    count = 0\n    say = \"\"\n    for i in range(2, n+1) :\n        count = 0\n        say = \"\"\n        for j in range(len(result)) :\n            if result[j] == result[j+1] :\n                count += 1\n            else :\n                say += str(count) + result[j]\n                count = 0\n        say += str(count) + result[j]\n        result = say\n    return result\n", "result": "failed: string index out of range", "passed": false}
{"task_id": "Open/168", "completion": "    max_length = 0\n    current_length = 0\n    product = 1\n    for i in range(N):\n        if arr[i] >= 0:\n            product *= arr[i]\n            current_length += 1\n        else:\n            product = 1\n            current_length = 1\n    if product >= 0:\n        max_length = current_length\n    else:\n        max_length = current_length\n    return max_length\n", "result": "failed: ", "passed": false}
{"task_id": "Open/169", "completion": "    return math.sqrt( abs(m) * abs(n) )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/170", "completion": "    sum = 0\n    count = 0\n    for i in range(n) :\n        sum += arr[i]\n        if sum < k :\n            count += 1\n        else :\n            sum -= arr[i-k]\n    return count\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nk = 3", "result": "failed: ", "passed": false}
{"task_id": "Open/171", "completion": "    count = 0\n    for i in range( len( arr ) ) :\n        for j in range( i + 1, len( arr ) ) :\n            for k in range( j + 1, len( arr ) ) :\n                if abs( arr[k] - arr[i] ) <= L :\n                    count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range ( l, r+1 ) :\n        if ( i % 2 == 0 ) and ( i % 3 == 0 ) :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/173", "completion": "    return n ^ (1 << (m - 1))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/174", "completion": "    if K == 9 :\n        K = 0\n    count = 0\n    for i in range(R - K + 1) :\n        if (L + i) % 9 == 0 :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/175", "completion": "    return math.log10(n)[:k]\n", "result": "failed: 'float' object is not subscriptable", "passed": false}
{"task_id": "Open/176", "completion": "    left = 0\n    right = len(A) - 1\n    while left < right:\n        if A[left] > A[right]:\n            right -= 1\n        else:\n            left += 1\n    if left == right:\n        return A[left]\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/177", "completion": "    a.sort()\n    b.sort()\n    if a[0] >= b[0] and a[1] >= b[1]:\n        return 0\n    else:\n        return abs(b[2] - a[0] - a[1])\n", "result": "failed: 'int' object has no attribute 'sort'", "passed": false}
