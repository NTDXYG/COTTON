{"task_id": "Open/0", "completion": "    count = 0\n    sum = 0\n    for i in arr :\n        sum += i\n        if sum > K :\n            count += 1\n    return count\n\narr = [1,2,3,4,5]\nN = len(arr)\nK = 5"}
{"task_id": "Open/1", "completion": "    if n == 0 :\n        return 0\n    else :\n        return 1 + maxLen( arr[1:], n - 1 )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/2", "completion": "    mask = ( 1 << (r - l + 1)) - 1\n    return ( (n & mask) == mask )\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    remainders = {}\n    for i in range(n) :\n        remainder = A[i] % K\n        if remainder in remainders :\n            count += remainders[remainder] * (n - i)\n        remainders[remainder] = remainders.get(remainder, 0) + 1\n    return count\n\n"}
{"task_id": "Open/4", "completion": "    sum = 0\n    left_sum = 0\n    right_sum = sum\n    for i in a :\n        sum += i\n        if sum % 2 == 0 :\n            return False\n        left_sum += i\n        right_sum -= i\n    return left_sum == right_sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/5", "completion": "    if x & 1 == 0 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "    missing_elements = []\n    for i in vec :\n        if i > 0 :\n            missing_elements.append(i)\n    return missing_elements\n"}
{"task_id": "Open/7", "completion": "    \n    dp = [[0 for i in range(10)] for j in range(n)]\n    \n    for i in range(n) :\n        for j in range(10) :\n            if arr[i] == j :\n                dp[i][j] = 1\n            else :\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    \n    return dp[-1][-1]\n\n"}
{"task_id": "Open/8", "completion": "    prime_factors = []\n    for i in a :\n        prime_factors.append(int(math.sqrt(i)))\n    for i in a :\n        prime_factors.append(i)\n    for i in a :\n        prime_factors.append(set(prime_factors).difference(set([i])))\n    return prime_factors\n"}
{"task_id": "Open/9", "completion": "    \n    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 2. Find the kth largest element in the array.\n    largest = arr[k-1]\n    \n    # Step 3. Calculate the difference between the kth largest element and the first element of the array.\n    diff = largest - arr[0]\n    \n    # Step 4. Calculate the difference between the kth largest element and each element from index 1 to k.\n    for i in range(1,k) :\n        diff = min(diff, arr[i] - arr[i-1])\n    \n    # Step 5. Find the minimum value among these differences.\n    return diff\n    "}
{"task_id": "Open/10", "completion": "    total_time = 0\n    A_queue = deque(A)\n    B_queue = deque(B)\n    while A_queue :\n        if A_queue[0] == B_queue[0] :\n            total_time += 1\n            A_queue.popleft()\n            B_queue.popleft()\n        else :\n            B_queue.append(A_queue.popleft())\n            A_queue.append(B_queue.popleft())\n    return total_time\n\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in array :\n        if i % 2 == 0 :\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/12", "completion": "    \n    # Step 1. Initialize a dictionary to store the frequency of characters in the current substring.\n    freq = {}\n    count = 0\n    left = 0\n    right = 0\n    \n    # Step 2. Initialize a variable to store the count of substrings with at most k distinct characters.\n    count_sub = 0\n    \n    # Step 3. Initialize two pointers, left and right, to mark the start and end of the current substring.\n    while right < len(s) :\n        if s[right] not in freq :\n            freq[s[right]] = 1\n        else :\n            freq[s[right]] += 1\n            \n        # Step 4. While the right pointer is less than the length of the string:\n        while right < len(s) :\n            if freq[s[right]] > k :\n                freq[s[left]] -= 1\n                left += 1\n            else :\n                count += 1\n                freq[s[right]] = 1\n                right += 1\n                \n        # Step 5. Return the count of substrings with at most k distinct characters.\n        count_sub += count"}
{"task_id": "Open/13", "completion": "    \n    # Step 1. Initialize current number as 2.\n    current_number = 2\n    \n    # Step 2. While current number is less than or equal to integer:\n    while current_number <= n :\n        # Step 3. If integer is 1, return True.\n        if current_number == 1 :\n            return True\n        \n        # Step 4. Return False.\n        else :\n            # Step 5. Divide integer by current number and subtract result from integer.\n            current_number = current_number / current_number\n            \n    # Step 6. Return False.\n    return False\n"}
{"task_id": "Open/14", "completion": "    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    b = pow(a,(n-1)/2,n)\n    if b == 1 or b == n-1 :\n        return -1\n    for i in range(t) :\n        a = random.randint(2,n-1)\n        b = pow(a,(n-1)/2,n)\n        if b == 1 or b == n-1 :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "    if len(s1)!= len(s2) :\n        return False\n    for i in range(len(s1)) :\n        if s1[i]!= s2[i] :\n            return False\n    return True\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(0,length) :\n        if s[i] == '1' :\n            count += 1\n        else :\n            count -= 1\n    return min(count,length-count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range ( 1, n + 1 ) :\n        if math.pow ( i, n ) == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    elif y == 1 :\n        return x\n    else :\n        return x * product(x, y-1)\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        elif i % 4 == 1 :\n            count1 += 1\n        elif i % 4 == 2 :\n            count2 += 1\n        elif i % 4 == 3 :\n            count3 += 1\n    if count0 == 4 and count1 == 4 and count2 == 4 and count3 == 4 :\n        return 1\n    else :\n        return 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/22", "completion": "    max_len = 0\n    current_len = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            current_len += 1\n        else :\n            current_len = 1\n        max_len = max(max_len, current_len)\n    return max_len\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        if sum > 0 :\n            return subsetSum ( arr, n, i + 1, sum - arr[i], count )\n        else :\n            return subsetSum ( arr, n, i + 1, sum, count )\n\n"}
{"task_id": "Open/24", "completion": "    if n == 1 :\n        return 1\n    else :\n        return (n + 15) % n\n"}
{"task_id": "Open/25", "completion": "    \n    sum_of_squares = 0\n    sum_of_numbers = 0\n    total_sum = 0\n    \n    for i in range ( 1, n + 1 ) :\n        sum_of_squares += i ** 2\n        sum_of_numbers += i\n        total_sum += i\n    \n    return total_sum\n"}
{"task_id": "Open/26", "completion": "    \n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        if n % i == 0 :\n            sum += i\n    return sum\n"}
{"task_id": "Open/27", "completion": "    \n    if x < y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return ( (b - a) / a) * 100\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum += i ** 2\n    return sum / n\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n\n"}
{"task_id": "Open/32", "completion": "    return 3**(n-1)\n"}
{"task_id": "Open/33", "completion": "    term = 1\n    for i in range ( 2, n + 1 ) :\n        term = term * 2\n        term += i\n    return term\n"}
{"task_id": "Open/34", "completion": "    \n    count = 0\n    product = 1\n    left = 0\n    \n    for i in range( len( a ) ) :\n        product *= a[i]\n        \n        while product >= k :\n            product /= a[left]\n            left += 1\n            \n        count += ( i - left )\n    \n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1) :\n        s = str(i)\n        if s[0] == d :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    \n    set = set(arr)\n    for i in range(1,n+1) :\n        if i not in set :\n            return i\n    return n+1\n\n"}
{"task_id": "Open/37", "completion": "    dp = [ 1 for i in range( n+1 ) ]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range( 2, n+1 ) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    area_sum = 0\n    for i in range(1, min(l, b) + 1) :\n        area_sum += i * i\n    return area_sum\n"}
{"task_id": "Open/39", "completion": "    return sum( range(1,N+1) )\n"}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    current_zeros = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            current_zeros += 1\n        else :\n            max_zeros = max(max_zeros, current_zeros)\n            current_zeros = 0\n    return max_zeros\n\n"}
{"task_id": "Open/41", "completion": "    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(n) :\n        if arr[i] == 0 :\n            current_length += 1\n        else :\n            current_length = 0\n        max_length = max(max_length, current_length)\n    \n    return max_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/42", "completion": "    dq = deque()\n    ans = a[0]\n    for i in range(n-k) :\n        if len(dq) == 0 :\n            dq.append(i)\n        elif a[i] < a[dq[-1]] :\n            dq.pop()\n        else :\n            dq.append(i)\n    ans = max(ans, a[dq[0]])\n    for i in range(k, n-1) :\n        if len(dq) == 0 :\n            dq.append(i)\n        elif a[i] > a[dq[-1]] :\n            dq.pop()\n        else :\n            dq.append(i)\n        ans = max(ans, a[dq[0]])\n    return ans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    product = 1\n    for i in range( n ) :\n        product *= array[i]\n        if product <= k :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/44", "completion": "    if len( arr ) == 0 :\n        return 0\n    if len( arr ) == 1 :\n        return arr[0]\n    if len( arr ) == 2 :\n        return abs( arr[0] - arr[1] )\n    if len( arr ) == 3 :\n        return abs( arr[0] - arr[1] ) + abs( arr[2] - arr[1] )\n    if len( arr ) == 4 :\n        return abs( arr[0] - arr[1] ) + abs( arr[2] - arr[3] ) + abs( arr[3] - arr[2] )\n    if len( arr ) == 5 :\n        return abs( arr[0] - arr[1] ) + abs( arr[2] - arr[3] ) + abs( arr[3] - arr[4] )\n    if len( arr ) == 6 :\n        return abs( arr[0] - arr[1] ) + abs( arr[2] - arr[3] ) + abs( arr[4] - arr[5] )\n    if len( arr ) == 7"}
{"task_id": "Open/45", "completion": "    \n    min_element = arr[0]\n    min_cost = 0\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n        min_cost += arr[i]\n    return min_cost * (n - 1)\n\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range( len( array ) ) :\n        diff = array[ i ] - i\n        if diff > max_diff :\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    ax1 = a * x1 + b * y1 - c\n    ax2 = a * x2 + b * y2 - c\n    if ax1 == 0 and ax2 == 0 :\n        return True\n    elif ax1 == 0 :\n        return False\n    elif ax2 == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range( a ) :\n        count += 1\n        if ( a ^ i ) == a :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/49", "completion": "\n    max_and = 0\n    for i in range( L, R + 1 ) :\n        max_and = max( max_and, i )\n    return max_and\n"}
{"task_id": "Open/50", "completion": "    smallest_factor = -1\n    for i in range(n) :\n        if a[i] == 0 :\n            return -1\n        smallest_factor = gcd(smallest_factor, a[i])\n    return smallest_factor\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range ( n ) :\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    \n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    for i in range(n) :\n        for j in range(n) :\n            dp[i+1][j+1] = dp[i][j]\n            \n    for i in range(n) :\n        for j in range(n) :\n            if arr[i][j] == 1 :\n                dp[i+1][j+1] = dp[i][j] ^ dp[n][n]\n                \n    return dp\n\narr = [[1,1,1],[1,1,1],[1,1,1]]\nn = 3"}
{"task_id": "Open/53", "completion": "    \n    count = 0\n    for i in range( N ) :\n        count += i ^ i\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in a :\n        sum += i\n    return sum == k\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/55", "completion": "    if ( n == 0 or n == 1 ) :\n        return False\n    elif ( n & ( n - 1 ) ) == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "    \n    count = 0\n    for i in range( len( s ) ) :\n        if s[ i ] == s[ i - 1 ] :\n            count += 1\n        else :\n            count = 1\n    return count\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2,N+1) :\n        result = result + var1 * var2\n        var1 = var2\n        var2 = result\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/59", "completion": "    arr_copy = arr.copy()\n    for i in range( len( arr ) ) :\n        arr_copy[ i ] = arr_copy[ i ] % ranges[ reversals - 1 ]\n    return arr_copy[ index ]\n\n"}
{"task_id": "Open/60", "completion": "    \n    left = 0\n    right = n\n    while left <= right :\n        sum = left**2 + right**2\n        if sum == n :\n            return True\n        elif sum < n :\n            left += 1\n        else :\n            right -= 1\n    return False\n\n"}
{"task_id": "Open/61", "completion": "\n    count = 0\n    for i in range( len(a) ) :\n        if a[i] == b[0] :\n            count += 1\n        else :\n            return -1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/62", "completion": "    modified = \"\"\n    for i in range( len( str ) - 1 ) :\n        if str[i] > str[i+1] :\n            modified += str[i]\n            modified += \"9\"\n        else :\n            modified += str[i]\n    return modified\n"}
{"task_id": "Open/63", "completion": "    sum_of_logarithms = 0\n    for i in arr :\n        sum_of_logarithms += math.log(i)\n    return sum_of_logarithms / n\n\n"}
{"task_id": "Open/64", "completion": "    \n    # Step 1. Initialize a variable to store the largest substring.\n    largest = \"\"\n    \n    # Step 2. Iterate through the string.\n    for i in range( len( s ) ) :\n        if s[i] == \"1\" :\n            largest = s[i:]\n        else :\n            largest = s[i] + largest\n            \n    # Step 3. Return the largest substring.\n    return largest\n"}
{"task_id": "Open/65", "completion": "    d = {}\n    for i in a :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in d :\n        if d[i] > k :\n            del d[i]\n    return len(d)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/66", "completion": "    if ( n == 0 ) :\n        return -1\n    if ( k == 0 ) :\n        return ( arr[0] + arr[n-1] ) / 2\n    if ( k > n ) :\n        return -1\n    if ( k < 0 ) :\n        return -1\n    if ( n % 2 == 0 ) :\n        return ( arr[n//2] + arr[n//2-1] ) / 2\n    else :\n        return ( arr[n//2] + arr[n//2] ) / 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/67", "completion": "    \n    # Step 1. Initialize step count to 0.\n    step_count = 0\n    \n    # Step 2. Initialize positive, negative, and zero count to 0.\n    positive = 0\n    negative = 0\n    zero = 0\n    \n    # Step 3. Iterate through the array.\n    for i in a :\n        if i == 1 :\n            positive += 1\n        elif i == -1 :\n            negative += 1\n        elif i == 0 :\n            zero += 1\n        \n    # Step 4. If negative count is even, add zero count to step count.\n    if negative % 2 == 0 :\n        step_count += zero\n        \n    # Step 5. If negative count is odd, check if there are any zero elements.\n    if negative % 2 == 1 :\n        if zero > 0 :\n            step_count += zero\n        \n    # Step 6. Return step count.\n    return step_count\n"}
{"task_id": "Open/68", "completion": "    \n    if n == 1 :\n        return 0\n    else :\n        v = []\n        v.append(n % 5)\n        n = n // 5\n        result = 0\n        for i in range ( len ( v ) ) :\n            result = result * 10 + v[ i ]\n        return result * 2\n\n"}
{"task_id": "Open/69", "completion": "    prev = -1\n    for bit in bin(n)[2:] :\n        if bit == '1' and prev == -1 :\n            prev = 0\n        elif bit == '1' and prev == 0 :\n            return False\n        elif bit == '0' and prev == -1 :\n            prev = 0\n        prev = prev - 1\n    return True\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    quotient = n // x\n    remainder = n % x\n    if remainder == 0 :\n        return n\n    else :\n        return n + (x - remainder)\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range( n ) :\n        sum += 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range ( 1, n + 1 ) :\n        series_sum = 1\n        for j in range ( 1, i + 1 ) :\n            series_sum += 2\n        sum += series_sum\n    return sum\n"}
{"task_id": "Open/73", "completion": "    d = {}\n    for i in arr :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    max_freq = max(d.values())\n    for i in arr :\n        if d[i] == max_freq :\n            return i\n    return -1\n\n\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n) :\n        if (a[i] & (a[i] - 1)) == 0 :\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/75", "completion": "    result = 0\n    for i in range( n ) :\n        result = result | ( 1 << i )\n    return result\n"}
{"task_id": "Open/76", "completion": "    count = 0\n    for i in range( len(A) ) :\n        if A[i] == 0 :\n            count += 1\n        elif A[i] == 1 :\n            count -= 1\n    return count\n"}
{"task_id": "Open/77", "completion": "    return radian * 180 / pi\n"}
{"task_id": "Open/78", "completion": "    return math.floor( n / 2 )\n"}
{"task_id": "Open/79", "completion": "    \n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum = sum + a + ( i - 1 ) * d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 0 :\n        return 1\n    else :\n        return n // 2\n"}
{"task_id": "Open/81", "completion": "    chessboard = [[0 for i in range(8)] for j in range(8)]\n    chessboard[row][column] = 1\n    visited = [False for i in range(8)]\n    visited[row] = True\n    queue = []\n    queue.append((row, column))\n    while len(queue) > 0 :\n        row, column = queue.pop(0)\n        for i in range(4) :\n            new_row = row + moves[i]\n            new_column = column + moves[i]\n            if new_row < 0 or new_row >= 8 or new_column < 0 or new_column >= 8 :\n                continue\n            if not visited[new_row][new_column] :\n                visited[new_row][new_column] = True\n                queue.append((new_row, new_column))\n    return sum(sum(row) for row in chessboard if row[column] == 1) - 1\n"}
{"task_id": "Open/82", "completion": "    result = 0\n    for i in range ( 1, n ) :\n        result = result + i\n    return result\n\n"}
{"task_id": "Open/83", "completion": "\n    # Step 1. Find the last occurrence of each character in the string and store it in a list.\n    last = [0] * 26\n    for i in range( len( s ) ) :\n        last[ord( s[ i ] ) - ord('a')] += 1\n    \n    # Step 2. Sort the string.\n    s = sorted( s )\n    \n    # Step 3. Iterate through the string and compare each character with its corresponding character in the sorted string.\n    for i in range( len( s ) ) :\n        if s[ i ]!= s[ last[ ord( s[ i ] ) - ord('a') ] ] :\n            s[ i ], s[ last[ ord( s[ i ] ) - ord('a') ] ] = s[ last[ ord( s[ i ] ) - ord('a') ] ], s[ i ]\n    \n    # Step 4. If a character is not in the correct position, swap it with the character at its last occurrence.\n    for i in range( len( s ) ) :\n        if s[ i ]!= s[ last[ ord( s["}
{"task_id": "Open/84", "completion": "    array = [0] * n\n    array[0] = 1\n    array[1] = 2\n    sum = 0\n    for i in range(2, n) :\n        if i % 2 == 1 :\n            array[i] = array[i-1] + 2\n        else :\n            array[i] = array[i-1]\n        sum += array[i]\n    return sum\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        return x\n    else :\n        return y\n"}
{"task_id": "Open/86", "completion": "    if N == 0 :\n        return A\n    if N == 1 :\n        return B\n    if N == 2 :\n        return A + B\n    if N == 3 :\n        return A + B + A\n    if N == 4 :\n        return A + B + A + B\n    if N == 5 :\n        return A + B + A + B + A + B\n    if N == 6 :\n        return A + B + A + B + A + B + A + B\n    if N == 7 :\n        return A + B + A + B + A + B + A + B + A + B\n    if N == 8 :\n        return A + B + A + B + A + B + A + B + A + B\n    if N == 9 :\n        return A + B + A + B + A + B + A + B + A + B + A + B\n    if N == 10 :\n        return A + B + A + B + A + B + A + B + A + B + A + B\n    if N == 11 :\n        return A + B + A + B + A"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range( len( str ) ) :\n        if str[i] == substr[0] :\n            if substr[1:] in str :\n                count += 1\n        else :\n            count = 0\n    return count\n"}
{"task_id": "Open/88", "completion": "    \n    # Step 1. Convert annual interest rate to monthly interest rate.\n    r_monthly = r / 12\n    \n    # Step 2. Convert loan tenure from years to months.\n    t_months = t / 12\n    \n    # Step 3. Calculate EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = (p * r_monthly * (1 + r_monthly)**t_months) / ((1 + r_monthly)**t_months - 1)\n    \n    return emi\n"}
{"task_id": "Open/89", "completion": "    \n    # Step 1. Sort arrays A, B, and C.\n    A.sort()\n    B.sort()\n    C.sort()\n    \n    # Step 2. Initialize count to 0.\n    count = 0\n    \n    # Step 3. Iterate through array A.\n    for i in range(len(A)) :\n        # Initialize left and right pointers to 0 and n-1 respectively.\n        left = 0\n        right = len(A) - 1\n        \n        # While left < right:\n        while left < right :\n            # If A[i] * C[right] > B[left] * B[left]:\n            if A[i] * C[right] > B[left] * B[left] :\n                # Add right - left to count.\n                right -= left\n            # Else:\n            # Increment left.\n            else :\n                left += 1\n        count += left\n    \n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(1,n-1) :\n        for j in range(i+1,n) :\n            diff = arr[i] - arr[j]\n            if dp[j][diff] > 0 :\n                dp[i][diff] = max(dp[i][diff], dp[j][diff] + 1)\n    return max(dp[n-1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/92", "completion": "    max_len = 0\n    start = 0\n    for i in range( len( str ) ) :\n        if str[i].isalnum() :\n            end = i + 1\n        else :\n            start = i + 1\n            max_len = max( max_len, end - start + 1 )\n    if max_len == 0 :\n        return \"-1\"\n    else :\n        return max_len\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1 :\n        n = n / 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    s = list( 'a' )\n    for i in range( n ) :\n        s[ i ] = chr( ord( s[ i ] ) + k )\n    return ''.join( s )\n"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel // n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    total_sum = 0\n    current_sum = 0\n    for i in range(n) :\n        total_sum += arr[i]\n        current_sum += arr[i]\n        if current_sum == total_sum :\n            return 1\n    return 0\n\n"}
{"task_id": "Open/97", "completion": "    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "    count = 0\n    while n > 0 :\n        n = n // 10\n        count += 1\n    return count\n"}
{"task_id": "Open/99", "completion": "    \n    # Step 1. Find the maximum and minimum values among a, b, c.\n    max_a = max(a,b,c)\n    min_a = min(a,b,c)\n    \n    # Step 2. Check if the difference between maximum and minimum is less than or equal to k.\n    if (max_a - min_a) <= k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/100", "completion": "    if x == y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range( len( s ) ) :\n        if s[ i ]!= s[ i - 1 ] :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    \n    arr.sort()\n    min_diff = float(\"inf\")\n    for i in range(1,n-1) :\n        min_diff = min(min_diff, abs(arr[i] - arr[i-1]))\n    return min_diff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/104", "completion": "    \n    result = 0\n    for i in range( left, right + 1 ) :\n        if ( i & 1 ) :\n            result = result * 2 + 1\n        else :\n            result = result * 2\n    return result\n\n"}
{"task_id": "Open/105", "completion": "    result = 1\n    while result <= n :\n        result *= 2\n    return result\n"}
{"task_id": "Open/106", "completion": "    \n    sum = 0\n    for i in range ( 1, n/2 ) :\n        if n % i == 0 :\n            sum += i\n    if sum == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "    \n    totalDays = 365\n    centuries = 0\n    leapCenturies = 0\n    leapYears = 0\n    nonLeapYears = 0\n    \n    if ( N % 100 == 0 ) :\n        centuries = 1\n    if ( N % 400 == 0 ) :\n        leapCenturies = 1\n    if ( N % 100!= 0 ) :\n        leapYears = 1\n    if ( N % 400!= 0 ) :\n        nonLeapYears = 1\n    \n    totalDays = totalDays - leapYears - nonLeapYears\n    oddDays = totalDays % 7\n    \n    return oddDays\n"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return (3 * a**2 - a) / 2\n"}
{"task_id": "Open/109", "completion": "    \n    count = 0\n    n = str(n)\n    for i in n :\n        if i == d :\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/110", "completion": "    str_n = str(n)\n    for i in str_n :\n        if str_n.count(i) > 1 :\n            return False\n    return True\n"}
{"task_id": "Open/111", "completion": "    \n    # Step 1. Initialize a dictionary to store the frequency of each element in the list.\n    freq = {}\n    for i in a :\n        if i in freq :\n            freq[i] += 1\n        else :\n            freq[i] = 1\n    \n    # Step 2. Iterate through the list and update the frequency of each element in the dictionary.\n    for i in a :\n        if i in freq :\n            freq[i] += 1\n        else :\n            freq[i] = 1\n    \n    # Step 3. Initialize a variable to store the minimum frequency of all the elements in the list.\n    min_freq = min(freq.values())\n    \n    # Step 4. Iterate through the dictionary and find the minimum frequency.\n    for i in freq :\n        if freq[i] == min_freq :\n            return True\n    return False\n"}
{"task_id": "Open/112", "completion": "\n    # Step 1. Initialize an array of size n+1 with all elements set to 0.\n    array = [0] * (n+1)\n\n    # Step 2. Set the first element of the array to 4 and the second element to 7.\n    array[0] = 4\n    array[1] = 7\n\n    # Step 3. Iterate through the array from index 3 to n+1.\n    for i in range(3, n+1, 2) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10\n        else :\n            array[i] = array[(i//2)-1] * 10\n\n    # Step 4. Return the value at index n of the array.\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "    arr = [0]*(n+1)\n    arr[0] = 3\n    arr[1] = 5\n    for i in range(2,n+1) :\n        if i%2 == 1 :\n            arr[i] = arr[i//2] * 10\n        else :\n            arr[i] = arr[(i//2)-1] * 10\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "    array = [0]*(n+1)\n    array[0] = 1\n    array[1] = 2\n    for i in range(2,n+1) :\n        if i%2 == 0 :\n            array[i] = array[i//2] * 10 + array[i//2]\n        else :\n            array[i] = array[i//2] * 10 + array[i//2] + 2\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "    \n    sum = 0\n    for i in a :\n        sum += i\n    if sum % 11 == 0 :\n        return True\n    else :\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    \n    result = \"\"\n    for i in string :\n        if i.isalpha() :\n            result += i.capitalize()\n        else :\n            result += i\n    return result\n"}
{"task_id": "Open/118", "completion": "    return int( math.ceil( math.sqrt(8 * p + 1) - 1) / 2 )\n"}
{"task_id": "Open/119", "completion": "    \n    # Step 1. Create a set to store unique elements.\n    unique = set()\n    \n    # Step 2. Iterate through the array.\n    for i in arr :\n        unique.add(i)\n    \n    # Step 3. If the length of the set is equal to the length of the array, return True.\n    if len(unique) == len(arr) :\n        return True\n    \n    # Step 4. Otherwise, return False.\n    return False\n"}
{"task_id": "Open/120", "completion": "    set = set()\n    for i in range( len( string ) ) :\n        if string[i] == string[i+1] :\n            set.add( string[i] )\n    return len( set )\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    \n    # Step 1. Initialize maximum number as 0.\n    maximum = 0\n    \n    # Step 2. Iterate through each character in the string.\n    for c in ss :\n        if c.isdigit() :\n            maximum = maximum * 10 + int(c)\n        else :\n            maximum = max(maximum, int(c))\n    \n    # Step 3. Return maximum number.\n    return maximum\n"}
{"task_id": "Open/123", "completion": "    \n    longest_substring = \"\"\n    current_substring = \"\"\n    start = 0\n    end = 0\n    \n    for i in range( len( s ) ) :\n        if s[i].isdigit() :\n            current_substring += s[i]\n            end += 1\n        else :\n            if len( current_substring ) > length :\n                longest_substring = current_substring\n                start = end\n            current_substring = \"\"\n            start = 0\n            end = 0\n    \n    if len( current_substring ) > length :\n        longest_substring = current_substring\n    \n    return longest_substring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/124", "completion": "    if N > 0 and M > 0 :\n        return N * M\n    elif N > 0 :\n        return N\n    elif M > 0 :\n        return M\n    else :\n        return 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/125", "completion": "    prev = \"\"\n    for i in range(length) :\n        if string[i] == prev :\n            return False\n        prev = string[i]\n    return True\n"}
{"task_id": "Open/126", "completion": "    result = 1\n    while result <= n :\n        result *= 2\n    return result / 2\n"}
{"task_id": "Open/127", "completion": "    A = str(A)\n    B = str(B)\n    if len(A) == len(B) :\n        if A == B :\n            return True\n        else :\n            return False\n    else :\n        return False\n"}
{"task_id": "Open/128", "completion": "    \n    if x!= y :\n        return False\n    else :\n        return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/129", "completion": "    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    for i in range ( 3, n ) :\n        Sn_3 = Sn_1 + Sn_2\n        Sn_2 = Sn_1\n        Sn_1 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    min_steps = 0\n    for i in range(1,n) :\n        min_steps += abs(arr[i] - arr[i-1])\n    return min_steps\n\n"}
{"task_id": "Open/131", "completion": "    \n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    else :\n        return 1\n    "}
{"task_id": "Open/132", "completion": "    m = 0\n    sum = 0\n    for i in range ( 1, N ) :\n        if ( a % i == 0 ) :\n            m = m + 1\n            sum = sum + ( i * ( i + 1 ) ) / 2\n    ans = m * ( m + 1 ) / 2\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N < 2 :\n        return N\n    elif N < 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    else :\n        return N - 1\n\n"}
{"task_id": "Open/134", "completion": "    \n    if ( arr[0] % 2 == 0 ) :\n        return True\n    elif ( arr[-1] % 2 == 0 ) :\n        return True\n    elif ( n % 2 == 0 ) :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return R - L + 1\n    elif N > 1 :\n        return countSum(N-1, L, R) + 1\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "    arr.append(False)\n    for i in range(n) :\n        if arr[i] == False :\n            return i\n    return -1\n\n"}
{"task_id": "Open/137", "completion": "    list_of_chars = list(s)\n    list_of_chars.sort()\n    return ''.join(list_of_chars)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range( n ) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n        elif arr[i] < arr[i-1] :\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    \n    sum = 0\n    for c in s :\n        sum += ord(c)\n    return sum / len(s)\n"}
{"task_id": "Open/140", "completion": "    total_B = B * N\n    if total_B > S :\n        return 0\n    num_A = (S - total_B) // A\n    if num_A > 0 :\n        return num_A\n    else :\n        return -1\n"}
{"task_id": "Open/141", "completion": "    if x == 0 or y == 0 :\n        return 0\n    return x * y // math.gcd(x,y)\n\n"}
{"task_id": "Open/142", "completion": "    \n    count = 0\n    while n > 0 :\n        count += n % 2\n        n //= 2\n    return count\n"}
{"task_id": "Open/143", "completion": "    \n    left_xor = [0] * n\n    right_xor = [0] * n\n    \n    for i in range(n) :\n        left_xor[i] = arr[i] ^ i\n    \n    for i in range(n-1,-1,-1) :\n        right_xor[i] = arr[i] ^ i\n    \n    max_xor = 0\n    max_index = -1\n    \n    for i in range(n) :\n        if left_xor[i] > right_xor[i] :\n            max_xor = left_xor[i]\n            max_index = i\n    \n    return max_index\n\n"}
{"task_id": "Open/144", "completion": "    \n    dp = [1] * n\n    for i in range(1,n) :\n        for j in range(i) :\n            if arr[i] < arr[j] :\n                dp[i] = max(dp[i],dp[j]+1)\n    return max(dp)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/145", "completion": "    arr.sort()\n    for i in range(n) :\n        if arr[i] == k :\n            return arr[i]\n    return -1\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 5"}
{"task_id": "Open/146", "completion": "    \n    remainders = set()\n    remainder = 0\n    \n    while remainder not in remainders:\n        remainders.add(remainder)\n        remainder = remainder * 10\n    \n    return len(remainders)\n"}
{"task_id": "Open/147", "completion": "    \n    # Step 1. Sort the array.\n    arr.sort()\n    \n    # Step 2. Find the median of the sorted array.\n    median = (arr[n//2] + arr[n//2-1])/2\n    \n    # Step 3. Calculate the difference between each element and the median.\n    diff = [abs(arr[i] - median) for i in range(n)]\n    \n    # Step 4. Sum up all the differences.\n    sum = 0\n    for i in range(n) :\n        sum += diff[i]\n    \n    # Step 5. Return the sum.\n    return sum\n\n"}
{"task_id": "Open/148", "completion": "    \n    sum = 0\n    first = 3\n    second = 3\n    \n    for i in range ( n ) :\n        sum = sum + first\n        first = second\n        second = sum\n    \n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s**0.5\n"}
{"task_id": "Open/150", "completion": "    p = float(p) / 100\n    q = float(q) / 100\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    xor = 0\n    for i in range( len1 ) :\n        xor = xor ^ ord( str1[i] )\n    return xor\n"}
{"task_id": "Open/152", "completion": "    return n == '1'\n\n"}
{"task_id": "Open/153", "completion": "    \n    prev = None\n    for c in s :\n        if c == 'a' :\n            if prev == 'a' :\n                return False\n            prev = 'a'\n        elif c == 'e' :\n            if prev == 'e' :\n                return False\n            prev = 'e'\n        elif c == 'i' :\n            if prev == 'i' :\n                return False\n            prev = 'i'\n        elif c == 'o' :\n            if prev == 'o' :\n                return False\n            prev = 'o'\n        elif c == 'u' :\n            if prev == 'u' :\n                return False\n            prev = 'u'\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high + 1) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    \n    # Step 1. Find the nearest power of 2 to the input number.\n    nearestPowerOf2 = int(math.log( n, 2 ))\n    \n    # Step 2. Calculate the absolute difference between the input number and the nearest power of 2.\n    minAbsDiff = abs( n - nearestPowerOf2 )\n    \n    return minAbsDiff\n\n"}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        return (3 * math.sqrt(3) * r**2) / 2\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "\n    low = 0\n    high = size-1\n    mid = (low+high)//2\n    while low <= high :\n        if ar[mid] == mid :\n            return mid\n        elif ar[mid] < mid :\n            low = mid+1\n        else :\n            high = mid-1\n    return mid\n\n\n"}
{"task_id": "Open/159", "completion": "    \n    count = 0\n    for i in range( len( str ) ) :\n        if str[i] == '0' and str[i+1] == '0' :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/160", "completion": "    d = {}\n    for i in arr :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in d :\n        if d[i] % 2 == 1 :\n            return i\n    return -1\n\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range( n ) :\n        xorArr = xorArr ^ arr[i]\n        ans = ans if xorArr > ans else ans\n    return ans\n\n"}
{"task_id": "Open/162", "completion": "    if dx == 0 and dy == 0 :\n        return True\n    elif dx == 0 :\n        return False\n    elif dy == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/163", "completion": "    \n    if n % 2 == 0 :\n        return 0\n    \n    count = 0\n    \n    for i in range(2, n-1) :\n        if i % 4 == 0 :\n            count += 1\n    \n    return count\n\n"}
{"task_id": "Open/164", "completion": "    \n    # Step 1. Create a dictionary to store the count of each element in the array.\n    d = {}\n    for i in arr :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    \n    # Step 2. Iterate through the array and add each element to the dictionary.\n    count = 1\n    for i in arr :\n        count *= d[i]\n    \n    # Step 3. Calculate the count of all possible subsequences by multiplying the values of the dictionary.\n    return count\n"}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 1\n    elif height == 1 :\n        return 2\n    else :\n        return AVLnodes(height - 1) + AVLnodes(height - 2) + 1\n"}
{"task_id": "Open/166", "completion": "\n    # Step 1. Initialize a queue with source.\n    queue = [source]\n\n    # Step 2. While queue is not empty:\n    while queue :\n        # Pop front of queue and assign it to current.\n        current = queue.pop(0)\n\n        # If current == dest, return steps.\n        if current == dest :\n            return steps\n\n        # Push current + step and current - step to queue.\n        queue.append(current + step)\n        queue.append(current - step)\n\n    # Step 3. Return sys.maxsize.\n    return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "    result = \"1\"\n    count = 0\n    say = \"\"\n    for i in range ( 2, n ) :\n        count = 0\n        say = \"\"\n        for j in range ( len ( result ) ) :\n            if result[ j ] == result[ j - 1 ] :\n                count += 1\n            else :\n                say += str ( count ) + result[ j - 1 ]\n                count = 1\n        say += str ( count ) + result[ j - 1 ]\n        result = say\n    return result\n\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    current_length = 0\n    product = 1\n    for i in arr :\n        if i > 0 :\n            product *= i\n        elif i < 0 :\n            product = 1\n        else :\n            current_length += 1\n            if current_length > max_length :\n                max_length = current_length\n    return max_length\n\n"}
{"task_id": "Open/169", "completion": "    abs_m = abs(m)\n    abs_n = abs(n)\n    numerator = abs_m * abs_n\n    denominator = math.sqrt(abs_m * abs_m + abs_n * abs_n)\n    return numerator / denominator\n"}
{"task_id": "Open/170", "completion": "    sum = 0\n    count = 0\n    for i in range(n) :\n        sum += arr[i]\n        if sum < k :\n            count += 1\n        if sum > k :\n            sum -= arr[0]\n    return count\n\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            for k in range(j+1,n) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/172", "completion": "    \n    count = 0\n    for i in range( l, r + 1 ) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    mask = ( 1 << m ) - 1\n    return ( n ^ mask )\n"}
{"task_id": "Open/174", "completion": "    if K == 9 :\n        K = 0\n    count = 0\n    for i in range( L, R + 1 ) :\n        if ( i % 9 == K ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    product = n * math.log10(n)\n    product_str = str(product)\n    return product_str[:k]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/176", "completion": "    left = 0\n    right = n-1\n    while left < right :\n        if A[left] > A[right] :\n            right -= 1\n        else :\n            left += 1\n    if left == right :\n        return A[left]\n    else :\n        return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/177", "completion": "    \n    arr = [a,b,c]\n    arr.sort()\n    if arr[0] > arr[1] and arr[0] > arr[2] :\n        return 0\n    else :\n        return arr[2] - arr[0]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
