{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(paren_string[i])\n        elif paren_string[i] == ')':\n            if len(stack) == 0:\n                groups.append(paren_string[i:])\n                i += 1\n            else:\n                stack.pop()\n        i += 1\n    return groups\n\n"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "    # Calculate the mean of the numbers.\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute difference between each number and the mean.\n    absolute_differences = [abs(number - mean) for number in numbers]\n\n    # Calculate the average of the absolute differences.\n    average_absolute_differences = sum(absolute_differences) / len(absolute_differences)\n\n    return average_absolute_differences\n\n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(1)\n            max_depth = max(max_depth, len(stack))\n        elif paren_string[i] == ')':\n            stack.pop()\n    return max_depth\n\n"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            if numbers[i] > result[-1]:\n                result.append(numbers[i])\n            else:\n                result.append(result[-1])\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    \n    # Step 1. Find the longest palindromic suffix of the string.\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            break\n    \n    # Step 2. Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string[:i] + string[i:][::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)\n\n"}
{"task_id": "HumanEval/13", "completion": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n\n"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result[:-1]\n"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for c in music_string:\n        if c == 'o':\n            beats.append(4)\n        elif c == 'o|':\n            beats.append(2)\n        elif c == '.':\n            beats.append(1)\n    return beats\n\n"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "    numbers_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5','six': '6','seven': '7', 'eight': '8', 'nine': '9'}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: numbers_dict[x])\n    return''.join(numbers_list)\n\n"}
{"task_id": "HumanEval/20", "completion": "    numbers = sorted(numbers)\n    min_diff = float('inf')\n    min_n1, min_n2 = None, None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_n1 = numbers[i]\n            min_n2 = numbers[i + 1]\n    return min_n1, min_n2\n\n"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [((x - min_num) / (max_num - min_num)) for x in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "    return [int(x) for x in values if isinstance(x, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n\n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    seen = set()\n    for item in numbers:\n        if item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2!= 0:\n        return None\n    if xs[-1] == 0:\n        return None\n    if xs[-1] > 0:\n        return None\n    low = -1\n    high = 1\n    while low < high:\n        mid = (low + high) / 2\n        if poly(mid) == 0:\n            return mid\n        if poly(mid) > 0:\n            high = mid\n        if poly(mid) < 0:\n            low = mid\n    return None\n\n"}
{"task_id": "HumanEval/33", "completion": "    l_prime = [None] * len(l)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime[i] = l[i]\n        else:\n            l_prime[i] = l[i]\n    return l_prime\n"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "    l_prime = [None] * len(l)\n    for index, value in enumerate(l):\n        if index % 2 == 0:\n            l_prime[index] = value\n        else:\n            l_prime[index] = l[index]\n    l_prime.sort()\n    for index, value in enumerate(l):\n        if index % 2 == 0:\n            l_prime[index] = l[index]\n    return l_prime\n"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "    fib = 0\n    fib_next = 1\n    for i in range(2, n+1):\n        fib = fib_next\n        fib_next = fib + fib_next\n        if is_prime(fib_next):\n            return fib_next\n    return -1\n"}
{"task_id": "HumanEval/40", "completion": "    l = sorted(l)\n    for i in range(len(l)):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] > 0:\n                right -= 1\n            else:\n                left += 1\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "    return n * n\n"}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"}
{"task_id": "HumanEval/43", "completion": "    # Your code here\n    # Hint: you can use a set to store the values you've seen\n    # and then check if the compliment of the current element is in the set\n    # if it is, return True, otherwise return False\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return ''.join(str(d) for d in digits)\n"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2\n"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    for i in range(n):\n        result = (result * 2) % p\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "    d = {}\n    for c in s0:\n        if c not in d:\n            d[c] = 0\n        d[c] += 1\n    for c in s1:\n        if c not in d:\n            return False\n        d[c] -= 1\n    return all(d[c] == 0 for c in d)\n"}
{"task_id": "HumanEval/55", "completion": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "    if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/57", "completion": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n"}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))\n"}
{"task_id": "HumanEval/59", "completion": "    largest_prime_factor = 2\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if is_prime(i):\n                largest_prime_factor = i\n    return largest_prime_factor\n"}
{"task_id": "HumanEval/60", "completion": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative\n"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "    vowel_count = 0\n    for i in s:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            vowel_count += 1\n        elif i == 'y' and s[-1] == 'y':\n            vowel_count += 1\n    return vowel_count\n"}
{"task_id": "HumanEval/65", "completion": "    # convert the integer to a string\n    x = str(x)\n    # find the length of the string\n    length = len(x)\n    # if shift is greater than the length of the string, shift is the remainder\n    if shift > length:\n        shift = shift % length\n    # create a new string to store the result\n    result = \"\"\n    # iterate through the string from index shift to the end\n    for i in range(length - shift, length):\n        result += x[i]\n    # iterate through the string from index 0 to shift\n    for i in range(0, shift):\n        result += x[i]\n    # return the result string\n    return result\n\n"}
{"task_id": "HumanEval/66", "completion": "    return sum([ord(c) for c in s if c.isupper()])\n"}
{"task_id": "HumanEval/67", "completion": "    mango_count = 0\n    for i in s:\n        if i == 'A' or i == 'O':\n            mango_count += 1\n    return n - mango_count\n"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    \n    return [min(evens), arr.index(min(evens))]\n"}
{"task_id": "HumanEval/69", "completion": "    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "    sorted_list = sorted(lst)\n    new_list = []\n    for i in range(len(sorted_list)):\n        new_list.append(sorted_list[i])\n        new_list.append(sorted_list[-1])\n        sorted_list.pop(0)\n        sorted_list.pop(-1)\n    return new_list\n"}
{"task_id": "HumanEval/71", "completion": "    # Check if the given sides form a valid triangle.\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Calculate semi-perimeter of the triangle.\n    s = (a + b + c) / 2\n    # Use Heron's formula to calculate the area of the triangle.\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n\n"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w\n\n"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n/2):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/74", "completion": "    sum1 = 0\n    sum2 = 0\n    for i in lst1:\n        sum1 += len(i)\n    for i in lst2:\n        sum2 += len(i)\n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(math.sqrt(a))):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a/i):\n                return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif n == 1:\n        return False\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n        return False\n"}
{"task_id": "HumanEval/77", "completion": "    for i in range(1, a+1):\n        if i**3 == a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/78", "completion": "    \n    # Create a set of prime hexadecimal digits.\n    primes = set(['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97'])\n    \n    # Convert the hexadecimal number to a string.\n    num = str(num)\n    \n    # Iterate through the string.\n    counter = 0\n    for c in num:\n        if c in primes:\n            counter += 1\n    \n    return counter\n"}
{"task_id": "HumanEval/79", "completion": "    result = 'db'\n    while decimal > 0:\n        remainder = decimal % 2\n        result += str(remainder)\n        decimal = decimal // 2\n    return result[::-1] + 'db'\n\n"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "    grades_letter_grade = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_letter_grade.append('A+')\n        elif grade >= 3.7:\n            grades_letter_grade.append('A')\n        elif grade >= 3.3:\n            grades_letter_grade.append('A-')\n        elif grade >= 3.0:\n            grades_letter_grade.append('B+')\n        elif grade >= 2.7:\n            grades_letter_grade.append('B')\n        elif grade >= 2.3:\n            grades_letter_grade.append('B-')\n        elif grade >= 2.0:\n            grades_letter_grade.append('C+')\n        elif grade >= 1.7:\n            grades_letter_grade.append('C')\n        elif grade >= 1.3:\n            grades_letter_grade.append('C-')\n        elif grade >= 1.0:\n            grades_letter_grade.append('D+')\n        elif grade >= 0.7:\n            grades_letter"}
{"task_id": "HumanEval/82", "completion": "    is_prime = True\n    for i in range(2, int(len(string)**0.5) + 1):\n        if string[:i] == string[i:i+i]:\n            is_prime = False\n            break\n    return is_prime\n"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        count += (9 * i) * starts_one_ends_helper(n, i)\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "    return str(bin(N).count('1'))\n"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n\n"}
{"task_id": "HumanEval/86", "completion": "    return \" \".join(sorted(s.split()))\n\n"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for row in lst:\n        for column in row:\n            if column == x:\n                coordinates.append((lst.index(row), row.index(column)))\n    coordinates.sort()\n    coordinates.sort(key=lambda x: x[1], reverse=True)\n    coordinates.sort(key=lambda x: x[0])\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "    copy = array[:]\n    sum = 0\n    for i in range(len(copy)):\n        sum += copy[i]\n    if sum % 2 == 0:\n        copy.sort()\n    else:\n        copy.sort(reverse=True)\n    return copy\n"}
{"task_id": "HumanEval/89", "completion": "    # Your code here\n    d = {'a': 'e', 'b': 'f', 'c': 'g', 'd': 'h', 'e': 'i', 'f': 'j', 'g': 'k', 'h': 'l', 'i':'m', 'j': 'n', 'k': 'o', 'l': 'p','m': 'q', 'n': 'r', 'o':'s', 'p': 't', 'q': 'u', 'r': 'v','s': 'w', 't': 'x', 'u': 'y', 'v': 'z', 'w': 'a', 'x': 'b', 'y': 'c', 'z': 'd'}\n    encrypted = ''\n    for c in s:\n        if c in d:\n            encrypted += d[c]\n        else:\n            encrypted += c\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "    boredom_count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            boredom_count += 1\n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "    return x == y + z or y == x + z or z == x + y\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.isupper():\n                encoded_message += letter.lower()\n            else:\n                encoded_message += letter.upper()\n        else:\n            encoded_message += letter\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "    largest_prime = 0\n    sum_of_digits = 0\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n                sum_of_digits = sum(map(int, str(num)))\n    return sum_of_digits\n"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    lower_case = 0\n    upper_case = 0\n    for key in dict:\n        if key.islower():\n            lower_case += 1\n        elif key.isupper():\n            upper_case += 1\n    if lower_case == len(dict):\n        return True\n    elif upper_case == len(dict):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "    a_unit_digit = get_unit_digit(a)\n    b_unit_digit = get_unit_digit(b)\n    product = a_unit_digit * b_unit_digit\n    return product\n"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "    return int(round(float(value))) * (-1 if value[0] == '-' else 1)\n\n"}
{"task_id": "HumanEval/100", "completion": "    # Initialize a list to store the number of stones in each level.\n    stones_in_each_level = []\n    # Initialize the number of stones in the first level to n.\n    n_stones = n\n    # Iterate from 1 to n.\n    for i in range(1, n + 1):\n        # If n is odd, add the next odd number to the list.\n        if i % 2!= 0:\n            stones_in_each_level.append(n_stones)\n        # If n is even, add the next even number to the list.\n        else:\n            stones_in_each_level.append(n_stones - 1)\n    # Return the list.\n    return stones_in_each_level\n\n"}
{"task_id": "HumanEval/101", "completion": "    return s.split()\n\n"}
{"task_id": "HumanEval/102", "completion": "    result = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            result = i\n    return result\n"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    \n    sum = 0\n    for i in range(n, m + 1):\n        sum += i\n    \n    avg = sum / (m - n + 1)\n    \n    return bin(int(avg))[2:]\n"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for i in x:\n        s = str(i)\n        if not any(d in s for d in '02468'):\n            result.append(i)\n    result.sort()\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "    if len(arr) == 0:\n        return []\n    \n    arr = [x for x in arr if x >= 1 and x <= 9]\n    arr.sort()\n    arr.reverse()\n    \n    d = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    \n    return [d[x] for x in arr]\n"}
{"task_id": "HumanEval/106", "completion": "    pass\n"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        s = str(i)\n        if s == s[::-1]:\n            if len(s) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        num_str = str(num)\n        sum = 0\n        for char in num_str:\n            sum += int(char)\n        if sum > 0:\n            count += 1\n        sum = 0\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    min_value = min(arr)\n    for i in range(len(arr)):\n        if arr[i] < min_value:\n            return False\n        min_value = arr[i]\n    return True\n\n"}
{"task_id": "HumanEval/110", "completion": "    even_count = 0\n    odd_count = 0\n    for i in lst1:\n        if i % 2 == 0:\n            even_count += 1\n    for i in lst2:\n        if i % 2 == 0:\n            even_count += 1\n    if even_count >= len(lst1):\n        return \"YES\"\n    if odd_count >= even_count:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "    # Initialize a dictionary to store letter counts.\n    letter_counts = {}\n    # Iterate through the string.\n    for letter in test:\n        # If letter is not in dictionary, add it with count 1.\n        if letter not in letter_counts:\n            letter_counts[letter] = 1\n        # If letter is in dictionary, increment its count.\n        else:\n            letter_counts[letter] += 1\n    # Find the maximum count.\n    max_count = max(letter_counts.values())\n    # Return a list of letters with maximum count.\n    return [letter for letter, count in letter_counts.items() if count == max_count]\n"}
{"task_id": "HumanEval/112", "completion": "    s_set = set(c)\n    s_list = list(s)\n    for i in s_list:\n        if i in s_set:\n            s_list.remove(i)\n    if s_list == list(s_list[::-1]):\n        return ''.join(s_list),True\n    else:\n        return ''.join(s_list),False\n"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for string in lst:\n        integer = int(string)\n        digit_list = [int(digit) for digit in str(integer)]\n        count = 0\n        for digit in digit_list:\n            if digit % 2 == 1:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str4ng \" + string + \" of the \" + str(len(string)) + \"n input.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "    minimum_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < minimum_sum:\n            minimum_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return minimum_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    :type grid: List[List[int]]\n    :type capacity: int\n    :rtype: int\n    \"\"\"\n    def get_buckets(grid, capacity):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type capacity: int\n        :rtype: int\n        \"\"\"\n        n = len(grid)\n        m = len(grid[0])\n        buckets = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    buckets += math.ceil(capacity / m)\n        return buckets\n    \n    def get_buckets_2(grid, capacity):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type capacity: int\n        :rtype: int\n        \"\"\"\n        n = len(grid)\n        m = len(grid[0])\n        buckets = 0\n        for i in range(n):\n            buckets += sum(grid[i])\n        return buckets\n    \n    def get_buckets"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "    result = []\n    words = s.split()\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in \"aeiouAEIOU\":\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "    left = 0\n    right = len(word) - 1\n    while left < right:\n        if word[left] not in 'aeiouAEIOU':\n            left += 1\n        elif word[right] not in 'aeiouAEIOU':\n            right -= 1\n        else:\n            return word[left]\n    return ''\n\n"}
{"task_id": "HumanEval/119", "completion": "    if len(lst[0])!= len(lst[1]):\n        return 'No'\n    open_count, close_count = 0, 0\n    for i in lst[0]:\n        if i == '(':\n            open_count += 1\n        elif i == ')':\n            close_count -= 1\n        if close_count < 0:\n            return 'No'\n    for i in lst[1]:\n        if i == '(':\n            open_count += 1\n        elif i == ')':\n            close_count -= 1\n        if close_count < 0:\n            return 'No'\n    if open_count == close_count == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr, reverse=True)[:k]\n\n"}
{"task_id": "HumanEval/121", "completion": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0])\n\n"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "HumanEval/123", "completion": "    odd_nums = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_nums.append(n)\n        else:\n            n /= 2\n    return sorted(odd_nums)\n"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    \n    date = date.split('-')\n    \n    if len(date)!= 3:\n        return False\n    \n    if int(date[0]) < 1 or int(date[0]) > 12:\n        return False\n    \n    if int(date[1]) < 1 or int(date[1]) > 31:\n        return False\n    \n    if int(date[2]) < 1 or int(date[2]) > 3000:\n        return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "    return txt.split()\n"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "    # Find the intersection of the two intervals.\n    intersection = interval1[0] if interval1[0] > interval1[1] else interval2[0] if interval2[0] > interval2[1] else None\n    if intersection is None:\n        return \"NO\"\n    # Calculate the length of the intersection.\n    intersection_length = abs(interval1[0] - interval1[1]) + abs(interval2[0] - interval2[1]) - abs(intersection)\n    # Check if the length of the intersection is a prime number.\n    if is_prime(intersection_length):\n        return \"YES\"\n    return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sum = 0\n    for i in arr:\n        if i == 0:\n            continue\n        elif i > 0:\n            sum += i\n        elif i < 0:\n            sum *= -1\n    return sum\n"}
{"task_id": "HumanEval/129", "completion": "\n    N = len(grid)\n    dp = [[[0 for _ in range(k + 1)] for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            dp[i][j][0] = grid[i][j]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j][0"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 1]\n    if n == 2:\n        return [0, 1, 1]\n    \n    numbers = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            numbers.append(numbers[i - 1] + numbers[i - 2] + numbers[i - 3])\n        else:\n            numbers.append(numbers[i - 1] + numbers[i - 2] + numbers[i - 3] + numbers[i - 4])\n    return numbers\n"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    n = str(n)\n    for i in range(len(n)):\n        if int(n[i]) % 2 == 1:\n            product = product * int(n[i])\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(string[i])\n        elif string[i] == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/133", "completion": "    sum = 0\n    for num in lst:\n        sum += int(ceil(num))**2\n    return sum\n"}
{"task_id": "HumanEval/134", "completion": "    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/135", "completion": "    if len(arr) == 0:\n        return -1\n    prev = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] <= prev:\n            return i\n        prev = arr[i]\n    return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "    largest_negative = None\n    smallest_positive = None\n    for element in lst:\n        if element < 0 and (largest_negative is None or element > largest_negative):\n            largest_negative = element\n        if element > 0 and (smallest_positive is None or element < smallest_positive):\n            smallest_positive = element\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        if type(a) == str:\n            a = float(a)\n        if type(b) == str:\n            b = float(b)\n        if a > b:\n            return a\n        else:\n            return b\n"}
{"task_id": "HumanEval/138", "completion": "    if n % 2!= 0:\n        return False\n    if n % 4!= 0:\n        return False\n    return True\n"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\n"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            result += \"_\"\n        else:\n            result += text[i]\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "    # Your code here\n    # Hint: Use regular expressions to solve this problem.\n    # Regular expressions are a powerful tool for parsing and matching strings.\n    # Regular expressions are also used in string formatting.\n    # Regular expressions are also used in string validation.\n    # Regular expressions are also used in security.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also used in data validation.\n    # Regular expressions are also"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i**2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += i**3\n        else:\n            sum += i\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split(' ')\n    new_string = ''\n    for word in words:\n        if is_prime(len(word)):\n            new_string += word +''\n    return new_string[:-1]\n\n"}
{"task_id": "HumanEval/144", "completion": "    # Split x and n into numerator and denominator.\n    numerator_x, denominator_x = x.split('/')\n    numerator_n, denominator_n = n.split('/')\n    # Multiply numerator of x with numerator of n.\n    numerator_result = int(numerator_x) * int(numerator_n)\n    # Multiply denominator of x with denominator of n.\n    denominator_result = int(denominator_x) * int(denominator_n)\n    # Check if the result of step 2 is divisible by result of step 3.\n    if numerator_result % denominator_result == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/145", "completion": "    sum_of_digits = {}\n    for i, num in enumerate(nums):\n        sum_of_digits[num] = sum_of_digits.get(num, []) + [i]\n    sorted_sum_of_digits = sorted(sum_of_digits.items(), key=lambda x: x[0])\n    new_list = []\n    for key, value in sorted_sum_of_digits:\n        for index in value:\n            new_list.append(nums[index])\n    return new_list\n"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] in a and a[i] + a[j] + a[j] % 3 == 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index + 1:planet2_index])\n    else:\n        return tuple(planets[planet2_index + 1:planet1_index])\n\n"}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=len)\n    return result\n\n"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return y\n    elif n == 2:\n        return x\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n"}
{"task_id": "HumanEval/151", "completion": "    if not lst:\n        return 0\n    sum = 0\n    for i in lst:\n        if i % 2 == 1 and i > 0 and isinstance(i, int):\n            sum += i * i\n    return sum\n"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = None\n    strongest_strength}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "    return (0, 0)\n"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    \n    roman_numeral = ''\n    for key in sorted(roman_numerals, reverse=True):\n        while number >= key:\n            roman_numeral += roman_numerals[key]\n            number -= key\n    return roman_numeral\n"}
{"task_id": "HumanEval/157", "completion": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_unique_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_unique_word = word\n        elif len(unique_chars) == max_unique_chars:\n            if word < max_unique_word:\n                max_unique_word = word\n    return max_unique_word\n"}
{"task_id": "HumanEval/159", "completion": "    if remaining < need:\n        return [need, 0]\n    else:\n        return [need + number, remaining - need]\n"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "    return \"\".join(reversed(s.swapcase())) if s.isalpha() else \"\".join(reversed(s))\n\n"}
{"task_id": "HumanEval/162", "completion": "    if text == '':\n        return None\n    else:\n        md5 = hashlib.md5()\n        md5.update(text)\n        return md5.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        i_str = str(i)\n        for digit in i_str:\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    return sorted(even_digits)\n"}
