{"task_id": "Open/0", "completion": "    count = 0\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    for i in range(N):\n        if (arr[i] + K) > sum:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    max_freq = 0\n    for i in range(n):\n        if arr[i] > max_freq:\n            max_freq = arr[i]\n    return max_freq\n"}
{"task_id": "Open/2", "completion": "    \n    # Convert n to binary\n    binary = bin(n)\n    \n    # Iterate through the binary representation of n and check if all bits in the range from l to r are set to 1.\n    for i in range(l, r+1) :\n        if binary[2:].find(str(i)) == -1 :\n            return \"No\"\n    \n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    firstSum = 0\n    secondSum = 0\n    for i in a:\n        firstSum += i\n        secondSum += i\n        if firstSum == secondSum == n:\n            return True\n        elif firstSum > secondSum:\n            firstSum -= a[0]\n        elif firstSum < secondSum:\n            secondSum += a[0]\n    return False\n"}
{"task_id": "Open/5", "completion": "    return bin(x)[2:].count('1') % 2\n"}
{"task_id": "Open/6", "completion": "    \n    # Initialize the output list\n    output = []\n    \n    # Iterate through the input list\n    for i in range(len(vec)) :\n        # If the current element is positive, change the sign of the element at the index equal to the absolute value of the current element minus one.\n        if vec[i] > 0 :\n            vec[i] = -vec[i]\n    \n    # Iterate through the modified list\n    for i in range(len(vec)) :\n        # If the current element is positive, append the index of the current element plus one to the output list.\n        if vec[i] > 0 :\n            output.append(i+1)\n    \n    # Return the output list\n    return output\n"}
{"task_id": "Open/7", "completion": "    hashmap = {}\n    for i in range(n):\n        if arr[i] not in hashmap:\n            hashmap[arr[i]] = 1\n        else:\n            hashmap[arr[i]] += 1\n    \n    count = 0\n    for i in range(n):\n        if arr[i] not in hashmap:\n            hashmap[arr[i]] = 1\n        else:\n            hashmap[arr[i]] -= 1\n        \n        if hashmap[arr[i]] == 0:\n            del hashmap[arr[i]]\n        \n        count = max(count, len(hashmap))\n    \n    return count\n"}
{"task_id": "Open/8", "completion": "    \n    # Step 1.\n    distinct_prime_factors = set()\n    \n    # Step 2.\n    for i in range(2, a+1):\n        # Step 3.\n        for j in range(2, i):\n            if i % j == 0:\n                distinct_prime_factors.add(j)\n                break\n    \n    # Step 4.\n    return len(distinct_prime_factors)\n"}
{"task_id": "Open/9", "completion": "    \n    arr.sort()\n    kthLargest = arr[n-k]\n    \n    sum = 0\n    for i in range(1,k+1):\n        sum += arr[i] - kthLargest\n    \n    for i in range(k,n):\n        sum += arr[i] - kthLargest\n    \n    return sum\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            A.appendleft(A.pop())\n            B.appendleft(B.pop())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range(len(s)) :\n        if len(set(s[i:i+k])) <= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    counter = 2\n    while counter <= n:\n        if n % counter == 0:\n            return False\n        counter += 1\n    return True\n"}
{"task_id": "Open/14", "completion": "    \n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n    \n    "}
{"task_id": "Open/15", "completion": "    for i in range(t) :\n        a = random.randint(2,n-1)\n        if pow(a,(n-1)/2,n) == 1 or pow(a,(n-1)/2,n) == n-1 :\n            return 1\n    return -1\n"}
{"task_id": "Open/16", "completion": "    \n    for i in range( n ) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(length) :\n        if i % 2 == 0 :\n            if s[i] == '1' :\n                count += 1\n        else :\n            if s[i] == '0' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1) :\n        if isPowerNumber(i) :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        elif i % 4 == 1 :\n            count1 += 1\n        elif i % 4 == 2 :\n            count2 += 1\n        elif i % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 1\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            max_len += 1\n        else :\n            max_len = 1\n    return max_len\n"}
{"task_id": "Open/23", "completion": "    if i == len(arr) :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        return subsetSum(arr, n, i + 1, sum - arr[i], count) + subsetSum(arr, n, i + 1, sum, count)\n"}
{"task_id": "Open/24", "completion": "    \n    # Initialize a counter for the hexadecagonal number.\n    hex_num = 0\n    \n    # Iterate through the hexadecagonal numbers.\n    while hex_num < n :\n        hex_num += 1\n        \n        # If the counter is equal to n, return the hexadecagonal number.\n        if hex_num == n :\n            return hex_num\n    \n    # Return -1.\n    return -1\n"}
{"task_id": "Open/25", "completion": "    \n    sumOfSquares = 0\n    sumOfNumbers = 0\n    \n    for i in range(1, n + 1) :\n        sumOfNumbers += i\n        sumOfSquares += i ** 2\n    \n    sumOfSquares += 1\n    \n    return sumOfSquares, sumOfNumbers, sumOfSquares + sumOfNumbers + 1\n"}
{"task_id": "Open/26", "completion": "    \n    factors = []\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            factors.append(i)\n    \n    sum = 0\n    for i in factors :\n        sum += i\n    \n    return sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return (b - a) / a * 100\n"}
{"task_id": "Open/30", "completion": "    return ( sum( [ i ** 2 for i in range( 1, n + 1 ) ] ) / n )\n"}
{"task_id": "Open/31", "completion": "    \n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "    \n    # Initialize the variable to store the first term of the sequence.\n    term = 1\n    \n    # Iterate through the sequence.\n    for i in range(n) :\n        term = term * 2 + 1\n    \n    # Return the variable.\n    return term\n"}
{"task_id": "Open/34", "completion": "    if len(a) == 0 :\n        return 0\n    \n    count = 0\n    product = 1\n    left = 0\n    right = 0\n    \n    while right < len(a) :\n        product *= a[right]\n        while product >= k and left <= right :\n            product /= a[left]\n            left += 1\n        count += right - left + 1\n        right += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1):\n        if str(i).find(str(d))!= -1:\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    \n    # Step 1. Create an empty set.\n    missingPositive = set()\n    \n    # Step 2. Iterate through the array.\n    for i in range(n):\n        if arr[i] > 0:\n            missingPositive.add(arr[i])\n    \n    # Step 3. Iterate through the set.\n    for i in range(n):\n        if i not in missingPositive:\n            return i\n    \n    # Step 4. Return the length of the array + 1.\n    return n + 1\n"}
{"task_id": "Open/37", "completion": "    if n == 0 :\n        return 1\n    elif n < 0 :\n        return False\n    else :\n        return ways(n-1) + ways(n-2)\n"}
{"task_id": "Open/38", "completion": "    areaSum = 0\n    size = 1\n    while size <= l and size <= b :\n        areaSum += size * size\n        size += 1\n    return areaSum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1,N+1))\n"}
{"task_id": "Open/40", "completion": "    maxCount = 0\n    for i in range(n):\n        if arr[i] == 0:\n            maxCount += 1\n        else:\n            maxCount = 0\n    return maxCount\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            max_length = max(max_length, i)\n        else:\n            max_length = max(max_length, i - max_length)\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    max_value = -float('inf')\n    for i in range(n-k+1):\n        if a[i] < max_value:\n            max_value = a[i]\n        if a[i+k-1] > max_value:\n            max_value = a[i+k-1]\n    return max_value\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (array[i]*array[j]) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    \n    return sum(abs(arr[i] - i + 1) for i in range(n))\n"}
{"task_id": "Open/45", "completion": "    min_element = 0\n    for i in range(n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if abs(array[i] - array[j]) > max_diff:\n                max_diff = abs(array[i] - array[j])\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    return ( ( a * x1 + b * y1 ) - c ) * ( a * x2 + b * y2 ) > 0\n"}
{"task_id": "Open/48", "completion": "    \n    count = 0\n    for i in range(0, a+1) :\n        if a == i + (a ^ i) :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max = 0\n    for i in range(L, R+1) :\n        if L & R > max :\n            max = L & R\n    return max\n"}
{"task_id": "Open/50", "completion": "    smallest = 0\n    for i in range(n):\n        if smallest == 0:\n            smallest = a[i]\n        elif smallest % a[i] == 0:\n            smallest = smallest\n        else:\n            smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "    \n    result = 0\n    \n    for i in range(n) :\n        for j in range(n) :\n            if (i+1) * (j+1) % 2 == 1 :\n                result ^= arr[i][j]\n    \n    return result\n"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(N+1) :\n        if i ^ i == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(n):\n        if a[i] < 0 or a[i] > k:\n            return False\n        sum += a[i]\n    if sum + n - 1 > k:\n        return False\n    return sum + n - 1 == k\n"}
{"task_id": "Open/55", "completion": "    return (n & (n-1) == 0)\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    previous_char = None\n    for char in s:\n        if char == previous_char:\n            max_partitions += 1\n        else:\n            previous_char = char\n            max_partitions = 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    for i in range(2,N+1):\n        var1 = arr[i-1]\n        var2 = arr[i]\n        result = result + var1 + var2\n        result = result + (var1 * var2) / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "    \n    # Initialize the array\n    arr = [0] + arr\n    \n    # Iterate through the reversals\n    for i in range(reversals) :\n        # Reverse the array within the given range\n        for j in range(ranges[i][0], ranges[i][1] + 1) :\n            arr[j] = arr[j] + 1\n    \n    # Return the value at the given index\n    return arr[index + 1]\n"}
{"task_id": "Open/60", "completion": "    \n    # Step 1.\n    for i in range(1, n+1) :\n        for j in range(1, n+1) :\n            if i**2 + j**2 == n :\n                return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(b)) :\n        if b[i] == a[0] :\n            if b[i:i+len(a)] == a :\n                count += 1\n    return count\n"}
{"task_id": "Open/62", "completion": "    \n    # Write your code here.\n    \n    # Step 1\n    for i in range( len( str ) - 2, -1, -1 ) :\n        if str[i] > str[i+1] :\n            str[i] = str[i] - 1\n            str[i+1] = 9\n    \n    # Step 2\n    for i in range( len( str ) - 1, -1, -1 ) :\n        if str[i] > str[i+1] :\n            str[i] = str[i] - 1\n            str[i+1] = 9\n    \n    # Step 3\n    return str\n"}
{"task_id": "Open/63", "completion": "    minValue = 1\n    for i in range(n):\n        if arr[i] < minValue:\n            minValue = arr[i]\n    return minValue\n"}
{"task_id": "Open/64", "completion": "    maxSubStr = \"\"\n    maxSubStrLen = 0\n    for i in range(len(s)):\n        if s[i]!= '1':\n            maxSubStr += s[i]\n            maxSubStrLen = max(maxSubStrLen, len(maxSubStr))\n        else:\n            if len(maxSubStr) > maxSubStrLen:\n                maxSubStrLen = len(maxSubStr)\n    return maxSubStr if maxSubStrLen > 0 else \"-1\"\n"}
{"task_id": "Open/65", "completion": "    \n    a.sort()\n    \n    i = 0\n    j = 0\n    \n    while i < n - 1:\n        if a[i] == a[i + 1]:\n            j += 1\n        elif j > k:\n            a.pop(i)\n            n -= 1\n        else:\n            i += 1\n            j = 0\n    \n    return n\n"}
{"task_id": "Open/66", "completion": "    \n    # Add k elements to the array\n    for i in range(k):\n        arr.append(0)\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # If the size is even, calculate the median by taking the average of the two middle elements\n    if len(arr) % 2 == 0:\n        return (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n    \n    # If the size is odd, simply return the middle element as the median\n    else:\n        return arr[len(arr)//2]\n"}
{"task_id": "Open/67", "completion": "    \n    step_count = 0\n    \n    # Step 1\n    step_count = 0\n    \n    # Step 2\n    negative_count = 0\n    \n    # Step 3\n    positive_count = 0\n    \n    # Step 4\n    zero_count = 0\n    \n    # Step 5\n    for i in range(n) :\n        if a[i] < 0 :\n            negative_count += 1\n        elif a[i] > 0 :\n            positive_count += 1\n        elif a[i] == 0 :\n            zero_count += 1\n    \n    # Step 6\n    if negative_count % 2 == 0 :\n        step_count += zero_count\n    else :\n        if zero_count > 0 :\n            step_count += zero_count + 1\n        else :\n            step_count += 2\n    \n    # Step 7\n    if negative_count % 2 == 1 :\n        if zero_count > 0 :\n            step_count += zero_count + 1\n        else :\n            step_count += 2\n    \n    # Step 8\n    return step"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    else :\n        v = []\n        n = n - 1\n        while n > 0 :\n            v.append(n%5)\n            n = n // 5\n        result = 0\n        for i in range(len(v)-1, -1, -1) :\n            result = result * 10 + v[i]\n        return 2 * result\n"}
{"task_id": "Open/69", "completion": "    if n == 0 :\n        return True\n    if n & 1 == 0 :\n        return False\n    return areSetBitsIncreasing ( n >> 1 )\n"}
{"task_id": "Open/70", "completion": "    if n > x :\n        return n\n    elif n < x :\n        return x\n    else :\n        return n\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(0, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i + 2\n    return sum\n"}
{"task_id": "Open/73", "completion": "    maxm = -1\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[i]:\n            count += 1\n        if count > maxm:\n            maxm = arr[i]\n    return maxm\n"}
{"task_id": "Open/74", "completion": "    \n    count = 0\n    \n    for i in range(0,n):\n        if (a[i] > 0 and a[i] & (a[i] - 1) == 0):\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/75", "completion": "    return int( ''.join( [ str( 1 - int( i ) ) for i in bin( n )[ 2 : ] ] ), 2 )\n"}
{"task_id": "Open/76", "completion": "    count = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            A[i+1] = 0\n            count += 1\n    return count\n"}
{"task_id": "Open/77", "completion": "    \n    # Your code here\n    \n    # Initialize degree value as 0.\n    degree = 0\n    \n    # Iterate through operations.\n    for i in range(0, len(radian)):\n        # Add value to account balance.\n        degree += radian[i]\n        \n        # If account balance < 0, return True.\n        if degree < 0:\n            return True\n    \n    # Return False.\n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/78", "completion": "    return n // 2\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(n) :\n        sum += a + (n-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 1 :\n        return 1\n    else :\n        max_power = 0\n        for i in range(31,-1,-1) :\n            if n % 2**i == 0 :\n                max_power = 2**i\n        return max_power\n"}
{"task_id": "Open/81", "completion": "    \n    # Initialize a 2D array of 8x8\n    board = [[0 for i in range(8)] for j in range(8)]\n    \n    # Initialize a count variable to 0\n    count = 0\n    \n    # Iterate through the 2D array\n    for i in range(8) :\n        for j in range(8) :\n            \n            # If the current position is equal to the starting position, continue to the next iteration.\n            if ( i == row ) and ( j == column ) :\n                continue\n            \n            # If the current position is equal to the ending position, increment the count variable by 1.\n            if ( i == row ) and ( j == column ) :\n                count += 1\n                continue\n            \n            # If the current position is not equal to the starting position or the ending position, increment the count variable by 1.\n            count += 1\n    \n    # Return the count variable\n    return count\n"}
{"task_id": "Open/82", "completion": "    \n    # Initialize a variable to hold the first number in the sequence.\n    firstNumber = 0\n    \n    # Iterate through the sequence.\n    for i in range(n) :\n        # Add the index to the variable.\n        firstNumber += i\n        \n        # Add the variable to the sequence.\n        firstNumber += i\n    \n    # Return the sequence.\n    return firstNumber\n"}
{"task_id": "Open/83", "completion": "    \n    # Step 1.\n    last_occurrence = []\n    for i in range(len(s)) :\n        last_occurrence.append(s.rfind(s[i]))\n    \n    # Step 2.\n    sorted_string = sorted(s)\n    \n    # Step 3.\n    for i in range(len(s)) :\n        if last_occurrence[i]!= i :\n            s = s[:last_occurrence[i]] + s[i] + s[last_occurrence[i]+1:]\n    \n    # Step 4.\n    return s\n"}
{"task_id": "Open/84", "completion": "    arr = [0] * n\n    for i in range(n) :\n        if i % 2 == 0 :\n            arr[i] = i + 1\n        else :\n            arr[i] = i\n    return sum(arr[l-1:r])\n"}
{"task_id": "Open/85", "completion": "    \n    # Step 1\n    min = min(x,y)\n    \n    # Step 2\n    if (x % min == 0) and (y % min == 0) :\n        return min\n    \n    # Step 3\n    for i in range(2,min+1) :\n        if (x % i == 0) and (y % i == 0) :\n            return i\n    \n    # Step 4\n    return 1\n"}
{"task_id": "Open/86", "completion": "    current_number = A\n    previous_number = B\n    count = 1\n    while count < N:\n        current_number = previous_number + current_number\n        previous_number = current_number\n        count += 1\n    return current_number\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    \n    # Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n    r = r / 100 / 12\n    \n    # Convert the loan tenure from years to months by multiplying it by 12.\n    t = t * 12\n    \n    # Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    \n    # Return the calculated EMI.\n    return emi\n    \n    "}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[j] > B[k] * B[k]:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    max_len = 0\n    for i in range(0, n):\n        if i == 0:\n            max_len = 1\n        else:\n            if arr[i] - arr[i - 1] == 0:\n                max_len += 1\n            else:\n                max_len = 1\n    return max_len\n"}
{"task_id": "Open/92", "completion": "    maxLen = -1\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1]) % 2 == 0 and str[i:j+1].isalpha():\n                maxLen = max(maxLen, len(str[i:j+1]))\n    return maxLen\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1 :\n        if n % 2 == 0 :\n            n = n / 2\n            count = count + 1\n        else :\n            return count\n    return count\n"}
{"task_id": "Open/94", "completion": "    \n    # Step 1\n    string = \"\"\n    for i in range(n) :\n        string += \"a\"\n    \n    # Step 2\n    for i in range(n-1, -1, -1) :\n        k -= 1\n        if k >= 0 :\n            if k >= 26 :\n                string = string[:i] + \"z\" + string[i+1:]\n                k -= 26\n            else :\n                string = string[:i] + chr(97 + k) + string[i+1:]\n                k -= k\n        else :\n            break\n    \n    # Step 3\n    return string\n"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel/n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    \n    # Initialize sum of array as 0.\n    sum = 0\n    \n    # Iterate through array.\n    for i in range(n):\n        sum += arr[i]\n    \n    # If sum of array is equal to one-third of total sum of array, return 1.\n    if sum == (n/3) * 2:\n        return 1\n    \n    # If sum of array is equal to two-thirds of total sum of array, return 1.\n    if sum == (n/3) * 3:\n        return 1\n    \n    # Return 0.\n    return 0\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    if n < 0 :\n        n = -n\n    count = 0\n    while n > 0 :\n        n = n // 10\n        count += 1\n    return count\n"}
{"task_id": "Open/99", "completion": "    return a + b + c == 3 * k\n"}
{"task_id": "Open/100", "completion": "    \n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    \n    if x == y :\n        return True\n    \n    while y < x :\n        y = y + \"0\"\n        \n    if y == x :\n        return True\n    \n    return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)-1) :\n        if s[i] == s[i+1] :\n            count += 1\n        else :\n            count = 0\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    \n    arr.sort()\n    \n    min_diff = arr[1] - arr[0]\n    \n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    \n    return min_diff\n"}
{"task_id": "Open/104", "completion": "    count = 0\n    for i in range(left, right + 1):\n        if i == 0:\n            return 0\n        if i == 1:\n            count += 1\n        if i == 2:\n            count += 2\n        if i == 3:\n            count += 2\n        if i == 4:\n            count += 3\n        if i == 5:\n            count += 3\n        if i == 6:\n            count += 3\n        if i == 7:\n            count += 3\n        if i == 8:\n            count += 4\n        if i == 9:\n            count += 4\n        if i == 10:\n            count += 4\n        if i == 11:\n            count += 4\n        if i == 12:\n            count += 4\n        if i == 13:\n            count += 4\n    return count\n"}
{"task_id": "Open/105", "completion": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 8\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 16\n    elif n == 10:\n        return 16\n    elif n == 11:\n        return 16\n    elif n == 12:\n        return 16\n    elif n == 13:\n        return 16\n    elif n == 1:\n        return 16\n    else:\n        return -1\n"}
{"task_id": "Open/106", "completion": "    if n < 0 :\n        return False\n    if n == 0 :\n        return False\n    divisors = []\n    for i in range(1, n) :\n        if n % i == 0 :\n            divisors.append(i)\n    if sum(divisors) == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "    \n    # Step 1. Calculate the number of centuries and leap centuries in the year.\n    centuries = N // 100\n    leap_centuries = centuries // 4\n    non_leap_centuries = centuries % 4\n    \n    # Step 2. Calculate the number of leap years in the year.\n    leap_years = N // 400\n    \n    # Step 3. Calculate the number of non-leap years in the year.\n    non_leap_years = N % 400\n    \n    # Step 4. Calculate the total number of days in the year.\n    total_days = 365 * non_leap_years + leap_years * 366\n    \n    # Step 5. Calculate the number of odd days in the year.\n    odd_days = total_days % 7\n    \n    return odd_days\n"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return a * (3 * a - 1) / 2\n"}
{"task_id": "Open/109", "completion": "    \n    # Step 1\n    n = str(n)\n    \n    # Step 2\n    count = 0\n    for i in range(len(n)) :\n        if n[i] == str(d) :\n            count += 1\n    \n    # Step 3\n    return count\n"}
{"task_id": "Open/110", "completion": "    \n    # Check if the number is a valid number.\n    if n < 0 :\n        return False\n    \n    # Check if the number is a valid number.\n    if n == 0 :\n        return True\n    \n    # Check if the number is a valid number.\n    if n == 1 :\n        return True\n    \n    # Check if the number is a valid number.\n    if n == 2 :\n        return True\n    \n    # Check if the number is a valid number.\n    if n == 3 :\n        return True\n    \n    # Check if the number is a valid number.\n    if n == 4 :\n        return True\n    \n    # Check if the number is a valid number.\n    if n == 5 :\n        return True\n    \n    # Check if the number is a valid number.\n    if n == 6 :\n        return True\n    \n    # Check if the number is a valid number.\n    if n == 7 :\n        return True\n    \n    # Check if the number is a valid number.\n    if n == 8 :\n        return True\n    \n    # Check if"}
{"task_id": "Open/111", "completion": "    \n    remainder = []\n    \n    for i in range(len(a)):\n        remainder.append(a[i] % 5)\n        remainder.append(a[i] % 3)\n    \n    for i in range(len(remainder)):\n        if remainder[i]!= 0:\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/112", "completion": "    \n    # Initialize an array of length n+1 with 0s\n    arr = [0] * (n+1)\n    \n    # Set the first two elements of the array to 4 and 7\n    arr[0] = 4\n    arr[1] = 7\n    \n    # Iterate through the array from index 3 to n+1\n    for i in range(3, n+1):\n        # If index i is odd, set the value at index i to the value at index i//2 multiplied by 10 and added to 4.\n        if i % 2 == 1:\n            arr[i] = arr[i//2] * 10 + 4\n        # If index i is even, set the value at index i to the value at index (i//2)-1 multiplied by 10 and added to 7.\n        else:\n            arr[i] = arr[i//2 - 1] * 10 + 7\n    \n    # Return the value at index n of the array\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "    # Initialize array with 0s\n    arr = [0] * (n+1)\n    # Set first two elements to 3 and 5\n    arr[0] = 3\n    arr[1] = 5\n    # Iterate through array\n    for i in range(2, n+1):\n        # If i is odd, set element at index i to element at index i//2 multiplied by 10 and added with 3.\n        if i % 2 == 1:\n            arr[i] = arr[i//2] * 10 + 3\n        # If i is even, set element at index i to element at index (i//2)-1 multiplied by 10 and added with 5.\n        else:\n            arr[i] = arr[i//2 - 1] * 10 + 5\n    # Return element at index n\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "    \n    # Initialize array with 0s and length n+1\n    array = [0] * (n+1)\n    \n    # Set first two elements to 1 and 2\n    array[0] = 1\n    array[1] = 2\n    \n    # Iterate through array\n    for i in range(2, n+1):\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 1\n        else:\n            array[i] = array[i//2 - 1] * 10 + 2\n    \n    return array[n]\n"}
{"task_id": "Open/115", "completion": "    if len(a) == 0 :\n        return True\n    if len(a) == 1 :\n        return a[0] % 11 == 0\n    if len(a) == 2 :\n        return a[0] % 11 == 0 and a[1] % 11 == 0\n    if len(a) == 3 :\n        return a[0] % 11 == 0 and a[1] % 11 == 0 and a[2] % 11 == 0\n    if len(a) == 4 :\n        return a[0] % 11 == 0 and a[1] % 11 == 0 and a[2] % 11 == 0 and a[3] % 11 == 0\n    if len(a) == 5 :\n        return a[0] % 11 == 0 and a[1] % 11 == 0 and a[2] % 11 == 0 and a[3] % 11 == 0 and a[4] % 11 == 0\n    if len(a) == 6 :\n        return a[0] % 11 == 0 and a[1] % 11 == 0 and a[2] % 11 == 0 and a[3] % 11 == 0"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    #solution 1\n    def FirstAndLast ( string ) :\n        return string.title()\n    \n    #solution 2\n    def FirstAndLast ( string ) :\n        return''.join( [ word[0].upper() + word[1:].lower() for word in string.split() ] )\n    \n    #solution 3\n    def FirstAndLast ( string ) :\n        return''.join( [ word.capitalize() for word in string.split() ] )\n    \n    #solution 4\n    def FirstAndLast ( string ) :\n        return''.join( [ word.title() for word in string.split() ] )\n    \n    #solution 5\n    def FirstAndLast ( string ) :\n        return''.join( [ word.capitalize() for word in string.split() ] )\n    \n    #solution 6\n    def FirstAndLast ( string ) :\n        return''.join( [ word.title() for word in string.split() ] )\n    \n    #solution 7\n    def FirstAndLast ( string ) :\n        return''.join( [ word"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n    return True\n"}
{"task_id": "Open/120", "completion": "    count = 0\n    if len(string) < 2 :\n        return count\n    elif len(string) >= 2 :\n        for i in range(len(string)-1) :\n            if string[i]!= string[i+1] :\n                count += 1\n    return count\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "Write a function that takes a string as input and returns the maximum number that can be extracted from the string.\n        The function iterates through each character in the string and checks if it is a digit.\n        If it is, the function builds a number by multiplying the previous number by 10 and adding the current digit.\n        If the character is not a digit, the function compares the current number with the previous maximum number and updates the maximum if necessary.\n        Finally, the function returns the maximum number extracted from the string.\n        \"\"\"\n        \n        max_num = 0\n        current_num = 0\n        \n        for i in range(len(ss)) :\n            if ss[i].isdigit() :\n                current_num = current_num * 10 + int(ss[i])\n            else :\n                if current_num > max_num :\n                    max_num = current_num\n                current_num = 0\n        \n        if current_num > max_num :\n            max_num = current_num\n        "}
{"task_id": "Open/123", "completion": "    \n    # Step 1\n    intList = []\n    for i in range(len(s)) :\n        intList.append(int(s[i]))\n    \n    # Step 2\n    length = 0\n    for i in range(len(intList) - 1) :\n        if intList[i] + 1 == intList[i + 1] :\n            length += 1\n        else :\n            return length\n    \n    # Step 3\n    return length\n"}
{"task_id": "Open/124", "completion": "    N = 0\n    M = 0\n    while K > 0 :\n        if N > M :\n            N -= min(N, M)\n        elif N < M :\n            M -= min(N, M)\n        else :\n            N = M\n        K -= 1\n    return N * M\n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length :\n        return False\n    for i in range(len(string)-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    \n    # Initialize a variable to store the largest power of 2 that is less than or equal to n.\n    maxPower = 0\n    \n    # Iterate through the range of numbers from 1 to n.\n    for i in range(1, n+1) :\n        \n        # If the number is a power of 2, store it in the variable.\n        if i & (i-1) == 0 :\n            maxPower = i\n    \n    # Return the variable.\n    return maxPower\n"}
{"task_id": "Open/127", "completion": "    return len( str(A) ) == len( str(B) )\n"}
{"task_id": "Open/128", "completion": "    return x!= y\n"}
{"task_id": "Open/129", "completion": "    Sn_1, Sn_2, Sn_3 = 1, 12, 1213\n    for i in range(3, n+1):\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    \n    # Initialize an array to store the minimum steps required to reach each element in the array.\n    minSteps = [0] * n\n    \n    # Initialize a variable to store the previous element in the array.\n    prev = arr[0]\n    \n    # Iterate through the array.\n    for i in range(1, n):\n        \n        # Calculate the difference between the current element and the previous element.\n        diff = abs(arr[i] - prev)\n        \n        # Add the difference to the variable storing the minimum steps required to reach each element in the array.\n        minSteps[i] = minSteps[i - 1] + diff\n        \n        # Update the variable storing the previous element.\n        prev = arr[i]\n        \n    # Return the array storing the minimum steps required to reach each element in the array.\n    return minSteps\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/131", "completion": "    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/132", "completion": "    m = 0\n    sum = 0\n    for i in range(1, N + 1):\n        if i % a == 0:\n            m += 1\n    for i in range(1, m + 1):\n        sum += i\n    ans = (m * (m + 1)) / 2 * a\n    return ans\n"}
{"task_id": "Open/133", "completion": "    result = N\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 == 1 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if n % 2 == 0 :\n        return False\n    else :\n        if arr[0] % 2 == 1 and arr[n-1] % 2 == 1 :\n            return True\n        else :\n            return False\n"}
{"task_id": "Open/135", "completion": "    count = 0\n    if N == 1 :\n        return count\n    elif N > 1 :\n        count += 1\n        return count + countSum(N-1,L,R)\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "    minimum = 1\n    for i in range(n):\n        if arr[i] < minimum:\n            minimum = arr[i]\n    return minimum + 1\n"}
{"task_id": "Open/137", "completion": "    \n    # Convert the string to a list of integers.\n    l = [int(i) for i in s]\n    \n    # Sort the list of integers.\n    l.sort()\n    \n    # Join the list of integers into a string.\n    return \"\".join([str(i) for i in l])\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    \n    # Initialize average value as 0.\n    averageValue = 0\n    \n    # Iterate through string.\n    for i in range(len(s)) :\n        # Add ASCII value of character to average value.\n        averageValue += ord(s[i])\n        \n    # Divide average value by number of characters.\n    averageValue /= len(s)\n    \n    # Return average value.\n    return averageValue\n"}
{"task_id": "Open/140", "completion": "    \n    # Initialize the number of banknotes needed as 0.\n    banknotes = 0\n    \n    # Iterate through the banknotes.\n    for i in range(N) :\n        # If the current banknote value is greater than the desired amount, return -1.\n        if A * i > S :\n            return -1\n        # If the current banknote value is less than the desired amount, add the number of banknotes needed to reach the desired amount to the number of banknotes needed.\n        elif A * i < S :\n            banknotes += S // A * i\n            S = S % A * i\n    \n    # Return the number of banknotes needed.\n    return banknotes\n"}
{"task_id": "Open/141", "completion": "    return x * y / math.gcd(x, y)\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n > 0 :\n        n = n / 2\n        count += n\n    return count\n"}
{"task_id": "Open/143", "completion": "    maxSum = 0\n    index = -1\n    for i in range(n) :\n        sum = 0\n        for j in range(i) :\n            sum = sum ^ arr[j]\n        for j in range(i+1,n) :\n            sum = sum ^ arr[j]\n        if sum > maxSum :\n            maxSum = sum\n            index = i\n    return index\n"}
{"task_id": "Open/144", "completion": "    \n    # Initialize longest decreasing subsequence length as 1.\n    longest_decreasing_subsequence_length = 1\n    \n    # Iterate through the array.\n    for i in range(1, n) :\n        \n        # If the current element is less than the previous element, update longest decreasing subsequence length.\n        if arr[i] < arr[i-1] :\n            longest_decreasing_subsequence_length = longest_decreasing_subsequence_length + 1\n    \n    # Return longest decreasing subsequence length.\n    return longest_decreasing_subsequence_length\n"}
{"task_id": "Open/145", "completion": "    min_element = min(arr)\n    for i in range(n):\n        if arr[i] == min_element:\n            return arr[i] + k\n        elif arr[i] > min_element:\n            arr[i] -= k\n        elif arr[i] < min_element:\n            arr[i] += k\n    return -1\n"}
{"task_id": "Open/146", "completion": "    \n    # Convert the number to a string\n    num = str(K)\n    \n    # Initialize the counter\n    counter = 0\n    \n    # Iterate through the string\n    for i in range(len(num)-1) :\n        if num[i] == num[i+1] :\n            counter += 1\n        else :\n            counter = 0\n        \n        if counter > 1 :\n            return counter\n    \n    if counter < 2 :\n        return -1\n    \n    return counter\n"}
{"task_id": "Open/147", "completion": "    \n    # Initialize a variable to store the minimum number of operations.\n    min_ops = 0\n    \n    # Iterate through the array.\n    for i in range( n ) :\n        \n        # If the current element is equal to the target number, increment the minimum number of operations by 1.\n        if arr[i] == i + 1 :\n            min_ops += 1\n            \n        # If the current element is not equal to the target number, increment the minimum number of operations by 2.\n        else :\n            min_ops += 2\n            \n    # Return the minimum number of operations.\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "    sum = 3\n    for i in range(n) :\n        if i % 2 == 0 :\n            sum += 3\n        else :\n            sum += 5\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    \n    # Initialize XOR as 0.\n    xor = 0\n    \n    # Iterate through the string.\n    for i in range(len1) :\n        # XOR the ASCII value of the character with XOR.\n        xor = xor ^ ord(str1[i])\n    \n    # Return XOR.\n    return xor\n"}
{"task_id": "Open/152", "completion": "    \n    # Convert the number to binary\n    binary = bin(n)\n    \n    # Iterate through the binary number\n    for i in range(1, len(binary)) :\n        if binary[i] == '1' and binary[i-1] == '1' :\n            return False\n    \n    return True\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    vowels_in_string = []\n    \n    for char in s:\n        if char in vowels:\n            vowels_in_string.append(char)\n    \n    vowels_in_string.sort()\n    \n    for i in range(len(s)):\n        if s[i] not in vowels:\n            return False\n        elif s[i]!= vowels_in_string[i]:\n            return False\n    \n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    \n    # Step 1.\n    power = 1\n    while power < n :\n        power *= 2\n    \n    # Step 2.\n    diff = abs(n - power)\n    \n    # Step 3.\n    return diff\n"}
{"task_id": "Open/156", "completion": "    \n    if r < 0 :\n        return -1\n    else :\n        return 3.14 * r * r\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    low = 0\n    high = size - 1\n    \n    while low <= high :\n        mid = (low + high) // 2\n        if ar[mid] == mid :\n            low = mid + 1\n        else :\n            if ar[mid] < mid :\n                low = mid + 1\n            else :\n                high = mid - 1\n    return low\n"}
{"task_id": "Open/159", "completion": "    return str.count(\"010\")\n"}
{"task_id": "Open/160", "completion": "    \n    # Initialize a dictionary to store the count of each element in the array.\n    count = {}\n    \n    # Iterate through the array.\n    for i in range(n):\n        \n        # If the count of the element is odd, return the element.\n        if arr[i] in count:\n            if count[arr[i]] % 2!= 0:\n                return arr[i]\n        else:\n            count[arr[i]] = 1\n    \n    # Return None.\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "    \n    if abs(dx - sx) == 1 and abs(dy - sy) == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/163", "completion": "    if n % 2 == 0 :\n        return 0\n    else :\n        count = 0\n        for i in range(1, n+1) :\n            if i % 4 == 0 :\n                count += 1\n        return count\n"}
{"task_id": "Open/164", "completion": "    \n    # Initialize a dictionary with all elements of the array as keys.\n    d = {}\n    for i in range(n):\n        d[arr[i]] = 1\n    \n    # Iterate through the array and increment the value of the key by 1.\n    for i in range(n):\n        d[arr[i]] += 1\n    \n    # Initialize a variable count to 1.\n    count = 1\n    \n    # Iterate through the dictionary and multiply the count by the number of occurrences of each key.\n    for i in d:\n        count *= d[i]\n    \n    # Return the count.\n    return count\n"}
{"task_id": "Open/165", "completion": "    return 0\n"}
{"task_id": "Open/166", "completion": "    steps = 0\n    for i in range(source, dest, step):\n        if i == dest:\n            return steps\n        elif i > dest:\n            steps += (i - dest)\n        elif i < dest:\n            steps += (dest - i)\n    return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "    \n    if n == 1 :\n        return \"1\"\n    \n    s = \"1\"\n    for i in range(n-1) :\n        if s[i] == s[i+1] :\n            count = count + 1\n        else :\n            s = s + str(count)\n            count = 1\n    s = s + str(count)\n    return s\n"}
{"task_id": "Open/168", "completion": "    maxLen = 0\n    product = 1\n    start = 0\n    for i in range(N):\n        product *= arr[i]\n        if product < 0:\n            product = 1\n            start = i + 1\n        else:\n            maxLen = max(maxLen, i - start + 1)\n    return maxLen\n"}
{"task_id": "Open/169", "completion": "    return ( abs(m) * abs(n) ) / math.sqrt( abs(m) * abs(m) + abs(n) * abs(n) )\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n):\n        if arr[i] > k:\n            count += (arr[i] - k)\n        elif arr[i] < k:\n            count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(n - 2) :\n        for j in range(i + 1, n - 1) :\n            k = j + 1\n            while k < n :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n                k += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r+1) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return n ^ ( ( 1 << m ) - 1 )\n"}
{"task_id": "Open/174", "completion": "    total = R - L + 1\n    div9 = total / 9\n    rem = total % 9\n    count = 0\n    for i in range(R, L - 1, -1) :\n        if (i % 9) == rem :\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    n = str(n)\n    k = str(k)\n    product = int(n) * math.log(int(n), 10)\n    return int(str(product)[:k])\n"}
{"task_id": "Open/176", "completion": "    \n    if n == 1 :\n        return A[0]\n    \n    for i in range(n-1) :\n        if A[i] > A[i+1] and A[i] < A[i+2] :\n            return A[i]\n        \n    if A[n-1] > A[n-2] :\n        return A[n-1]\n    \n    return -1\n"}
{"task_id": "Open/177", "completion": "    \n    a.sort()\n    b.sort()\n    c.sort()\n    \n    return a[-1] + b[-1] + c[-1] - a[0] - b[0] - c[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
