{"task_id": "Open/0", "completion": "\n    count = 0\n    for i in range(N):\n        sum = 0\n        for j in range(N):\n            sum += arr[j]\n        if sum + K > arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    max_freq = 0\n    for i in arr :\n        if i > max_freq :\n            max_freq = i\n    return max_freq\n"}
{"task_id": "Open/2", "completion": "\n    \n    # Step 1. Convert n to binary.\n    binary = bin(n)[2:]\n    \n    # Step 2. Iterate through the binary representation of n and check if all bits in the range from l to r are set to 1.\n    for i in range(len(binary)):\n        if binary[i] == \"1\" and l <= i <= r:\n            return \"Yes\"\n    \n    # Step 3. Return \"Yes\" if all bits are set to 1, otherwise return \"No\".\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    \n    if len(a) == 1 :\n        return True\n    \n    firstSum = 0\n    secondSum = 0\n    \n    for i in range(len(a)) :\n        firstSum += a[i]\n        secondSum += a[i]\n        if firstSum == n :\n            return True\n        if firstSum > n :\n            firstSum -= a[i]\n        if secondSum == n :\n            return True\n        if secondSum > n :\n            secondSum -= a[i]\n    return False\n"}
{"task_id": "Open/5", "completion": "\n    binary = bin(x)\n    count = binary.count('1')\n    if count % 2 == 0 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/6", "completion": "\n    \n    output = []\n    for i in range(len(vec)):\n        if vec[i] > 0 :\n            vec[i] = vec[i] * -1\n    for i in range(len(vec)):\n        if vec[i] > 0 :\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/7", "completion": "\n    hashmap = {}\n    for i in arr :\n        if i not in hashmap :\n            hashmap[i] = 1\n        else :\n            hashmap[i] += 1\n    \n    max_length = 0\n    for i in arr :\n        if i not in hashmap :\n            hashmap[i] = 1\n        else :\n            hashmap[i] -= 1\n            if hashmap[i] == 0 :\n                del hashmap[i]\n        \n        if len(hashmap) > max_length :\n            max_length = len(hashmap)\n    \n    return max_length\n"}
{"task_id": "Open/8", "completion": "\n    set_of_prime_factors = set()\n    for i in a :\n        for j in range(2,i+1) :\n            if i % j == 0 :\n                set_of_prime_factors.add(j)\n    return len(set_of_prime_factors)\n"}
{"task_id": "Open/9", "completion": "\n    arr.sort()\n    kth_largest = arr[-k]\n    diff = kth_largest - arr[0]\n    for i in range(1, k) :\n        diff = min(diff, arr[i] - arr[i-1])\n    return diff\n"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A)!= 0 and len(B)!= 0 :\n        if A[0] == B[0] :\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else :\n            A.append(A.popleft())\n            B.append(B.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    count = 0\n    for i in range(len(s)) :\n        if len(set(s[i])) <= k :\n            count += 1\n        else :\n            set(s[i])\n    return count\n"}
{"task_id": "Open/13", "completion": "\n    counter = 2\n    while n > 1 :\n        if n % counter == 0 :\n            return False\n        n = n - counter\n        counter += 1\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    \n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/15", "completion": "\n    a = random.randint(2,n-1)\n    result = pow(a,(n-1)/2,n)\n    if result == 1 or result == n-1 :\n        return 1\n    else :\n        return -1\n"}
{"task_id": "Open/16", "completion": "\n    for i in range(n) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == '0':\n                count += 1\n        else:\n            if s[i] == '1':\n                count += 1\n    return min(count, len(s) - count)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n + 1) :\n        if math.log(i, 2) == int(math.log(i, 2)) :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return 0\n    return x + product(x, y - 1)\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        if i % 4 == 1 :\n            count1 += 1\n        if i % 4 == 2 :\n            count2 += 1\n        if i % 4 == 3 :\n            count3 += 1\n    if count0 == count1 and count1 == count2 and count2 == count3 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 1\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            max_len += 1\n        else :\n            max_len = 1\n    return max_len\n"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        return 0\n    if sum == 0 :\n        return 1\n    if count == 0 :\n        return 0\n    \n    return subsetSum ( arr, n, i + 1, sum, count - 1 ) + subsetSum ( arr, n, i + 1, sum - arr[i], count - 1 )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/24", "completion": "\n    counter = 1\n    while counter <= n :\n        counter += 1\n        if counter == n :\n            return counter\n    return -1\n"}
{"task_id": "Open/25", "completion": "\n    sumOfSquares = 0\n    sumOfNumbers = 0\n    for i in range(1, n + 1) :\n        sumOfNumbers += i\n        sumOfSquares += i ** 2\n    sumOfSquares += 1\n    return sumOfSquares, sumOfNumbers, sumOfSquares + sumOfNumbers + 1\n"}
{"task_id": "Open/26", "completion": "\n    \n    factors = []\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            factors.append(i)\n    \n    maxSum = 0\n    for i in factors :\n        maxSum += i\n    \n    return maxSum\n"}
{"task_id": "Open/27", "completion": "\n    return x >= y\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return ( b - a ) / a * 100\n"}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i**2\n    return sum/n\n"}
{"task_id": "Open/31", "completion": "\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "\n    chicks = 3**(n-1)\n    return chicks\n"}
{"task_id": "Open/33", "completion": "\n    \n    term = 1\n    \n    for i in range ( n ) :\n        term = term * 2 + ( i - 1 )\n        \n    return term\n    \n    "}
{"task_id": "Open/34", "completion": "\n    count = 0\n    for i in range(len(a)):\n        if a[i] < k:\n            count += 1\n        else:\n            count += a[i] * (a[i-1] * (a[i-1] - 1) // 2)\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range(1,n+1) :\n        if (i%10 == d) :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    \n    if n == 0 :\n        return 1\n    \n    set_ = set()\n    \n    for i in range(1,n+1) :\n        if i in arr :\n            set_.add(i)\n    \n    for i in range(1,n+1) :\n        if i not in set_ :\n            return i\n    \n    return n+1\n"}
{"task_id": "Open/37", "completion": "\n    account_balance = 0\n    \n    while account_balance < n :\n        account_balance += ways( n - 1 )\n        \n    return account_balance\n"}
{"task_id": "Open/38", "completion": "\n    areaSum = 0\n    size = 1\n    while size <= l :\n        area = size * size\n        areaSum += area\n        size += 1\n    return areaSum\n"}
{"task_id": "Open/39", "completion": "\n    return sum(range(1,N+1))\n"}
{"task_id": "Open/40", "completion": "\n    maxCount = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            maxCount += 1\n        elif arr[i] == 1 :\n            maxCount = 0\n    return maxCount\n"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_length = i + 1\n        else:\n            current_length = i - max_length\n        max_length = max(max_length, current_length)\n    return max_length\n"}
{"task_id": "Open/42", "completion": "\n    max_value = -inf\n    for i in range(n) :\n        if a[i] > max_value :\n            max_value = a[i]\n        elif a[i] < max_value :\n            max_value = a[i]\n    return max_value\n\na = [1,2,3,4,5,6,7,8,9,10]\nn = len(a)\nk = 2"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n) :\n        if array[i] * array[i+1] <= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    \n    arr.sort()\n    sum = 0\n    for i in range(n) :\n        sum += abs(arr[i] - i)\n    return sum\n"}
{"task_id": "Open/45", "completion": "\n    min_element = 0\n    for i in range(n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "\n    maxDiff = 0\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            diff = abs(array[i]-array[j])\n            if diff > maxDiff:\n                maxDiff = diff\n    return maxDiff\n"}
{"task_id": "Open/47", "completion": "\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0"}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(0, a+1) :\n        if (i + (a ^ i)) == a :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max = 0\n    for i in range(L,R+1):\n        if i & L > max:\n            max = i & L\n        if i & R > max:\n            max = i & R\n    return max\n"}
{"task_id": "Open/50", "completion": "\n    smallest = 0\n    for i in range(n) :\n        if a[i] % smallest == 0 :\n            smallest = a[i]\n    if smallest == 0 :\n        return -1\n    return smallest\n"}
{"task_id": "Open/51", "completion": "\n    sum = 0\n    for i in range(n) :\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] % 2!= 0:\n                result ^= arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(0, N+1) :\n        if (xorEqualsOrCount(i) == i) :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    sum = 0\n    for i in a :\n        if i < 0 :\n            return False\n        if i > k :\n            return False\n        if sum + i > k :\n            return False\n        sum += i\n    return True\n"}
{"task_id": "Open/55", "completion": "\n    \n    binary = bin(n)[2:]\n    return binary[0] == '1' and binary[-1] == '1'\n"}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    previous_character = None\n    for character in s :\n        if previous_character == character :\n            max_partitions += 1\n        else :\n            max_partitions = 1\n        previous_character = character\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = var1 + var2\n    result = result + (var1 * var2) / 100\n    for i in range(2,N):\n        result = result + arr[i]\n        result = result + (result * var1 / 100)\n    return result\n\narr = [1,2,3,4,5]\nN = len(arr)"}
{"task_id": "Open/59", "completion": "\n    \n    for i in range(index, len(arr)):\n        if i in range(ranges[index][0], ranges[index][1]):\n            arr[i] = arr[i] * reversals[index]\n            index += 1\n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    if n < 1 :\n        return False\n    \n    for i in range(n+1) :\n        for j in range(n+1) :\n            if i**2 + j**2 == n :\n                return True\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    count = 0\n    for i in range(len(b)):\n        if b[i] == a[0]:\n            if b[i:i+len(a)] == a:\n                count += 1\n    return count\n"}
{"task_id": "Open/62", "completion": "\n    \n    newStr = str[len-2:len-1]\n    for i in range(len-2, -1, -1) :\n        if str[i] > str[i+1] :\n            newStr = newStr + str[i] - 1\n            newStr = newStr + '9' * (len - i - 1)\n            return newStr\n    return newStr\n"}
{"task_id": "Open/63", "completion": "\n    min_value = 1\n    for i in arr:\n        if i < min_value:\n            min_value = i\n    return min_value\n"}
{"task_id": "Open/64", "completion": "\n    maxSubStr = \"\"\n    maxSubStrLen = 0\n    for i in s :\n        if i!= '1' :\n            maxSubStr = maxSubStr + i\n        else :\n            if len(maxSubStr) > maxSubStrLen :\n                maxSubStrLen = len(maxSubStr)\n                maxSubStr = maxSubStr\n    if maxSubStrLen == 0 :\n        return \"-1\"\n    return maxSubStr\n"}
{"task_id": "Open/65", "completion": "\n    a.sort()\n    count = 0\n    for i in range(n) :\n        if a[i] == a[i-1] :\n            count += 1\n        elif count > k :\n            a.remove(a[i])\n            count = 0\n    return len(a)\n"}
{"task_id": "Open/66", "completion": "\n    arr.sort()\n    if n % 2 == 0 :\n        return (arr[n//2] + arr[n//2 - 1]) / 2\n    else :\n        return arr[n//2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/67", "completion": "\n    step = 0\n    negative = 0\n    positive = 0\n    zero = 0\n    for i in range(0,n) :\n        if a[i] < 0 :\n            negative += abs(a[i])\n        elif a[i] > 0 :\n            positive += abs(a[i])\n        elif a[i] == 0 :\n            zero += 1\n    if negative % 2 == 0 :\n        step += zero\n    else :\n        step += 1\n    if positive % 2 == 0 :\n        step += zero\n    else :\n        step += 1\n    return step\n\na = [-1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    prev = 0\n    counter = 0\n    while n > 0 :\n        if n & 1 :\n            if prev == 0 :\n                counter += 1\n            else :\n                return False\n        else :\n            if prev == 1 :\n                return False\n        prev = n & 1\n        n >>= 1\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    if n > x :\n        return n\n    elif n < x :\n        return x\n    else :\n        return n\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(n+1) :\n        sum += 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        sum += i\n        i += 2\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    maxm = -1\n    count = 0\n    for i in arr :\n        if count == i :\n            maxm = i\n        count += 1\n    return maxm\n\narr = [1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n) :\n        if a[i] > 0 :\n            if a[i] & 1 :\n                count += 1\n            for j in range(i+1,n) :\n                if a[j] > 0 :\n                    if a[j] & 1 :\n                        count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    \n    binary = bin( n )\n    binary = binary[2:]\n    \n    for i in range( len( binary ) ) :\n        if binary[i] == '1' :\n            binary = binary[:i] + '0' + binary[i+1:]\n        else :\n            binary = binary[:i] + '1' + binary[i+1:]\n    \n    return int( binary, 2 )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/76", "completion": "\n    count = 0\n    for i in range(n) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            A[i+1] = 0\n            count += 1\n    return count\n"}
{"task_id": "Open/77", "completion": "\n    degree = 0\n    for i in range(0,360) :\n        degree = degree + (radian/3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n        -14string.format(radian)\n        )\n        if degree < 0 :\n            return True\n    return False\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range(n) :\n        sum += a + (n-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    max_power = 0\n    if n % 2 == 1 :\n        return 1\n    else :\n        for power in range(32) :\n            if n % (2**power) == 0 :\n                max_power = 2**power\n                break\n        return max_power\n"}
{"task_id": "Open/81", "completion": "\n    \n    count = 0\n    \n    for i in range(row,8) :\n        for j in range(column,8) :\n            if i == row and j == column :\n                continue\n            if i == row and j!= column :\n                count += 1\n                continue\n            if i!= row and j == column :\n                count += 1\n                continue\n            if i!= row and j!= column :\n                count += 1\n                continue\n    return count\n"}
{"task_id": "Open/82", "completion": "\n    \n    if n == 0 :\n        return 1\n    else :\n        return n + findNumber( n - 1 )\n"}
{"task_id": "Open/83", "completion": "\n    s = list(s)\n    s.sort()\n    for i in range(len(s)):\n        if s[i]!= s[-i-1]:\n            s[i], s[-i-1] = s[-i-1], s[i]\n    return \"\".join(s)\n"}
{"task_id": "Open/84", "completion": "\n    \n    array = []\n    for i in range(n) :\n        array.append(i+1)\n    \n    for i in range(l-1,r) :\n        if array[i] % 2 == 0 :\n            array[i] = array[i] + array[i+1]\n        else :\n            array[i] = array[i] + array[i+1]\n    \n    return sum(array[l-1:r])\n    "}
{"task_id": "Open/85", "completion": "\n    \n    if x > y :\n        smaller = y\n    else :\n        smaller = x\n    \n    for i in range(1, smaller+1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "\n    current_number = A\n    previous_number = B\n    count = 1\n    while count < N:\n        current_number = previous_number + current_number\n        previous_number = current_number\n        count += 1\n    return current_number\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            if str[i:i+len(substr)] == substr:\n                count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    emi = ( p * r * (1 + r)**t ) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[j] > B[k] * B[k]:\n                    count += 1\n    return count\n\nA = [1,2,3,4,5]\nB = [1,2,3,4,5]\nC = [1,2,3,4,5]"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    max_len = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_len = 1\n        elif arr[i] - arr[i-1] == arr[i-1] - arr[i-2]:\n            max_len += 1\n        else:\n            max_len = 1\n    return max_len\n"}
{"task_id": "Open/92", "completion": "\n    max_len = -1\n    for i in range(len(str)):\n        if len(str[i:]) % 2 == 0 and str[i:].isalnum():\n            max_len = max(max_len, len(str[i:]))\n    return max_len\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n >= 2 :\n        if n % 2 == 0 :\n            n = n / 2\n            count += 1\n        else :\n            break\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    if k < 0 :\n        return \"\"\n    if k == 0 :\n        return \"a\" * n\n    if k > 26 :\n        return chr(97 + (k - 26)) + lexo_small(n, k - 26)\n    return chr(97 + k) + lexo_small(n, k - 1)\n"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel/n\n        fuel = fuel/n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    sum = 0\n    for i in range(n) :\n        sum += arr[i]\n    if sum/3 == sum/2 :\n        return 1\n    return 0\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "\n    return math.floor(math.log10(n)) + 1\n"}
{"task_id": "Open/99", "completion": "\n    if a + b + c == 3 * k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/100", "completion": "\n    return x == y or isRotation(y,x)\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i == 0 :\n            count = 1\n        elif s[i]!= s[i-1]:\n            count = 1\n        else:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,len(arr)-1) :\n        if arr[i+1] - arr[i] < min_diff :\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"}
{"task_id": "Open/104", "completion": "\n    count = 0\n    for i in range(left, right + 1) :\n        if i == 0 :\n            count = 0\n        elif i == 1 :\n            count += 1\n        elif i == 2 :\n            count += 2\n        elif i == 3 :\n            count += 3\n        elif i == 4 :\n            count += 4\n        elif i == 5 :\n            count += 4\n        elif i == 6 :\n            count += 4\n        elif i == 7 :\n            count += 4\n        elif i == 8 :\n            count += 5\n        elif i == 9 :\n            count += 5\n        elif i == 10 :\n            count += 5\n        elif i == 11 :\n            count += 5\n        elif i == 12 :\n            count += 5\n        elif i == 13 :\n            count += 6\n    return count\n"}
{"task_id": "Open/105", "completion": "\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    elif n == 3 :\n        return 4\n    elif n == 4 :\n        return 4\n    elif n == 5 :\n        return 8\n    elif n == 6 :\n        return 8\n    elif n == 7 :\n        return 8\n    elif n == 8 :\n        return 8\n    elif n == 9 :\n        return 16\n    elif n == 10 :\n        return 16\n    elif n == 11 :\n        return 16\n    elif n == 12 :\n        return 16\n    elif n == 13 :\n        return 16\n    elif n == 14 :\n        return 16\n    elif n == 15 :\n        return 16\n    else :\n        return 16\n"}
{"task_id": "Open/106", "completion": "\n    if n <= 1 :\n        return False\n    else :\n        divisors = []\n        for i in range(1, n) :\n            if n % i == 0 :\n                divisors.append(i)\n        return sum(divisors) == n\n"}
{"task_id": "Open/107", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    else :\n        return (a*(3*a-1)/2)\n"}
{"task_id": "Open/109", "completion": "\n    count = 0\n    while n > 0 :\n        if n % 10 == d :\n            count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/110", "completion": "\n    \n    if n == 0 :\n        return False\n    \n    if n < 0 :\n        return False\n    \n    if n == 1 :\n        return True\n    \n    if n == 2 :\n        return True\n    \n    if n == 3 :\n        return True\n    \n    if n == 4 :\n        return True\n    \n    if n == 5 :\n        return True\n    \n    if n == 6 :\n        return True\n    \n    if n == 7 :\n        return True\n    \n    if n == 8 :\n        return True\n    \n    if n == 9 :\n        return True\n    \n    if n == 10 :\n        return True\n    \n    if n == 11 :\n        return True\n    \n    if n == 12 :\n        return True\n    \n    if n == 13 :\n        return True\n    \n    if n == 14 :\n        return True\n    \n    if n == 15 :\n        return True\n    \n    if n == 16 :\n        return True\n    \n    if n == 17 :\n        return True\n    \n    if n == 18 :\n"}
{"task_id": "Open/111", "completion": "\n    remainder = [0] * n\n    for i in range(n) :\n        remainder[i] = a[i] % 5\n        a[i] = a[i] // 5\n        remainder[i] = remainder[i] % 3\n        a[i] = a[i] // 3\n    if 0 in remainder :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/112", "completion": "\n    \n    array = [0]*(n+1)\n    array[0] = 4\n    array[1] = 7\n    for i in range(2,n+1) :\n        if i%2 == 0 :\n            array[i] = array[i//2] + 4\n        else :\n            array[i] = array[i//2] + 7\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    array = [0]*(n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(2, n+1) :\n        if i%2 == 0 :\n            array[i] = array[i//2] + 3\n        else :\n            array[i] = array[i//2] + 5\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    array = [0] * ( n + 1 )\n    array[0] = 1\n    array[1] = 2\n    for i in range(2, n + 1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10 + 1\n        else :\n            array[i] = array[i//2] * 10 + 2\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    for i in range(0, n) :\n        if a[i] % 11 == 0 :\n            return True\n        elif a[i] % 10 == 0 :\n            return True\n        elif a[i] % 9 == 0 :\n            return True\n        elif a[i] % 8 == 0 :\n            return True\n        elif a[i] % 7 == 0 :\n            return True\n        elif a[i] % 6 == 0 :\n            return True\n        elif a[i] % 5 == 0 :\n            return True\n        elif a[i] % 4 == 0 :\n            return True\n        elif a[i] % 3 == 0 :\n            return True\n        elif a[i] % 2 == 0 :\n            return True\n        elif a[i] % 1 == 0 :\n            return True\n        else :\n            return False\n"}
{"task_id": "Open/116", "completion": "\n    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "\n    string = input(\"Enter a string : \")\n    new_string = \"\"\n    for i in string :\n        if i.isalpha() :\n            new_string += i.upper()\n        else :\n            new_string += i\n    print(new_string)\n    \n    \n    \nFirstAndLast(\"hello world\")\nFirstAndLast(\"Hello World\")\nFirstAndLast(\"Hello World!\")\nFirstAndLast(\"Hello World!!!\")\nFirstAndLast(\"Hello World!!!!\")\nFirstAndLast(\"Hello World!!!!\")\nFirstAndLast(\"Hello World!!!!\")\nFirstAndLast(\"Hello World!!!!\")\nFirstAndLast(\"Hello World!!!!\")\nFirstAndLast(\"Hello World!!!!\")\nFirstAndLast(\"Hello World!!!!\")\nFirstAndLast(\"Hello World!!!!\")\nFirstAnd"}
{"task_id": "Open/118", "completion": "\n    return math.ceil(math.sqrt(8 * p + 1) - 1) / 2\n"}
{"task_id": "Open/119", "completion": "\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/120", "completion": "\n    count = 0\n    if len( string ) < 2 :\n        return count\n    else :\n        for i in range( len( string ) - 1 ) :\n            if string[i]!= string[i+1] :\n                count += 1\n        return count\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    elif lower > higher :\n        return 2\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    max_number = 0\n    current_number = 0\n    for i in range(len(ss)):\n        if ss[i].isdigit():\n            current_number = current_number * 10 + int(ss[i])\n        else:\n            if current_number > max_number:\n                max_number = current_number\n            current_number = 0\n    if current_number > max_number:\n        max_number = current_number\n    return max_number\n"}
{"task_id": "Open/123", "completion": "\n    if length == 0 :\n        return 0\n    \n    if length == 1 :\n        return 1\n    \n    if length == 2 :\n        if s[0] == s[1] :\n            return 2\n        else :\n            return 1\n    \n    if length > 2 :\n        list = []\n        for i in range(length) :\n            list.append(s[i])\n        \n        length = len(list)\n        \n        for i in range(length-1) :\n            if list[i] == list[i+1] + 1 :\n                length += 1\n            else :\n                return length\n        \n        return length\n"}
{"task_id": "Open/124", "completion": "\n    N = 0\n    M = 0\n    while K > 0:\n        if N > M:\n            N -= min(N, M)\n            M -= min(N, M)\n        else:\n            M -= min(N, M)\n            N -= min(N, M)\n        K -= 1\n    return N * M if N and M > 0 else 0\n"}
{"task_id": "Open/125", "completion": "\n    for i in range(length) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    \n    maxPower = 0\n    \n    for i in range(1, n+1) :\n        if (i & (i-1)) == 0 :\n            maxPower = i\n    \n    return maxPower\n"}
{"task_id": "Open/127", "completion": "\n    \n    A = str(A)\n    B = str(B)\n    \n    return len(A) == len(B)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/128", "completion": "\n    return (x - y)!= 1\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1, Sn_2, Sn_3 = 1, 12, 1213\n    for i in range(3, n+1) :\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    \n    arr = [1,2,3,4,5]\n    minSteps = [0] * len(arr)\n    \n    minSteps[0] = abs(arr[0] - 1)\n    minSteps[1] = abs(arr[1] - 2)\n    minSteps[2] = abs(arr[2] - 3)\n    minSteps[3] = abs(arr[3] - 4)\n    minSteps[4] = abs(arr[4] - 5)\n    \n    for i in range(1, len(arr)):\n        minSteps[i] = min(minSteps[i-1] + abs(arr[i] - arr[i-1]), minSteps[i-1] + abs(arr[i] - arr[i-2]))\n    \n    return minSteps\n"}
{"task_id": "Open/131", "completion": "\n    remainder = 0\n    for i in range(n) :\n        remainder = remainder + (n % 4)\n        if remainder == 0 or remainder == 3 :\n            return 0\n        if remainder == 1 or remainder == 2 :\n            return 1\n    return remainder\n"}
{"task_id": "Open/132", "completion": "\n    m = 0\n    sum = 0\n    for i in range(1, N+1) :\n        if i % a == 0 :\n            m += 1\n    for i in range(1, m+1) :\n        sum += i\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n    "}
{"task_id": "Open/134", "completion": "\n    if n % 2!= 0 :\n        return False\n    if arr[0] % 2!= 0 or arr[-1] % 2!= 0 :\n        return False\n    return True\n"}
{"task_id": "Open/135", "completion": "\n    count = 0\n    if N == 1:\n        return count\n    elif N > 1:\n        count = count + 1\n        return count + countSum(N-2,L,R)\n    else:\n        return 0\n"}
{"task_id": "Open/136", "completion": "\n    minimum = 1\n    for i in range(n) :\n        if arr[i] < minimum :\n            minimum = arr[i]\n    return minimum\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/137", "completion": "\n    \n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    return s\n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n        else :\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "\n    average = 0\n    for char in s :\n        average += ord(char)\n    return average/len(s)\n"}
{"task_id": "Open/140", "completion": "\n    \n    banknotes = 0\n    \n    for i in range(N):\n        if A > S:\n            return -1\n        if A <= S and B <= S:\n            banknotes += (S - A) // B\n        A += B\n    return banknotes\n"}
{"task_id": "Open/141", "completion": "\n    gcd = math.gcd(x,y)\n    return x * y / gcd\n"}
{"task_id": "Open/142", "completion": "\n    \n    count = 0\n    \n    while n > 0 :\n        if n % 2 == 0 :\n            count += 1\n        n = n // 2\n    \n    return count\n"}
{"task_id": "Open/143", "completion": "\n    maxSum = 0\n    index = -1\n    for i in range(n) :\n        sum = arr[i] ^ arr[i+1]\n        if sum > maxSum :\n            maxSum = sum\n            index = i\n    return index\n"}
{"task_id": "Open/144", "completion": "\n    lds = 1\n    for i in range(1, n) :\n        if arr[i] < arr[i-1] :\n            lds = max(lds, lds + 1)\n    return lds\n"}
{"task_id": "Open/145", "completion": "\n    min_element = min(arr)\n    if min_element == k :\n        return -1\n    if min_element < k :\n        return -1\n    if min_element > k :\n        return -1\n    \n    return min_element + k\n"}
{"task_id": "Open/146", "completion": "\n    if K == 1 :\n        return -1\n    \n    num = str(K)\n    counter = 1\n    \n    for i in range(len(num)) :\n        if num[i] == num[i-1] :\n            counter += 1\n        else :\n            counter = 1\n        if counter > 1 :\n            return counter\n    return -1\n    "}
{"task_id": "Open/147", "completion": "\n    min_ops = sys.maxsize\n    for i in range(n):\n        if arr[i] == n:\n            min_ops -= 1\n        else:\n            min_ops += 2\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "\n    sum = 3\n    for i in range(n) :\n        if i % 2 == 0 :\n            sum += 3\n        else :\n            sum += 5\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    XOR = 0\n    for i in range(len1) :\n        XOR = XOR ^ ord(str1[i])\n    return XOR\n"}
{"task_id": "Open/152", "completion": "\n    \n    binary = str(bin(n))\n    \n    for i in range(len(binary) - 1) :\n        if binary[i] == '1' and binary[i+1] == '1' :\n            return False\n    return True\n"}
{"task_id": "Open/153", "completion": "\n    vowels = ['a','e','i','o','u']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == 0:\n                if s[i] > s[i+1]:\n                    return False\n            elif s[i] > s[i-1]:\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low, high + 1) :\n        if (i % 10) >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    return math.fabs(math.pow(2, n) - n)\n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else :\n        return (1/3)*(r*r*r)\n"}
{"task_id": "Open/157", "completion": "\n    new_string = \"\"\n    for char in sorted(s) :\n        new_string += char\n    return new_string\n"}
{"task_id": "Open/158", "completion": "\n    low = 0\n    high = size - 1\n    while low <= high :\n        mid = (low + high) // 2\n        if ar[mid] == size-1 :\n            return ar[mid-1]\n        elif ar[mid] < size-1 :\n            low = mid + 1\n        else :\n            high = mid - 1\n    return ar[low]\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    d = {}\n    for i in arr :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in arr :\n        if d[i] % 2 == 0 :\n            return i\n    return None\n"}
{"task_id": "Open/161", "completion": "\n    ans = 0\n    xorArr = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n    for i in range(n) :\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "\n    if ( sx == dx and sy == dy ) :\n        return True\n    if ( sx == dx and sy!= dy ) :\n        return True\n    if ( sx!= dx and sy == dy ) :\n        return True\n    if ( sx!= dx and sy!= dy ) :\n        return False\n    return False\n"}
{"task_id": "Open/163", "completion": "\n    count = 0\n    if n % 4 == 0 :\n        count += 1\n    return count\n"}
{"task_id": "Open/164", "completion": "\n    count = 1\n    d = {}\n    for i in arr :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in d :\n        count *= d[i]\n    return count\n\narr = [1,2,3,4,5,6]\nn = len(arr)"}
{"task_id": "Open/165", "completion": "\n    account_balance = 0\n    return False\n"}
{"task_id": "Open/166", "completion": "\n    steps = 0\n    while source!= dest :\n        if source > dest :\n            source -= dest\n            steps += 1\n        elif source < dest :\n            dest += source\n            steps += 1\n    return steps\n"}
{"task_id": "Open/167", "completion": "\n    s = \"1\"\n    for i in range(n-1) :\n        if s[i] == s[i+1] :\n            count = 1\n        else :\n            count = 0\n        s = s[:i] + str(count) + s[i+1:]\n    return s\n"}
{"task_id": "Open/168", "completion": "\n    maxLen = 0\n    product = 1\n    start = 0\n    for i in range(len(arr)):\n        if product < 0:\n            product = 1\n            start = i + 1\n        else:\n            product *= arr[i]\n            maxLen = max(maxLen, i - start + 1)\n    return maxLen\n"}
{"task_id": "Open/169", "completion": "\n    normal = 0\n    m = 0\n    n = 0\n    \n    for i in range(0,2) :\n        m = m + m\n        n = n + n\n    \n    normal = (m * n) / math.sqrt((m * m) + (n * n))\n    \n    if normal < 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 15"}
{"task_id": "Open/171", "completion": "\n    arr.sort()\n    count = 0\n    i = 0\n    j = L\n    k = n - 1\n    while i < j < k:\n        if arr[k] - arr[i] <= L:\n            count += 1\n            j -= 1\n        else:\n            k -= 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l, r+1) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    return int(bin(n)[2:].zfill(m)[::-1], 2)\n"}
{"task_id": "Open/174", "completion": "\n    count = 0\n    for i in range(L, R + 1):\n        if (i % 9 == 0) or (i % 9 == K):\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    n = str(n)\n    k = str(k)\n    product = n * math.log(n)\n    product = str(product)\n    product = product[:k]\n    product = int(product)\n    return product\n"}
{"task_id": "Open/176", "completion": "\n    \n    if n == 0 :\n        return -1\n    \n    for i in range(n) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "\n    a.sort()\n    b.sort()\n    c.sort()\n    \n    return min(a[-1] - b[0], b[-1] - c[0], c[-1] - a[0])\n"}
