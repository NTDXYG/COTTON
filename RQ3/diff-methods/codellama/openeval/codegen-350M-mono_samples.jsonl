{"task_id": "Open/0", "completion": "    count = 0\n    for i in range(N) :\n        count += arr[i] + K\n    return count\n"}
{"task_id": "Open/1", "completion": "    max_freq = 0\n    for i in range(n):\n        if arr[i] > max_freq:\n            max_freq = arr[i]\n    return max_freq\n"}
{"task_id": "Open/2", "completion": "    # Step 1. Convert n to binary.\n    n = bin(n)[2:]\n    # Step 2. Iterate through the binary representation of n and check if all bits in the range from l to r are set to 1.\n    for i in range(l, r+1) :\n        if n[i] == \"1\" :\n            return \"Yes\"\n    # Step 3. Return \"Yes\" if all bits are set to 1, otherwise return \"No\".\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if A[i]%K == 0 and A[j]%K == 0:\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    \n    # Step 1. Initialize two sums as 0.\n    sums = [0] * n\n    \n    # Step 2. Iterate through the list.\n    for i in range(n) :\n        sums[i] = sums[i] + a[i]\n    \n    # Step 3. Return False.\n    if sums[n-1] == n :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/5", "completion": "    # Your code here\n    if x % 2 == 0 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(abs(vec[i]))\n        else:\n            output.append(abs(vec[i]))\n            output.append(abs(vec[i]))\n    return output\n"}
{"task_id": "Open/7", "completion": "    \n    # Step 1\n    hashmap = {}\n    for i in range(n):\n        digit = arr[i]\n        if digit not in hashmap:\n            hashmap[digit] = 0\n        else:\n            hashmap[digit] += 1\n    \n    # Step 2\n    for i in range(n):\n        digit = arr[i]\n        if digit not in hashmap:\n            continue\n        else:\n            hashmap[digit] -= 1\n            \n    # Step 3\n    for i in range(n):\n        digit = arr[i]\n        if digit not in hashmap:\n            continue\n        else:\n            hashmap[digit] -= 1\n            \n    # Step 4\n    for i in range(n):\n        digit = arr[i]\n        if digit not in hashmap:\n            continue\n        else:\n            hashmap[digit] -= 1\n            \n    # Step 5\n    for i in range(n):\n        digit = arr[i]\n        if digit not in hashmap:\n            continue\n        else:\n            hashmap[digit] += 1"}
{"task_id": "Open/8", "completion": "    prime_factors = set()\n    for i in range(2, a):\n        if a % i == 0:\n            prime_factors.add(i)\n    return len(prime_factors)\n"}
{"task_id": "Open/9", "completion": "    arr.sort()\n    return arr[k-1] - arr[0]\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    for i in range(len(A)) :\n        if A[i] == B[i] :\n            total_time += 1\n        else :\n            A[i], B[i] = B[i], A[i]\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range(len(s)):\n        if len(set(s[i:i+k])) <= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    counter = 2\n    while counter <= n :\n        if counter % 2 == 0 :\n            return False\n        elif counter % 2 == 1 :\n            return True\n        counter += 1\n    return True\n"}
{"task_id": "Open/14", "completion": "    # Write your code here\n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2, n-1)\n    for i in range(t) :\n        a = pow(a, n-1, n)\n        if a == 1 :\n            return 1\n        elif a == n-1 :\n            return -1\n    return -1\n"}
{"task_id": "Open/16", "completion": "    # Step 1.\n    for i in range(len(s1)):\n        if s1[i] == '0' and s2[i] == '1':\n            return True\n        elif s1[i] == '1' and s2[i] == '0':\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z':\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0':\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z':\n            return True\n        elif s1[i] == '1' and s2[i] == 'Z':\n            return True\n        elif s1[i] == 'Z' and s2[i] == '1':\n            return True\n        else:\n            return False\n    # Step 2.\n    for i in range(len(s1)):\n        if s1[i] == '1' and s2[i] == '0':\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    length = len(s)\n    for i in range(length):\n        if s[i] == '0' and s[i+1] == '1':\n            count += 1\n        elif s[i] == '1' and s[i+1] == '0':\n            count += 1\n    return count\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if x == y :\n        return x\n    else :\n        return x * y\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        elif i % 4 == 1 :\n            count1 += 1\n        elif i % 4 == 2 :\n            count2 += 1\n        elif i % 4 == 3 :\n            count3 += 1\n    if count0 % 2 == 0 and count1 % 2 == 0 and count2 % 2 == 0 and count3 % 2 == 0 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 1\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            max_len += 1\n    return max_len\n"}
{"task_id": "Open/23", "completion": "    if (i == n) :\n        return count\n    if (sum == 0) :\n        return 0\n    if (arr[i] == 0) :\n        return 0\n    if (sum - arr[i] < 0) :\n        return 0\n    count = count + 1\n    return subsetSum(arr, n, i + 1, sum - arr[i], count)\n"}
{"task_id": "Open/24", "completion": "    \n    # Step 1. Initialize a counter for the hexadecagonal number.\n    counter = 0\n    \n    # Step 2. Iterate through the hexadecagonal numbers.\n    for i in range(1, n + 1) :\n        \n        # Step 3. Return -1 if the counter is equal to n, return the hexadecagonal number.\n        if counter == n :\n            return i\n        \n        # Step 2. Update the counter.\n        counter += 1\n    \n    # Step 1. Return -1 if the counter is not equal to n, return the hexadecagonal number.\n    return -1\n"}
{"task_id": "Open/25", "completion": "    sum_squares = 0\n    sum_numbers = 0\n    for i in range(1, n+1) :\n        sum_squares += i ** 2\n        sum_numbers += i\n    return sum_squares + sum_numbers + 1\n"}
{"task_id": "Open/26", "completion": "    \n    # Step 1\n    factors = [i for i in range(1, n+1)]\n    \n    # Step 2\n    for i in range(len(factors)):\n        factors[i] = factors[i] * factors[i-1]\n    \n    # Step 3\n    return max(factors)\n"}
{"task_id": "Open/27", "completion": "    if x >= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    # Step 1. Calculate the difference between a and b.\n    diff = abs(a - b)\n    # Step 2. Calculate the percentage increase or decrease from a to b.\n    percent = (diff / a) * 100\n    # Step 3. Return the percentage increase or decrease from a to b.\n    return percent\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    count = 0\n    for i in range(1, n+1) :\n        sum += i**2\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[n-k]\n"}
{"task_id": "Open/32", "completion": "    chicks = 0\n    while n > 0 :\n        chicks += 3 ** (n-1)\n        n -= 1\n    return chicks\n"}
{"task_id": "Open/33", "completion": "    if n == 1 :\n        return 1\n    else :\n        return findTerm(n-1) + findTerm(n-2)\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            product = a[i] * a[j]\n            if product < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    # Step 1\n    # Create an empty set.\n    set = set(arr)\n    # Step 2\n    for i in range(n):\n        if arr[i] > 0:\n            set.add(arr[i])\n    # Step 3\n    for i in range(n):\n        if arr[i] in set:\n            return i\n    # Step 4\n    return n + 1\n"}
{"task_id": "Open/37", "completion": "    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    if n == 2 :\n        return 2\n    return ways ( n - 1 ) + ways ( n - 2 )\n"}
{"task_id": "Open/38", "completion": "    areaSum = 0\n    size = 1\n    while size <= b :\n        areaSum += size * size\n        size += 1\n    while size >= l :\n        areaSum += size * size\n        size -= 1\n    return areaSum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "    maxCount = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            maxCount += 1\n        else :\n            maxCount = 0\n    return maxCount\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            if max_length < i - len(arr) + 1:\n                max_length = i - len(arr) + 1\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    max_value = -inf\n    for i in range(0, n) :\n        if a[i] < max_value :\n            max_value = a[i]\n        elif a[i] > max_value :\n            max_value = a[i]\n        elif a[i] == max_value :\n            if i == 0 or i == n - 1 :\n                max_value = a[i]\n            else :\n                max_value = max(a[i-1], a[i+1])\n    return max_value\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            product = array[i] * array[j]\n            if product <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    arr.sort()\n    sum = 0\n    for i in range (n) :\n        sum += abs(arr[i] - i)\n    return sum\n"}
{"task_id": "Open/45", "completion": "    min_element = 0\n    for i in range(n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    # Step 1\n    # Iterate through the array\n    # For each element, calculate the difference between the element and the index of the element.\n    # Store the maximum difference in a variable.\n    # Return the maximum difference.\n    #\n    # Step 2\n    # Iterate through the array\n    # For each element, calculate the difference between the element and the index of the element.\n    # Store the maximum difference in a variable.\n    # Return the maximum difference.\n    #\n    # Step 3\n    # Iterate through the array\n    # For each element, calculate the difference between the element and the index of the element.\n    # Store the maximum difference in a variable.\n    # Return the maximum difference.\n    #\n    # Step 4\n    # Iterate through the array\n    # For each element, calculate the difference between the element and the index of the element.\n    # Store the maximum difference in a variable.\n    # Return the maximum difference.\n    #\n    # Step 5\n    # Iterate through the array\n    # For each element, calculate the difference between the element and the index of the element.\n    # Store"}
{"task_id": "Open/47", "completion": "    if a == 0 and b == 0 and c == 0 :\n        return False\n    elif a == 0 and b == 0 and c!= 0 :\n        return False\n    elif a == 0 and b!= 0 and c == 0 :\n        return False\n    elif a == 0 and b!= 0 and c!= 0 :\n        return False\n    elif a!= 0 and b == 0 and c == 0 :\n        return False\n    elif a!= 0 and b == 0 and c!= 0 :\n        return False\n    elif a!= 0 and b!= 0 and c == 0 :\n        return False\n    elif a!= 0 and b!= 0 and c!= 0 :\n        return False\n    elif a!= 0 and b!= 0 and c!= 0 :\n        return False\n    elif a!= 0 and b!= 0 and c!= 0 :\n        return False\n    elif a!= 0 and b!= 0 and c!= 0 :\n        return False\n    elif a!= 0 and b!= 0 and c!= 0 :\n        return False\n    elif a!= 0 and b!= 0 and c!= 0 :\n        "}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a):\n        if (a & i) == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max = 0\n    for i in range(L, R+1) :\n        if L & i == i :\n            max = max + 1\n    return max\n"}
{"task_id": "Open/50", "completion": "    smallest = 0\n    for i in range(n):\n        if a[i] % smallest == 0:\n            smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    result = 0\n    for i in range(n):\n        for j in range(n):\n            if (i+1) * (j+1) % 2!= 0:\n                result = result ^ arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(N) :\n        count += (1 << i)\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(n) :\n        sum += a[i]\n        if sum > k :\n            return False\n    return True\n"}
{"task_id": "Open/55", "completion": "    # Step 1. Convert the integer to binary.\n    binary = bin(n)\n    \n    # Step 2. Check if the first and last bits are 1.\n    if binary[0] == '0' and binary[-1] == '1':\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            max_partitions += 1\n        else:\n            max_partitions = 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2, N):\n        result += var1 * var2 / 100\n        var1 = var2\n        var2 = var1 + var2\n    return result\n"}
{"task_id": "Open/59", "completion": "    # Step 1. Initialize the array.\n    # Step 2. Iterate through the reversals.\n    # Step 3. Return the value at the given index.\n    # Step 4. Reverse the array within the given range.\n    # Step 5. Reverse the array within the given range.\n    # Step 6. Reverse the array within the given range.\n    # Step 7. Reverse the array within the given range.\n    # Step 8. Reverse the array within the given range.\n    # Step 9. Reverse the array within the given range.\n    # Step 10. Reverse the array within the given range.\n    # Step 11. Reverse the array within the given range.\n    # Step 12. Reverse the array within the given range.\n    # Step 13. Reverse the array within the given range.\n    # Step 14. Reverse the array within the given range.\n    # Step 15. Reverse the array within the given range.\n    # Step 16. Reverse the array within the given range.\n    # Step 17. Reverse the array within the given range.\n    # Step 18. Reverse the array within the given range.\n    # Step 19. Reverse the array"}
{"task_id": "Open/60", "completion": "    # Step 1\n    for i in range(1, n+1):\n        if (n % i == 0):\n            return False\n    # Step 2\n    for i in range(1, n+1):\n        if (n % i == 0):\n            return False\n    # Step 3\n    return True\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(b)):\n        if b[i] == a[0]:\n            count += 1\n    return count\n"}
{"task_id": "Open/62", "completion": "    str = str[len-1]\n    for i in range(len-2, -1, -1) :\n        if str[i] > str[i+1] :\n            str = str[:i] + str[i+1] + str[i+2:]\n    return str\n"}
{"task_id": "Open/63", "completion": "    minimum = 1\n    for i in range(n):\n        minimum = minimum * math.log(arr[i], 2)\n    return minimum\n"}
{"task_id": "Open/64", "completion": "    maxSubStr = \"\"\n    maxSubStrLen = 0\n    for i in range(len(s)):\n        if s[i]!= '1':\n            maxSubStr += s[i]\n            maxSubStrLen += 1\n        else:\n            if len(maxSubStr) > maxSubStrLen:\n                maxSubStr = maxSubStr[:maxSubStrLen]\n                maxSubStrLen = 0\n            else:\n                maxSubStrLen += 1\n    return maxSubStr\n"}
{"task_id": "Open/65", "completion": "    # Step 1\n    a.sort()\n    # Step 2\n    for i in range(n-1):\n        if a[i] < a[i+1]:\n            a[i], a[i+1] = a[i+1], a[i]\n    # Step 3\n    return len(a)\n"}
{"task_id": "Open/66", "completion": "    if n % 2 == 0 :\n        return (arr[n//2] + arr[n//2 - 1]) / 2\n    else :\n        return arr[n//2]\n"}
{"task_id": "Open/67", "completion": "    step_count = 0\n    negative_count = 0\n    positive_count = 0\n    zero_count = 0\n    for i in range(len(a)):\n        if a[i] == 1:\n            step_count += 1\n        elif a[i] == -1:\n            negative_count += 1\n        elif a[i] == 0:\n            zero_count += 1\n    if negative_count % 2 == 0:\n        step_count += 2\n    if positive_count % 2 == 0:\n        step_count += 2\n    if zero_count % 2 == 0:\n        step_count += 2\n    return step_count\n"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    else :\n        v = []\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append(n)\n        v.append"}
{"task_id": "Open/69", "completion": "    \n    # Step 1. Initialize a variable to store the previous bit.\n    previous_bit = 0\n    \n    # Step 2. Iterate through the binary representation of the number.\n    for bit in bin(n)[2:]:\n        # If the current bit is 1 and the previous bit is 0, increment a counter.\n        if bit == '1' and previous_bit == 0:\n            previous_bit = 1\n        # If the current bit is 0 and the previous bit is 1, return False.\n        elif bit == '0' and previous_bit == 1:\n            return False\n        # If the current bit is 0 and the previous bit is 0, do nothing.\n        elif bit == '0' and previous_bit == 0:\n            continue\n        # If the current bit is 1 and the previous bit is 1, increment a counter.\n        elif bit == '1' and previous_bit == 1:\n            previous_bit = 1\n    \n    # Step 3. Return True.\n    return True\n"}
{"task_id": "Open/70", "completion": "    if n < x :\n        return n\n    elif n == x :\n        return x\n    else :\n        return n % x\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(n):\n        sum += i + 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/73", "completion": "    maxm = -1\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[i] and count == 0:\n            count += 1\n        elif arr[i] == arr[i] and count!= 0:\n            maxm = arr[i]\n            count -= 1\n    return maxm\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i]**2 > a[j]**2:\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    \n    # Step 1\n    n = bin(n)[2:]\n    \n    # Step 2\n    for i in range(len(n)) :\n        if n[i] == '1' :\n            n = n[:i] + '0' + n[i+1:]\n        else :\n            n = n[:i] + '1' + n[i+1:]\n    \n    # Step 3\n    return int(n, 2)\n"}
{"task_id": "Open/76", "completion": "    count = 0\n    for i in range(n):\n        if A[i] == 1:\n            count += 1\n        else:\n            A[i] = 0\n    return count\n"}
{"task_id": "Open/77", "completion": "    if radian < 0 :\n        return False\n    else :\n        degree = radian * (180/pi)\n        return degree\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(n):\n        sum += a + (i+1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    max_power = 0\n    for i in range(2, n+1) :\n        if n % i == 0 :\n            max_power = i\n            break\n    return max_power\n"}
{"task_id": "Open/81", "completion": "    count = 0\n    for i in range(8):\n        for j in range(8):\n            if (i == row and j == column) or (i == 0 and j == 0) or (i == 7 and j == 0):\n                count += 1\n    return count\n"}
{"task_id": "Open/82", "completion": "    sequence = []\n    current = 0\n    for i in range(n):\n        sequence.append(current)\n        current += n\n    return sequence\n"}
{"task_id": "Open/83", "completion": "    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    return s\n"}
{"task_id": "Open/84", "completion": "    \n    # Step 1\n    # Create an array of length n.\n    # Iterate through the array and assign odd numbers to the odd indices and even numbers to the even indices.\n    # Calculate the sum of the elements in the array from index l-1 to index r.\n    # Return the sum.\n    \n    # Step 2\n    # Create an array of length n.\n    # Iterate through the array and assign odd numbers to the odd indices and even numbers to the even indices.\n    # Calculate the sum of the elements in the array from index l-1 to index r.\n    # Return the sum.\n    \n    # Step 3\n    # Create an array of length n.\n    # Iterate through the array and assign odd numbers to the odd indices and even numbers to the even indices.\n    # Calculate the sum of the elements in the array from index l-1 to index r.\n    # Return the sum.\n    \n    # Step 4\n    # Create an array of length n.\n    # Iterate through the array and assign odd numbers to the odd indices and even numbers to the even indices.\n    # Calculate the"}
{"task_id": "Open/85", "completion": "    if x % y == 0 :\n        return y\n    elif y % x == 0 :\n        return x\n    else :\n        return getHCF(x,y//2)\n"}
{"task_id": "Open/86", "completion": "    current_number = A\n    previous_number = B\n    count = 1\n    while count < N:\n        current_number = previous_number + current_number\n        previous_number = current_number\n        count += 1\n    return current_number\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if substr == str[i:i+len(substr)]:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    \n    # Step 1\n    r = r / 12\n    t = t / 12\n    \n    # Step 2\n    emi = (p * r * (1 + r) ** t) / ((1 + r) ** t - 1)\n    \n    # Step 3\n    return emi\n"}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[k] > B[j] * B[k]:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l, r+1) :\n        if (i % 10) == 2 :\n            count += 1\n        elif (i % 10) == 3 :\n            count += 1\n        elif (i % 10) == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[i] - arr[j]\n            if diff == 0:\n                continue\n            elif diff == 1:\n                max_len = max(max_len, j-i+1)\n            else:\n                max_len = max(max_len, j-i+1)\n    return max_len\n"}
{"task_id": "Open/92", "completion": "    maxLen = 0\n    for i in range(len(str)):\n        if len(str[i]) % 2 == 0 and str[i].isalnum():\n            if len(str[i]) > maxLen:\n                maxLen = len(str[i])\n    return maxLen\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    for i in range(n) :\n        if n % 2 == 0 :\n            n = n / 2\n            count += 1\n        else :\n            n = n * 3 + 1\n            count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    \n    # Step 1\n    # Create a string of length n consisting of all 'a' characters.\n    # Iterate through the string in reverse order.\n    # Subtract the current index from k.\n    # If k is greater than or equal to 0, check if k is greater than or equal to 26.\n    # If it is, replace the character at the current index with 'z' and subtract 26 from k.\n    # Otherwise, calculate the ASCII value of the character to be replaced by adding k to 97 and subtract 1.\n    # Replace the character at the current index with the corresponding lowercase letter and subtract the difference between the ASCII values of the replaced character and 'a' from k.\n    # Add the current index to k.\n    # Repeat the above steps for the previous index.\n    \n    # Step 2\n    # Iterate through the string in reverse order.\n    # Subtract the current index from k.\n    # If k is greater than or equal to 0, check if k is greater than or equal to 26.\n    # If it is, replace the character at the current index with 'z' and subtract 26 from k."}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    \n    for i in range(n) :\n        totalDistance += (fuel[i]/n)\n        \n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    if sum == (sum / 3):\n        return 1\n    elif sum == (sum / 3) + 1:\n        return 2\n    else:\n        return 0\n"}
{"task_id": "Open/97", "completion": "    # Step 1. Split the sentence into words.\n    word_list = sentence.split()\n    \n    # Step 2. Iterate through the words.\n    for word in word_list :\n        if word == word_list[0] :\n            return True\n    \n    # Step 3. Return False.\n    return False\n"}
{"task_id": "Open/98", "completion": "    if n == 0 :\n        return 0\n    else :\n        return countDigit(n//10) + 1\n"}
{"task_id": "Open/99", "completion": "    if (a + b + c == 3) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/100", "completion": "    x = bin(x)\n    y = bin(y)\n    if x[0] == y[0] :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            count = 0\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    # Step 1\n    arr.sort()\n    \n    # Step 2\n    diff = abs( arr[0] - arr[1] )\n    \n    # Step 3\n    for i in range(2, n):\n        diff = min(diff, abs( arr[i] - arr[i-1] ))\n    \n    # Return the difference\n    return diff\n"}
{"task_id": "Open/104", "completion": "    count = 0\n    for i in range(left, right+1) :\n        if (i & 1) == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/105", "completion": "    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    elif n == 3 :\n        return 4\n    elif n == 4 :\n        return 8\n    elif n == 5 :\n        return 16\n    elif n == 6 :\n        return 32\n    elif n == 7 :\n        return 64\n    elif n == 8 :\n        return 128\n    elif n == 9 :\n        return 256\n    elif n == 10 :\n        return 512\n    elif n == 11 :\n        return 1024\n    elif n == 12 :\n        return 2048\n    elif n == 13 :\n        return 4096\n    elif n == 14 :\n        return 8192\n    elif n == 15 :\n        return 16384\n    else :\n        return n\n"}
{"task_id": "Open/106", "completion": "    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/107", "completion": "    # Step 1\n    N = N % 100\n    N = N // 100\n    # Step 2\n    N = N % 400\n    # Step 3\n    N = N // 400\n    # Step 4\n    N = N % 7\n    # Step 5\n    N = N * 2\n    # Step 6\n    N = N % 7\n    # Step 7\n    N = N * 2\n    # Step 8\n    N = N % 7\n    # Step 9\n    N = N * 2\n    # Step 10\n    N = N % 7\n    # Step 11\n    N = N * 2\n    # Step 12\n    N = N % 7\n    # Step 13\n    N = N * 2\n    # Step 14\n    N = N % 7\n    # Step 15\n    N = N * 2\n    # Step 16\n    N = N % 7\n    # Step 17\n    N = N * 2\n    # Step 18\n    N = N % 7\n    # Step 19\n    N = N * 2\n    # Step 20\n    N = N % 7\n    # Step 21\n    N = N"}
{"task_id": "Open/108", "completion": "    if a < 0:\n        return -1\n    elif a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    else:\n        return a * (a - 1) / 2\n"}
{"task_id": "Open/109", "completion": "    \n    # Step 1\n    n = str(n)\n    \n    # Step 2\n    count = 0\n    for i in n:\n        if i == d:\n            count += 1\n    \n    # Step 3\n    return count\n"}
{"task_id": "Open/110", "completion": "    \n    # Step 1\n    if not isinstance ( n, int ) :\n        return False\n    \n    # Step 2\n    if n < 0 :\n        return False\n    \n    # Step 3\n    if n == 0 :\n        return True\n    \n    # Step 2\n    for i in range ( len ( str ( n ) ) ) :\n        if not str ( n ) [ i ] == str ( n ) [ i + 1 ] :\n            return False\n    \n    return True\n"}
{"task_id": "Open/111", "completion": "    remainder = []\n    for i in range(len(a)) :\n        remainder.append(a[i]/5)\n    \n    for i in range(len(a)) :\n        if remainder[i]!= a[i] :\n            return False\n    \n    return True\n"}
{"task_id": "Open/112", "completion": "    n = n+1\n    for i in range(3,n+1):\n        if i%2 == 0:\n            n = n*10 + 4\n        else:\n            n = n*10 + 7\n    return n\n"}
{"task_id": "Open/113", "completion": "    print(\"Step 1: Initialize array with 0s.\")\n    arr = [0] * (n+1)\n    print(\"Step 2: Set first two elements to 3 and 5.\")\n    for i in range(3, n+1):\n        arr[i] = 3 * 10 + 5\n    print(\"Step 3: Iterate through array.\")\n    for i in range(n, 0, -1):\n        print(\"Step 4: Return element at index\", i)\n        print(\"Step 4: Return element at index\", i, \":\", arr[i])\n        print(\"Step 4: Return element at index\", i, \":\", arr[i])\n        print(\"Step 4: Return element at index\", i, \":\", arr[i])\n        print(\"Step 4: Return element at index\", i, \":\", arr[i])\n        print(\"Step 4: Return element at index\", i, \":\", arr[i])\n        print(\"Step 4: Return element at index\", i, \":\", arr[i])\n        print(\"Step 4: Return element at index\", i, \":\", arr[i])\n        "}
{"task_id": "Open/114", "completion": "    # Write your code here.\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n * 10 + 1\n    else:\n        return n * 10 - 2\n"}
{"task_id": "Open/115", "completion": "    for i in range(n):\n        if a[i] % 11 == 0:\n            return True\n    return False\n"}
{"task_id": "Open/116", "completion": "    if l < 0 or b < 0 or h < 0:\n        return -1\n    else:\n        return l * b * h\n"}
{"task_id": "Open/117", "completion": "Write a function that takes a string as input and returns a new string where the first and last letter of each word in the input string are capitalized.\n        The function should ignore any non-alphabetic characters.\n        \"\"\"\n    \"\"\"\n    def FirstAndLast ( string ) :\n        \"\"\"Write a function that takes a string as input and returns a new string where the first and last letter of each word in the input string are capitalized.\n        The function should ignore any non-alphabetic characters.\n        \"\"\"\n    \"\"\"\n    def FirstAndLast ( string ) :\n        \"\"\"Write a function that takes a string as input and returns a new string where the first and last letter of each word in the input string are capitalized.\n        The function should ignore any non-alphabetic characters.\n        \"\"\"\n    \"\"\"\n    def FirstAndLast ( string ) :\n        \"\"\"Write a function that takes a string as input and returns a new string where the first and last letter of each word in the input string are capitalized.\n        The function should ignore any non-alphabetic characters.\n        \"\"\"\n    \"\"\"\n    def FirstAnd"}
{"task_id": "Open/118", "completion": "    \n    # Step 1\n    # Calculate the square root of (8 * p + 1).\n    # Step 2\n    # Divide the square root by 2.\n    # Step 3\n    # Subtract 1 from the result.\n    # Step 4\n    # Return the result.\n    \n    # Step 1\n    # Calculate the square root of (8 * p + 1).\n    # Step 2\n    # Divide the square root by 2.\n    # Step 3\n    # Subtract 1 from the result.\n    # Step 4\n    # Return the result.\n    \n    # Step 2\n    # Calculate the square root of (8 * p + 1).\n    # Step 3\n    # Divide the square root by 2.\n    # Step 4\n    # Subtract 1 from the result.\n    # Step 5\n    # Return the result.\n    \n    # Step 3\n    # Calculate the square root of (8 * p + 1).\n    # Step 4\n    # Divide the square root by 2.\n    # Step 5\n    # Subtract 1 from the result.\n    # Step 6"}
{"task_id": "Open/119", "completion": "    # TODO: Write your code here\n    set_ = set()\n    for i in arr:\n        if i in set_:\n            return False\n        else:\n            set_.add(i)\n    return True\n"}
{"task_id": "Open/120", "completion": "    count = 0\n    for i in range(len(string)):\n        if len(string) <= 2:\n            return count\n        if string[i] == string[i+1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/121", "completion": "    \n    if lower == higher:\n        return lower\n    \n    if lower in dictionary:\n        dictionary[lower] += 1\n    else:\n        dictionary[lower] = 1\n    \n    if higher in dictionary:\n        dictionary[higher] += 1\n    else:\n        dictionary[higher] = 1\n    \n    if dictionary[lower] > dictionary[higher]:\n        return lower\n    else:\n        return higher\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/122", "completion": "Write a function that takes a string as input and returns the maximum number that can be extracted from the string.\n        The function iterates through each character in the string and checks if it is a digit.\n        If it is, the function builds a number by multiplying the previous number by 10 and adding the current digit.\n        If the character is not a digit, the function compares the current number with the previous maximum number and updates the maximum if necessary.\n        Finally, the function returns the maximum number extracted from the string.\n        \"\"\"\n    \"\"\"\n    def extractMaximum ( ss ) :\n        \"\"\"Write a function that takes a string as input and returns the maximum number that can be extracted from the string.\n        The function iterates through each character in the string and checks if it is a digit.\n        If it is, the function builds a number by multiplying the previous number by 10 and adding the current digit.\n        If the character is not a digit, the function compares the current number with the previous maximum number and updates the maximum if necessary.\n        Finally, the function returns the maximum number extracted from the string.\n        \"\"\"\n    \"\"\"\n    def"}
{"task_id": "Open/123", "completion": "    \n    # Step 1. Create a list of integers from the string.\n    # Step 2. Iterate through the list and check if the current element is equal to the next element + 1.\n    # Step 3. Return the length.\n    \n    # Step 1. Create a list of integers from the string.\n    # Step 2. Iterate through the list and check if the current element is equal to the next element + 1.\n    # Step 3. Return the length.\n    \n    # Step 2. Create a list of integers from the string.\n    # Step 3. Iterate through the list and check if the current element is equal to the next element + 1.\n    # Step 4. Return the length.\n    \n    # Step 2. Create a list of integers from the string.\n    # Step 3. Iterate through the list and check if the current element is equal to the next element + 1.\n    # Step 4. Return the length.\n    \n    # Step 2. Create a list of integers from the string.\n    # Step 3. Iterate through the list and check if the current element is equal to the next element + 1.\n    "}
{"task_id": "Open/124", "completion": "    # Step 1\n    N = 0\n    M = 0\n    K = 0\n    for i in range(K) :\n        N = N + N\n        M = M + M\n    # Step 2\n    for i in range(K, N) :\n        N = N - N\n    # Step 3\n    for i in range(K, M) :\n        M = M - M\n    # Return\n    if N > M :\n        return N * M\n    else :\n        return 0\n"}
{"task_id": "Open/125", "completion": "    if len(string) == 0 :\n        return True\n    \n    if string[0]!= string[1] :\n        return False\n    \n    for i in range(1, len(string)):\n        if string[i]!= string[i-1] :\n            return False\n    \n    return True\n"}
{"task_id": "Open/126", "completion": "    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    if n == 2 :\n        return 2\n    if n < 2 :\n        return 0\n    if n % 2 == 0 :\n        return getValue(n//2)\n    else :\n        return getValue(n-1)\n"}
{"task_id": "Open/127", "completion": "    # Step 1\n    A = str(A)\n    B = str(B)\n    \n    # Step 2\n    A = len(A)\n    B = len(B)\n    \n    # Step 3\n    if A == B :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/128", "completion": "    return x!= y\n"}
{"task_id": "Open/129", "completion": "Write a function that takes an integer n and returns the nth Tribonacci word.\n        The Tribonacci word is a sequence of strings where each string is formed by concatenating the previous two strings in the sequence.\n        The first three strings in the sequence are \"1\", \"12\", and \"1213\".\n        The function should iterate from 3 to n and update the values of Sn_1, Sn_2, and Sn_3 accordingly.\n        Finally, it should return Sn_3, which represents the nth Tribonacci word.\n        \n        How to solve:\n        Step 1. Initialize Sn_1, Sn_2, Sn_3 as 1, 12"}
{"task_id": "Open/130", "completion": "    arr = arr.copy()\n    arr[0] = arr[-1] = 0\n    for i in range(1, n):\n        arr[i] = abs(arr[i-1] - arr[i])\n    return arr[-1]\n"}
{"task_id": "Open/131", "completion": "    remainder = n % 4\n    if remainder == 0:\n        return 0\n    elif remainder == 3:\n        return 1\n    else:\n        return 1\n"}
{"task_id": "Open/132", "completion": "    m = 0\n    sum = 0\n    for i in range(1, N + 1):\n        if (i % a == 0):\n            m += 1\n            sum += i\n    return sum\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 1\n    elif (N - 4) % 2 == 0 :\n        return N + 2\n    elif (N - 4) % 2 == 1 :\n        return N + 1\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if len(arr) % 2 == 1:\n        return False\n    \n    if len(arr) == 1:\n        return True\n    \n    if len(arr) == 2:\n        if arr[0] % 2 == 1 and arr[1] % 2 == 1:\n            return True\n        else:\n            return False\n    \n    if len(arr) == 3:\n        if arr[0] % 2 == 1 and arr[1] % 2 == 1 and arr[2] % 2 == 1:\n            return True\n        else:\n            return False\n    \n    if len(arr) == 4:\n        if arr[0] % 2 == 1 and arr[1] % 2 == 1 and arr[2] % 2 == 1 and arr[3] % 2 == 1:\n            return True\n        else:\n            return False\n    \n    if len(arr) == 5:\n        if arr[0] % 2 == 1 and arr[1] % 2 == 1 and arr[2] % 2 == 1 and arr[3] % 2 == 1 and arr[4] % 2 == 1:\n            return"}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return 0\n    if N == 2 :\n        return 1\n    if N == 3 :\n        return 2\n    if N == 4 :\n        return 3\n    if N == 5 :\n        return 4\n    if N == 6 :\n        return 5\n    if N == 7 :\n        return 6\n    if N == 8 :\n        return 7\n    if N == 9 :\n        return 8\n    if N == 10 :\n        return 9\n    if N == 11 :\n        return 10\n    if N == 12 :\n        return 11\n    if N == 13 :\n        return 12\n    if N == 14 :\n        return 13\n    if N == 15 :\n        return 14\n    if N == 16 :\n        return 15\n    if N == 17 :\n        return 16\n    if N == 18 :\n        return 17\n    if N == 19 :\n        return 18\n    if N == 20 :\n        return 19\n    if N == 21 :\n        return 20\n    if N == 22 :\n        return 21\n    if N == 23 :\n        return 22\n    if N"}
{"task_id": "Open/136", "completion": "    minimum = 1\n    for i in range(n):\n        if arr[i] < minimum:\n            minimum = arr[i]\n    return minimum\n"}
{"task_id": "Open/137", "completion": "    s = list(s)\n    s.sort()\n    return ''.join(s)\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n        elif arr[i] < arr[i-1] :\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    \n    #Step 1\n    #Initialize average value as 0.\n    averageValue = 0\n    \n    #Iterate through string.\n    for char in s:\n        #Add ASCII value of character to average value.\n        averageValue += ord(char)\n    \n    #Divide average value by number of characters.\n    averageValue = averageValue / len(s)\n    \n    #Return average value.\n    return averageValue\n"}
{"task_id": "Open/140", "completion": "    \n    # Step 1\n    if A > S :\n        return -1\n    \n    # Step 2\n    for i in range(N) :\n        if B > S :\n            return -1\n        \n        # Step 3\n        if A <= S :\n            return N\n        \n        # Step 2\n        if A > S :\n            A -= B\n        \n    # Step 1\n    return 0\n"}
{"task_id": "Open/141", "completion": "    return ( x * y ) // math.gcd( x, y )\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n > 0 :\n        if n & 1 :\n            count += 1\n        n >>= 1\n    return count\n"}
{"task_id": "Open/143", "completion": "    maxSum = 0\n    index = -1\n    for i in range(n):\n        maxSum = max(maxSum, arr[i] ^ arr[i+1])\n        index = max(index, i)\n    return index\n"}
{"task_id": "Open/144", "completion": "    if n == 1 :\n        return 1\n    \n    if arr[0] < arr[1] :\n        return 1 + lds(arr[1:], n-1)\n    else :\n        return 1 + lds(arr[:n-1], n-1)\n"}
{"task_id": "Open/145", "completion": "    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    if min_element == k:\n        return min_element\n    else:\n        return -1\n"}
{"task_id": "Open/146", "completion": "    def numLen_recursive ( K ) :\n        if K == 1 :\n            return 1\n        elif K == 2 :\n            return 2\n        elif K < 2 :\n            return -1\n        else :\n            return numLen_recursive ( K // 2 ) + numLen_recursive ( K % 2 )\n    \n    return numLen_recursive ( K )\n"}
{"task_id": "Open/147", "completion": "    minimum = sys.maxsize\n    for i in range(n) :\n        if arr[i] == n :\n            minimum = min(minimum, 1)\n        else :\n            minimum = min(minimum, 2)\n    return minimum\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(n) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/149", "completion": "    import math\n    return math.sqrt(s)\n"}
{"task_id": "Open/150", "completion": "    p = p / 100\n    q = q / 100\n    return p ** 2 + q ** 2\n"}
{"task_id": "Open/151", "completion": "    XOR = 0\n    for i in range(len1) :\n        XOR = XOR ^ ord(str1[i])\n    return XOR\n"}
{"task_id": "Open/152", "completion": "    binary = bin(n)\n    binary = binary[2:]\n    if binary[0] == '1':\n        return False\n    else:\n        return True\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_list = []\n    for i in s:\n        if i in vowels:\n            vowels_list.append(i)\n    vowels_list.sort()\n    if vowels_list == sorted(vowels_list):\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high + 1) :\n        if i % 10 > k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    \n    # Step 1. Get the nearest power of 2.\n    n = n & (n - 1)\n    \n    # Step 2. Get the absolute difference between the input number and the nearest power of 2.\n    absDiff = abs( n - n & (n - 1) )\n    \n    # Step 3. Return the minimum absolute difference.\n    return absDiff\n"}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        return (4 * r * (r + 1)) / 3\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    low = 0\n    high = size - 1\n    mid = (low + high) // 2\n    while low <= high:\n        if ar[mid] == expected:\n            return ar[mid]\n        elif ar[mid] < expected:\n            low = mid + 1\n            mid = (low + high) // 2\n        else:\n            high = mid - 1\n            mid = (low + high) // 2\n    return ar[mid]\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == \"0\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    count = {}\n    for i in range(n):\n        count[arr[i]] = count.get(arr[i], 0) + 1\n    \n    for i in range(n):\n        if count[arr[i]] % 2!= 0:\n            return arr[i]\n    \n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if ( dx == 0 ) :\n        if ( dy == 0 ) :\n            return True\n        else :\n            return False\n    else :\n        if ( dx == 0 ) :\n            return False\n        else :\n            return True\n"}
{"task_id": "Open/163", "completion": "    if n % 4 == 0:\n        return 0\n    else:\n        return 1 + cntWays(n // 4)\n"}
{"task_id": "Open/164", "completion": "    count = 0\n    d = {}\n    for i in range(n):\n        d[arr[i]] = d.get(arr[i], 0) + 1\n    for i in range(n):\n        count += d[arr[i]] * (d[arr[i]] - 1)\n    return count\n"}
{"task_id": "Open/165", "completion": "Write a function that takes an integer height and returns the number of nodes in an AVL tree of that height.\n        \n        How to solve:\n        Step 1. Initialize account balance as 0.\n        Step 2. Iterate through operations.\n            -add value to account balance.\n            -If account balance < 0, return True.\n        Step 3. Return False.\n        \"\"\"\n        \n        def addBalance ( height ) :\n            \"\"\"Write a function that takes an integer height and returns the account balance of the tree rooted at height.\n            \n            How to solve:\n            Step 1. Initialize account balance as 0.\n            Step 2. Iterate through operations.\n                -add value to account balance.\n                -If account balance < 0, return True.\n            Step 3. Return False.\n            \"\"\"\n            \n            def addBalance ( height ) :\n                \"\"\"Write a function that takes an integer height and returns the account balance of the tree rooted at height.\n                \n                How to solve:\n                Step 1. Initialize account balance as 0.\n                Step 2. Iter"}
{"task_id": "Open/166", "completion": "    steps = 0\n    if source == dest :\n        return steps\n    if source > dest :\n        steps = steps + abs(source - dest)\n    if source < dest :\n        steps = steps + abs(dest - source)\n    return steps\n"}
{"task_id": "Open/167", "completion": "    if n == 1:\n        return \"1\"\n    else:\n        count = 1\n        s = \"1\"\n        for i in range(n-1):\n            if s[i] == s[i+1]:\n                count += 1\n            else:\n                s = s[:i] + str(count) + s[i+1:]\n                count = 1\n        s = s[:n-1] + str(count) + s[n:]\n        return s\n"}
{"task_id": "Open/168", "completion": "    \n    # Step 1\n    product = 1\n    start = 0\n    maxLen = 0\n    \n    # Step 2\n    for i in range(len(arr)):\n        product *= arr[i]\n        \n        # Step 3\n        if product < 0:\n            start = i + 1\n            product = 1\n        \n        # Step 2\n        if product >= 0:\n            maxLen = max(maxLen, i - start + 1)\n    \n    # Return maxLen\n    return maxLen\n"}
{"task_id": "Open/169", "completion": "    normal = 0\n    m = m\n    n = n\n    for i in range(0, m) :\n        normal += m * n\n    for i in range(0, n) :\n        normal += n * m\n    normal = math.sqrt(normal)\n    return normal\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n):\n        if arr[i] < k:\n            count += 1\n            if i > 0:\n                count += (arr[i] - arr[i - 1])\n    return count\n"}
{"task_id": "Open/171", "completion": "    # Step 1\n    arr = sorted(arr)\n    # Step 2\n    i = 0\n    j = L - 1\n    k = n - 1\n    count = 0\n    while i < j:\n        if arr[k] - arr[i] <= L:\n            count += 1\n            i += 1\n        else:\n            j -= 1\n            k -= 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r+1) :\n        if (i % 2 == 0 and i % 3 == 0) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    # Step 1\n    n = bin(n)[2:]\n    # Step 2\n    m = bin(m)[2:]\n    # Step 3\n    n = n[::-1]\n    # Step 4\n    m = m[::-1]\n    # Step 5\n    n = int(n, 2)\n    m = int(m, 2)\n    # Step 6\n    n = n ^ m\n    # Step 7\n    n = bin(n)[2:]\n    # Step 8\n    return n\n"}
{"task_id": "Open/174", "completion": "    # Step 1\n    total = 0\n    for i in range(L, R+1):\n        if i % 9 == 0:\n            total += 1\n    # Step 2\n    total = total // 9\n    # Step 3\n    rem = total % 9\n    # Step 4\n    for i in range(R, R+1):\n        if i % 9 == rem:\n            total += 1\n    # Step 5\n    return total\n"}
{"task_id": "Open/175", "completion": "    n = str(n)\n    k = str(k)\n    \n    # Step 1\n    n = n.replace(\"0\", \"\")\n    k = k.replace(\"0\", \"\")\n    \n    # Step 2\n    n = int(n)\n    k = int(k)\n    \n    # Step 3\n    n = n * 10 ** k\n    \n    # Step 4\n    n = int(n)\n    \n    # Step 5\n    n = n * 10 ** k\n    \n    # Step 6\n    n = int(n)\n    \n    # Step 7\n    n = n * 10 ** k\n    \n    # Step 8\n    n = int(n)\n    \n    # Step 9\n    n = n * 10 ** k\n    \n    # Step 10\n    n = int(n)\n    \n    # Step 11\n    n = n * 10 ** k\n    \n    # Step 12\n    n = int(n)\n    \n    # Step 13\n    n = n * 10 ** k\n    \n    # Step 14\n    n = int(n)\n"}
{"task_id": "Open/176", "completion": "    for i in range(0, len(A)):\n        if A[i] > A[i-1] and A[i] < A[i+1]:\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    \n    min_diff = b[0] - a[0]\n    \n    for i in range(1, len(a)):\n        min_diff = min(min_diff, b[i] - a[i])\n    \n    return min_diff\n"}
