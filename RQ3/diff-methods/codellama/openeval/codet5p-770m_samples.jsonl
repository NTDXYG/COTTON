{"task_id": "Open/0", "completion": "    count = 0\n    sum = 0\n    for i in arr :\n        sum += i\n    for i in arr :\n        if i + K > sum :\n            count += 1\n    return count\n\n\narr = [1,2,3,4,5]\nN = len(arr)\nK = 5"}
{"task_id": "Open/1", "completion": "    max_freq = 0\n    for i in arr :\n        if i > max_freq :\n            max_freq = i\n    return max_freq\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/2", "completion": "    \n    # Step 1. Convert n to binary.\n    n = bin(n)\n    \n    # Step 2. Iterate through the binary representation of n and check if all bits in the range from l to r are set to 1.\n    for i in range(l,r+1) :\n        if n[i] == \"1\" :\n            return \"Yes\"\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n) :\n        if A[i] % K == 0 :\n            count += 1\n        if A[i] % K!= 0 :\n            for j in range(n) :\n                if A[i] + A[j] == K :\n                    count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/4", "completion": "    if n == 0 :\n        return False\n    a.sort()\n    first = 0\n    second = 0\n    for i in a :\n        if first == 0 :\n            first = i\n        elif second == 0 :\n            second = i\n        elif first + second == n :\n            return True\n        elif first + second > n :\n            first = i\n        elif first + second < n :\n            second = i\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/5", "completion": "    \n    # Step 1. Convert the number to binary.\n    x = bin(x)[2:]\n    \n    # Step 2. Count the number of 1s in the binary representation.\n    count = 0\n    for i in x :\n        if i == '1' :\n            count += 1\n    \n    # Step 3. If the count is even, return 0.\n    if count % 2 == 0 :\n        return 0\n    else :\n        return 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/6", "completion": "\n    missing = []\n    for i in vec :\n        if i > 0 :\n            missing.append(i)\n        else :\n            missing.append(i+1)\n    return missing\n"}
{"task_id": "Open/7", "completion": "\n    hashmap = {}\n    for i in arr :\n        if i not in hashmap :\n            hashmap[i] = 1\n        else :\n            hashmap[i] += 1\n\n    for i in arr :\n        if i not in hashmap :\n            hashmap[i] = 1\n        else :\n            hashmap[i] -= 1\n\n    for i in hashmap :\n        if hashmap[i] == 0 :\n            del hashmap[i]\n\n    return len(hashmap)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/8", "completion": "    prime_factors = set()\n    for i in a :\n        for j in range(2, int(math.sqrt(i)) + 1) :\n            if i % j == 0 :\n                prime_factors.add(j)\n    return len(prime_factors)\n\n"}
{"task_id": "Open/9", "completion": "    \n    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 2. Find the kth largest element.\n    kthLargest = arr[k-1]\n    \n    # Step 3. Calculate the sum of the difference between the kth largest element and the first element of the array.\n    sum = 0\n    for i in range(k-1,n) :\n        sum += arr[i] - kthLargest\n        \n    # Step 4. Calculate the sum of the difference between the kth largest element and each element from index 1 to k.\n    sum = 0\n    for i in range(k-1,n) :\n        sum += arr[i] - arr[i-1]\n        \n    # Step 5. Return the minimum value among these differences.\n    return min(sum,kthLargest)\n    \n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    for i in range( len(A) ) :\n        if A[i] == B[i] :\n            total_time += 1\n        else :\n            B.append( A[i] )\n            A.pop()\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in array :\n        if i % 2 == 0 :\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/12", "completion": "    \n    count = 0\n    set_count = 0\n    for i in range( len( s ) ) :\n        if len( set( s[i] ) ) <= k :\n            count += 1\n        else :\n            set_count = 0\n            set_count += 1\n            while set_count > k :\n                s = s[:i] + s[i+1:]\n                set_count -= 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    counter = 2\n    while counter <= n :\n        if n % counter == 0 :\n            return False\n        elif n == 1 :\n            return True\n        counter += 1\n    return False\n"}
{"task_id": "Open/14", "completion": "    remainder = n % 4\n    xor_value = 0\n    if remainder == 0 :\n        return n\n    elif remainder == 1 :\n        return 1\n    elif remainder == 2 :\n        return n + 1\n    elif remainder == 3 :\n        return 0\n    else :\n        return \"\"\n\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    result = pow(a,(n-1)/2,n)\n    if result == 1 or result == n-1 :\n        return 1\n    elif result == -1 :\n        return -1\n    else :\n        for i in range(t) :\n            result = pow(a,(n-1)/2,n)\n            if result == 1 or result == n-1 :\n                return 1\n            elif result == -1 :\n                return -1\n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/16", "completion": "    if len( s1 )!= len( s2 ) :\n        return False\n    for i in range( len( s1 ) ) :\n        if s1[i]!= s2[i] :\n            return False\n    return True\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range( length ) :\n        if s[i] == '0' :\n            count += 1\n        else :\n            count = 1\n    return min( count, length - count )\n"}
{"task_id": "Open/19", "completion": "    \n    count = 0\n    for i in range( 1, n + 1 ) :\n        if math.pow( i, n ) == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    else :\n        return x + product(x, y - 1)\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        elif i % 4 == 1 :\n            count1 += 1\n        elif i % 4 == 2 :\n            count2 += 1\n        elif i % 4 == 3 :\n            count3 += 1\n\n    if count0 == 4 and count1 == 4 and count2 == 4 and count3 == 4 :\n        return 1\n    else :\n        return 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/22", "completion": "    max_len = 1\n    for i in range( n ) :\n        if arr[i] > arr[i-1] :\n            max_len += 1\n        else :\n            max_len = 1\n    return max_len\n\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        return 0\n    if sum == 0 :\n        count += 1\n    return subsetSum ( arr, n, i + 1, sum, count ) + subsetSum ( arr, n, i + 1, sum - arr[i], count )\n\n\n"}
{"task_id": "Open/24", "completion": "    counter = 0\n    for i in range ( 1, n+1 ) :\n        if ( i % 2 == 0 ) :\n            counter += i\n        else :\n            counter -= i\n    if ( counter == n ) :\n        return -1\n    else :\n        return counter\n\n"}
{"task_id": "Open/25", "completion": "    sum_of_squares = 0\n    sum_of_numbers = 0\n    for i in range ( n ) :\n        sum_of_numbers += i\n        sum_of_squares += i * i\n    return sum_of_squares, sum_of_numbers, sum_of_squares + sum_of_numbers + 1\n"}
{"task_id": "Open/26", "completion": "    # Step 1. Create a list of all the factors of n.\n    factors = []\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            factors.append(i)\n    # Step 2. Iterate through the list and add the factors to a sum.\n    maxSum = 0\n    for i in factors :\n        maxSum = max(maxSum, i)\n    return maxSum\n"}
{"task_id": "Open/27", "completion": "    if x > y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return ( (b - a) / a ) * 100\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    count = 0\n    for i in range ( 1, n + 1 ) :\n        sum += i * i\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/32", "completion": "    chicks = 0\n    while n > 0 :\n        chicks += 3\n        n = n - 1\n    return chicks\n"}
{"task_id": "Open/33", "completion": "    if n == 1 :\n        return 1\n    else :\n        return n * findTerm ( n - 1 )\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    last_product = 1\n    for i in range( len( a ) ) :\n        if a[i] < k :\n            count += 1\n            last_product *= a[i]\n        else :\n            last_product = 1\n    return count\n\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1) :\n        if (i%d == 0) :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    set = set()\n    for i in arr :\n        if i > 0 :\n            set.add(i)\n    for i in range(n) :\n        if i not in set :\n            return i + 1\n    return n + 1\n\n"}
{"task_id": "Open/37", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    account_balance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range( n ) :\n        # Add value to account balance.\n        account_balance += i\n        \n        # If account balance < 0, return True.\n        if account_balance < 0 :\n            return True\n        \n    # Step 3. Return False.\n    return False\n"}
{"task_id": "Open/38", "completion": "    areaSum = 0\n    size = 1\n    while size <= l and size <= b :\n        areaSum += size**2\n        size += 1\n    return areaSum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1,N+1))\n"}
{"task_id": "Open/40", "completion": "    maxCount = 0\n    for i in range( n ) :\n        if arr[i] == 0 :\n            maxCount += 1\n        else :\n            maxCount = 0\n    return maxCount\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/41", "completion": "    \n    max_length = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            max_length = max(max_length, i+1)\n        else :\n            max_length = i+1\n    return max_length\n\n"}
{"task_id": "Open/42", "completion": "    max_value = -float('inf')\n    for i in range(n) :\n        if i < k :\n            max_value = max( max_value, a[i] )\n        elif i > k :\n            max_value = max( max_value, a[i-k] )\n    return max_value\n\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n) :\n        if (array[i] * k < 0) :\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/44", "completion": "    arr.sort()\n    sum = 0\n    for i in range( n ) :\n        sum += abs( arr[i] - i )\n    return sum\n"}
{"task_id": "Open/45", "completion": "    \n    min_element = 0\n    for i in arr :\n        if i < min_element :\n            min_element = i\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    \n    max_diff = 0\n    for i in range( len( array ) ) :\n        max_diff = max( max_diff, array[i] - i )\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    if ( a == 0 ) or ( b == 0 ) or ( c == 0 ) :\n        return False\n    else :\n        return ( ( x1 - x2 ) * ( b - a ) + ( y1 - y2 ) * ( c - a ) ) == 0\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range ( 0, a ) :\n        if a == i + (a XOR i) :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    \n    max = 0\n    for i in range( L, R + 1 ) :\n        if L & R > max :\n            max = i\n    return max\n"}
{"task_id": "Open/50", "completion": "    smallest = 0\n    for i in range(n) :\n        if a[i] % smallest == 0 :\n            smallest = a[i]\n    return smallest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range ( n ) :\n        sum = sum + 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    \n    result = 0\n    for i in range( n ) :\n        for j in range( n ) :\n            if arr[i][j] % 2 == 1 :\n                result ^= arr[i][j]\n    return result\n\n"}
{"task_id": "Open/53", "completion": "    \n    count = 0\n    for i in range( N ) :\n        if ( i & 1 ) == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    \n    sum = 0\n    for i in a :\n        if i < 0 :\n            return False\n        elif i > k :\n            return False\n        elif sum + i > k :\n            return False\n        else :\n            sum += i\n    return True\n\n"}
{"task_id": "Open/55", "completion": "    \n    # Step 1. Convert the integer to binary.\n    b = bin(n)\n    # Step 2. Check if the first and last bits are 1.\n    return (b[0] == '1' and b[-1] == '1')\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    for i in range( len( s ) ) :\n        if s[ i ] == s[ i - 1 ] :\n            max_partitions += 1\n        else :\n            max_partitions = 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    if (N % K) == 0 :\n        return N\n    else :\n        return N - (N % K)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/58", "completion": "    \n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    \n    for i in range(2,N+1) :\n        result = result + var1 * var2\n        var1 = var1 / 100\n        var2 = var2 / 100\n        \n    return result\n\n"}
{"task_id": "Open/59", "completion": "    \n    # Step 1. Initialize the array.\n    arr = [0] * len(arr)\n    \n    # Step 2. Iterate through the reversals.\n    for i in range(reversals) :\n        arr[i] = arr[i] + arr[i+1]\n    \n    # Step 3. Return the value at the given index.\n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "    \n    # Step 1. Iterate through all possible values of n.\n    for i in range ( 1, n + 1 ) :\n        # Step 2. For each value of n, check if n is the sum of two squares.\n        if i * i == n :\n            return True\n    # Step 3. Return True if n is the sum of two squares, and False otherwise.\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(b)) :\n        if b[i] == a[0] :\n            count += 1\n    return count\n"}
{"task_id": "Open/62", "completion": "    if len( str ) < 2 :\n        return str\n    else :\n        return str[ :-1 ] + str[ 1 : ] + str[ :-1 ] + str[ 1 : ] + str[ :-1 ] + str[ 1 : ] + str[ :-1 ] + str[ 1 : ] + str[ :-1 ] + str[ 1 : ] + str[ :-1 ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str[ 1 : ] + str"}
{"task_id": "Open/63", "completion": "    \n    # Step 1. Initialize minimum value as 1.\n    min_value = 1\n    \n    # Step 2. Iterate through the array.\n    for i in range( n ) :\n        # If the current element is less than the minimum value, update the minimum value.\n        if arr[i] < min_value :\n            min_value = arr[i]\n            \n    # Step 3. Return the minimum value.\n    return min_value * n\n"}
{"task_id": "Open/64", "completion": "    \n    maxSubStr = \"\"\n    maxSubStrLen = 0\n    \n    for i in s :\n        if i == \"1\" :\n            if len(maxSubStr) > maxSubStrLen :\n                maxSubStr = i\n                maxSubStrLen = len(i)\n        else :\n            maxSubStr += i\n            \n    return maxSubStr\n\n"}
{"task_id": "Open/65", "completion": "    \n    # Step 1. Sort the array in ascending order.\n    a.sort()\n    \n    # Step 2. Iterate through the array.\n    for i in range(n) :\n        if a[i] == a[i-1] :\n            a[i] = a[i-1] + 1\n        elif a[i] > k :\n            a.pop(i)\n    \n    # Step 3. Return the length of the array.\n    return len(a)\n"}
{"task_id": "Open/66", "completion": "    if len( arr ) == 0 :\n        return 0\n    if k == 0 :\n        return arr[0]\n    if k == 1 :\n        return ( arr[0] + arr[1] ) / 2\n    if k == 2 :\n        return ( arr[0] + arr[1] ) / 2 + arr[2]\n    if k == 3 :\n        return ( arr[0] + arr[1] + arr[2] ) / 3\n    if k == 4 :\n        return ( arr[0] + arr[1] + arr[2] + arr[3] ) / 4\n    if k == 5 :\n        return ( arr[0] + arr[1] + arr[2] + arr[3] + arr[4] ) / 5\n    if k == 6 :\n        return ( arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] ) / 6\n    if k == 7 :\n        return ( arr[0] + arr[1] + arr[2] + arr[3] + arr[4]"}
{"task_id": "Open/67", "completion": "    step_count = 0\n    neg_count = 0\n    pos_count = 0\n    zero_count = 0\n    for i in range(n) :\n        if a[i] < 0 :\n            neg_count += abs(a[i])\n            step_count += neg_count\n        elif a[i] > 0 :\n            pos_count += abs(a[i])\n            step_count += pos_count\n        else :\n            zero_count += 1\n    if neg_count % 2 == 0 :\n        step_count += zero_count\n    if neg_count % 2!= 0 :\n        step_count += 2\n    return step_count\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    else :\n        v = []\n        while n > 0 :\n            v.append(n % 5)\n            n = n // 5\n        result = 0\n        for i in reversed(v) :\n            result = result * 10 + i\n        return result\n"}
{"task_id": "Open/69", "completion": "    prev = 0\n    for i in bin(n)[2:] :\n        if i == '1' and prev == 0 :\n            prev = 1\n        elif i == '0' and prev == 1 :\n            return False\n        else :\n            prev = 0\n    return True\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    elif x < n :\n        return n\n    else :\n        return x\n"}
{"task_id": "Open/71", "completion": "    \n    sum = 0\n    for i in range ( n ) :\n        sum += 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum = sum + i\n    return sum\n"}
{"task_id": "Open/73", "completion": "    maxm = -1\n    count = 0\n    for i in arr :\n        if count == i :\n            maxm = i\n        else :\n            count = i\n    return maxm\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if a[i] > a[j] :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/75", "completion": "    return int( bin( n )[2:], 2 )\n"}
{"task_id": "Open/76", "completion": "    \n    count = 0\n    for i in range(n) :\n        if A[i-1] == 1 :\n            A[i] = 0\n            count += 1\n        elif A[i+1] == 1 :\n            A[i] = 1\n            count += 1\n    return count\n"}
{"task_id": "Open/77", "completion": "    degree = 0\n    accountBalance = 0\n    \n    while radian > 0 :\n        degree = degree + radian\n        radian = radian - 90\n        \n        if accountBalance < 0 :\n            return False\n        \n        accountBalance = accountBalance - radian\n        \n    return degree\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/78", "completion": "    return math.floor( n / 2 )\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range ( n ) :\n        sum = sum + a + (n-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    max_power = 0\n    for i in range( 2 ) :\n        if n % 2 == 0 :\n            max_power = i\n            break\n    return max_power\n"}
{"task_id": "Open/81", "completion": "    # Step 1. Initialize a 2D array of 8x8.\n    board = [[0 for x in range(8)] for y in range(8)]\n    # Step 2. Initialize a count variable to 0.\n    count = 0\n    # Step 3. Iterate through the 2D array.\n    for i in range(row) :\n        for j in range(column) :\n            if board[i][j] == 0 :\n                continue\n            elif board[i][j] == row :\n                count += 1\n            elif board[i][j] == column :\n                count += 1\n    # Step 4. Return the count variable.\n    return count\n"}
{"task_id": "Open/82", "completion": "    \n    # Step 1. Initialize a variable to hold the first number in the sequence.\n    firstNumber = 0\n    \n    # Step 2. Iterate through the sequence.\n    for i in range ( n ) :\n        # Add the index to the variable.\n        firstNumber = firstNumber + i\n        \n        # Add the variable to the sequence.\n        sequence.append( firstNumber )\n        \n    # Step 3. Return the sequence.\n    return sequence\n"}
{"task_id": "Open/83", "completion": "\n    # Step 1. Find the last occurrence of each character in the string and store it in a list.\n    last = [0] * 26\n    for i in range( len( s ) ) :\n        last[ ord( s[ i ] ) - ord( s[ i - 1 ] ) ] += 1\n    \n    # Step 2. Sort the string and compare each character with its corresponding character in the sorted string.\n    for i in range( len( s ) ) :\n        if last[ ord( s[ i ] ) - ord( s[ i - 1 ] ) ] > 0 :\n            s[ i ], s[ i - 1 ] = s[ i - 1 ], s[ i ]\n    \n    # Step 3. If a character is not in the correct position, swap it with the character at its last occurrence.\n    for i in range( len( s ) ) :\n        if i!= last[ ord( s[ i ] ) - ord( s[ i - 1 ] ) ] :\n            s[ i ], s[ last[ ord( s[ i ] ) - ord( s[ i - 1 ] ) ] ] ="}
{"task_id": "Open/84", "completion": "    arr = [0] * n\n    for i in range(l,r+1) :\n        if i % 2 == 0 :\n            arr[i] = arr[i] + 1\n        else :\n            arr[i] = arr[i] + 2\n    return sum(arr)\n"}
{"task_id": "Open/85", "completion": "    if x > y :\n        x, y = y, x\n    if x % y == 0 :\n        return x\n    for i in range( min(x, y), 1, -1 ) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    current_number = A\n    previous_number = B\n    count = 1\n    while count < N :\n        current_number = previous_number + current_number\n        previous_number = current_number\n        count += 1\n    return current_number\n\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in str :\n        if i == substr :\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range( len( A ) ) :\n        for j in range( len( B ) ) :\n            for k in range( len( C ) ) :\n                if A[i] * C[j] > B[k] * B[k] :\n                    count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    \n    max_len = 0\n    for i in range( n ) :\n        for j in range( i+1, n ) :\n            if arr[i] + arr[j] == arr[i] + arr[j] :\n                max_len = max( max_len, j - i + 1 )\n    return max_len\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/92", "completion": "    max_len = 0\n    for i in range( len( str ) ) :\n        if str[i].isalnum() :\n            if i % 2 == 0 :\n                max_len = max( max_len, i )\n    return max_len\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1 :\n        if n % 2 == 0 :\n            n = n / 2\n            count += 1\n        else :\n            n = n - 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    s = ''\n    for i in range(n) :\n        s += chr(ord(s[i]) + k)\n    return s\n"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    for i in range(n) :\n        fuel = fuel - i\n        totalDistance = totalDistance + i\n    return totalDistance\n\n"}
{"task_id": "Open/96", "completion": "    sum = 0\n    for i in arr :\n        sum += i\n    if sum == n-1 :\n        return 1\n    elif sum == n-2 :\n        return 1\n    else :\n        return 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/97", "completion": "    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "    if a + b + c == k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/100", "completion": "    if x < y :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/101", "completion": "    \n    count = 0\n    for i in range( len( s ) ) :\n        if s[i] == s[i-1] :\n            count += 1\n        else :\n            count = 0\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    arr.sort()\n    min_diff = float('inf')\n    for i in range(n) :\n        min_diff = min(min_diff, abs(arr[i] - arr[i+1]))\n    return min_diff\n\n"}
{"task_id": "Open/104", "completion": "    \n    count = 0\n    for i in range ( left, right + 1 ) :\n        if i & 1 :\n            count += 1\n    return count\n"}
{"task_id": "Open/105", "completion": "    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    elif n == 3 :\n        return 4\n    elif n == 4 :\n        return 4\n    elif n == 5 :\n        return 8\n    elif n == 6 :\n        return 8\n    elif n == 7 :\n        return 8\n    elif n == 8 :\n        return 8\n    elif n == 9 :\n        return 16\n    elif n == 10 :\n        return 16\n    elif n == 11 :\n        return 16\n    elif n == 12 :\n        return 16\n    elif n == 13 :\n        return 16\n    elif n == 14 :\n        return 16\n    elif n == 15 :\n        return 16\n    else :\n        return setBitNumber ( n >> 1 )\n"}
{"task_id": "Open/106", "completion": "    \n    sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            sum += i\n    if sum == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "\n    # Step 1. Calculate the number of centuries and leap centuries in the year.\n    centuries = (N // 100)\n    leap_centuries = (N // 400)\n    \n    # Step 2. Calculate the number of leap years in the year.\n    leap_years = (N % 100)\n    leap_years = leap_years + (N % 400)\n    \n    # Step 3. Calculate the number of non-leap years in the year.\n    non_leap_years = (N % 100) + (N % 400)\n    \n    # Step 4. Calculate the total number of days in the year.\n    days = (centuries + leap_centuries + leap_years + non_leap_years)\n    \n    # Step 5. Calculate the number of odd days in the year.\n    odd_days = (days % 7)\n    \n    return odd_days\n"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return a * (a + 1) / 2\n"}
{"task_id": "Open/109", "completion": "    s = str(n)\n    count = 0\n    for i in s :\n        if i == d :\n            count += 1\n    return count\n"}
{"task_id": "Open/110", "completion": "    if len(str(n))!= len(set(str(n))) :\n        return False\n    else :\n        return True\n\n"}
{"task_id": "Open/111", "completion": "    remainder = []\n    for i in a :\n        if i % 5 == 0 and i % 3 == 0 :\n            remainder.append(i)\n        else :\n            return False\n    return True\n"}
{"task_id": "Open/112", "completion": "\n    # Step 1. Initialize an array of length n+1 with 0s.\n    array = [0] * (n+1)\n\n    # Step 2. Set the first two elements of the array to 4 and 7.\n    array[0] = 4\n    array[1] = 7\n\n    # Step 3. Iterate through the array from index 3 to n+1.\n    for i in range(3, n+1) :\n        if i % 2 == 1 :\n            array[i] = array[i//2] * 10\n        else :\n            array[i] = array[(i//2)-1] * 10\n\n    # Step 4. Return the value at index n of the array.\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(2, n+1) :\n        if i % 2 == 1 :\n            array[i] = array[i//2] * 10\n        else :\n            array[i] = array[(i//2)-1] * 10\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    if n == 2 :\n        return 2\n    if n % 2 == 0 :\n        return printNthElement ( n // 2 ) * 10 + printNthElement ( n // 2 + 1 )\n    else :\n        return printNthElement ( (n // 2) - 1 ) * 10 + printNthElement ( (n // 2) - 1 )\n"}
{"task_id": "Open/115", "completion": "    \n    # Step 1. Iterate through the array.\n    for i in range ( n ) :\n        if a[i] % 11 == 0 :\n            return True\n        elif a[i] % 10 == 0 :\n            return True\n        elif a[i] % 9 == 0 :\n            return True\n        elif a[i] % 8 == 0 :\n            return True\n        elif a[i] % 7 == 0 :\n            return True\n        elif a[i] % 6 == 0 :\n            return True\n        elif a[i] % 5 == 0 :\n            return True\n        elif a[i] % 4 == 0 :\n            return True\n        elif a[i] % 3 == 0 :\n            return True\n        elif a[i] % 2 == 0 :\n            return True\n        elif a[i] % 12 == 0 :\n            return True\n    return False\n"}
{"task_id": "Open/116", "completion": "    \n    if l > 0 and b > 0 and h > 0 :\n        return l * b * h\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    return string.title()\n"}
{"task_id": "Open/118", "completion": "    return int( math.ceil( math.sqrt(8 * p + 1) - 1) / 2 )\n\n"}
{"task_id": "Open/119", "completion": "\n    # Your code here\n    return len(set(arr)) == len(arr)\n"}
{"task_id": "Open/120", "completion": "    \n    count = 0\n    for i in range( len( string ) ) :\n        if i < 2 :\n            count = 0\n        elif i >= 2 and string[i] == string[i-2] :\n            count += 1\n        else :\n            continue\n    return count\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    ss = ss.strip()\n    max = 0\n    for i in ss :\n        if i.isdigit() :\n            max = max * 10 + int(i)\n        else :\n            max = max + int(i)\n    return max\n"}
{"task_id": "Open/123", "completion": "    if len(s) == 0 :\n        return 0\n    if len(s) == 1 :\n        return 1\n    if s[0] == s[1] :\n        return 1 + longestInteger(s[2:], length)\n    else :\n        return max(longestInteger(s[2:], length), longestInteger(s[1:], length))\n"}
{"task_id": "Open/124", "completion": "    if N > M :\n        N = M\n    elif N < M :\n        N = N\n    else :\n        N = M\n    if K > 0 :\n        for i in range( K ) :\n            N = N - 1\n    return N * M\n"}
{"task_id": "Open/125", "completion": "    if len(string) < length :\n        return False\n    for i in range(0,length-1) :\n        if string[i]!= string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    power = 0\n    for i in range ( 1, n + 1 ) :\n        if ( i & ( i - 1 ) ) == 0 :\n            power = i\n    return power\n"}
{"task_id": "Open/127", "completion": "    A = str(A)\n    B = str(B)\n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/128", "completion": "    if ( x!= y ) :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/129", "completion": "    Sn_1 = 1\n    Sn_2 = 12\n    Sn_3 = 1213\n    for i in range ( n ) :\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    steps = [0] * n\n    prev = arr[0]\n    for i in range(1, n) :\n        steps[i] = abs(arr[i] - prev)\n        prev = arr[i]\n    return steps\n"}
{"task_id": "Open/131", "completion": "    remainder = 0\n    for i in range ( n ) :\n        remainder = remainder + 4\n        if remainder % 2 == 0 or remainder % 2 == 1 :\n            return 0\n    return 1\n"}
{"task_id": "Open/132", "completion": "    \n    m = 0\n    sum = 0\n    \n    for i in range (1,N+1) :\n        if (i%a == 0) :\n            m += 1\n        sum += i\n    \n    ans = (m * (m + 1)) / 2\n    \n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N < 2 :\n        return N\n    elif N < 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    else :\n        return N - 1\n\n"}
{"task_id": "Open/134", "completion": "    \n    if len( arr ) % 2 == 1 :\n        return False\n    else :\n        return arr[0] % 2 == 0 and arr[-1] % 2 == 0\n\n"}
{"task_id": "Open/135", "completion": "    count = 0\n    if N == 1 :\n        count = 1\n    elif N > 1 :\n        count = count + 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/136", "completion": "    minimum = 1\n    for i in range(n) :\n        if arr[i] < minimum :\n            minimum = arr[i]\n    return minimum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1. Convert the string to a list of integers.\n    s = list(s)\n    s.sort()\n    \n    # Step 2. Sort the list of integers.\n    s = ''.join(sorted(s))\n    \n    # Step 3. Join the list of integers into a string.\n    return s\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n        elif arr[i] < arr[i-1] :\n            arr[i] = arr[i-1]\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for c in s :\n        sum += ord(c)\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/140", "completion": "    if A > B :\n        return -1\n    else :\n        return bankNotes(A,B,S,N-1) + 1\n"}
{"task_id": "Open/141", "completion": "    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x * y / math.gcd( x, y )\n"}
{"task_id": "Open/142", "completion": "    \n    count = 0\n    while n > 0 :\n        count += n % 2\n        n = n // 2\n    return count\n"}
{"task_id": "Open/143", "completion": "    maxSum = 0\n    index = -1\n    for i in range(n) :\n        sum = 0\n        for j in range(n) :\n            sum += arr[j]\n        if sum > maxSum :\n            maxSum = sum\n            index = i\n    return index\n\n"}
{"task_id": "Open/144", "completion": "    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    dp = [ [ 0 for i in range(n+1) ] for j in range(n+1) ]\n    dp[0][0] = 1\n    for i in range(1,n+1) :\n        for j in range(1,n+1) :\n            if arr[i-1] <= arr[j-1] :\n                dp[i][j] = max( dp[i-1][j], dp[i][j-1] + 1 )\n            else :\n                dp[i][j] = dp[i-1][j]\n    return max( dp[n][n] )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/145", "completion": "    if n == 0 :\n        return -1\n    if k == 0 :\n        return 0\n    if k > 0 :\n        return min(arr) + k\n    else :\n        return min(arr) - k\n\n"}
{"task_id": "Open/146", "completion": "    if K == 0 :\n        return -1\n    else :\n        return len(str(1/K))\n"}
{"task_id": "Open/147", "completion": "\n    # Step 1. Initialize a variable to store the minimum number of operations.\n    min_ops = 0\n\n    # Step 2. Iterate through the array.\n    for i in range(n) :\n        if arr[i] == n :\n            min_ops += 1\n        else :\n            min_ops += 2\n\n    return min_ops\n\n"}
{"task_id": "Open/148", "completion": "    sum = 3\n    for i in range( n ) :\n        if i % 2 == 0 :\n            sum += 3\n        else :\n            sum += 5\n    return sum\n"}
{"task_id": "Open/149", "completion": "    if s == 0 :\n        return 0\n    else :\n        return s ** 0.5\n\n"}
{"task_id": "Open/150", "completion": "    \n    p = p/100\n    q = q/100\n    \n    return (p**2 + q**2) / (p + q)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/151", "completion": "    xor = 0\n    for i in range(len1) :\n        xor = xor ^ ord(str1[i])\n    return xor\n"}
{"task_id": "Open/152", "completion": "    \n    # Step 1. Convert the number to binary.\n    binary = bin(n)\n    \n    # Step 2. Iterate through the binary number.\n    for i in range(len(binary)) :\n        if binary[i] == '1' and binary[i-1] == '1' :\n            return False\n        else :\n            return True\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/153", "completion": "\n    vowels = 'aeiou'\n    vowels_list = list( vowels )\n    vowels_list.sort()\n    for i in range( len( s ) ) :\n        if s[i] not in vowels_list :\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1) :\n        if i % 10 == k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    if n == 2 :\n        return 2\n    if n % 2 == 0 :\n        return minAbsDiff(n // 2) + minAbsDiff(n // 2)\n    else :\n        return minAbsDiff(n // 2) + minAbsDiff(n // 2) + minAbsDiff(n // 2)\n"}
{"task_id": "Open/156", "completion": "    \n    if r < 0 :\n        return -1\n    else :\n        return ( r**2 ) * ( r**2 ) - ( 4 * r )\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    low = 0\n    high = size-1\n    mid = (low+high)//2\n    if ar[mid] == 0 :\n        return mid\n    elif ar[mid] == 1 :\n        return mid+1\n    elif ar[mid] == 2 :\n        return mid+2\n    elif ar[mid] == 3 :\n        return mid+3\n    elif ar[mid] == 4 :\n        return mid+4\n    elif ar[mid] == 5 :\n        return mid+5\n    elif ar[mid] == 6 :\n        return mid+6\n    elif ar[mid] == 7 :\n        return mid+7\n    elif ar[mid] == 8 :\n        return mid+8\n    elif ar[mid] == 9 :\n        return mid+9\n    elif ar[mid] == 10 :\n        return mid+10\n    elif ar[mid] == 11 :\n        return mid+11\n    elif ar[mid] == 12 :\n        return mid+12\n    elif ar[mid] == 13 :\n        return mid+13\n    elif ar[mid] == 14 :\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range( len( str ) ) :\n        if str[i] == \"010\" :\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    count = {}\n    for i in arr :\n        if i in count :\n            count[i] += 1\n        else :\n            count[i] = 1\n    for i in count :\n        if count[i] % 2 == 1 :\n            return i\n    return None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range( n ) :\n        xorArr = xorArr ^ arr[i]\n        ans = ans if xorArr > ans else ans\n    return ans\n"}
{"task_id": "Open/162", "completion": "    \n    if ( sx - dx ) == ( sy - dy ) :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/163", "completion": "    if n % 2 == 0 :\n        return 0\n    count = 0\n    for i in range( n ) :\n        if n % 4 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/164", "completion": "    count = {}\n    for i in arr :\n        if i in count :\n            count[i] += 1\n        else :\n            count[i] = 1\n    return sum(count.values())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/165", "completion": "\n    # Your code here\n    balance = 0\n    count = 0\n    for i in range ( height ) :\n        balance += i\n        if balance < 0 :\n            return True\n    return False\n\n"}
{"task_id": "Open/166", "completion": "    if source == dest :\n        return 0\n    if source > dest :\n        return steps(source, step, dest) - 1\n    if source < dest :\n        return steps(source, step, dest) + 1\n    return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "    s = \"1\"\n    count = 1\n    for i in range ( n ) :\n        s = \"\"\n        count = 0\n        for j in range ( len ( s ) ) :\n            if s[j] == s[j+1] :\n                count += 1\n            else :\n                s += str ( count ) + s[j]\n                count = 1\n        s += str ( count ) + s[j]\n    return s\n\n"}
{"task_id": "Open/168", "completion": "    maxLen = 0\n    product = 1\n    start = 0\n    for i in range( len( arr ) ) :\n        if product < 0 :\n            product = 1\n        elif product >= 0 :\n            maxLen = max( maxLen, i - start + 1 )\n            start = i\n        else :\n            start = i\n    return maxLen\n\n"}
{"task_id": "Open/169", "completion": "    \n    normal = 0\n    m = 0\n    n = 0\n    while m < 0 or n < 0 :\n        m = float(input(\"Enter m: \"))\n        n = float(input(\"Enter n: \"))\n        normal = normal + m * n\n    normal = normal / math.sqrt((m * m) + (n * n))\n    return normal\n"}
{"task_id": "Open/170", "completion": "    \n    count = 0\n    curr_sum = 0\n    prev_sum = 0\n    \n    for i in range(n) :\n        curr_sum += arr[i]\n        if curr_sum < k :\n            count += (n - i)\n        if curr_sum > k :\n            count += (prev_sum - i)\n        prev_sum = curr_sum\n    \n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range( n ) :\n        for j in range( i + 1, n ) :\n            for k in range( j + 1, n ) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l,r+1) :\n        if i % 2 == 0 or i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    \n    # Step 1. Convert n and m to binary.\n    n_bin = bin(n)\n    n_bin = n_bin[2:]\n    n_bin = n_bin[::-1]\n    n_bin = n_bin.zfill(m)\n    \n    # Step 2. Flip the last m bits of n.\n    n_bin = n_bin[::-1]\n    \n    # Step 3. Convert the result back to decimal.\n    n_dec = int(n_bin,2)\n    \n    return n_dec\n"}
{"task_id": "Open/174", "completion": "    if K == 9 :\n        K = 0\n    count = 0\n    for i in range ( L, R + 1 ) :\n        if ( i % 9 == 0 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    \n    n = str(n)\n    k = str(k)\n    \n    product = n * k\n    product = product[0:k]\n    product = int(product)\n    \n    logarithm = math.log10(n)\n    logarithm = logarithm[0:k]\n    logarithm = int(logarithm)\n    \n    return product, logarithm\n"}
{"task_id": "Open/176", "completion": "    for i in range(n) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/177", "completion": "    \n    # Step 1. Sort the input array.\n    a.sort()\n    b.sort()\n    c.sort()\n    \n    # Step 2. Add the difference between the largest and the smallest to the second smallest.\n    return a[0] + b[0] + c[0]\n"}
