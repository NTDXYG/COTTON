{"task_id": "Open/0", "completion": "\n    count = 0\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    for i in range(N):\n        if (sum + K) > arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    max_freq = 0\n    for i in range(n):\n        if arr[i] > max_freq:\n            max_freq = arr[i]\n    return max_freq\n\narr = [1,2,2,3,1,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"}
{"task_id": "Open/2", "completion": "\n    \n    n = int(n)\n    l = int(l)\n    r = int(r)\n    \n    binary = bin(n)[2:]\n    \n    for i in range(l, r + 1) :\n        if binary[i] == '0' :\n            return \"No\"\n    \n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    \n    firstSum = 0\n    secondSum = 0\n    \n    for i in a:\n        if firstSum == secondSum:\n            return True\n        elif firstSum < secondSum:\n            firstSum += i\n        else:\n            secondSum += i\n    \n    return False\n"}
{"task_id": "Open/5", "completion": "\n    \n    binary = bin(x)\n    count = binary.count('1')\n    \n    if count % 2 == 0 :\n        return 0\n    else :\n        return 1\n    "}
{"task_id": "Open/6", "completion": "\n    \n    output = []\n    for i in range(len(vec)) :\n        if vec[i] > 0 :\n            vec[i] = -vec[i]\n    for i in range(len(vec)) :\n        if vec[i] > 0 :\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/7", "completion": "\n    \n    hashmap = {}\n    for i in range(n):\n        if arr[i] not in hashmap:\n            hashmap[arr[i]] = 1\n        else:\n            hashmap[arr[i]] += 1\n    \n    count = 0\n    for i in range(n):\n        if arr[i] not in hashmap:\n            hashmap[arr[i]] = 1\n        else:\n            hashmap[arr[i]] -= 1\n        \n        if hashmap[arr[i]] == 0:\n            del hashmap[arr[i]]\n        \n        count = max(count, len(hashmap))\n    \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/8", "completion": "\n    \n    prime_factors = set()\n    \n    for i in a :\n        for j in range(2, i) :\n            if i % j == 0 :\n                prime_factors.add(j)\n    \n    return len(prime_factors)\n"}
{"task_id": "Open/9", "completion": "\n    \n    arr.sort()\n    kth_largest = arr[n-k]\n    \n    sum_diff = 0\n    for i in range(1,k+1):\n        sum_diff += arr[i] - kth_largest\n    \n    return sum_diff\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 3"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            A.appendleft(A[0])\n            A.popleft()\n            B.append(B[0])\n            B.popleft()\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n\narray = [0,1,2,3,4,5,6,7,8,9]"}
{"task_id": "Open/12", "completion": "\n    count = 0\n    for i in range(len(s)) :\n        count += 1\n        if len(set(s[i:])) <= k :\n            count += 1\n        else :\n            set(s[i:])\n    return count\n"}
{"task_id": "Open/13", "completion": "\n    counter = 2\n    while counter <= n :\n        if n % counter == 0 :\n            return False\n        counter += 1\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    switch = {\n        0 : n,\n        1 : 1,\n        2 : n + 1,\n        3 : 0\n    }\n    return switch.get(n % 4, \"\")\n"}
{"task_id": "Open/15", "completion": "\n    for i in range(t) :\n        a = random.randint(2, n-1)\n        if ( a ** ((n-1)/2) % n )!= 1 and ( a ** ((n-1)/2) % n )!= n-1 :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "\n    \n    for i in range(n) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(length):\n        if s[i] == '0' and s[i+1] == '1':\n            count += 1\n        if s[i] == '1' and s[i+1] == '0':\n            count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n+1) :\n        if math.pow(i, i) <= n :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 1\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            max_len += 1\n        else :\n            max_len = 1\n    return max_len\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/23", "completion": "\n    if (i == n) :\n        return 0\n    if (sum == 0) :\n        return 1\n    return subsetSum ( arr, n, i + 1, sum - arr[i], count ) + subsetSum ( arr, n, i + 1, sum, count )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/24", "completion": "\n    \n    counter = 0\n    \n    for i in range(1, n+1) :\n        counter += i*(3*i-1)//2\n        \n        if counter == n :\n            return i*(3*i-1)//2\n    \n    return -1\n"}
{"task_id": "Open/25", "completion": "\n    sumOfSquares = 0\n    sumOfNumbers = 0\n    for i in range ( n ) :\n        sumOfNumbers += i\n        sumOfSquares += i * i\n    sumOfSquares += 1\n    return sumOfSquares, sumOfNumbers, sumOfSquares + sumOfNumbers + 1\n"}
{"task_id": "Open/26", "completion": "\n    \n    factors = []\n    for i in range ( 1, n ) :\n        if n % i == 0 :\n            factors.append ( i )\n    \n    sum = 0\n    for i in factors :\n        sum += i\n    \n    return sum\n"}
{"task_id": "Open/27", "completion": "\n    if x >= y :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    \n    difference = b - a\n    percentage = difference / a * 100\n    return percentage\n"}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    count = 0\n    for i in range(1, n+1) :\n        sum += i * i\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/31", "completion": "\n    \n    arr.sort()\n    return arr[k-1]\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nk = 5"}
{"task_id": "Open/32", "completion": "\n    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "\n    \n    term = 1\n    for i in range ( n ) :\n        term = term * 2 + 1\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    if len(a) == 0 :\n        return 0\n    \n    count = 0\n    product = 1\n    left = 0\n    right = 0\n    \n    while right < len(a) :\n        product *= a[right]\n        while product >= k and left <= right :\n            product /= a[left]\n            left += 1\n        count += right - left + 1\n        right += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range(1, n+1) :\n        if str(i).__contains__(str(d)) :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    \n    missing = set()\n    for i in range ( n ) :\n        if arr[i] > 0 :\n            missing.add( arr[i] )\n    \n    for i in range ( 1, n + 1 ) :\n        if i not in missing :\n            return i\n    \n    return n + 1\n"}
{"task_id": "Open/37", "completion": "\n    if n == 0 :\n        return 1\n    elif n < 0 :\n        return False\n    else :\n        return ways(n-1) + ways(n-2)\n"}
{"task_id": "Open/38", "completion": "\n    areaSum = 0\n    size = 1\n    while size <= l and size <= b :\n        areaSum += size * size\n        size += 1\n    return areaSum\n"}
{"task_id": "Open/39", "completion": "\n    if N == 1 :\n        return 1\n    else :\n        return N + count(N-1)\n"}
{"task_id": "Open/40", "completion": "\n    maxCount = 0\n    for i in range(n):\n        if arr[i] == 0:\n            maxCount += 1\n        elif arr[i] == 1:\n            maxCount = 0\n    return maxCount\n"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            max_length = max(max_length, 1)\n        else:\n            max_length += 1\n    return max_length\n\narr = [0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"}
{"task_id": "Open/42", "completion": "\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0],a[n-1])\n    else :\n        return max(a)\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            product = 1\n            for k in range(i,j+1):\n                product *= array[k]\n            if product <= k:\n                count += 1\n    return count\n\narray = [1,2,3,4,5,6,7,8,9]\nn = len(array)\nk = 20"}
{"task_id": "Open/44", "completion": "\n    \n    sorted_arr = sorted(arr)\n    sum = 0\n    for i in range(n):\n        sum += abs(sorted_arr[i] - i + 1)\n    return sum\n"}
{"task_id": "Open/45", "completion": "\n    min_element = 0\n    for i in range(n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/46", "completion": "\n    \n    maxDiff = 0\n    for i in range(len(array)):\n        diff = abs(array[i] - i)\n        if diff > maxDiff:\n            maxDiff = diff\n    return maxDiff\n    "}
{"task_id": "Open/47", "completion": "\n    if a == 0 and b == 0 and c == 0 :\n        return False\n    if a == 0 and b == 0 and c!= 0 :\n        return False\n    if a == 0 and b!= 0 and c == 0 :\n        return False\n    if a == 0 and b!= 0 and c!= 0 :\n        return False\n    if a!= 0 and b == 0 and c == 0 :\n        return False\n    if a!= 0 and b == 0 and c!= 0 :\n        return False\n    if a!= 0 and b!= 0 and c == 0 :\n        return False\n    if a!= 0 and b!= 0 and c!= 0 :\n        return False\n    if a!= 0 and b!= 0 and c!= 0 :\n        return False\n    if a!= 0 and b!= 0 and c!= 0 :\n        return False\n    if a!= 0 and b!= 0 and c!= 0 :\n        return False\n    if a!= 0 and b!= 0 and c!= 0 :\n        return False\n    if a!= 0 and b!= 0 and c!= 0 :\n        return False\n    if a!= 0 and b!= 0"}
{"task_id": "Open/48", "completion": "\n    \n    count = 0\n    for i in range(0, a + 1):\n        if a == i + (a ^ i):\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max = 0\n    for i in range(L, R+1):\n        if L & R > max:\n            max = L & R\n    return max\n"}
{"task_id": "Open/50", "completion": "\n    smallest = 0\n    for i in range(n):\n        if a[i] % smallest == 0:\n            smallest = a[i]\n    if smallest == 0:\n        return -1\n    else:\n        return smallest\n"}
{"task_id": "Open/51", "completion": "\n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum += 1 / 3 ** i\n    return sum\n"}
{"task_id": "Open/52", "completion": "\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if (i+1)*(j+1) > n:\n                break\n            if (i+1)*(j+1) == n:\n                result += arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(N+1):\n        if i ^ i == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    sum = 0\n    for i in range(n):\n        if a[i] < 0 or a[i] > k:\n            return False\n        sum += a[i]\n    if sum + n - 1 == k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/55", "completion": "\n    \n    return n & (n - 1) == 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    prev_char = None\n    for char in s:\n        if char == prev_char:\n            max_partitions += 1\n        else:\n            prev_char = char\n            max_partitions = 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    for i in range(2, N+1):\n        var1 = arr[i-1]\n        var2 = arr[i-2]\n        result = result + var1 + var2\n        result = result + var1 * var2 / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "\n    \n    for i in range(0,reversals) :\n        arr = reverse(arr,ranges[i][0],ranges[i][1])\n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    \n    for i in range(1, n+1) :\n        if i*i > n :\n            break\n        if (n - i*i) in range(1, n+1) :\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    count = 0\n    for i in range(len(b)) :\n        if b[i] == a[0] :\n            if b[i:i+len(a)] == a :\n                count += 1\n    return count\n"}
{"task_id": "Open/62", "completion": "\n    for i in range ( len - 2, -1, -1 ) :\n        if str[i] > str[i + 1] :\n            str[i] = str[i] - 1\n            for j in range ( i + 1, len ) :\n                str[j] = 9\n    return str\n"}
{"task_id": "Open/63", "completion": "\n    minValue = 1\n    for i in range(n):\n        if arr[i] < minValue:\n            minValue = arr[i]\n    return minValue\n"}
{"task_id": "Open/64", "completion": "\n    maxSubStr = \"\"\n    maxSubStrLen = 0\n    for i in range(len(s)):\n        if s[i]!= '1':\n            maxSubStr += s[i]\n            maxSubStrLen = max(maxSubStrLen, len(maxSubStr))\n        else:\n            if len(maxSubStr) > maxSubStrLen:\n                maxSubStrLen = len(maxSubStr)\n    return maxSubStr\n"}
{"task_id": "Open/65", "completion": "\n    \n    a.sort()\n    i = 0\n    j = 0\n    while i < n:\n        if a[i] == a[i-1]:\n            j += 1\n        elif j > k:\n            a.pop(i)\n            n -= 1\n        else:\n            i += 1\n            j = 0\n    return n\n"}
{"task_id": "Open/66", "completion": "\n    \n    for i in range(k):\n        arr.append(0)\n    \n    arr.sort()\n    \n    if len(arr) % 2 == 0:\n        return (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n    else:\n        return arr[len(arr)//2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/67", "completion": "\n    \n    stepCount = 0\n    negativeCount = 0\n    positiveCount = 0\n    zeroCount = 0\n    \n    for i in range(n) :\n        if a[i] < 0 :\n            negativeCount += 1\n        elif a[i] > 0 :\n            positiveCount += 1\n        elif a[i] == 0 :\n            zeroCount += 1\n    \n    if negativeCount % 2 == 0 :\n        stepCount += zeroCount\n    else :\n        if zeroCount > 0 :\n            stepCount += zeroCount + 2\n        else :\n            stepCount += 2\n    \n    return stepCount\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result + v[i] * 10 ** i\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    if n == 0 :\n        return True\n    if n & 1 == 0 : # n is even\n        return areSetBitsIncreasing( n >> 1 )\n    else :\n        return False\n"}
{"task_id": "Open/70", "completion": "\n    if n > x :\n        return n\n    elif n < x :\n        return x\n    elif n > x :\n        return n\n    "}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i + 2)\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    maxm = -1\n    count = 0\n    for i in range(n) :\n        if arr[i] == arr[i] :\n            count += 1\n        else :\n            count = 0\n        if count > maxm :\n            maxm = arr[i]\n    return maxm\n\narr = [1,2,3,3,3,3,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[j] > a[i] and (a[j] & a[i] == 0):\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    return int( ''.join( [ str( int( x ) ^ 1 ) for x in bin( n )[ 2 : ] ] ), 2 )\n"}
{"task_id": "Open/76", "completion": "\n    count = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            A[i+1] = 0\n            count += 1\n    return count\n\nA = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"}
{"task_id": "Open/77", "completion": "\n    \n    degree = 0\n    \n    for i in range(0, len(radian)):\n        if radian[i] > 0:\n            degree += radian[i]\n        else:\n            degree -= radian[i]\n    \n    if degree < 0:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range(n) :\n        sum += a + (n-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 0 :\n        return 1\n    else :\n        max_power = 0\n        for power in range(31) :\n            if n % 2**power == 0 :\n                max_power = power\n        return max_power\n"}
{"task_id": "Open/81", "completion": "\n    \n    count = 0\n    \n    for i in range(8) :\n        for j in range(8) :\n            if i == row and j == column :\n                continue\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j == column :\n                count += 1\n            elif i == row and j =="}
{"task_id": "Open/82", "completion": "\n    \n    sequence = [0]\n    \n    for i in range(1, n) :\n        sequence.append(sequence[i-1] + i)\n    \n    return sequence\n    "}
{"task_id": "Open/83", "completion": "\n    \n    last_occurrence = []\n    for i in range(len(s)) :\n        last_occurrence.append(s.rfind(s[i]))\n    \n    sorted_string = sorted(s)\n    \n    for i in range(len(s)) :\n        if last_occurrence[i]!= sorted_string.index(s[i]) :\n            s = s[:last_occurrence[i]] + s[sorted_string.index(s[i])] + s[last_occurrence[i]+1:]\n    \n    return s\n"}
{"task_id": "Open/84", "completion": "\n    \n    arr = []\n    for i in range(n) :\n        if i % 2 == 0 :\n            arr.append(i)\n        else :\n            arr.append(i)\n    \n    sum = 0\n    for i in range(l-1,r) :\n        sum += arr[i]\n    \n    return sum\n"}
{"task_id": "Open/85", "completion": "\n    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range(1, smaller + 1) :\n        if x % i == 0 and y % i == 0 :\n            hcf = i\n    return hcf\n"}
{"task_id": "Open/86", "completion": "\n    current_number = A\n    previous_number = B\n    count = 1\n    while count < N:\n        current_number = previous_number + current_number\n        previous_number = current_number\n        count += 1\n    return current_number\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    \n    r = r / 100\n    t = t * 12\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[j] > B[k] * B[k]:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = 1\n        else:\n            if arr[i] - arr[i - 1] == 0:\n                max_len += 1\n            else:\n                max_len = 1\n    return max_len\n"}
{"task_id": "Open/92", "completion": "\n    maxLen = 0\n    for i in range(len(str)):\n        if str[i].isalnum() and (len(str[i:i+2]) % 2 == 0):\n            maxLen = max(maxLen, len(str[i:i+2]))\n    return maxLen\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 1 :\n        if n % 2 == 0 :\n            n = n / 2\n            count += 1\n        else :\n            break\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    result = \"\"\n    for i in range(n-1, -1, -1) :\n        if k >= 0 :\n            if k >= 26 :\n                result += 'z'\n                k -= 26\n            else :\n                result += chr(97 + k)\n                k -= k\n        else :\n            break\n        \n        if k >= 0 :\n            if k >= 26 :\n                result += 'z'\n                k -= 26\n            else :\n                result += chr(97 + k)\n                k -= k\n        else :\n            break\n        \n        result += chr(97 + k)\n        k -= k\n    \n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/95", "completion": "\n    distance = 0\n    while n > 0 :\n        distance += fuel / n\n        n -= 1\n    return distance\n"}
{"task_id": "Open/96", "completion": "\n    \n    sum = 0\n    for i in range ( n ) :\n        sum += arr[i]\n    \n    if sum == ( n * ( n + 1 ) / 2 ) :\n        return 1\n    elif sum == ( n * ( n + 1 ) / 2 ) * 2 :\n        return 1\n    else :\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/97", "completion": "\n    return word in sentence\n"}
{"task_id": "Open/98", "completion": "\n    \n    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "\n    \n    if a + b + c == 3 * k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/100", "completion": "\n    \n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    \n    if x == y :\n        return True\n    \n    while x < y :\n        x = x + '0'\n        \n    if x == y :\n        return True\n    \n    return False\n    "}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            count = 0\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    \n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/104", "completion": "\n    count = 0\n    for i in range(left, right + 1):\n        if i == 0:\n            return 0\n        if i == 1:\n            count += 1\n        if i == 2:\n            count += 2\n        if i == 3:\n            count += 2\n        if i == 4:\n            count += 3\n        if i == 5:\n            count += 3\n        if i == 6:\n            count += 3\n        if i == 7:\n            count += 3\n        if i == 8:\n            count += 4\n        if i == 9:\n            count += 4\n        if i == 10:\n            count += 4\n        if i == 11:\n            count += 4\n        if i == 12:\n            count += 4\n        if i == 13:\n            count += 4\n    return count\n"}
{"task_id": "Open/105", "completion": "\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 4\n    if n == 5:\n        return 8\n    if n == 6:\n        return 8\n    if n == 7:\n        return 8\n    if n == 8:\n        return 8\n    if n == 9:\n        return 16\n    if n == 10:\n        return 16\n    if n == 11:\n        return 16\n    if n == 12:\n        return 16\n    if n == 13:\n        return 16\n    if n == 1:\n        return 16\n    "}
{"task_id": "Open/106", "completion": "\n    sum = 0\n    for i in range ( 1, n ) :\n        if n % i == 0 :\n            sum += i\n    if sum == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "\n    \n    century = (N/100)\n    leap_century = (N/400)\n    leap_year = (N/4)\n    non_leap_year = (N/4)\n    \n    if century > 0 :\n        non_leap_year -= leap_century\n        \n    if leap_century > 0 :\n        non_leap_year -= leap_year\n        \n    total_days = non_leap_year + (2*leap_year)\n    \n    odd_days = total_days % 7\n    \n    return odd_days\n    "}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    else :\n        return int(a * (3 * a - 1) / 2)\n"}
{"task_id": "Open/109", "completion": "\n    \n    str_n = str(n)\n    count = 0\n    \n    for i in str_n:\n        if i == str(d):\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/110", "completion": "\n    \n    if n < 0 :\n        return False\n    \n    n = str(n)\n    \n    for i in range(len(n)) :\n        if n.count(n[i]) > 1 :\n            return False\n    \n    return True\n    \n    "}
{"task_id": "Open/111", "completion": "\n    if n == 0 :\n        return True\n    elif n == 1 :\n        return True\n    else :\n        if a[0] % 5 == 0 :\n            return canMakeEqual(a[1:], n-1)\n        elif a[0] % 3 == 0 :\n            return canMakeEqual(a[1:], n-1)\n        else :\n            return False\n"}
{"task_id": "Open/112", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 4\n    array[1] = 7\n    \n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 7\n        else:\n            array[i] = array[i//2] * 10 + 4\n    \n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 5\n        else:\n            array[i] = array[i//2] * 10 + 3\n    \n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    \n    for i in range(2, n+1):\n        if i%2 == 0:\n            array[i] = array[i//2] * 10 + 2\n        else:\n            array[i] = array[i//2] * 10 + 1\n    \n    return array[n]\n    "}
{"task_id": "Open/115", "completion": "\n    for i in range(n) :\n        if (a[i] % 11!= 0) :\n            return False\n    return True\n"}
{"task_id": "Open/116", "completion": "\n    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "\n    \n    return string.title()\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil( math.sqrt(8 * p + 1) - 1 ) // 2\n"}
{"task_id": "Open/119", "completion": "\n    return len(arr) == len(set(arr))\n"}
{"task_id": "Open/120", "completion": "\n    count = 0\n    if len(string) < 2:\n        return count\n    else:\n        for i in range(len(string) - 1):\n            if len(string) < 2:\n                return count\n            elif len(string) >= 2:\n                if string[i]!= string[i+1]:\n                    count += 1\n    return count\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    "}
{"task_id": "Open/123", "completion": "\n    \n    listOfIntegers = []\n    for i in range(len(s)):\n        listOfIntegers.append(int(s[i]))\n    \n    length = 0\n    for i in range(len(listOfIntegers) - 1):\n        if listOfIntegers[i] + 1 == listOfIntegers[i + 1]:\n            length += 1\n        else:\n            return length\n    return length\n"}
{"task_id": "Open/124", "completion": "\n    \n    N, M = 0, 0\n    \n    while K > 0 :\n        if N > M :\n            N -= min(N, M)\n        elif N < M :\n            M -= min(N, M)\n        else :\n            N, M = M, 0\n        K -= 1\n    \n    return N * M\n"}
{"task_id": "Open/125", "completion": "\n    if len(string)!= length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    \n    largestPowerOf2 = 0\n    \n    for i in range(1, n) :\n        if i == 2 :\n            largestPowerOf2 = i\n        elif i % 2 == 0 :\n            continue\n        else :\n            largestPowerOf2 = i\n    \n    return largestPowerOf2\n"}
{"task_id": "Open/127", "completion": "\n    \n    A = str(A)\n    B = str(B)\n    \n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n    "}
{"task_id": "Open/128", "completion": "\n    if x - y!= 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1, Sn_2, Sn_3 = 1, 12, 1213\n    for i in range(3, n+1):\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    \n    minSteps = [0] * n\n    \n    prev = arr[0]\n    for i in range(1, n):\n        minSteps[i] = minSteps[i-1] + abs(arr[i] - prev)\n        prev = arr[i]\n    \n    return minSteps\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    elif n % 4 == 1 or n % 4 == 2 :\n        return 1\n    else :\n        return -1\n"}
{"task_id": "Open/132", "completion": "\n    m = N / a\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    \n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n    "}
{"task_id": "Open/134", "completion": "\n    \n    if n % 2 == 0 :\n        return False\n    else :\n        if arr[0] % 2 == 0 and arr[n-1] % 2 == 0 :\n            return True\n        else :\n            return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/135", "completion": "\n    \n    count = 0\n    \n    if N == 1 :\n        return count\n    \n    if N > 1 :\n        count = count + 1\n        \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/136", "completion": "\n    minimum = 1\n    for i in range ( n ) :\n        if arr[i] < minimum :\n            minimum = arr[i]\n    return minimum\n\narr = [1,3,6,4,1,2]\nn = len ( arr )"}
{"task_id": "Open/137", "completion": "\n    \n    l = list(s)\n    l.sort()\n    return ''.join(l)\n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1, n) :\n        if arr[i] <= arr[i - 1] :\n            arr[i] = arr[i - 1]\n    for i in range(n) :\n        if arr[i] > arr[i - 1] :\n            count += arr[i] - arr[i - 1]\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    \n    averageValue = 0\n    \n    for char in s :\n        averageValue += ord(char)\n    \n    return averageValue / len(s)\n"}
{"task_id": "Open/140", "completion": "\n    if ( A > S ) :\n        return -1\n    if ( B > S ) :\n        return -1\n    if ( A < S ) :\n        return -1\n    if ( B < S ) :\n        return -1\n    if ( A == S ) :\n        return 1\n    if ( B == S ) :\n        return 1\n    if ( A == B ) :\n        return 1\n    if ( A == 0 ) :\n        return 0\n    if ( B == 0 ) :\n        return 0\n    if ( A == 1 ) :\n        return 1\n    if ( B == 1 ) :\n        return 1\n    if ( A == 2 ) :\n        return 2\n    if ( B == 2 ) :\n        return 2\n    if ( A == 3 ) :\n        return 3\n    if ( B == 3 ) :\n        return 3\n    if ( A == 4 ) :\n        return 4\n    if ( B == 4 ) :\n        return 4\n    if ( A == 5 ) :\n        return 5\n    if ( B == 5 ) :\n        return 5\n    if ( A =="}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n        else:\n            break\n        n = n // 2\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    maxSum = 0\n    index = -1\n    for i in range(n):\n        sum = arr[i]\n        for j in range(i):\n            sum = sum ^ arr[j]\n        for k in range(i+1,n):\n            sum = sum ^ arr[k]\n        if sum > maxSum:\n            maxSum = sum\n            index = i\n    return index\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/144", "completion": "\n    \n    # Initialize longest decreasing subsequence length as 1.\n    lds_length = 1\n    \n    # Iterate through the array.\n    for i in range( 1, n ) :\n        \n        # If the current element is less than the previous element, update longest decreasing subsequence length.\n        if arr[i] < arr[i - 1] :\n            lds_length += 1\n    \n    # Return longest decreasing subsequence length.\n    return lds_length\n"}
{"task_id": "Open/145", "completion": "\n    min_element = min(arr)\n    for i in range(n):\n        if arr[i] == min_element:\n            arr[i] += k\n        elif arr[i] > min_element:\n            arr[i] -= k\n        elif arr[i] < min_element:\n            arr[i] += k\n    return -1\n    "}
{"task_id": "Open/146", "completion": "\n    \n    K = str(K)\n    \n    counter = 0\n    \n    for i in range(len(K)-1) :\n        if K[i] == K[i+1] :\n            counter += 1\n        else :\n            counter = 0\n        \n        if counter > 1 :\n            return counter\n    \n    if counter < 2 :\n        return -1\n    \n    return counter\n"}
{"task_id": "Open/147", "completion": "\n    \n    min_ops = sys.maxsize\n    for i in range(n) :\n        if arr[i] == i :\n            min_ops = min(min_ops, 1)\n        else :\n            min_ops = min(min_ops, 2)\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "\n    sum = 3\n    for i in range(n) :\n        if i % 2 == 0 :\n            sum += 3\n        else :\n            sum += 5\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s**0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    \n    XOR = 0\n    \n    for i in range( len1 ) :\n        XOR = XOR ^ ord( str1[i] )\n    \n    return XOR\n"}
{"task_id": "Open/152", "completion": "\n    \n    n = bin(n)\n    \n    for i in range(2, len(n)) :\n        if n[i] == '1' and n[i-1] == '1' :\n            return False\n    \n    return True\n    "}
{"task_id": "Open/153", "completion": "\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    vowels_in_string = []\n    \n    for char in s :\n        if char in vowels :\n            vowels_in_string.append(char)\n    \n    vowels_in_string.sort()\n    \n    for i in range(len(vowels_in_string) - 1) :\n        if vowels_in_string[i] > vowels_in_string[i + 1] :\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low, high+1) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    \n    power = math.floor( math.log( n, 2 ) )\n    diff = abs( n - 2 ** power )\n    \n    return min( diff, abs( n - 2 ** ( power - 1 ) ) )\n"}
{"task_id": "Open/156", "completion": "\n    \n    if r < 0 :\n        return -1\n    else :\n        return 3 * r * r\n"}
{"task_id": "Open/157", "completion": "\n    \n    list = []\n    for i in s :\n        list.append(i)\n    list.sort()\n    return \"\".join(list)\n"}
{"task_id": "Open/158", "completion": "\n    low = 0\n    high = size-1\n    while low <= high :\n        mid = (low + high) // 2\n        if ar[mid] == mid :\n            low = mid + 1\n        else :\n            if ar[mid] < mid :\n                low = mid + 1\n            else :\n                high = mid - 1\n    return low\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    \n    count = {}\n    \n    for i in range(n):\n        if arr[i] not in count:\n            count[arr[i]] = 1\n        else:\n            count[arr[i]] += 1\n    \n    for i in range(n):\n        if count[arr[i]] % 2 == 1:\n            return arr[i]\n    \n    return None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n        ans = max(ans, xorArr)\n    return ans\n\narr = [0, 1, 1, 0]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    \n    if abs(sx - dx) == 1 and abs(sy - dy) == 1 :\n        return True\n    else :\n        return False\n    "}
{"task_id": "Open/163", "completion": "\n    if n % 4 == 0 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/164", "completion": "\n    d = {}\n    for i in range(n):\n        d[arr[i]] = d.get(arr[i],0) + 1\n    count = 1\n    for i in d:\n        count *= d[i]\n    return count\n"}
{"task_id": "Open/165", "completion": "\n    \n    return False\n"}
{"task_id": "Open/166", "completion": "\n    steps = 0\n    for i in range(source, dest, step) :\n        if i == dest :\n            return steps\n        elif i > dest :\n            steps += i - dest\n        elif i < dest :\n            steps += dest - i\n    return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "\n    s = \"1\"\n    for i in range(n-1) :\n        count = 1\n        newS = \"\"\n        for j in range(1, len(s)) :\n            if s[j] == s[j-1] :\n                count += 1\n            else :\n                newS += str(count) + s[j-1]\n                count = 1\n        newS += str(count) + s[-1]\n        s = newS\n    return s\n"}
{"task_id": "Open/168", "completion": "\n    \n    maxLen = 0\n    product = 1\n    start = 0\n    \n    for i in range(N):\n        if product < 0:\n            product = 1\n            start = i\n        else:\n            product *= arr[i]\n            maxLen = max(maxLen, i - start + 1)\n    \n    return maxLen\n\narr = [1, -2, 3, 4, -5, 2]\nN = len(arr)"}
{"task_id": "Open/169", "completion": "\n    normal = 0\n    \n    if m == 0 and n == 0 :\n        return False\n    \n    if m == 0 :\n        return True\n    \n    if n == 0 :\n        return False\n    \n    if m > 0 and n > 0 :\n        normal = (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n        return normal\n    \n    if m < 0 and n > 0 :\n        normal = (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n        return normal\n    \n    if m < 0 and n < 0 :\n        normal = (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n        return normal\n    \n    if m > 0 and n < 0 :\n        normal = (abs(m) * abs(n)) / math.sqrt((abs(m) *"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n):\n        if arr[i] > k:\n            count += (arr[i] - k)\n        elif arr[i] < k:\n            count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "\n    arr.sort()\n    i, j, k = 0, L, n - 1\n    count = 0\n    while i < j < k :\n        if arr[k] - arr[i] <= L :\n            count += k - i\n            j -= 1\n        else:\n            k -= 1\n    return count\n\nn = int(input())\nL = int(input())\narr = [int(x) for x in input().split()]"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l, r+1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    return n ^ ( ( 1 << m ) - 1 )\n"}
{"task_id": "Open/174", "completion": "\n    \n    total = R - L + 1\n    div = total / 9\n    rem = total % 9\n    count = 0\n    \n    if K == 9 :\n        K = 0\n    \n    for i in range(R, L - rem, -1) :\n        if i % 9 == K :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/175", "completion": "\n    \n    n = str(n)\n    k = str(k)\n    \n    product = math.log10(n) * math.log10(n)\n    \n    firstkdigits = product // int(k)\n    \n    return firstkdigits\n    "}
{"task_id": "Open/176", "completion": "\n    \n    for i in range(n):\n        if A[i] > A[i-1] and A[i] < A[i+1]:\n            return A[i]\n    return -1\n\nA = [1,2,3,4,5,6,7,8,9]\nn = len(A)"}
{"task_id": "Open/177", "completion": "\n    \n    a.sort()\n    b.sort()\n    c.sort()\n    \n    result = 0\n    \n    for i in range(len(a) - 1):\n        result += b[i] - a[i]\n    \n    result += c[-1] - a[-1]\n    \n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
