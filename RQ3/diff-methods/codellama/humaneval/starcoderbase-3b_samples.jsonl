{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            return True\n        if numbers[i] < numbers[i + 1] + threshold:\n            return True\n        if numbers[i] > numbers[i + 1] - threshold:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "    # TODO: Write your code here\n    return []\n\n"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "    account_balance = 0\n    for operation in operations:\n        account_balance += operation\n        if account_balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "    # TODO: Implement this function\n    return 0.0\n"}
{"task_id": "HumanEval/5", "completion": "    output = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            output.append(numbers[i])\n        else:\n            output.append(delimeter)\n    return output\n\n"}
{"task_id": "HumanEval/6", "completion": "    # Step 1. Initialize a stack.\n    stack = []\n\n    # Step 2. Iterate through the string.\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        else:\n            # Step 3. Return the length of the stack.\n            while stack and stack[-1]!= '(':\n                stack.pop()\n            if stack:\n                stack.pop()\n\n    return len(stack)\n\n"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n"}
{"task_id": "HumanEval/9", "completion": "    rolling_max = []\n    for number in numbers:\n        if len(rolling_max) == 0:\n            rolling_max.append(number)\n        elif number > rolling_max[-1]:\n            rolling_max.append(number)\n        else:\n            rolling_max.append(rolling_max[-1])\n    return rolling_max\n\n"}
{"task_id": "HumanEval/10", "completion": "    # Step 1. Find the longest palindromic suffix of the string.\n    longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n    # Step 2. Find the longest prefix of the string that is a palindrome.\n    longest_palindromic_prefix = find_longest_palindromic_prefix(string)\n    # Step 3. Return the string concatenation of the palindromic suffix and the reverse of the palindromic prefix.\n    return longest_palindromic_suffix + longest_palindromic_prefix[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n\n"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_len = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > longest_len:\n            longest_len = len(string)\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for char in string:\n        prefixes.append(char)\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "    # Step 1\n    output = \"\"\n    # Step 2\n    for i in range(n+1):\n        output += str(i) + \" \"\n    # Step 3\n    return output\n"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == '.|':\n            beats.append(1)\n    return beats\n\n"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for char in string:\n        if char == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "    numbers = numbers.split()\n    numbers = [int(number) for number in numbers if int(number) in range(0, 10)]\n    numbers.sort()\n    return''.join(map(str, numbers))\n\n"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    min_num = float('inf')\n    max_num = float('-inf')\n    for number in numbers:\n        if number - min_diff < 0:\n            min_diff = number - min_diff\n            min_num = number\n        elif number - min_diff == 0:\n            min_num = number\n        elif number - min_diff > 0:\n            max_num = number\n    return min_num, max_num\n\n"}
{"task_id": "HumanEval/21", "completion": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [number / (max_number - min_number) * 100 for number in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "    return [int(value) for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "    max_divisor = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n"}
{"task_id": "HumanEval/25", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    factors = []\n    for prime in primes:\n        while n % prime == 0:\n            factors.append(prime)\n            n //= prime\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "    # Step 1. Create a dictionary to store the number of occurrences of each number.\n    occurrences = {}\n    for number in numbers:\n        occurrences[number] = occurrences.get(number, 0) + 1\n\n    # Step 2. Create a list to store the final result.\n    result = []\n\n    # Step 3. Iterate through the input list.\n    # If the number is not in the dictionary, add it to the dictionary and add it to the result list.\n    # If the number is in the dictionary, do nothing.\n    for number in numbers:\n        if number not in occurrences:\n            result.append(number)\n        else:\n            pass\n\n    # Step 4. Return the result list.\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"xs must have non zero coefficient\")\n    x = 0\n    for i in range(1, len(xs)):\n        x = x - xs[i] / xs[0]\n    return x\n"}
{"task_id": "HumanEval/33", "completion": "    l' = l[:]\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l'.sort()\n        else:\n            l'.append(l[i])\n    return l'\n"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i)[-1] == '7':\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "    l' = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l'.append(l[i])\n        else:\n            l'.append(l[i])\n    return l'\n"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to form decoded string.\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "    if n == 0 or n == 1:\n        return n\n    fib_nums = [0, 1]\n    prime_fibs = [0, 1]\n    i = 2\n    while i <= n:\n        fib_nums.append(fib_nums[i - 1] + fib_nums[i - 2])\n        if is_prime(fib_nums[i - 1]):\n            prime_fibs.append(fib_nums[i - 1])\n        else:\n            prime_fibs.append(0)\n        i += 1\n    return prime_fibs[n]\n"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "    # Step 1. Iterate through the list.\n    for i in range(len(l)):\n        # Step 2. For each element, check if the difference between the element and the sum of the list is 0.\n        if l[i] == sum(l) - l[i]:\n            # Step 3. If so, return True.\n            return True\n    # Step 4. Otherwise, return False.\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "    # Step 1. Convert x to string.\n    x = str(x)\n    # Step 2. Iterate through string.\n    total = 0\n    for i, char in enumerate(x):\n        # If character is not a number, return \"\".\n        if not char.isdigit():\n            return \"\"\n        # Otherwise, convert character to number.\n        num = int(char)\n        # Multiply number by base to the power of index.\n        total += num * base ** i\n    # Step 3. Return total.\n    return total\n"}
{"task_id": "HumanEval/45", "completion": "    return a * h / 2\n"}
{"task_id": "HumanEval/46", "completion": "\n"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "    encoded = \"\"\n    for ch in s:\n        if ch.isalpha():\n            encoded += chr(((ord(ch) - ord(\"a\")) + 5) % 26 + ord(\"a\"))\n        else:\n            encoded += ch\n    return encoded\n\n"}
{"task_id": "HumanEval/51", "completion": "    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "    flag = True\n    for i in range(len(l)):\n        if flag and l[i] < l[i-1]:\n            return False\n        elif flag and l[i] > l[i-1]:\n            flag = False\n        elif not flag and l[i] > l[i-1]:\n            flag = True\n    return True\n"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1).intersection(set(l2)))\n"}
{"task_id": "HumanEval/59", "completion": "    largest_prime_factor = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            largest_prime_factor = i\n    return largest_prime_factor\n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/62", "completion": "    derivative = [0] * len(xs)\n    for i in range(len(xs)):\n        if i == 0:\n            derivative[i] = 0\n        elif i == 1:\n            derivative[i] = 1\n        elif i == 2:\n            derivative[i] = 2\n        elif i == 3:\n            derivative[i] = 3\n        elif i == 4:\n            derivative[i] = 4\n        elif i == 5:\n            derivative[i] = 5\n        elif i == 6:\n            derivative[i] = 6\n        elif i == 7:\n            derivative[i] = 7\n        elif i == 8:\n            derivative[i] = 8\n        elif i == 9:\n            derivative[i] = 9\n    return derivative\n"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for i in s:\n        if i in \"aeiouAEIOU\":\n            count += 1\n        elif i == \"y\" and s[len(s)-1] == \"y\":\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "    return x[shift:] + x[:shift]\n"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) - 65 for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "    # Write your code here\n    apples = 0\n    oranges = 0\n    mangoes = 0\n    for i in s:\n        if i == \"a\":\n            apples += 1\n        elif i == \"o\":\n            oranges += 1\n        elif i == \"m\":\n            mangoes += 1\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "    smallest_even_value = float('inf')\n    smallest_even_value_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even_value:\n            smallest_even_value = val\n            smallest_even_value_index = i\n    return [smallest_even_value, smallest_even_value_index]\n\n"}
{"task_id": "HumanEval/69", "completion": "    # Step 1\n    freq = {}\n    # Step 2\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    # Step 3\n    for key, value in freq.items():\n        if value >= key:\n            return key\n    # Step 4\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    lst.sort()\n    while lst:\n        if len(lst) == 1:\n            result.append(lst[0])\n            break\n        elif len(lst) == 2:\n            result.append(lst[0])\n            result.append(lst[1])\n            break\n        else:\n            result.append(lst[0])\n            lst.remove(lst[0])\n            result.append(lst[-1])\n            lst.remove(lst[-1])\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * c) ** 0.5\n"}
{"task_id": "HumanEval/72", "completion": "    if q == []:\n        return True\n    if q[0] == q[-1]:\n        return will_it_fly(q[1:-1], w)\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "    palindrome_found = False\n    palindrome_index = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[palindrome_index]:\n            continue\n        else:\n            palindrome_index += 1\n            arr[palindrome_index] = arr[i]\n    if palindrome_index >= len(arr):\n        return 0\n    else:\n        return len(arr) - palindrome_index\n"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = 0\n    total_chars_lst2 = 0\n    for i in range(len(lst1)):\n        total_chars_lst1 += len(lst1[i])\n    for i in range(len(lst2)):\n        total_chars_lst2 += len(lst2[i])\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "    # TODO: Write your code here\n    pass\n"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_simple_power(x, n // 2)\n    else:\n        return x == n ** (n // 2) * n\n"}
{"task_id": "HumanEval/77", "completion": "    if a == 0:\n        return True\n    elif a % 2 == 0:\n        return False\n    elif a % 3 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/78", "completion": "    # Step 1. Convert the hexadecimal number to decimal.\n    num = int(num, 16)\n    # Step 2. Iterate through the decimal number.\n    count = 0\n    for digit in range(10):\n        if num % 10 == digit:\n            count += 1\n        elif num % 10 == 13:\n            count += 2\n    # Step 3. Return the count.\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "    # Step 1\n    extra_chars = 'db'\n    # Step 2\n    binary = bin(decimal)\n    # Step 3\n    return extra_chars + binary[2:]\n"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return True\n    return False\n"}
{"task_id": "HumanEval/81", "completion": "    # TODO: Write your code here\n    return []\n"}
{"task_id": "HumanEval/82", "completion": "    if string == '':\n        return False\n    elif len(string) == 1:\n        return True\n    elif len(string) == 2:\n        return string[0] == string[1]\n    elif len(string) == 3:\n        return string[0] == string[1] or string[0] == string[2] or string[1] == string[2]\n    elif len(string) == 4:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[1] == string[2] or string[1] == string[3] or string[2] == string[3]\n    elif len(string) == 5:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4] or string[1] == string[2] or string[1] == string[3] or string[1] == string[4] or string[2] == string[3] or string[2] == string[4] or"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10**n+1):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "    return bin(N).count('1')\n"}
{"task_id": "HumanEval/85", "completion": "    # Step 1. Iterate through the list.\n    # Step 2. If the index is odd and the value is even, add it to the new list.\n    # Step 3. Return the new list.\n    new_list = []\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            new_list.append(lst[i])\n    return new_list\n\n"}
{"task_id": "HumanEval/86", "completion": "    return ''.join(sorted(s.split()))\n"}
{"task_id": "HumanEval/87", "completion": "    # Step 1. Initialize a list of tuples, coordinates, as a result.\n    coordinates = []\n    # Step 2. Iterate through the list of lists, lst.\n    for i in range(len(lst)):\n        # Step 2.1. Iterate through the list, lst[i].\n        for j in range(len(lst[i])):\n            # Step 2.2. If lst[i] == x, append (i, j) to coordinates.\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    # Step 3. Iterate through the list of lists, lst.\n    for i in range(len(lst)):\n        # Step 3.1. Iterate through the list, lst[i][j].\n        for j in range(len(lst[i])):\n            # Step 3.2. If lst[i][j] == x, append (i, j) to coordinates.\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    # Step 4. Return coordinates.\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "    new_array = []\n    for i in range(len(array)):\n        if sum(array[i:i+2]) % 2 == 0:\n            new_array.append(array[i:i+2][::-1])\n        else:\n            new_array.append(array[i:i+2])\n    return new_array\n"}
{"task_id": "HumanEval/89", "completion": "    # Step 1\n    alphabet = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\n    # Step 2\n    new_string = ''\n    for letter in s:\n        new_string += alphabet[letter]\n    # Step 3\n    return new_string\n"}
{"task_id": "HumanEval/90", "completion": "    lst.sort()\n    if len(lst) == 0:\n        return None\n    return lst[1]\n\n"}
{"task_id": "HumanEval/91", "completion": "    # TODO: Write your code here\n    counter = 0\n    for word in S.split():\n        if word == \"I\":\n            counter += 1\n        elif word == \".\" or word == \"?\" or word == \"!\":\n            counter = 0\n    return counter\n"}
{"task_id": "HumanEval/92", "completion": "    if not all(isinstance(x, int) for x in (x, y, z)):\n        return False\n    elif x + y == z:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "    pass\n"}
{"task_id": "HumanEval/94", "completion": "    primes = []\n    for i in range(2, 1000000):\n        if is_prime(i):\n            primes.append(i)\n    sum = 0\n    for i in primes:\n        sum += int(str(i)[-1])\n    return sum\n"}
{"task_id": "HumanEval/95", "completion": "    # Step 1. Initialize a variable to store the case of the first key.\n    first_key = next(iter(dict))\n    # Step 2. Iterate through the dictionary.\n    # If the case of the first key is not the same as the case of the current key, return False.\n    for key in dict:\n        if first_key.isupper() and key.islower():\n            return False\n        elif first_key.islower() and key.isupper():\n            return False\n    # Step 3. Return True.\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "    # Step 1\n    prime_numbers = []\n    # Step 2\n    for i in range(2, n):\n        # Step 3\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n"}
{"task_id": "HumanEval/97", "completion": "    a_str = str(a)\n    b_str = str(b)\n    a_last_digit = a_str[-1]\n    b_last_digit = b_str[-1]\n    return int(a_last_digit) * int(b_last_digit)\n"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "    return int(round(float(value)))\n"}
{"task_id": "HumanEval/100", "completion": "    # Step 1. Initialize a list to store the number of stones in each level.\n    pile = [0] * (n + 1)\n    # Step 2. Initialize a variable to store the number of stones in the first level.\n    pile[0] = n\n    # Step 3. Iterate through the list.\n    for i in range(1, n + 1):\n        # If the number of stones in the level is odd, add the next odd number to the number of stones in the level.\n        if pile[i] % 2 == 1:\n            pile[i] = pile[i] + pile[i] + 1\n        # If the number of stones in the level is even, add the next even number to the number of stones in the level.\n        else:\n            pile[i] = pile[i] + pile[i]\n    # Step 4. Return the list.\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "    return s.split()\n"}
{"task_id": "HumanEval/102", "completion": "    max_num = -1\n    for i in range(x, y+1):\n        if i%2 == 0 and i > max_num:\n            max_num = i\n    return max_num\n"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    sum = 0\n    count = 0\n    for i in range(n, m+1):\n        sum += i\n        count += 1\n    return round(sum/count)\n"}
{"task_id": "HumanEval/104", "completion": "    # Step 1. Create a list of all numbers that has even digit.\n    even_digits = [x for x in x if x % 2 == 0]\n    # Step 2. Iterate through the list of numbers.\n    # If number has even digit, append it to the list of numbers with even digit.\n    for num in x:\n        if num in even_digits:\n            even_digits.append(num)\n    # Step 3. Iterate through the list of numbers with even digit.\n    # If number has even digit, append it to the list of numbers with even digit.\n    for num in even_digits:\n        if num in x:\n            even_digits.append(num)\n    # Step 4. Return the list of numbers without even digit.\n    return [x for x in x if x not in even_digits]\n"}
{"task_id": "HumanEval/105", "completion": "    # Step 1. Create a dictionary that maps the numbers to their names.\n    # Step 2. Create a new array that is the same length as the original array.\n    # Step 3. Iterate through the original array.\n    #     -If the number is between 1 and 9 inclusive, add the corresponding name to the new array.\n    #     -Otherwise, add the number to the new array.\n    # Step 4. Return the new array.\n    # Create a dictionary that maps the numbers to their names.\n    name_dict = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    # Create a new array that is the same length as the original array.\n    new_arr = [0] * len(arr)\n    # Iterate through the original array.\n    for i in range(len(arr)):\n        # If the number is between 1 and 9 inclusive, add the corresponding name to the new array.\n        if 1 <= arr[i] <= "}
{"task_id": "HumanEval/106", "completion": "    pass\n"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and is_even(i):\n            even_count += 1\n        elif is_palindrome(i) and is_odd(i):\n            odd_count += 1\n    return even_count, odd_count\n\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(abs(int(x)) for x in str(num)) > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    sorted = False\n    i = 0\n    while i < len(arr) and not sorted:\n        if arr[i] < arr[i+1]:\n            sorted = True\n        else:\n            sorted = False\n            arr.append(arr.pop(0))\n            i += 1\n    return sorted\n"}
{"task_id": "HumanEval/110", "completion": "    # TODO: Write your code here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "    # TODO: Write your code here\n    pass\n"}
{"task_id": "HumanEval/112", "completion": "    # Step 1\n    for i in range(len(s)):\n        if s[i] in c:\n            s = s[:i] + s[i+1:]\n            break\n    # Step 2\n    for i in range(len(s)):\n        if s[i] in c:\n            s = s[:i] + s[i+1:]\n            break\n    # Step 3\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False\n"}
{"task_id": "HumanEval/113", "completion": "    # Step 1. Iterate through the list.\n    # Step 2. For each element, count the number of odd digits.\n    # Step 3. Return the list of counts.\n    return [str(len(str(x).replace('0', '')) - len(str(x).replace('1', ''))) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\" for i, x in enumerate(lst)]\n\n"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    running_sum = 0\n    for num in nums:\n        running_sum += num\n        if running_sum < min_sum:\n            min_sum = running_sum\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "    buckets = [0] * len(grid)\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 1:\n                buckets[i] += 1\n            elif row[i] == 0:\n                buckets[i] -= 1\n    return buckets\n\n"}
{"task_id": "HumanEval/116", "completion": "    # Step 1. Iterate through the array.\n    # Step 2. For each element, count the number of ones in the binary representation of the number.\n    # Step 3. Add the number of ones and the number to a new array.\n    # Step 4. Sort the new array based on the number of ones and the number.\n    # Step 5. Return the sorted array.\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "    pass\n\n"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    if stack:\n        return 'No'\n    else:\n        return 'Yes'\n"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) == 2:\n            sum += arr[i]\n        else:\n            sum += arr[i] // 10\n            sum += arr[i] % 10\n    return sum\n\n"}
{"task_id": "HumanEval/123", "completion": "    # Step 1. Create a list to store the odd numbers.\n    odd_numbers = []\n    # Step 2. Iterate through the numbers from 1 to n.\n    for i in range(1, n+1):\n        # Step 2.1. If the number is odd, append it to the list.\n        if i % 2!= 0:\n            odd_numbers.append(i)\n    # Step 3. Return the list.\n    return odd_numbers\n"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    else:\n        month, day, year = date.split('-')\n        if int(day) > 31:\n            if int(month) == 1 or int(month) == 3 or int(month) == 5 or int(month) == 7 or int(month) == 8 or int(month) == 10 or int(month) == 12:\n                if int(day) > 31:\n                    return False\n            elif int(month) == 4 or int(month) == 6 or int(month) == 9 or int(month) == 11:\n                if int(day) > 30:\n                    return False\n            else:\n                if int(day) > 29:\n                    return False\n        if int(month) > 12:\n            return False\n        if not date.split('-')[2].isdigit():\n            return False\n        return True\n\n"}
{"task_id": "HumanEval/125", "completion": "    return txt.split()\n\nsplit_words(\"Hello world!\") # \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") # \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") # \u279e 3\n"}
{"task_id": "HumanEval/126", "completion": "    prev = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < prev:\n            return False\n        prev = lst[i]\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0]:\n        start = interval2[0]\n        end = interval1[1]\n    else:\n        start = interval1[0]\n        end = interval2[1]\n    intersection = [start, end]\n    if intersection[1] - intersection[0] == 1:\n        return \"YES\"\n    if intersection[1] - intersection[0] == 2:\n        return \"NO\"\n    if intersection[1] - intersection[0] == 3:\n        return \"YES\"\n    if intersection[1] - intersection[0] == 4:\n        return \"NO\"\n    if intersection[1] - intersection[0] == 5:\n        return \"YES\"\n    if intersection[1] - intersection[0] == 6:\n        return \"NO\"\n    if intersection[1] - intersection[0] == 7:\n        return \"YES\"\n    if intersection[1] - intersection[0] == 8:\n        return \"NO\"\n    if intersection[1] - intersection[0"}
{"task_id": "HumanEval/128", "completion": "    # Step 1\n    result = 0\n    # Step 2\n    for i in arr:\n        if i == 0:\n            return None\n        elif i > 0:\n            result += i\n        else:\n            result *= -1\n    # Step 3\n    return result\n"}
{"task_id": "HumanEval/129", "completion": "    \n    # Step 1. Initialize a set of all possible paths of length k.\n    # Step 2. For each path in the set, find the minimum path.\n    # Step 3. Return the minimum path.\n    \n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    #"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        return [1, 3, 2] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n"}
{"task_id": "HumanEval/132", "completion": ""}
{"task_id": "HumanEval/133", "completion": "    # Write your code here\n    return sum(map(lambda x: int(ceil(x**2)), lst))\n"}
{"task_id": "HumanEval/134", "completion": "    last_char = None\n    for char in txt:\n        if char == \" \":\n            last_char = None\n        else:\n            last_char = char\n    if last_char.isalpha():\n        return True\n    else:\n        return False\n\ncheck_if_last_char_is_a_letter(\"apple pie\") # \u279e False\ncheck_if_last_char_is_a_letter(\"apple pi e\") # \u279e True\ncheck_if_last_char_is_a_letter(\"apple pi e \") # \u279e False\ncheck_if_last_char_is_a_letter(\"\") # \u279e False"}
{"task_id": "HumanEval/135", "completion": "    # TODO: Write your code here\n    pass\n"}
{"task_id": "HumanEval/136", "completion": "    # Step 1. Initialize largest negative integer as None.\n    largest_negative = None\n    # Step 2. Initialize smallest positive integer as None.\n    smallest_positive = None\n    # Step 3. Iterate through the list.\n    for integer in lst:\n        # Step 3.1. If the integer is negative and the largest negative integer is None,\n        # set the largest negative integer as the current integer.\n        if integer < 0 and largest_negative is None:\n            largest_negative = integer\n        # Step 3.2. If the integer is positive and the smallest positive integer is None,\n        # set the smallest positive integer as the current integer.\n        if integer > 0 and smallest_positive is None:\n            smallest_positive = integer\n        # Step 3.3. If the integer is negative and the largest negative integer is not None,\n        # compare the current integer with the largest negative integer.\n        if integer < 0 and largest_negative is not None:\n            if integer > largest_negative:\n                largest_negative = integer\n        # Step 3.4. If the integer is positive and the smallest positive integer is not None,\n        # compare the current integer with the smallest positive integer.\n       "}
{"task_id": "HumanEval/137", "completion": "\n"}
{"task_id": "HumanEval/138", "completion": "    if n % 2!= 0:\n        return False\n    even_sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_sum += i\n    if even_sum == n:\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/139", "completion": "    pass\n"}
{"task_id": "HumanEval/140", "completion": "    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text\n"}
{"task_id": "HumanEval/141", "completion": "    # Step 1.\n    if len(file_name) > 3:\n        return \"No\"\n    # Step 2.\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    # Step 3.\n    if file_name.find(\".\") == 0:\n        return \"No\"\n    # Step 4.\n    if file_name.split(\".\")[-1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    # Step 5.\n    return \"Yes\"\n\n"}
{"task_id": "HumanEval/142", "completion": "    return sum(x**2 if i%3==0 else x**3 if i%4==0 else x for i,x in enumerate(lst))\n"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    primes = [i for i in range(1, len(sentence) + 1)]\n    new_words = []\n    for prime in primes:\n        for word in words:\n            if len(word) == prime:\n                new_words.append(word)\n    return \" \".join(new_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "    x = int(x.split('/')[0])\n    n = int(n.split('/')[0])\n    return x * n == int(x * n)\n\nsimplify(\"1/5\", \"5/1\")\nsimplify(\"1/6\", \"2/1\")\nsimplify(\"7/10\", \"10/2\")\nsimplify(\"1/3\", \"3/1\")\nsimplify(\"1/3\", \"3/2\")\nsimplify(\"1/3\", \"3/3\")\nsimplify(\"1/3\", \"3/4\")\nsimplify(\"1/3\", \"3/5\")\nsimplify(\"1/3\", \"3/6\")\nsimplify(\"1/3\", \"3/7\")\nsimplify(\"1/3\", \"3/8\")\nsimplify(\"1/3\", \"3/9\")\nsimplify(\"1/3\", \"3/10\")\nsimplify(\"1/3\", \"3/11\")\nsimplify(\"1/3\", \"3/12\")\nsimplify(\"1/3\", \"3/13\")\nsimplify(\"1/3\", \"3/14\")\nsimplify(\"1/3\", \""}
{"task_id": "HumanEval/145", "completion": "    # Step 1\n    d = {}\n    for i in range(len(nums)):\n        d[sum(map(int, str(nums[i])))] = nums[i]\n\n    # Step 2\n    t = []\n    for i in d.keys():\n        t.append((i, d[i]))\n\n    # Step 3\n    t.sort(key=lambda x: (x[0], nums.index(x[1])))\n\n    # Step 4\n    return [x[1] for x in t]\n\n"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num % 100!= 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(n):\n        a[i] = i * i - i + 1\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "HumanEval/148", "completion": "    # Step 1. Create a dictionary with planet names as keys and their orbits as values.\n    planets = {\n        \"Mercury\": \"Mercury\",\n        \"Venus\": \"Venus\",\n        \"Earth\": \"Earth\",\n        \"Mars\": \"Mars\",\n        \"Jupiter\": \"Jupiter\",\n        \"Saturn\": \"Saturn\",\n        \"Uranus\": \"Uranus\",\n        \"Neptune\": \"Neptune\",\n    }\n\n    # Step 2. Check if planet1 and planet2 are in the dictionary.\n    # If they are, get the orbit of planet1 and planet2.\n    # If they are not, return an empty tuple.\n    if planets.get(planet1) and planets.get(planet2):\n        # Step 3. Iterate through the dictionary.\n        # If the orbit of the planet is between the orbit of planet1 and the orbit of planet2,\n        # append the planet to a list.\n        orbits = []\n        for planet in planets:\n            if bf_helper(planets[planet], planet1, planet2):\n                orbits.append(planet)\n        # Step 4. Return the list sorted"}
{"task_id": "HumanEval/149", "completion": "    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key=len)\n"}
{"task_id": "HumanEval/150", "completion": "    result = y\n    for i in range(2, n+1):\n        if n%i == 0:\n            return result\n    return result\n"}
{"task_id": "HumanEval/151", "completion": "    # TODO: Write your code here\n    sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n            sum += i ** 2\n    return sum\n"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = extensions[0]\n    for extension in extensions:\n        if strength(extension) > strength(strongest_extension):\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension\n"}
{"task_id": "HumanEval/154", "completion": "    if len(a)!= len(b):\n        return False\n    rotations = set(b)\n    for word in a:\n        if word in rotations:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "    # Step 1. Initialize even and odd count as 0.\n    even_count = 0\n    odd_count = 0\n\n    # Step 2. Iterate through the number.\n    for digit in str(num):\n        # If the number is even, increment even count.\n        if digit % 2 == 0:\n            even_count += 1\n        # If the number is odd, increment odd count.\n        else:\n            odd_count += 1\n\n    # Step 3. Return the tuple.\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "    roman_numeral = ''\n    roman_numeral_dict = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    while number > 0:\n        for key, value in roman_numeral_dict.items():\n            if number >= key:\n                roman_numeral += value\n                number -= key\n                break\n    return roman_numeral.lower()\n"}
{"task_id": "HumanEval/157", "completion": "    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/158", "completion": "    max_word = None\n    for word in words:\n        if len(set(word)) > len(max_word) or (len(set(word)) == len(max_word) and word < max_word):\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "    total_carrots = 0\n    carrots_left = need\n    for i in range(len(operations)):\n        if carrots_left < number:\n            carrots_left = remaining\n        else:\n            carrots_left -= number\n        total_carrots += number\n    return [total_carrots, carrots_left]\n"}
{"task_id": "HumanEval/160", "completion": "    # TODO: Write your code here\n    return 0\n"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            result += s[i]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "    # Step 1\n    even_numbers = []\n\n    # Step 2\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even_numbers.append(i)\n\n    # Step 3\n    return even_numbers\n\n"}
