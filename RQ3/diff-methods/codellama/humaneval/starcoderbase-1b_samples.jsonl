{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')':\n            groups.append(current_group)\n            current_group = ''\n        elif char == ',':\n            groups.append(current_group)\n            current_group = ''\n        elif char =='':\n            pass\n        else:\n            groups.append(current_group)\n            current_group = char\n    groups.append(current_group)\n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "    account_balance = 0\n    for operation in operations:\n        account_balance += operation\n    if account_balance < 0:\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "    output = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            output.append(numbers[i])\n        else:\n            output.append(delimeter)\n    return output\n\n"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1]!= '(':\n                stack.pop()\n            if not stack:\n                stack.append(char)\n    return len(stack)\n\n"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n"}
{"task_id": "HumanEval/9", "completion": "    rolling_max = [numbers[0]]\n    for number in numbers[1:]:\n        if number > rolling_max[-1]:\n            rolling_max.append(number)\n        else:\n            rolling_max[-1] = number\n    return rolling_max\n\n"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return ''\n    if len(string) == 1:\n        return string\n    if is_palindrome(string):\n        return string\n    return make_palindrome(string[1:]) + string[0]\n\n"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for char in string:\n        prefixes.append(char)\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "    return''.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))\n"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string)):\n        if substring in string[i:]:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    min_num = None\n    max_num = None\n    for num in numbers:\n        if num - min_diff < 0:\n            min_diff = num - min_num\n            min_num = num\n        elif num - min_diff == 0:\n            min_num = num\n        elif num - min_diff > 0:\n            max_num = num\n    return min_num, max_num\n"}
{"task_id": "HumanEval/21", "completion": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [x / (max_number - min_number) * 100 for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "    return [int(value) for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "    max_divisor = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n\n"}
{"task_id": "HumanEval/25", "completion": "    prime_list = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            prime_list.append(i)\n            n //= i\n    return prime_list\n"}
{"task_id": "HumanEval/26", "completion": "    # Create a dictionary to store the number of occurrences of each number.\n    number_occurrences = {}\n    for number in numbers:\n        number_occurrences[number] = number_occurrences.get(number, 0) + 1\n    \n    # Create a list to store the final result.\n    result = []\n    \n    # Iterate through the input list.\n    for number in numbers:\n        if number not in number_occurrences:\n            result.append(number)\n        else:\n            number_occurrences[number] -= 1\n    \n    # Return the result list.\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.upper() if char.islower() else char.lower() for char in string)\n\n"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if xs[0] == 0:\n        return xs[0]\n    if xs[0] == -1:\n        return -1\n    if xs[0] == 1:\n        return 1\n    if xs[0] == -2:\n        return -2\n    if xs[0] == 2:\n        return 2\n    if xs[0] == -3:\n        return -3\n    if xs[0] == 3:\n        return 3\n    if xs[0] == -4:\n        return -4\n    if xs[0] == 4:\n        return 4\n    if xs[0] == -5:\n        return -5\n    if xs[0] == 5:\n        return 5\n    if xs[0] == -6:\n        return -6\n    if xs[0] == 6:\n        return 6\n    if xs[0] == -7:\n        return -7\n    if xs"}
{"task_id": "HumanEval/33", "completion": "    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n    return l_\n"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 11 == 13:\n            count += 1\n        elif i % 7 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "    l' = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l.append(l[i])\n        else:\n            l.append(l[i] + 1)\n    return l\n\n"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "    if n == 0 or n == 1:\n        return n\n    fib_nums = [0, 1]\n    prime_fibs = [0, 1]\n    i = 2\n    while i <= n:\n        next_fib = fib_nums[i] + fib_nums[i - 1]\n        if next_fib % 2 == 0:\n            prime_fibs.append(next_fib)\n        else:\n            prime_fibs.append(0)\n        fib_nums.append(next_fib)\n        i += 1\n    return prime_fibs[n]\n\n"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    count = 0\n    for car in range(n):\n        if (car % 2 == 0):\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "    if x < 0:\n        return \"-\" + change_base(-x, base)\n    elif x == 0:\n        return \"0\"\n    else:\n        s = str(x)\n        total = 0\n        for i in range(len(s)):\n            if s[i] not in \"0123456789\":\n                return \"\"\n            else:\n                total = total * base ** i + int(s[i])\n        return str(total)\n"}
{"task_id": "HumanEval/45", "completion": "    return a * h / 2\n"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2-1])/2\n    else:\n        return l[len(l)//2]\n"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) + 5) % 26) + ord(\"a\") for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "    result = ''\n    for char in text:\n        if char not in 'aeiou':\n            result += char\n    return result\n"}
{"task_id": "HumanEval/52", "completion": "    min_value = l[0]\n    for value in l:\n        if value < min_value:\n            min_value = value\n    return min_value >= t\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "    return len(set(s0)) == len(s0) and len(set(s1)) == len(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/57", "completion": "    flag = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            flag = False\n            break\n    return flag\n"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1).intersection(set(l2)))\n"}
{"task_id": "HumanEval/59", "completion": "    largest_prime_factor = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            largest_prime_factor = i\n    return largest_prime_factor\n\n"}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return True\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "    return [0] + [xs[i] * (i + 1) for i in range(len(xs) - 1)] + [xs[-1]]\n"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for c in s:\n        if c in 'aeiou':\n            count += 1\n        elif c == 'y' and s[-1] == c:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n\n"}
{"task_id": "HumanEval/67", "completion": "    pass"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    even_value = arr[0]\n    smallest_even_value = arr[0]\n    smallest_even_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            even_value = arr[i]\n            smallest_even_value = even_value\n            smallest_even_index = i\n    return [smallest_even_value, smallest_even_index]\n\n"}
{"task_id": "HumanEval/69", "completion": "    if not lst:\n        return -1\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] >= i:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    if lst == []:\n        return result\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return lst\n    if len(lst) > 2:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        result.append(max(lst))\n        lst.remove(max(lst))\n        strange_sort_list(lst)\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        return a * b * c\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "    pass\n"}
{"task_id": "HumanEval/73", "completion": "    palindrome_found = False\n    palindrome_index = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[palindrome_index]:\n            palindrome_index += 1\n        else:\n            palindrome_found = True\n            palindrome_index = 0\n    if palindrome_found:\n        return palindrome_index\n    else:\n        return len(arr) - palindrome_index\n\n"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = 0\n    total_chars_lst2 = 0\n    for i in lst1:\n        total_chars_lst1 += len(i)\n    for i in lst2:\n        total_chars_lst2 += len(i)\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return True\n    elif n == 2:\n        return x == 1\n    elif n == x:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/77", "completion": "    return a == int(a**0.5)\n"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for digit in num:\n        if digit == '2':\n            count += 1\n        elif digit == '3':\n            count += 2\n        elif digit == '5':\n            count += 3\n        elif digit == '7':\n            count += 4\n        elif digit == 'B':\n            count += 11\n        elif digit == 'D':\n            count += 13\n    return count\n\n"}
{"task_id": "HumanEval/79", "completion": "    return \"\"\n"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    return []\n"}
{"task_id": "HumanEval/82", "completion": "    if string == '':\n        return False\n    if len(string) == 1:\n        return True\n    if string[0] == string[-1]:\n        return True\n    for i in range(2, len(string)):\n        if string[i] == string[i-1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10):\n        if n == 10**i:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/84", "completion": "    binary = bin(N)[2:]\n    total = 0\n    for digit in binary:\n        total += int(digit)\n    return total\n\n"}
{"task_id": "HumanEval/85", "completion": "    new_list = []\n    for i in lst:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n\n"}
{"task_id": "HumanEval/86", "completion": "    return''.join(sorted(s.split()))\n"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: x[0])\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "    new_array = []\n    for i in range(len(array)):\n        if i % 2 == 0:\n            new_array.append(array[i])\n        else:\n            new_array.append(array[i])\n    return new_array\n\n"}
{"task_id": "HumanEval/89", "completion": "    return ''\n"}
{"task_id": "HumanEval/90", "completion": "    lst.sort()\n    return lst[1]\n\n"}
{"task_id": "HumanEval/91", "completion": "    counter = 0\n    for word in S:\n        if word == \"I\":\n            counter += 1\n        elif word == \".\":\n            counter = 0\n        elif word == \"?\":\n            counter = 0\n        elif word == \"!\":\n            counter = 0\n    return counter\n\n"}
{"task_id": "HumanEval/92", "completion": "    return (x + y) == z\n\n"}
{"task_id": "HumanEval/93", "completion": "    pass\n\n"}
{"task_id": "HumanEval/94", "completion": "    primes = []\n    for num in lst:\n        if num > 1:\n            if num % 2 == 0:\n                continue\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    break\n            else:\n                primes.append(num)\n    return sum(map(int, str(primes)))\n\n"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    first_key = dict.keys()[0]\n    for key in dict:\n        if key.lower()!= first_key.lower():\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "    return []\n"}
{"task_id": "HumanEval/97", "completion": "    return a * b\n"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "    return int(round(value))\n"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        odd_stones = n // 2\n        even_stones = n // 2\n    else:\n        odd_stones = n // 2 + 1\n        even_stones = n // 2\n    return [odd_stones, even_stones]\n"}
{"task_id": "HumanEval/101", "completion": "    return s.split(\",\")\n"}
{"task_id": "HumanEval/102", "completion": "    max_num = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\n"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    sum = 0\n    count = 0\n    for i in range(n, m+1):\n        sum += i\n        count += 1\n    return int(sum/count)\n"}
{"task_id": "HumanEval/104", "completion": "    return list(filter(lambda x: x % 2 == 0, x))\n"}
{"task_id": "HumanEval/105", "completion": "    dict = {}\n    for i in range(1, 10):\n        dict[i] = str(i)\n    new_arr = []\n    for i in arr:\n        if i in dict:\n            new_arr.append(dict[i])\n        else:\n            new_arr.append(i)\n    return new_arr[::-1]\n"}
{"task_id": "HumanEval/106", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        return [1] + f(n - 1)\n"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    sorted = False\n    i = 0\n    while i < len(arr) and sorted == False:\n        if arr[i] < arr[i+1]:\n            sorted = True\n        else:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            sorted = False\n            i += 1\n    return sorted\n\n"}
{"task_id": "HumanEval/110", "completion": "    return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "    d = {}\n    for c in test:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    return d\n"}
{"task_id": "HumanEval/112", "completion": "    if len(s) == 0:\n        return s, True\n    if len(c) == 0:\n        return reverse_delete(s[1:], c)\n    if s[0] == c[0]:\n        return reverse_delete(s[1:], c[1:])\n    return reverse_delete(s[1:], c)\n"}
{"task_id": "HumanEval/113", "completion": "    odd_count = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j % 2 == 1:\n                count += 1\n        odd_count.append(count)\n    return odd_count\n"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    running_sum = 0\n    for num in nums:\n        running_sum += num\n        if running_sum < min_sum:\n            min_sum = running_sum\n        elif running_sum >= min_sum:\n            running_sum = num\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "    buckets = [0 for _ in range(capacity)]\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 1:\n                buckets[i] += 1\n            else:\n                buckets[i] -= 1\n    return buckets\n\n"}
{"task_id": "HumanEval/116", "completion": "    pass\n"}
{"task_id": "HumanEval/117", "completion": "    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words\n"}
{"task_id": "HumanEval/118", "completion": "    if not word:\n        return \"\"\n    vowels = \"aeiou\"\n    if word[0] in vowels:\n        return word[0]\n    else:\n        return get_closest_vowel(word[1:])\n\n"}
{"task_id": "HumanEval/119", "completion": "    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                return 'No'\n            if stack.pop()!= i:\n                return 'No'\n    return 'Yes'\n\n"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]\n\n"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 1:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if arr[i] < 10:\n            sum += arr[i]\n        else:\n            sum += arr[i] // 10 * 10\n    return sum\n\n"}
{"task_id": "HumanEval/123", "completion": "    odd_collatz = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            odd_collatz.append(i)\n    return odd_collatz\n"}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    date_list = date.split('-')\n    if len(date_list)!= 3:\n        return False\n    try:\n        int(date_list[2])\n    except ValueError:\n        return False\n    try:\n        int(date_list[1])\n    except ValueError:\n        return False\n    try:\n        int(date_list[0])\n    except ValueError:\n        return False\n    if date_list[0] < 1 or date_list[0] > 12:\n        return False\n    if date_list[1] < 1 or date_list[1] > 31:\n        return False\n    if date_list[2] < 1 or date_list[2] > 30:\n        return False\n    if date_list[0] == 2 and date_list[1] == 29:\n        return False\n    if date_list[0] == 2 and date_list[1] == 28 and date_list[2] == 29:\n        return False\n    if date_list[0] == 2 and date_list[1] == 28 and date_list"}
{"task_id": "HumanEval/125", "completion": "    return txt.split()\n"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    prev = lst[0]\n    for i in lst[1:]:\n        if i < prev:\n            return False\n        prev = i\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    result = 0\n    for i in arr:\n        if i == 0:\n            return None\n        if i > 0:\n            result += i\n        else:\n            result *= -1\n    return result\n\n"}
{"task_id": "HumanEval/129", "completion": "    \n    # Step 1. Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set of all possible paths of length k.\n    # Initialize a set"}
{"task_id": "HumanEval/130", "completion": "    if n <= 2:\n        return [1, 3, 2]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1) for _ in range(3)]\n\n"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if digit % 2 == 0:\n            product *= 0\n        else:\n            product *= int(digit)\n    return product\n\n"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "    sum = 0\n    for i in lst:\n        sum += i**2\n    return round(sum)\n"}
{"task_id": "HumanEval/134", "completion": "    last_char = None\n    for char in txt:\n        if char == \" \":\n            last_char = None\n        elif char.isalpha():\n            last_char = char\n    if last_char is None:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "HumanEval/135", "completion": "    if len(arr) == 1:\n        return 0\n    else:\n        return max(can_arrange(arr[1:]) + 1, can_arrange(arr[:-1]))\n\n"}
{"task_id": "HumanEval/136", "completion": "    if lst == []:\n        return (None, None)\n    elif lst[0] < 0:\n        return (None, lst[0])\n    elif lst[0] > 0:\n        return (lst[0], None)\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] < lst[0]:\n                lst[0] = lst[i]\n            elif lst[i] > lst[0]:\n                lst[0] = lst[i]\n        return (lst[0], lst[0])\n\n"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        return b if b > a else a\n    elif isinstance(a, float) and isinstance(b, float):\n        return b if b > a else a\n    elif isinstance(a, str) and isinstance(b, str):\n        return b if b > a else a\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 == 0:\n        even_sum = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                even_sum += i\n        if even_sum == n:\n            return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * special_factorial(n-1) * special_factorial(n-2)\n"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\")\n"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0].isalpha():\n        return 'No'\n    if file_name[-1] not in ['.txt', '.exe', '.dll']:\n        return 'No'\n    return 'Yes'\n\n"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += i ** 3\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    words = sentence.split()\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    new_words = []\n    for word in words:\n        if len(word) == 1:\n            new_words.append(word)\n        else:\n            for prime_number in prime_numbers:\n                if len(word) == prime_number:\n                    new_words.append(word)\n                    break\n\n    return \" \".join(new_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "    return False\n"}
{"task_id": "HumanEval/145", "completion": "    d = {}\n    for num in nums:\n        sum_of_digits = sum(str(num).digits())\n        if sum_of_digits in d:\n            d[sum_of_digits].append(num)\n        else:\n            d[sum_of_digits] = [num]\n    d_sorted = sorted(d.items(), key=lambda x: x[0])\n    return [d_sorted[i][1][0] for i in range(len(d_sorted))]\n"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num % 100!= 10:\n            count += 1\n    return count\n\nnums = [15, -73, 14, -15]"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and i + j + k % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "    # Step 1.\n    orbit1 = orbit(planet1)\n    orbit2 = orbit(planet2)\n    # Step 2.\n    if orbit1 and orbit2:\n        # Step 3.\n        orbit1_orbits = orbit1.keys()\n        orbit2_orbits = orbit2.keys()\n        # Step 4.\n        orbits = orbit1_orbits + orbit2_orbits\n        return sorted(orbits, key=lambda x: proximity(x, orbit1, orbit2))\n    else:\n        return ()\n"}
{"task_id": "HumanEval/149", "completion": "    pass\n"}
{"task_id": "HumanEval/150", "completion": "    result = y\n    for i in range(2, n):\n        if n % i == 0:\n            result = x\n    return result\n"}
{"task_id": "HumanEval/151", "completion": "    sum = 0\n    for num in lst:\n        if num < 0 or not isinstance(num, int):\n            continue\n        if num % 2 == 0:\n            sum += num**2\n    return sum\n\n"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = class_name\n    for extension in extensions:\n        if extension.isupper():\n            strongest_extension += extension\n        elif extension.islower():\n            strongest_extension += extension.lower()\n    return strongest_extension\n\n"}
{"task_id": "HumanEval/154", "completion": "    if len(a)!= len(b):\n        return False\n    set_a = set(a)\n    set_b = set(b)\n    if set_a == set_b:\n        return True\n    for i in set_b:\n        if i in set_a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    for i in range(1, num + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n"}
{"task_id": "HumanEval/156", "completion": "    roman_numeral = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman_numeral_str = ''\n    while number > 0:\n        roman_numeral_str = roman_numeral[number] + roman_numeral_str\n        number -= roman_numeral[number]\n    return roman_numeral_str.lower()\n\n"}
{"task_id": "HumanEval/157", "completion": "    if a + b > c or b + c > a or c + a > b:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/158", "completion": "    max_word = None\n    for word in words:\n        if len(word) > len(max_word):\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "    if number < need:\n        return [0, number]\n    else:\n        return [number - need, remaining]\n"}
{"task_id": "HumanEval/160", "completion": "    result = ''\n    for i in operator:\n        if i == '+':\n            result += str(operand[0])\n        elif i == '-':\n            result += str(operand[0])\n        elif i == '*':\n            result += str(operand[0]) + str(operand[1])\n        elif i == '/':\n            result += str(operand[0]) + str(operand[1])\n        elif i == '//':\n            result += str(operand[0]) + str(operand[1])\n        elif i == '**':\n            result += str(operand[0]) + str(operand[1])\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for i in s:\n        if i.isalpha():\n            result += i.upper()\n        else:\n            result += i\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "    return [i for i in range(a, b+1) if i % 2 == 0]\n"}
