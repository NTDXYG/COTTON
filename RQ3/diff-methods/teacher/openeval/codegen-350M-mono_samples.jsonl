{"task_id": "Open/0", "completion": "    sum = 0\n    for i in range(N) :\n        sum += arr[i]\n    for i in range(N-K+1) :\n        sum += arr[i]\n    count = sum\n    for i in range(N-K+1) :\n        if sum + arr[i] > sum :\n            count -= 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    min_val = arr[0]\n    min_freq = 0\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_freq = 1\n        elif arr[i] == min_val:\n            min_freq += 1\n    return min_freq\n"}
{"task_id": "Open/2", "completion": "    # Step 1\n    # Convert n to binary representation.\n    nBits = bin(n)[2:]\n    # Check if all bits within the range from l to r are set to 1.\n    for i in range(l, r+1) :\n        if (nBits[i] == '1') :\n            return \"Yes\"\n    # If all bits within the range are set to 1, return \"No\".\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] + A[j]) % K == 0:\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    sum1 = 0\n    for i in a :\n        sum1 += i\n    if sum1 % 2!= 0 :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/5", "completion": "    # Your code here\n    if x % 2 == 0 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in range(len(vec)) :\n        if vec[i] > 0 :\n            output.append(i)\n    return output\n"}
{"task_id": "Open/7", "completion": "    max_len = 0\n    curr_len = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == arr[j] and arr[i] in set(arr[i+1:j+1]):\n                curr_len += 1\n            else:\n                if curr_len > max_len:\n                    max_len = curr_len\n                curr_len = 1\n    return max_len\n"}
{"task_id": "Open/8", "completion": "    prime_factors = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                prime_factors.append(a[i] // a[j])\n    return prime_factors\n"}
{"task_id": "Open/9", "completion": "    arr.sort()\n    diff = arr[k-1] - arr[0]\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n    return diff\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    \n    # Iterate through the elements in list A\n    for element in A :\n        # Compare each element from A with the corresponding element from B.\n        if element in B :\n            total_time += 1\n            # Move the element from B to the front of the list and the element from A to the end of the list.\n            B.remove(element)\n            A.append(element)\n        # If they are equal, increment total time by 1.\n        elif element in B :\n            total_time += 1\n            # Move the element from B to the front of the list and the element from A to the end of the list.\n            B.remove(element)\n            A.append(element)\n        # If they are not equal, move the element from B to the front of the list and the element from A to the end of the list.\n        else :\n            B.append(element)\n            A.append(element)\n    \n    # Return total time\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range ( size ) :\n        if ( array [ i ] % 2 == 0 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    counter = 0\n    for i in range(len(s)):\n        if len(set(s[i:i+k])) <= k:\n            counter += 1\n    return counter\n"}
{"task_id": "Open/13", "completion": "    # Step 1\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2\n    # current number = 2"}
{"task_id": "Open/14", "completion": "    # Write your code here\n    if n % 4 == 0:\n        return n\n    elif n % 4 == 1:\n        return 1\n    elif n % 4 == 2:\n        return n + 1\n    elif n % 4 == 3:\n        return 0\n    else:\n        return ''\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2, n-1)\n    for i in range(t) :\n        a = pow(a, n-1, n)\n    if a == 1 :\n        return 1\n    elif a == n-1 :\n        return -1\n    else :\n        return -1\n"}
{"task_id": "Open/16", "completion": "    # Step 1\n    for i in range(len(s1)):\n        if s1[i] == '0' and s2[i] == '1':\n            return True\n        elif s1[i] == '1' and s2[i] == '0':\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z':\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0':\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z':\n            return True\n        elif s1[i] == '1' and s2[i] == '0':\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z':\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0':\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z':\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n    return count\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1) :\n        if n%i == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    else :\n        return x * product(x, y-1)\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        elif i % 4 == 1 :\n            count1 += 1\n        elif i % 4 == 2 :\n            count2 += 1\n        elif i % 4 == 3 :\n            count3 += 1\n    if count0 % 2 == 0 :\n        return 1\n    elif count1 % 2 == 0 :\n        return 2\n    elif count2 % 2 == 0 :\n        return 2\n    elif count3 % 2 == 0 :\n        return 2\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            curr_len += 1\n        else:\n            curr_len = 1\n        max_len = max(max_len, curr_len)\n    return max_len\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    if sum < 0 :\n        return 0\n    if arr[i] == 0 :\n        return 0\n    else :\n        return subsetSum(arr, n, i + 1, sum - arr[i], count) + subsetSum(arr, n, i + 1, sum, count)\n"}
{"task_id": "Open/24", "completion": "    # Step 1\n    center_hexadecagonal_num = (16 * n ** 2) - (16 * n) + 6\n    \n    # Step 2\n    return center_hexadecagonal_num\n"}
{"task_id": "Open/25", "completion": "    sum_squares = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_squares += i**2\n        sum_numbers += i\n    return sum_squares + sum_numbers + 1\n"}
{"task_id": "Open/26", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum = 0\n            for j in range(1, i+1):\n                if i % j == 0:\n                    sum += j\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    \n    # Step 1\n    diff = b - a\n    \n    # Step 2\n    percent_change = diff / a * 100\n    \n    # Step 3\n    return percent_change\n"}
{"task_id": "Open/30", "completion": "    sum_squares = 0\n    for i in range(1, n+1) :\n        sum_squares += i ** 2\n    return sum_squares / n\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    \n    # Step 1\n    n = n ** 3\n    \n    # Step 2\n    return n\n"}
{"task_id": "Open/33", "completion": "    if n == 0 :\n        return 1\n    else :\n        return findTerm(n-1) + findTerm(n-2)\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in range(len(a)):\n        product = 1\n        for j in range(i,len(a)):\n            product *= a[j]\n            if product < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1, n+1):\n        digit = str(i)\n        if d in digit:\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    # Step 1\n    # Create a set of the remaining positive values\n    remainingPositive = set(arr)\n    # Step 2\n    for i in range(n):\n        if arr[i] < 0:\n            remainingPositive.remove(arr[i])\n    # Step 3\n    for i in range(n):\n        if arr[i] > 0:\n            arr[i] = arr[i] - 1\n    # Step 4\n    return next(i for i in remainingPositive if i > 0)\n"}
{"task_id": "Open/37", "completion": "    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 2\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    total_area = 0\n    side = 1\n    while side <= min(l, b):\n        total_area += side * side\n        side += 1\n    return total_area\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    count = 0\n    for i in range(0, n) :\n        if arr[i] == 0 :\n            count += 1\n        else :\n            if count > max_zeros :\n                max_zeros = count\n            count = 0\n    return max_zeros\n"}
{"task_id": "Open/41", "completion": "    max_len = 0\n    curr_len = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n    return max_len\n"}
{"task_id": "Open/42", "completion": "    if k == 1 :\n        return a[0]\n    if k == 2 :\n        return max(a[0], a[-1])\n    if k == 3 :\n        return max(a[0], a[-1], a[-2])\n    if k == 4 :\n        return max(a[0], a[-1], a[-2], a[-3])\n    if k == 5 :\n        return max(a[0], a[-1], a[-2], a[-3], a[-4])\n    if k == 6 :\n        return max(a[0], a[-1], a[-2], a[-3], a[-4], a[-5])\n    if k == 7 :\n        return max(a[0], a[-1], a[-2], a[-3], a[-4], a[-5], a[-6])\n    if k == 8 :\n        return max(a[0], a[-1], a[-2], a[-3], a[-4], a[-5], a"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            product = array[i] * array[j]\n            if product <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    # Step 1\n    arr = sorted(arr)\n    # Step 2\n    sum = 0\n    # Step 3\n    for i in range(n):\n        sum += abs(arr[i] - i)\n    # Step 4\n    return sum\n"}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        for j in range(len(array)):\n            diff = array[i] - array[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    if (a == b) :\n        if (a == c) :\n            return True\n        else :\n            return False\n    else :\n        if (a == c) :\n            return True\n        else :\n            return False\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a) :\n        if (a ^ i) == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_val = 0\n    for i in range(L,R+1) :\n        max_val = max(max_val, i&(i-1))\n    return max_val\n"}
{"task_id": "Open/50", "completion": "    smallest = -1\n    for i in range(n):\n        if a[i] % a[i] == 0:\n            smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    result = 0\n    for i in range(n):\n        for j in range(n):\n            result = result ^ arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(N) :\n        count += (i & 1)\n    return count\n"}
{"task_id": "Open/54", "completion": "    # Step 1. Calculate the sum of the array elements.\n    sum = 0\n    for i in range(n) :\n        sum += a[i]\n    # Step 2. Add the length of the array minus 1 to the sum.\n    sum -= n - 1\n    # Step 3. Check if the sum is equal to k.\n    if sum == k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/55", "completion": "    # Step 1. Convert the integer to binary representation.\n    binary = bin(n)\n    # Step 2. Check if the first and last bits are set to 1.\n    if binary[0] == '1' and binary[-1] == '1':\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    current_partition = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_partition += 1\n        else:\n            max_partitions = max(max_partitions, current_partition)\n            current_partition = 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = 0\n    var2 = 0\n    for i in range(2, N+1) :\n        var1 = var1 + arr[i-2]\n        var2 = var2 + arr[i-1]\n        result = result + var1 * var2 / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "    # Step 1\n    # Iterate through the list of ranges.\n    # For each range, reverse the elements within that range in the array.\n    # Return the value at the given index in the array.\n    #\n    # Step 2\n    # Repeat step 1 for the specified number of reversals.\n    # Return the value at the given index in the array.\n    #\n    # Step 3\n    # Return the value at the given index in the array.\n    \n    # Create a variable to store the value at the given index.\n    # Create a variable to store the value at the given index.\n    # Create a variable to store the value at the given index.\n    # Create a variable to store the value at the given index.\n    # Create a variable to store the value at the given index.\n    # Create a variable to store the value at the given index.\n    # Create a variable to store the value at the given index.\n    # Create a variable to store the value at the given index.\n    # Create a variable to store the value at the given index.\n    # Create a variable to store the value at the given index."}
{"task_id": "Open/60", "completion": "    if n == 0 :\n        return False\n    if n == 1 :\n        return True\n    if n == 2 :\n        return True\n    if n == 3 :\n        return True\n    if n == 4 :\n        return True\n    if n == 5 :\n        return True\n    if n == 6 :\n        return True\n    if n == 7 :\n        return True\n    if n == 8 :\n        return True\n    if n == 9 :\n        return True\n    if n == 10 :\n        return True\n    if n == 11 :\n        return True\n    if n == 12 :\n        return True\n    if n == 13 :\n        return True\n    if n == 14 :\n        return True\n    if n == 15 :\n        return True\n    if n == 16 :\n        return True\n    if n == 17 :\n        return True\n    if n == 18 :\n        return True\n    if n == 19 :\n        return True\n    if n == 20 :\n        return True\n    if n == 21 :\n        return True\n    if n == 22 :\n        return True\n    if n"}
{"task_id": "Open/61", "completion": "    if a == '' or b == '':\n        return -1\n    if len(a) > len(b):\n        return -1\n    count = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/62", "completion": "    \n    modified_str = \"\"\n    \n    for i in range(len(str) - 1) :\n        if str[i] > str[i + 1] :\n            modified_str += str[i]\n            modified_str += str[i + 1]\n            modified_str += str[i + 2]\n            modified_str += str[i + 3]\n            modified_str += str[i + 4]\n            modified_str += str[i + 5]\n            modified_str += str[i + 6]\n            modified_str += str[i + 7]\n            modified_str += str[i + 8]\n            modified_str += str[i + 9]\n            modified_str += str[i + 10]\n            modified_str += str[i + 11]\n            modified_str += str[i + 12]\n            modified_str += str[i + 13]\n            modified_str += str[i + 14]\n            modified_str += str[i + 15]\n            modified_str += str[i + 16]\n            modified_str += str[i + 17]\n            "}
{"task_id": "Open/63", "completion": "    min_value = math.inf\n    for i in range(n):\n        min_value = min(min_value, arr[i] + math.log(arr[i]))\n    return min_value\n"}
{"task_id": "Open/64", "completion": "    if len(s) == 0:\n        return \"-1\"\n    \n    if s[0] == '1':\n        return s[1:]\n    \n    max_len = 0\n    start = 0\n    end = 0\n    \n    for i in range(len(s)):\n        if s[i] == '1':\n            end = i + 1\n        else:\n            start = i + 1\n            \n        if end - start + 1 > max_len:\n            max_len = end - start + 1\n            \n    return s[start:end + 1]\n"}
{"task_id": "Open/65", "completion": "    # Step 1\n    count = {}\n    for i in range(n):\n        count[a[i]] = count.get(a[i], 0) + 1\n    \n    # Step 2\n    for i in range(n):\n        if count[a[i]] > k:\n            count[a[i]] = count[a[i]] - k\n    \n    # Step 3\n    for i in range(n):\n        a[i] = a[i] - min(count.values())\n    \n    # Step 4\n    return len(a)\n"}
{"task_id": "Open/66", "completion": "    if n < k :\n        return getMaxMedian( arr, n, k )\n    else :\n        arr.sort()\n        return ( arr[n//2] + arr[n//2 - k] ) / 2\n"}
{"task_id": "Open/67", "completion": "    step_count = 0\n    for i in range(len(a)):\n        if a[i] == 1:\n            step_count += abs(a[i] - -1)\n        elif a[i] == -1:\n            step_count += abs(a[i] - 1)\n        elif a[i] == 0:\n            step_count += 2\n    return step_count\n"}
{"task_id": "Open/68", "completion": "    if n == 1:\n        return 0\n    else:\n        v = []\n        v.append(n)\n        n = n - 1\n        while n > 0:\n            v.append(n % 5)\n            n = n // 5\n        v.reverse()\n        result = 0\n        for i in range(len(v)):\n            result = result + v[i] * 10\n        return result\n"}
{"task_id": "Open/69", "completion": "    # Step 1\n    # Convert the integer to binary representation.\n    # Iterate through the binary representation.\n    # Check if a set bit is encountered.\n    # If the next bit is not set, return False.\n    # If the loop completes without returning False, return True.\n    \n    # Step 2\n    # Convert the integer to binary representation.\n    # Iterate through the binary representation.\n    # Check if a set bit is encountered.\n    # If the next bit is not set, return False.\n    # If the loop completes without returning False, return True.\n    \n    # Step 3\n    # If the loop completes without returning False, return True.\n    \n    # Step 4\n    # If the loop completes without returning False, return True.\n    \n    # Step 5\n    # If the loop completes without returning False, return True.\n    \n    # Step 6\n    # If the loop completes without returning False, return True.\n    \n    # Step 7\n    # If the loop completes without returning False, return True.\n    \n    # Step 8\n    # If the loop completes without returning False, return True.\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    elif x == n :\n        return n\n    elif x < n :\n        return n - (x - n)\n    else :\n        return n + (x - n)\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(n):\n        sum += i + 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/73", "completion": "    count_dict = {}\n    max_value = -1\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n    for i in count_dict:\n        if count_dict[i] > max_value:\n            max_value = count_dict[i]\n    return max_value\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i]**2 > a[j]**2:\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    # Step 1\n    binary = bin(n)\n    binary = binary[2:]\n    binary = binary[::-1]\n    # Step 2\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            binary[i] = '0'\n        else:\n            binary[i] = '1'\n    # Step 3\n    return int(binary, 2)\n"}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range(1, n):\n        if A[i-1] == 1:\n            A[i+1] = 0\n            changes += 1\n        if A[i+1] == 1:\n            A[i] = 0\n            changes += 1\n    return changes\n"}
{"task_id": "Open/77", "completion": "    # Step 1. Multiply the radian value by 180.\n    degrees = radian * 180\n    # Step 2. Divide the result by pi.\n    degrees = degrees / ( 2 * math.pi )\n    # Step 3. Return the degree value.\n    return degrees\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1, n/2 + 1):\n        sum += (n/2) * (2*a + (n-1)*d)\n    return sum\n"}
{"task_id": "Open/80", "completion": "    power = 1\n    while n % 2 == 0:\n        n = n / 2\n        power += 1\n    return power\n"}
{"task_id": "Open/81", "completion": "    count = 0\n    for move in moves :\n        row_new = row + move[0]\n        column_new = column + move[1]\n        if (0 <= row_new < 8) and (0 <= column_new < 8):\n            count += 1\n    return count\n"}
{"task_id": "Open/82", "completion": "    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n"}
{"task_id": "Open/83", "completion": "    # Create a list of characters\n    char_list = list(s)\n    # Create a list of the last occurrence of each character\n    last_occurrence = [char_list.index(char) for char in char_list]\n    # Sort the list\n    char_list.sort()\n    # Compare each character with its corresponding character in the sorted list\n    for i in range(len(char_list)):\n        if char_list[i]!= char_list[last_occurrence[i]]:\n            char_list[i], char_list[last_occurrence[i]] = char_list[last_occurrence[i]], char_list[i]\n    # Return the modified string\n    return ''.join(char_list)\n"}
{"task_id": "Open/84", "completion": "    \n    # Step 1\n    numbers = []\n    for i in range ( l, r + 1 ) :\n        numbers.append ( i )\n    \n    # Step 2\n    for i in range ( 0, len ( numbers ) ) :\n        if ( numbers [ i ] % 2 ) == 1 :\n            numbers [ i ] = numbers [ i ] + 1\n    \n    # Step 3\n    sum = 0\n    for i in range ( len ( numbers ) ) :\n        sum += numbers [ i ]\n    \n    # Step 4\n    return sum\n"}
{"task_id": "Open/85", "completion": "    x = min(x, y)\n    y = min(y, x)\n    if x % y == 0 :\n        return y\n    else :\n        return getHCF(x, y)\n"}
{"task_id": "Open/86", "completion": "    # Step 1\n    # Initialize a list with A and B as the first two elements.\n    # Iterate N-2 times.\n    # Compute the sum of the last two elements in the list.\n    # Append the sum to the list.\n    # Return the Nth element in the list.\n    \n    # Step 2\n    # Initialize a list with A and B as the first two elements.\n    # Iterate N-2 times.\n    # Compute the sum of the last two elements in the list.\n    # Append the sum to the list.\n    # Return the Nth element in the list.\n    \n    # Step 3\n    # Initialize a list with A and B as the first two elements.\n    # Iterate N-2 times.\n    # Compute the sum of the last two elements in the list.\n    # Append the sum to the list.\n    # Return the Nth element in the list.\n    \n    # Step 4\n    # Initialize a list with A and B as the first two elements.\n    # Iterate N-2 times.\n    # Compute the"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if substr == str[i:i+len(substr)]:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    \n    # Step 1: Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n    r = r / 12\n    \n    # Step 2: Convert the loan tenure from years to months by multiplying it by 12.\n    t = t / 12\n    \n    # Step 3: Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = p * r * (1 + r) ** t\n    \n    # Step 4: Return the calculated EMI.\n    return emi\n"}
{"task_id": "Open/89", "completion": "    \n    # Step 1\n    counter = 0\n    for i in range(A):\n        for j in range(B):\n            for k in range(C):\n                if i * k > j * j:\n                    counter += 1\n    \n    # Step 2\n    for i in range(A):\n        for j in range(B):\n            for k in range(C):\n                if i * k > j * j:\n                    counter += 1\n    \n    # Step 3\n    return counter\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l, r+1):\n        if i % 10 == 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    \n    d = {}\n    max_len = 0\n    \n    for num in arr:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n        \n        if len(d) > max_len:\n            max_len = len(d)\n    \n    return max_len\n"}
{"task_id": "Open/92", "completion": "    max_len = 0\n    max_substring = \"\"\n    for i in range(len(str)):\n        if str[i].isalnum():\n            if len(str[i]) % 2 == 0:\n                if i + 1 < len(str) and str[i + 1].isalnum():\n                    if str[i + 1] not in \"abcdefghijklmnopqrstuvwxyz\":\n                        if len(str[i + 1]) > max_len:\n                            max_len = len(str[i + 1])\n                            max_substring = str[i + 1]\n    if max_len == 0:\n        return \"-1\"\n    else:\n        return max_substring\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1 :\n        if n % 2 == 0 :\n            count += 1\n            n = n / 2\n        else :\n            n = n * 3 + 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    # Step 1\n    # Create a string of length n consisting of all 'a' characters.\n    # Iterate through the string in reverse order.\n    # Subtract the current index from k.\n    # If k >= 0, check if k >= 26.\n        # If it is, replace the character at the current index with 'z' and subtract 26 from k.\n        # Otherwise, calculate the ASCII value of the character to be replaced by adding k to 97 and subtract 1.\n        # Replace the character at the current index with the corresponding lowercase letter and subtract the difference between the ASCII values of the replaced character and 'a' from k.\n        # Add the current index to k.\n    # Step 2\n    # Iterate through the string in reverse order.\n    # Subtract the current index from k.\n    # If k >= 0, check if k >= 26.\n        # If it is, replace the character at the current index with 'z' and subtract 26 from k.\n        # Otherwise, calculate the ASCII value of the character to be replaced by adding k to 97 and subtract 1.\n        # Replace the character at the current index with the corresponding"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    totalSum = 0\n    for i in range(n):\n        totalSum += arr[i]\n    if totalSum == totalSum / 3:\n        return 1\n    else:\n        return 0\n"}
{"task_id": "Open/97", "completion": "    # TODO: Write your code here\n    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "    \n    # Step 1\n    # Convert the integer to a string\n    # Return the length of the string\n    \n    # Step 2\n    # Return the length of the string\n    \n    # Step 3\n    # Return the length of the string\n    \n    # Step 4\n    # Return the length of the string\n    \n    # Step 5\n    # Return the length of the string\n    \n    # Step 6\n    # Return the length of the string\n    \n    # Step 7\n    # Return the length of the string\n    \n    # Step 8\n    # Return the length of the string\n    \n    # Step 9\n    # Return the length of the string\n    \n    # Step 10\n    # Return the length of the string\n    \n    # Step 11\n    # Return the length of the string\n    \n    # Step 12\n    # Return the length of the string\n    \n    # Step 13\n    # Return the length of the string\n    \n    # Step 14\n    # Return the length of the string\n    \n    # Step 15\n    # Return the length of the string\n    \n    # Step 16\n"}
{"task_id": "Open/99", "completion": "    if a == b == c == k :\n        return True\n    elif a == b or b == c or c == k :\n        return False\n    elif a % k == b % k == c % k == 0 :\n        return True\n    elif a % k == b % k == c % k == 1 :\n        return False\n    elif a % k == b % k == c % k == 2 :\n        return False\n    elif a % k == b % k == c % k == 3 :\n        return False\n    elif a % k == b % k == c % k == 4 :\n        return False\n    elif a % k == b % k == c % k == 5 :\n        return False\n    elif a % k == b % k == c % k == 6 :\n        return False\n    elif a % k == b % k == c % k == 7 :\n        return False\n    else :\n        return False\n"}
{"task_id": "Open/100", "completion": "    x = bin(x)[2:]\n    y = bin(y)[2:]\n    \n    while len(y) < len(x):\n        x = '0' + x\n    \n    for i in range(len(x)):\n        if x[i] == y[i]:\n            continue\n        else:\n            return False\n    \n    return True\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i + 1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    minRemovals = 0\n    for i in range(n):\n        minRemovals += abs(arr[i] - arr[i-1])\n    return minRemovals\n"}
{"task_id": "Open/104", "completion": "    max_bits = 0\n    while left > 0 :\n        max_bits += 1\n        left >>= 1\n    while right > 0 :\n        max_bits += 1\n        right >>= 1\n    return max_bits\n"}
{"task_id": "Open/105", "completion": "    power = 1\n    while power <= n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/106", "completion": "    sum_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_divisors += i\n    if sum_divisors == n:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/107", "completion": "    # Step 1\n    N = int(N)\n    # Step 2\n    N = N // 100\n    # Step 3\n    N = N * 400\n    # Step 4\n    N = N % 7\n    # Step 5\n    N = N * 2\n    # Step 6\n    N = N % 7\n    # Step 7\n    N = N * 7\n    # Step 8\n    N = N % 7\n    # Step 9\n    N = N * 2\n    # Step 10\n    N = N % 7\n    # Step 11\n    N = N * 7\n    # Step 12\n    N = N % 7\n    # Step 13\n    N = N * 2\n    # Step 14\n    N = N % 7\n    # Step 15\n    N = N * 7\n    # Step 16\n    N = N % 7\n    # Step 17\n    N = N * 2\n    # Step 18\n    N = N % 7\n    # Step 19\n    N = N * 7\n    # Step 20\n    N = N % 7\n    # Step 21\n    N = N * 2\n    # Step"}
{"task_id": "Open/108", "completion": "    if a < 0:\n        return -1\n    elif a == 0:\n        return 0\n    else:\n        return (a**2) + (a**4)\n"}
{"task_id": "Open/109", "completion": "    count = 0\n    for i in range(len(n)) :\n        if n[i] == d :\n            count += 1\n    return count\n"}
{"task_id": "Open/110", "completion": "    # Step 1\n    # Convert the integer to a string.\n    # Iterate through each digit in the string.\n    # Check if the digit appears more than once in the string.\n    # If so, return False.\n    # Step 2\n    # Iterate through each digit in the string.\n    # Check if the digit appears more than once in the string.\n    # If so, return False.\n    # Step 3\n    # Return True if the number is valid and False otherwise.\n    \n    # Step 1\n    # Convert the integer to a string.\n    # Iterate through each digit in the string.\n    # Check if the digit appears more than once in the string.\n    # If so, return False.\n    # Step 2\n    # Iterate through each digit in the string.\n    # Check if the digit appears more than once in the string.\n    # If so, return False.\n    # Step 3\n    # Return True if the number is valid and False otherwise.\n    \n    # Step 2\n    # Convert the integer to a string.\n    # Iterate through each digit in the string.\n    # Check"}
{"task_id": "Open/111", "completion": "    #Step 1\n    for i in range ( len ( a ) ) :\n        a[i] = a[i] / 5\n        a[i] = a[i] / 3\n    \n    #Step 2\n    for i in range ( len ( a ) ) :\n        if a[i] % 5!= 0 or a[i] % 3!= 0 :\n            return False\n    \n    #Step 3\n    for i in range ( len ( a ) ) :\n        if a[i] % 5 == 0 and a[i] % 3 == 0 :\n            return True\n    \n    return False\n"}
{"task_id": "Open/112", "completion": "    # Step 1\n    # Initialize an array with length n+1 and all elements set to 0\n    array = [0] * (n+1)\n    # Set the first element of the array to 4 and the second element to 7\n    array[0] = 4\n    # Iterate through the array starting from index 3 to n+1\n    for i in range(3, n+1):\n        # If the index is odd, set the value at index i to the value at index i//2 multiplied by 10 and added to 4\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 4\n        # If the index is even, set the value at index i to the value at index (i//2)-1 multiplied by 10 and added to 7\n        else:\n            array[i] = array[(i//2)-1] * 10 + 7\n    # Return the value at index n of the array\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "    # Step 1\n    # Initialize an array with length n+1 and all elements set to 0\n    array = [0] * (n+1)\n    # Set the first element of the array to 3 and the second element to 5\n    array[0] = 3\n    # Iterate through the array from index 3 to n+1\n    for i in range(3, n+1):\n        # If the index is odd, set the element at index i to the element at index i//2 multiplied by 10 and added with 3\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 3\n        # If the index is even, set the element at index i to the element at index (i//2)-1 multiplied by 10 and added with 5\n        else:\n            array[i] = array[(i//2)-1] * 10 + 5\n    # Return the element at index n\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "    pass\n"}
{"task_id": "Open/115", "completion": "    # Step 1\n    # Initialize an empty string to store the concatenated elements.\n    # Iterate through the array of integers.\n    # Convert each integer to a string and concatenate it to the string from step 1.\n    # Check if the integer is divisible by 11.\n    # If yes, return True.\n    # If no, return False.\n    #\n    # Step 2\n    # Initialize an empty string to store the concatenated elements.\n    # Iterate through the array of integers.\n    # Convert each integer to a string and concatenate it to the string from step 1.\n    # Check if the integer is divisible by 11.\n    # If yes, return True.\n    # If no, return False.\n    #\n    # Step 3\n    # Initialize an empty string to store the concatenated elements.\n    # Iterate through the array of integers.\n    # Convert each integer to a string and concatenate it to the string from step 1.\n    # Check if the integer is divisible by 11.\n    # If yes, return True.\n    # If no, return False"}
{"task_id": "Open/116", "completion": "    if l < 0 or b < 0 or h < 0:\n        return -1\n    else:\n        return l * b * h\n"}
{"task_id": "Open/117", "completion": "    \n    # Step 1. Split the input string into a list of words.\n    words = string.split()\n    \n    # Step 2. Iterate through each word in the list.\n    for word in words:\n        # If the word contains non-alphabetic characters, ignore it.\n        if not word.isalpha():\n            continue\n        # Otherwise, capitalize the first and last letter of the word.\n        word = word.capitalize()\n        # Join the modified words back into a string and return it.\n        return''.join(word)\n    \n    # Step 3. Return an empty string.\n    return ''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/118", "completion": "    # Step 1\n    # Calculate the value inside the square root: (8 * p + 1).\n    # Step 2\n    # Take the ceiling of the square root.\n    # Step 3\n    # Subtract 1 from the result.\n    # Step 4\n    # Divide the result by 2.\n    # Step 5\n    # Return the final result as the bucket number.\n    \n    # Step 2\n    # Calculate the value inside the square root: (8 * p + 1).\n    # Step 3\n    # Take the ceiling of the square root.\n    # Step 4\n    # Subtract 1 from the result.\n    # Step 5\n    # Divide the result by 2.\n    # Step 6\n    # Return the final result as the bucket number.\n    \n    # Step 3\n    # Calculate the value inside the square root: (8 * p + 1).\n    # Step 4\n    # Take the ceiling of the square root.\n    # Step 5\n    # Subtract 1 from the result.\n    # Step 6\n    # Divide the result by 2.\n    # Step 7\n    # Return"}
{"task_id": "Open/119", "completion": "    # TODO: Write your code here\n    return len(set(arr)) == len(arr)\n"}
{"task_id": "Open/120", "completion": "    # Step 1\n    # Initialize a set to store distinct two-character codes.\n    codeSet = set()\n    \n    # Iterate through the string.\n    for i in range(len(string)):\n        # Check if the current index + 1 is within the string length.\n        if i + 1 < len(string):\n            # Add the two-character code formed by the current character and the next character to the set.\n            codeSet.add(string[i] + string[i + 1])\n    \n    # Return the length of the set.\n    return len(codeSet)\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    elif lower == higher :\n        return 2\n    else :\n        return lower\n"}
{"task_id": "Open/122", "completion": "    maximum = 0\n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            if int(ss[i]) > maximum :\n                maximum = int(ss[i])\n    return maximum\n"}
{"task_id": "Open/123", "completion": "    if len(s) == 0:\n        return \"\"\n    \n    longest = \"\"\n    current = \"\"\n    \n    for i in range(0, len(s)):\n        if s[i] in \"0123456789\":\n            current = s[i]\n        else:\n            if len(current) > len(longest):\n                longest = current\n            current = \"\"\n    \n    return longest\n"}
{"task_id": "Open/124", "completion": "    remainingArea = 0\n    while K > 0 :\n        if N >= M :\n            remainingArea += N\n            N = M\n        else :\n            remainingArea += M\n            M = N\n        K -= 1\n    return remainingArea\n"}
{"task_id": "Open/125", "completion": "    # Step 1\n    for i in range ( 0, length - 1 ) :\n        if string[i]!= string[i+1] :\n            return False\n    # Step 2\n    return True\n"}
{"task_id": "Open/126", "completion": "    power = 1\n    while power * 2 <= n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/127", "completion": "    # Step 1. Convert A and B to strings.\n    A = str(A)\n    B = str(B)\n    \n    # Step 2. Check if the length of A is equal to the length of B.\n    if len(A)!= len(B):\n        return False\n    \n    # Step 3. Check if the length of A is equal to the number of digits in B.\n    if len(A)!= len(B):\n        return False\n    \n    # Step 4. Return True if both A and B have the same number of digits.\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/128", "completion": "    if x - y == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "    # Step 1\n    # Initialize Sn_1 as \"12\" and Sn_2 as \"1213\".\n    # Iterate from 3 to n.\n    # Update Sn_3 as the concatenation of Sn_1 and Sn_2.\n    # Update Sn_1 as Sn_2.\n    # Update Sn_2 as Sn_3.\n    # Return Sn_3, which represents the nth Tribonacci word.\n    \n    # Step 2\n    # Initialize Sn_1 as \"12\" and Sn_2 as \"1213\".\n    # Iterate from 3 to n.\n    # Update Sn_3 as the concatenation of Sn_1 and Sn_2.\n    # Update Sn_1 as Sn_2.\n    # Update Sn_2 as Sn_3.\n    # Return Sn_3, which represents the nth Tribonacci word.\n    \n    # Step 3\n    # Initialize Sn_1 as \"12\" and Sn_2 as \"1213\".\n    # Iterate from 3 to n.\n    # Update Sn_3 as the concatenation of Sn_1 and Sn_"}
{"task_id": "Open/130", "completion": "    steps = 0\n    for i in range(1, n):\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "    if n % 4 == 0:\n        return 0\n    elif n % 4 == 3:\n        return 1\n    else:\n        return 1\n"}
{"task_id": "Open/132", "completion": "    m = int(N/2)\n    sum = 0\n    for i in range(1, m+1):\n        if i % a == 0:\n            sum += i\n    return sum\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if len(arr) == 0 :\n        return False\n    if len(arr) == 1 :\n        return True\n    if len(arr) == 2 :\n        if arr[0] % 2!= 0 or arr[1] % 2!= 0 :\n            return False\n        else :\n            return True\n    if len(arr) == 3 :\n        if arr[0] % 2!= 0 and arr[1] % 2!= 0 and arr[2] % 2!= 0 :\n            return False\n        else :\n            return True\n    else :\n        return False\n"}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return 0\n    if N == 2 :\n        return 1\n    if N == 3 :\n        return 2\n    if N == 4 :\n        return 3\n    if N == 5 :\n        return 4\n    if N == 6 :\n        return 5\n    if N == 7 :\n        return 6\n    if N == 8 :\n        return 7\n    if N == 9 :\n        return 8\n    if N == 10 :\n        return 9\n    if N == 11 :\n        return 10\n    if N == 12 :\n        return 11\n    if N == 13 :\n        return 12\n    if N == 14 :\n        return 13\n    if N == 15 :\n        return 14\n    if N == 16 :\n        return 15\n    if N == 17 :\n        return 16\n    if N == 18 :\n        return 17\n    if N == 19 :\n        return 18\n    if N == 20 :\n        return 19\n    if N == 21 :\n        return 20\n    if N == 22 :\n        return 21\n    if N == 23 :\n        return 22\n    if N"}
{"task_id": "Open/136", "completion": "    \n    arr.sort()\n    min_num = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < min_num:\n            min_num = arr[i]\n    \n    return min_num\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1\n    s = list(s)\n    s.sort()\n    \n    # Step 2\n    n = len(s)\n    \n    # Step 3\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        else:\n            break\n    \n    # Step 4\n    s = ''.join(s)\n    \n    # Step 5\n    return int(s)\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range ( n ) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n        elif arr[i] <= arr[i-1] :\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    \n    # Step 1\n    sum = 0\n    count = 0\n    \n    # Step 2\n    for char in s :\n        sum += ord(char)\n        count += 1\n    \n    # Step 3\n    average = sum / count\n    \n    # Step 4\n    return average\n"}
{"task_id": "Open/140", "completion": "    banknotes = 0\n    \n    if (S % A == 0) :\n        banknotes = S // A\n    else :\n        banknotes = S // A + 1\n    \n    if (N % B == 0) :\n        banknotes = N // B\n    else :\n        banknotes = N // B + 1\n    \n    if (banknotes < 0) :\n        return -1\n    else :\n        return banknotes\n"}
{"task_id": "Open/141", "completion": "Write a function that takes two integers, x and y, and returns their greatest common divisor (GCD).\n        \n        How to solve:\n        Step 1. Import the math module.\n        Step 2. Define a function called lcm that takes two integers, x and y, as parameters.\n        Step 3. Use the math.gcd() function to find the greatest common divisor (GCD) of x and y.\n        Step 4. Calculate the LCM using the formula LCM = (x * y) / GCD.\n        Step 5. Return the LCM.\n        \"\"\"\n        \n        # Step 1\n        import math\n        \n        # Step 2\n        def gcd ( x, y ) :\n            \"\"\"Write a function that takes two integers, x and y, and returns their greatest common divisor (GCD).\n            \n            How to solve:\n            Step 1. Import the math module.\n            Step 2. Define a function called lcm that takes two integers,"}
{"task_id": "Open/142", "completion": "    # Step 1\n    # Convert the given integer to its binary representation.\n    bin_n = bin(n)\n    # Step 2\n    # Count the number of trailing zeros in the binary representation.\n    count = 0\n    for i in range(len(bin_n) - 1, -1, -1):\n        if bin_n[i] == '1':\n            count += 1\n    # Step 3\n    return count\n"}
{"task_id": "Open/143", "completion": "    max_sum = 0\n    max_index = -1\n    for i in range(n-1):\n        left_xor = arr[i] ^ arr[i+1]\n        right_xor = arr[i] ^ arr[i+1]\n        curr_sum = left_xor ^ right_xor\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/144", "completion": "    max_len = 1\n    curr_len = 1\n    for i in range(1, n) :\n        if arr[i] < arr[i-1] :\n            curr_len += 1\n        else :\n            curr_len = 1\n        if curr_len > max_len :\n            max_len = curr_len\n    return max_len\n"}
{"task_id": "Open/145", "completion": "    if n == 0 :\n        return -1\n    if n == 1 :\n        return arr[0]\n    if k % n == 0 :\n        return arr[0]\n    if k % n == 1 :\n        return arr[n-1]\n    if k % n == 2 :\n        return arr[n-2]\n    if k % n == 3 :\n        return arr[n-3]\n    if k % n == 4 :\n        return arr[n-4]\n    if k % n == 5 :\n        return arr[n-5]\n    if k % n == 6 :\n        return arr[n-6]\n    if k % n == 7 :\n        return arr[n-7]\n    if k % n == 8 :\n        return arr[n-8]\n    if k % n == 9 :\n        return arr[n-9]\n    if k % n == 10 :\n        return arr[n-10]\n    if k % n == 11 :\n        return arr[n-11]\n    if k % n == 12 :\n        return arr[n-12"}
{"task_id": "Open/146", "completion": "    num = 1\n    count = 0\n    seen = set()\n    while num not in seen:\n        seen.add(num)\n        num = (num * 10 + 1) % K\n        count += 1\n    return count\n"}
{"task_id": "Open/147", "completion": "    target = n // 2\n    operations = 0\n    for i in range(n):\n        operations += abs(arr[i] - target)\n    return operations\n"}
{"task_id": "Open/148", "completion": "    a = 3\n    b = 3\n    sum = 0\n    for i in range(1, n+1):\n        sum += a\n        a = b\n        b = sum\n    return sum\n"}
{"task_id": "Open/149", "completion": "    import math\n    return math.sqrt(s)\n"}
{"task_id": "Open/150", "completion": "    # Step 1. Divide p and q by 100\n    p = int(p / 100)\n    q = int(q / 100)\n    \n    # Step 2. Calculate the probability using the formula (p^2 + q^2) / (p + q)\n    p_q = (p ** 2 + q ** 2) / (p + q)\n    \n    # Step 3. Return the calculated probability\n    return p_q\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    # Step 1\n    binary = bin(n)\n    binary = binary[2:]\n    # Step 2\n    for i in range (len(binary)):\n        if binary[i] == '1':\n            if binary[i+1] == '1':\n                return False\n    # Step 3\n    return True\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in s:\n        if i in vowels:\n            if i not in vowels:\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1) :\n        if i % 10 > k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    min_diff = math.inf\n    for i in range(2, n+1) :\n        min_diff = min(min_diff, abs(i) - 2**i)\n    return min_diff\n"}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        return (3 * math.sqrt(3) * r) / 2\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    low = 0\n    high = size - 1\n    mid = (low + high) // 2\n    while low <= high:\n        if ar[mid] - ar[low]!= mid - low:\n            low = mid + 1\n        else:\n            high = mid - 1\n        mid = (low + high) // 2\n    return ar[low]\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == \"0\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    count = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            count += 1\n    if count % 2!= 0:\n        return arr[0]\n    else:\n        return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = []\n    for i in range(n):\n        xorArr.append(arr[i] ^ ans)\n    ans = 0\n    for i in range(n):\n        if xorArr[i] == 1:\n            ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if (dx == 0 and dy == 0) or (dx < 0 and dy < 0) or (dx > 0 and dy > 0):\n        return False\n    if dx == 0 and dy == 0:\n        return True\n    if dx == 0:\n        if (sx - dx) % sy == 0 or (sy - sx) % sx == 0:\n            return True\n        else:\n            return False\n    if dy == 0:\n        if (sx - dx) % sy == 0 or (sy - sx) % sx == 0:\n            return True\n        else:\n            return False\n    if (dx - sx) % sy == 0 or (dy - sy) % sx == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/163", "completion": "    if n % 2 == 0:\n        return 0\n    else:\n        count = 0\n        for i in range(1, n):\n            if i % 2 == 0:\n                count += 1\n            else:\n                count += 1\n                if count % 2 == 0:\n                    count = 0\n        return count\n"}
{"task_id": "Open/164", "completion": "    count = {}\n    for i in range(n):\n        count[arr[i]] = count.get(arr[i], 0) + 1\n    return count\n"}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 1\n    elif height == 1 :\n        return 2\n    else :\n        return AVLnodes ( height - 1 ) + AVLnodes ( height - 2 )\n"}
{"task_id": "Open/166", "completion": "    current = source\n    count = 0\n    while current!= dest:\n        if current < dest:\n            current += step\n            count += 1\n        else:\n            current -= step\n            count += 1\n    if count == 0:\n        return sys.maxsize\n    else:\n        return count\n"}
{"task_id": "Open/167", "completion": "    if n == 0:\n        return \"1\"\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence = \"1\"\n        for i in range(n-1):\n            sequence += str(countnnday(i))\n        return sequence\n"}
{"task_id": "Open/168", "completion": "    max_len = 0\n    curr_len = 0\n    for i in range(N):\n        curr_len = 0\n        for j in range(i, N):\n            curr_len += arr[j]\n            if curr_len > 0:\n                max_len = max(max_len, curr_len)\n    return max_len\n"}
{"task_id": "Open/169", "completion": "    m = abs(m)\n    n = abs(n)\n    \n    if m == 0 :\n        return 0\n    elif n == 0 :\n        return 0\n    else :\n        return (m * n) / math.sqrt(m * m + n * n)\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sum = arr[i] + arr[j]\n            if sum < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r + 1) :\n        if (i % 2 == 0) and (i % 3 == 0) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    \n    # Step 1. Convert n to binary representation.\n    n = bin(n)\n    \n    # Step 2. Toggle the last m bits of the binary representation.\n    n = n[-m:]\n    \n    # Step 3. Convert the modified binary representation back to decimal.\n    return int(n, 2)\n"}
{"task_id": "Open/174", "completion": "    count = 0\n    for i in range(L,R+1):\n        if i % 9 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    \n    # Step 1\n    product = n * math.log(n, 10)\n    \n    # Step 2\n    product = str(product)\n    \n    # Step 3\n    return product[:k]\n"}
{"task_id": "Open/176", "completion": "    #Step 1\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return A[i]\n    #Step 2\n    for i in range(n-2, -1, -1):\n        if A[i] > A[i+1]:\n            return A[i]\n    #Step 3\n    return -1\n"}
{"task_id": "Open/177", "completion": "    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    \n    if a[0] > b[0] and a[0] > c[0]:\n        return 0\n    elif b[0] > a[0] and b[0] > c[0]:\n        return b[0] - a[0]\n    elif c[0] > a[0] and c[0] > b[0]:\n        return c[0] - a[0]\n    else:\n        return a[0] - b[0]\n    \n    "}
