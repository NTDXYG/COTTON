{"task_id": "Open/0", "completion": "    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    for i in range(len(arr)):\n        if arr[i] + K > sum:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    min_val = arr[0]\n    min_freq = 0\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] == min_val:\n            min_freq += 1\n    return min_freq\n"}
{"task_id": "Open/2", "completion": "    binary_n = bin(n)[2:]\n    if len(binary_n) < r - l + 1:\n        return \"No\"\n    for i in range(l, r + 1):\n        if binary_n[i - l] == '0':\n            return \"No\"\n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (A[i] + A[j]) % K == 0:\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    sum1 = 0\n    for i in a:\n        sum1 += i\n    if sum1 % 2!= 0:\n        return False\n    else:\n        sum1 = 0\n        for i in a:\n            sum1 += i\n            if sum1 == (sum1/2):\n                return True\n        return False\n"}
{"task_id": "Open/5", "completion": "    # Step 1. Convert the input integer to its binary representation.\n    binary = bin(x)\n    # Step 2. Count the number of 1 bits in the binary representation.\n    count = binary.count('1')\n    # Step 3. If the count is odd, return 1. Otherwise, return 0.\n    if count % 2 == 1:\n        return 1\n    else:\n        return 0\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in range(len(vec)):\n        if vec[i] < 0:\n            vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i + 1)\n    return output\n"}
{"task_id": "Open/7", "completion": "    max_len = 0\n    curr_len = 1\n    for i in range(n):\n        curr_set = set()\n        for j in range(i,n):\n            curr_set.add(str(arr[j]))\n            if len(curr_set) == len(arr[i:j+1]):\n                curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n        curr_len = 1\n    return max_len\n"}
{"task_id": "Open/8", "completion": "    def Distinct_Prime_factors_helper(a):\n        count = 0\n        for i in a:\n            count += len(Distinct_Prime_factors_helper(i))\n        return count\n    return Distinct_Prime_factors_helper(a)\n"}
{"task_id": "Open/9", "completion": "    arr.sort()\n    return min(arr[k] - arr[0], arr[k] - arr[1], arr[k] - arr[2], arr[k] - arr[3], arr[k] - arr[4], arr[k] - arr[5], arr[k] - arr[6], arr[k] - arr[7], arr[k] - arr[8], arr[k] - arr[9], arr[k] - arr[10], arr[k] - arr[11], arr[k] - arr[12], arr[k] - arr[13], arr[k] - arr[14], arr[k] - arr[15], arr[k] - arr[16], arr[k] - arr[17], arr[k] - arr[18], arr[k] - arr[19], arr[k] - arr[20], arr[k] - arr[21], arr[k] - arr[22], arr[k] - arr[23], arr[k] - arr"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while len(A) > 0 and len(B) > 0 :\n        if A[0] == B[0] :\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else :\n            B.popleft()\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    \n    # Step 1. Initialize a counter variable to keep track of the number of substrings.\n    counter = 0\n    \n    # Step 2. Iterate through each character in the string.\n    for i in range(len(s)) :\n        \n        # Step 3. Create a set to keep track of distinct characters.\n        char_set = set()\n        \n        # Step 4. Iterate through the string starting from the current character.\n        for j in range(i, len(s)) :\n            \n            # Step 5. For each substring, add the characters to the set.\n            char_set.add(s[j])\n            \n            # Step 6. If the length of the set is less than or equal to k, increment the counter.\n            if len(char_set) <= k :\n                counter += 1\n            \n            # Step 7. If the length of the set is greater than k, break out of the inner loop.\n            else :\n                break\n    \n    # Step 8. Return the counter variable.\n    return counter\n"}
{"task_id": "Open/13", "completion": "    current_number = 2\n    while current_number <= n:\n        if current_number > n:\n            return False\n        if current_number % n == 0:\n            return False\n        current_number = current_number + 1\n    return True\n"}
{"task_id": "Open/14", "completion": "    \n    # Your code here\n    \n    return \" \"\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    for i in range(t):\n        if (a**((n-1)/2))%n == 1:\n            return 1\n        else:\n            a = random.randint(2,n-1)\n    return -1\n"}
{"task_id": "Open/16", "completion": "    for i in range(len(s1)) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == '1':\n                count += 1\n        else:\n            if s[i] == '0':\n                count += 1\n    return min(count, len(s) - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1,n+1):\n        if isPowerOf(i,n):\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if ( a[i] % 4 ) == 0 :\n            count0 += 1\n        if ( a[i] % 4 ) == 1 :\n            count1 += 1\n        if ( a[i] % 4 ) == 2 :\n            count2 += 1\n        if ( a[i] % 4 ) == 3 :\n            count3 += 1\n    if count0 == count1 and count1 == count2 and count2 == count3 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 1\n    curr_len = 1\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            curr_len += 1\n        else :\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    return max(max_len, curr_len)\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        count = subsetSum(arr, n, i + 1, sum, count)\n        count = subsetSum(arr, n, i + 1, sum - arr[i], count)\n        return count\n"}
{"task_id": "Open/24", "completion": "    return (16 * n**2) - (16 * n) + 6\n"}
{"task_id": "Open/25", "completion": "    sum_squares = 0\n    sum_numbers = 0\n    for i in range(1, n+1) :\n        sum_squares += i**2\n        sum_numbers += i\n    sum_squares += 1\n    return sum_squares, sum_numbers, sum_squares + sum_numbers\n"}
{"task_id": "Open/26", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    return x <= y\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return (b-a)/a*100\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum/n\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3**(n-1)\n"}
{"task_id": "Open/33", "completion": "    # Step 1. Initialize the first term of the sequence as 1.\n    term = 1\n    # Step 2. Iterate from 2 to n.\n    for i in range(2, n+1) :\n        # Step 3. Calculate the current term by multiplying the previous term by 2 and adding the difference between the current index and 1.\n        term = term * 2 + (i - 1)\n    # Step 4. Return the nth term.\n    return term\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    product = 1\n    for i in range(len(a)):\n        product *= a[i]\n        if product < k:\n            count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1):\n        s = str(i)\n        count += s.count(d)\n    return count\n"}
{"task_id": "Open/36", "completion": "    # Step 1. Iterate through the array and remove all negative and zero values.\n    for i in range(n):\n        if arr[i] < 0 or arr[i] == 0:\n            arr[i] = 0\n    # Step 2. Create a set of the remaining positive values.\n    pos_set = set(arr)\n    # Step 3. Iterate through positive integers starting from 1.\n    for i in range(1, n + 1):\n        if i not in pos_set:\n            return i\n    # Step 4. If all positive integers are present in the set, return the next positive integer after the maximum value in the set.\n    return max(pos_set) + 1\n"}
{"task_id": "Open/37", "completion": "    \n    if n == 0 or n == 1:\n        return 1\n    \n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    \n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    total_area = 0\n    side = 1\n    while side <= min(l, b):\n        area = side * side\n        total_area += area\n        side += 1\n    return total_area\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N + 1))\n"}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    count = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count += 1\n        else:\n            if count > max_zeros:\n                max_zeros = count\n            count = 0\n    if count > max_zeros:\n        max_zeros = count\n    if max_zeros == 0:\n        return -1\n    else:\n        return max_zeros\n"}
{"task_id": "Open/41", "completion": "    max_len = 0\n    curr_len = 0\n    for i in range(n):\n        if arr[i] == 0:\n            curr_len = 0\n        else:\n            curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n"}
{"task_id": "Open/42", "completion": "    if k == 1:\n        return min(a)\n    elif k == 2:\n        return max(a[0], a[-1])\n    else:\n        return max(a)\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            product = 1\n            for k in range(i,j+1):\n                product *= array[k]\n            if product <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    # Step 2. Initialize a variable \"sum\" as 0.\n    sum = 0\n    # Step 3. Iterate through the sorted array.\n    for i in range(n) :\n        # Calculate the absolute difference between the element and its corresponding index plus one.\n        sum += abs(i - arr[i])\n    # Step 4. Return the \"sum\".\n    return sum\n"}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            diff = array[i] - array[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    \n    # Step 1. Calculate the value of the left side of the equation for point (x1, y1) and point (x2, y2).\n    leftSide = (a * x1 + b * y1) - (c * x1 + d * y1)\n    \n    # Step 2. If the values have the same sign, return True. Otherwise, return False.\n    if leftSide * leftSide > 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a+1):\n        if a == i + (a ^ i):\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_val = 0\n    for i in range(L, R+1):\n        for j in range(L, R+1):\n            if i & j > max_val:\n                max_val = i & j\n    return max_val\n"}
{"task_id": "Open/50", "completion": "    smallest = -1\n    for i in range(n):\n        if a[i] % a[0] == 0:\n            smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(n):\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    result = 0\n    for i in range(n):\n        for j in range(n):\n            if (arr[i][j] & 1) == 1:\n                result ^= arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(0, N+1):\n        count += i & (i ^ N) == i\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(n):\n        sum += a[i]\n    sum += n - 1\n    if sum == k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/55", "completion": "    return (n & 1) == 1 and (n >> 1) == 0\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    current_partition = 1\n    for i in range(1, len(s)) :\n        if s[i] == s[i-1] :\n            current_partition += 1\n        else :\n            max_partitions = max(max_partitions, current_partition)\n            current_partition = 1\n    max_partitions = max(max_partitions, current_partition)\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2, N):\n        result = result + var1 + var2\n        var1 = var2\n        var2 = result\n    return result\n"}
{"task_id": "Open/59", "completion": "    # Step 1. Iterate through the list of ranges.\n    for i in range(len(ranges)) :\n        # For each range, reverse the elements within that range in the array.\n        for j in range(ranges[i][0], ranges[i][1] + 1) :\n            arr[j] = arr[j] * -1\n    # Step 2. Repeat step 1 for the specified number of reversals.\n    for i in range(reversals) :\n        # For each range, reverse the elements within that range in the array.\n        for j in range(ranges[i][0], ranges[i][1] + 1) :\n            arr[j] = arr[j] * -1\n    # Step 3. Return the value at the given index in the array.\n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "    for a in range(0, int(math.sqrt(n)) + 1):\n        b = math.sqrt(n - a**2)\n        if b.is_integer():\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    if a == \"\" or len(a) > len(b):\n        return -1\n    else:\n        count = len(b) // len(a)\n        if count == 0:\n            return -1\n        else:\n            for i in range(1, count + 1):\n                if a * i == b:\n                    return i\n    return -1\n"}
{"task_id": "Open/62", "completion": "    modified_str = \"\"\n    for i in range(len-2, -1, -1):\n        if str[i] > str[i+1]:\n            str[i] -= 1\n            modified_str += str[i]\n            for j in range(i+1, len):\n                str[j] = 9\n    modified_str += str[0]\n    return modified_str\n"}
{"task_id": "Open/63", "completion": "    min_value = math.inf\n    for i in range(n):\n        sum_log = 0\n        for j in range(i,n):\n            sum_log += math.log(arr[j])\n        if sum_log < min_value:\n            min_value = sum_log\n    return min_value\n"}
{"task_id": "Open/64", "completion": "    if len(s) == 0 or s.count('1') == len(s):\n        return -1\n    start = 0\n    end = 0\n    max_len = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            start = end + 1\n        end = i\n        max_len = max(max_len, end - start + 1)\n    return s[start:start + max_len]\n"}
{"task_id": "Open/65", "completion": "    \n    # Step 1. Initialize a dictionary to store the count of each element in the array.\n    count = {}\n    \n    # Step 2. Iterate through the array and update the count in the dictionary.\n    for i in range(n):\n        if a[i] in count:\n            count[a[i]] += 1\n        else:\n            count[a[i]] = 1\n    \n    # Step 3. Iterate through the array again and remove elements that have a count greater than 'k'.\n    for i in range(n):\n        if count[a[i]] > k:\n            count[a[i]] -= 1\n    \n    # Step 4. Return the length of the modified array.\n    return n - len(count)\n"}
{"task_id": "Open/66", "completion": "    # Step 1. Calculate the size of the array after adding k elements.\n    size = n + k\n    # Step 2. Sort the array in ascending order.\n    arr.sort()\n    # Step 3. If the size is even, calculate the median by taking the average of the two middle elements.\n    if size % 2 == 0:\n        return (arr[size//2 - 1] + arr[size//2]) / 2\n    # Step 4. If the size is odd, return the middle element as the median.\n    return arr[size//2]\n"}
{"task_id": "Open/67", "completion": "    step_count = 0\n    \n    # Step 1. Initialize step count as 0.\n    step_count = 0\n    \n    # Step 2. Count the number of positive, negative, and zero elements in the array.\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in range(n):\n        if a[i] == 1:\n            pos_count += 1\n        elif a[i] == -1:\n            neg_count += 1\n        elif a[i] == 0:\n            zero_count += 1\n    \n    # Step 3. For each negative element, add the absolute difference between the element and -1 to the step count.\n    if neg_count % 2 == 0:\n        for i in range(n):\n            if a[i] == -1:\n                step_count += abs(a[i] - -1)\n    else:\n        for i in range(n):\n            if a[i] == -1:\n                step_count += abs(a[i] - -1) + 1\n    \n    "}
{"task_id": "Open/68", "completion": "    if n == 1:\n        return 0\n    else:\n        v = []\n        n -= 1\n        while n > 0:\n            v.append(n % 5)\n            n = n // 5\n        result = 0\n        for i in range(len(v) - 1, -1, -1):\n            result = result * 10 + v[i]\n        return 2 * result\n"}
{"task_id": "Open/69", "completion": "    # Step 1. Convert the integer to binary representation.\n    binary = bin(n)[2:]\n    # Step 2. Iterate through the binary representation.\n    for i in range(len(binary)):\n        # If a set bit is encountered, check if the next bit is also set.\n        if binary[i] == '1' and binary[i+1] == '1':\n            return False\n    return True\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        remainder = n % x\n        if remainder <= (x/2) :\n            return n - remainder\n        else :\n            return n + (x - remainder)\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(n+1):\n        sum += i\n        i += 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "    finalSum = 0\n    for i in range(1, n+1):\n        finalSum += i\n    return finalSum\n"}
{"task_id": "Open/73", "completion": "    max_value = -1\n    count_dict = {}\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n    for i in count_dict:\n        if count_dict[i] > max_value:\n            max_value = count_dict[i]\n    return max_value\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n):\n        if a[i] > 0:\n            if a[i] & 1 == 1:\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    # Step 1. Convert the integer to binary representation.\n    binary = bin(n)\n    # Step 2. Toggle all the bits in the binary representation.\n    binary = binary[2:] + binary[0:2]\n    # Step 3. Convert the toggled binary representation back to an integer.\n    return int(binary, 2)\n"}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            changes += 1\n            A[i+1] = 0\n    return changes\n"}
{"task_id": "Open/77", "completion": "    return 180 * radian / math.pi\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    sum = (n/2) * (2*a + (n-1)*d)\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 1:\n        return 1\n    else:\n        power = 1\n        while n % 2 == 0:\n            n = n // 2\n            power = power * 2\n        return power\n"}
{"task_id": "Open/81", "completion": "    count = 0\n    for i in range(1, moves + 1) :\n        new_row = row + i * 1\n        new_column = column + i * -1\n        if new_row >= 0 and new_row <= 7 and new_column >= 0 and new_column <= 7 :\n            count += 1\n    return count\n"}
{"task_id": "Open/82", "completion": "    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n"}
{"task_id": "Open/83", "completion": "    # Step 1. Initialize an empty list to store the last occurrence of each character in the string.\n    lastOccurrence = []\n    for i in range(len(s)) :\n        lastOccurrence.append(s[i])\n    \n    # Step 2. Iterate through the string and update the last occurrence of each character in the list.\n    for i in range(len(s)) :\n        for j in range(len(s)) :\n            if s[i] == lastOccurrence[j] :\n                lastOccurrence[j] = s[i]\n                break\n    \n    # Step 3. Sort the string.\n    sortedString = \"\".join(sorted(lastOccurrence))\n    \n    # Step 4. Iterate through the string and compare each character with its corresponding character in the sorted string.\n    for i in range(len(s)) :\n        for j in range(len(sortedString)) :\n            if s[i] == sortedString[j] :\n                break\n        else :\n            sortedString = sortedString[:j] + s[i] + sortedString["}
{"task_id": "Open/84", "completion": "    \n    # Step 1. Create an empty array of length n.\n    arr = []\n    for i in range(n):\n        arr.append(i)\n    \n    # Step 2. Fill the array with consecutive odd numbers followed by consecutive even numbers.\n    for i in range(n):\n        if i%2 == 0:\n            arr[i] = arr[i] + arr[i+1]\n    \n    # Step 3. Calculate the sum of the elements in the array from index l-1 to index r.\n    sum = 0\n    for i in range(l-1, r):\n        sum += arr[i]\n    \n    return sum\n"}
{"task_id": "Open/85", "completion": "    if x > y :\n        min = y\n    else :\n        min = x\n    \n    while min > 0 :\n        if x % min == 0 and y % min == 0 :\n            return min\n        else :\n            min -= 1\n    return 1\n"}
{"task_id": "Open/86", "completion": "    \n    # Step 1. Initialize a list with A and B as the first two elements.\n    numbers = [A,B]\n    \n    # Step 2. Iterate N-2 times.\n    for i in range(N-2):\n        \n        # Step 3. Compute the sum of the last two elements in the list.\n        numbers.append(numbers[-1] + numbers[-2])\n    \n    # Step 4. Return the Nth element in the list.\n    return numbers[-1]\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    monthly_rate = r / 12 / 100\n    months = t * 12\n    emi = (p * monthly_rate * (1 + monthly_rate) ** months) / ((1 + monthly_rate) ** months - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "    # Step 1. Initialize a counter variable to 0.\n    count = 0\n    # Step 2. Iterate through all possible combinations of (i, j, k) from the given range of A, B, and C.\n    for i in range(A, B + 1):\n        for j in range(B, C + 1):\n            if i * j > j * j:\n                count += 1\n    # Step 3. Check if the condition i * k > j * j is satisfied.\n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l, r + 1):\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9:\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    # Step 1. Initialize a dictionary to store the length of the longest arithmetic subsequence for each number in arr.\n    longest_ar_subseq_dict = {}\n    # Step 2. Initialize the maximum length of arithmetic subsequence as 0.\n    max_ar_subseq_length = 0\n    # Step 3. Iterate through each number in arr.\n    for i in range(len(arr)):\n        # Step 4. Update the maximum length of arithmetic subsequence if necessary.\n        if i == 0:\n            longest_ar_subseq_dict[arr[i]] = 2\n        else:\n            # Step 5. Initialize a dictionary to store the difference between the current number and all previous numbers.\n            diff_dict = {}\n            # Step 6. Iterate through all previous numbers.\n            for j in range(i):\n                # Step 7. Calculate the difference between the current number and the previous number.\n                diff = arr[i] - arr[j]\n                # Step 8. If the difference is already in the dictionary, update the length of the arithmetic subsequence for the current number.\n                if diff"}
{"task_id": "Open/92", "completion": "    max_len = 0\n    max_substring = \"\"\n    for i in range(len(str)):\n        if str[i].isalnum():\n            if i % 2 == 0:\n                if len(str[i:i+2]) > max_len:\n                    max_len = len(str[i:i+2])\n                    max_substring = str[i:i+2]\n        else:\n            continue\n    if max_len == 0:\n        return \"-1\"\n    else:\n        return max_substring\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        n = n // 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    \n    # Step 1. Create a string of length n consisting of all 'a' characters.\n    a_string = \"a\" * n\n    \n    # Step 2. Iterate through the string in reverse order.\n    #        - Subtract the current index from k.\n    #        - If k >= 0, check if k >= 26.\n    #            - If it is, replace the character at the current index with 'z' and subtract 26 from k.\n    #            - Otherwise, calculate the ASCII value of the character to be replaced by adding k to 97 and subtracting 1.\n    #                - Replace the character at the current index with the corresponding lowercase letter and subtract the difference between the ASCII values of the replaced character and 'a' from k.\n    #        - If k < 0, exit the loop.\n    #        - Add the current index to k.\n    for i in range(n-1, -1, -1) :\n        if k >= 0 :\n            if k >= 26 :\n                a_string = a_string[:i] + \"z\" + a_string[i+1:]\n                k"}
{"task_id": "Open/95", "completion": "    \n    total_distance = 0\n    \n    while n > 0 :\n        total_distance += fuel // n\n        fuel = fuel % n\n        n -= 1\n    \n    return total_distance\n"}
{"task_id": "Open/96", "completion": "    total_sum = sum(arr)\n    sum_before = 0\n    for i in range(n):\n        sum_before += arr[i]\n        if sum_before == total_sum/3 and sum_before + arr[n-1] == total_sum*2/3:\n            return 1\n    return 0\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    count = 0\n    while n > 0 :\n        count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/99", "completion": "    if a == b and b == c and k == 0:\n        return True\n    elif k == 0:\n        return False\n    elif k % 2 == 0:\n        return True\n    elif (a - b) % k == 0 or (a - c) % k == 0 or (b - c) % k == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/100", "completion": "    # Step 1. Shift the binary representation of x to the left by 32 bits.\n    x_shifted = x << 32\n    # Step 2. Perform a bitwise OR operation with the original x.\n    x_or = x_shifted | x\n    # Step 3. Check if the resulting value is equal to y.\n    return x_or == y\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    minRemovals = 0\n    arr.sort()\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) > 1:\n            minRemovals += abs(arr[i] - arr[i-1]) - 1\n    return minRemovals\n"}
{"task_id": "Open/104", "completion": "    # Step 1. Convert `left` and `right` to binary representation.\n    left = bin(left)[2:]\n    right = bin(right)[2:]\n    # Step 2. Initialize a variable `max_bits` as 0.\n    max_bits = 0\n    # Step 3. Iterate through the binary representation of `left`.\n    for i in range(len(left)):\n        # Step 4. Count the number of consecutive 1s.\n        count = left.count('1')\n        # Step 5. If the count is greater than `max_bits`, update `max_bits`.\n        if count > max_bits:\n            max_bits = count\n        # Step 6. Convert `max_bits` number of bits to 1 in the binary representation of `left`.\n        left = left.replace('1', '0', max_bits)\n    # Step 7. Convert the modified binary representation of `left` back to decimal.\n    left = int(left, 2)\n    # Step 8. If the decimal representation of `left` is greater than `right`, return `right`.\n    if left > right:\n"}
{"task_id": "Open/105", "completion": "    power = 1\n    while power <= n :\n        power = power << 1\n    return power\n"}
{"task_id": "Open/106", "completion": "    if n == 1:\n        return False\n    else:\n        sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                sum += i\n        if sum == n:\n            return True\n        else:\n            return False\n"}
{"task_id": "Open/107", "completion": "    #Step 1. Divide the year by 100 and 400 to determine the number of centuries and leap centuries respectively.\n    century = int(N/100)\n    leap_century = int(N/400)\n    #Step 2. Shift the year by 2 bits to calculate the number of leap years.\n    leap_year = int(N/2)\n    #Step 3. Subtract the number of leap years from the total number of days in the year to get the number of non-leap years.\n    non_leap_year = int(N - leap_year)\n    #Step 4. Adjust the number of non-leap years and leap years if there are any centuries or leap centuries.\n    if century == 1:\n        non_leap_year -= 1\n    if leap_century == 1:\n        leap_year -= 1\n    #Step 5. Calculate the total number of days by adding the number of non-leap years and twice the number of leap years.\n    total_days = non_leap_year + 2*leap_year\n    #Step 6. Take the modulus of the total number of"}
{"task_id": "Open/108", "completion": "    if a < 0:\n        return -1\n    else:\n        return (1 + 5*a)//2\n"}
{"task_id": "Open/109", "completion": "    # Step 1. Convert the number n to a string.\n    n = str(n)\n    # Step 2. Initialize a variable count as 0.\n    count = 0\n    # Step 3. Iterate through each character in the string representation of n.\n    for i in n:\n        # -If the character is equal to the digit d, increment count by 1.\n        if i == d:\n            count += 1\n    # Step 4. Return count.\n    return count\n"}
{"task_id": "Open/110", "completion": "    \n    # Step 1. Convert the integer to a string.\n    n = str(n)\n    \n    # Step 2. Iterate through each digit in the string.\n    for i in n:\n        if n.count(i) > 1:\n            return False\n    \n    # Step 3. If no repeated digits are found, return True.\n    return True\n"}
{"task_id": "Open/111", "completion": "    for i in a:\n        if i % 5!= 0 and i % 3!= 0:\n            return False\n    return True\n"}
{"task_id": "Open/112", "completion": "    # Your code here\n    # Initialize an array with length n+1 and all elements set to 0.\n    arr = [0] * (n+1)\n    # Set the first element of the array to 4 and the second element to 7.\n    arr[0] = 4\n    arr[1] = 7\n    # Iterate through the array starting from index 3 to n+1.\n    for i in range(3, n+1):\n        # If the index is odd, set the value at index i to the value at index i//2 multiplied by 10 and added to 4.\n        if i % 2 == 1:\n            arr[i] = arr[i//2] * 10 + 4\n        # If the index is even, set the value at index i to the value at index (i//2)-1 multiplied by 10 and added to 7.\n        else:\n            arr[i] = arr[i//2] * 10 + 7\n    # Return the value at index n of the array.\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "    # Your code here\n    \n    # Initialize an array with length n+1 and all elements set to 0.\n    arr = [0] * (n+1)\n    \n    # Set the first element of the array to 3 and the second element to 5.\n    arr[0] = 3\n    arr[1] = 5\n    \n    # Iterate through the array from index 3 to n+1.\n    for i in range(3, n+1):\n        # If the index is odd, set the element at index i to the element at index i//2 multiplied by 10 and added with 3.\n        if i % 2!= 0:\n            arr[i] = arr[i//2] * 10 + 3\n        # If the index is even, set the element at index i to the element at index (i//2)-1 multiplied by 10 and added with 5.\n        else:\n            arr[i] = arr[i//2] * 10 + 5\n    \n    # Return the element at index n.\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "    # Your code here\n    arr = [0] * (n+1)\n    arr[0] = 1\n    arr[1] = 2\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            arr[i] = arr[i//2] * 10 + 1\n        else:\n            arr[i] = arr[i//2] * 10 + 2\n    return arr[n]\n"}
{"task_id": "Open/115", "completion": "    \n    # Step 1. Initialize an empty string to store the concatenated elements.\n    concatenatedString = \"\"\n    \n    # Step 2. Iterate through the array of integers.\n    for i in range(len(a)):\n        # Step 3. Convert each integer to a string and concatenate it to the string from step 1.\n        concatenatedString += str(a[i])\n    \n    # Step 4. Convert the concatenated string to an integer.\n    concatenatedInt = int(concatenatedString)\n    \n    # Step 5. Check if the integer is divisible by 11.\n    if concatenatedInt % 11 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b * h\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    \n    # Step 1. Split the input string into a list of words.\n    words = string.split()\n    \n    # Step 2. Iterate through each word in the list.\n    for i in range(len(words)):\n        # If the word contains non-alphabetic characters, ignore it.\n        if words[i].isalpha() == False:\n            continue\n        # Otherwise, capitalize the first and last letter of the word.\n        else:\n            words[i] = words[i][0].upper() + words[i][1:] + words[i][0].upper()\n    \n    # Step 3. Join the modified words back into a string and return it.\n    return''.join(words)\n"}
{"task_id": "Open/118", "completion": "    return int(math.ceil(math.sqrt(8 * p + 1) - 1) / 2)\n"}
{"task_id": "Open/119", "completion": "    if len(arr) == 0:\n        return True\n    else:\n        return len(set(arr)) == len(arr)\n"}
{"task_id": "Open/120", "completion": "    \n    # Initialize a set to store distinct two-character codes.\n    distinct_two_character_codes = set()\n    \n    # Iterate through the string.\n    for i in range(len(string)) :\n        # Check if the current index + 1 is within the string length.\n        if i + 1 < len(string) :\n            # If so, add the two-character code formed by the current character and the next character to the set.\n            distinct_two_character_codes.add(string[i] + string[i + 1])\n    \n    # Return the length of the set.\n    return len(distinct_two_character_codes)\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    elif lower > higher :\n        return lower\n    else :\n        return higher\n"}
{"task_id": "Open/122", "completion": "    maximum = 0\n    for i in range(len(ss)):\n        if ss[i].isdigit():\n            maximum = max(maximum, int(ss[i]) * 10 + int(ss[i+1]))\n        else:\n            maximum = max(maximum, int(ss[i]))\n    return maximum\n"}
{"task_id": "Open/123", "completion": "    longest = \"\"\n    current = \"\"\n    for i in range(len(s)) :\n        if s[i].isdigit() :\n            current += s[i]\n        else :\n            if len(current) > length :\n                longest = current\n            current = \"\"\n    if len(current) > length :\n        longest = current\n    return longest\n"}
{"task_id": "Open/124", "completion": "    remaining_area = 0\n    while K > 0 and N > 0 and M > 0:\n        if N >= M:\n            N -= M\n            remaining_area += M\n        else:\n            M -= N\n            remaining_area += N\n        K -= 1\n    if N > 0 and M > 0:\n        return N * M\n    return remaining_area\n"}
{"task_id": "Open/125", "completion": "    for i in range(0, len(string) - length):\n        if string[i] == string[i + 1]:\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n"}
{"task_id": "Open/127", "completion": "    return len(str(A)) == len(str(B))\n"}
{"task_id": "Open/128", "completion": "    return x!= y and x + y!= 1\n"}
{"task_id": "Open/129", "completion": "    Sn_1 = \"12\"\n    Sn_2 = \"1213\"\n    Sn_3 = \"\"\n    for i in range(3,n+1):\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    steps = 0\n    for i in range(1, n):\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "    return n % 4 == 0 or n % 4 == 3\n"}
{"task_id": "Open/132", "completion": "    m = 0\n    sum = 0\n    while m < N:\n        m = m + 1\n        sum = sum + m\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2:\n        return N\n    elif N <= 4:\n        return N + 3\n    elif (N - 4) % 4 == 0:\n        return N + 1\n    elif (N - 4) % 4 <= 2:\n        return N + 2\n    else:\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if arr[0] % 2!= 0 or arr[-1] % 2!= 0 or n % 2!= 0:\n        return False\n    else:\n        return True\n"}
{"task_id": "Open/135", "completion": "    if N == 1:\n        return countSum1(L,R)\n    elif N > 1:\n        return countSum2(L,R)\n    else:\n        return 0\n"}
{"task_id": "Open/136", "completion": "    \n    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 2. Initialize a variable \"min_num\" as 1.\n    min_num = 1\n    \n    # Step 3. Iterate through the sorted array.\n    for i in range(n):\n        \n        # Step 4. If the current element is equal to min_num, increment min_num by 1.\n        if arr[i] == min_num:\n            min_num += 1\n            \n    # Step 5. If all elements in the array are less than or equal to min_num, return min_num.\n    if min_num == n+1:\n        return 1\n    else:\n        return min_num\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/137", "completion": "    \n    # Step 1. Convert the string into a list of characters.\n    s = list(s)\n    \n    # Step 2. Sort the list of characters in ascending order.\n    s.sort()\n    \n    # Step 3. Join the sorted list of characters into a string.\n    s = ''.join(s)\n    \n    # Step 4. Convert the string into an integer.\n    s = int(s)\n    \n    return s\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for i in s:\n        sum += ord(i)\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/140", "completion": "    banknotes = 0\n    max_banknotes_A = S // A\n    if max_banknotes_A == 0:\n        return -1\n    for banknotes_A in range(0, max_banknotes_A + 1):\n        remaining_amount = S - banknotes_A * A\n        if remaining_amount % B == 0:\n            banknotes_B = remaining_amount // B\n            banknotes = banknotes + banknotes_A + banknotes_B\n            if banknotes == N:\n                return banknotes\n    return banknotes\n"}
{"task_id": "Open/141", "completion": "    return x * y // math.gcd(x, y)\n"}
{"task_id": "Open/142", "completion": "    \n    # Step 1. Convert the given integer to its binary representation.\n    binary_rep = bin(n)\n    \n    # Step 2. Count the number of trailing zeros in the binary representation.\n    count = 0\n    for i in range(len(binary_rep)-1, -1, -1):\n        if binary_rep[i] == '0':\n            count += 1\n        else:\n            break\n    \n    # Step 3. Return the count of trailing zeros.\n    return count\n"}
{"task_id": "Open/143", "completion": "    max_sum = 0\n    max_index = -1\n    for i in range(1,n-1):\n        left_xor = arr[i-1] ^ arr[i]\n        right_xor = arr[i+1] ^ arr[i]\n        curr_sum = left_xor ^ right_xor\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/144", "completion": "    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            curr_len += 1\n        elif curr_len > max_len:\n            max_len = curr_len\n        else:\n            curr_len = 1\n    return max_len\n"}
{"task_id": "Open/145", "completion": "    min_element = min(arr)\n    if min_element % k!= 0:\n        return -1\n    else:\n        return min_element + k\n"}
{"task_id": "Open/146", "completion": "    num = 1\n    count = 1\n    seen = set()\n    while num not in seen:\n        seen.add(num)\n        num = (num * 10 + 1) % K\n        count += 1\n    if num == 0:\n        return count\n    else:\n        return -1\n"}
{"task_id": "Open/147", "completion": "    target = arr[int(n/2)]\n    operations = 0\n    for i in range(n):\n        operations += abs(arr[i] - target)\n    return operations\n"}
{"task_id": "Open/148", "completion": "    a = 3\n    b = 0\n    sum = 0\n    for i in range(1, n+1):\n        sum = a + b\n        a = b\n        b = sum\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s**0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    # Step 1. Convert the input integer to its binary representation.\n    binary = bin(n)\n    # Step 2. Iterate through the binary representation.\n    for i in range(len(binary) - 1):\n        # Step 3. If there are consecutive 1's, return False.\n        if binary[i] == '1' and binary[i + 1] == '1':\n            return False\n    # Step 4. Return True.\n    return True\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == 0:\n                if s[i]!= s[i+1]:\n                    return False\n            elif i == len(s)-1:\n                if s[i]!= s[i-1]:\n                    return False\n            else:\n                if s[i]!= s[i-1] and s[i]!= s[i+1]:\n                    return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1):\n        if i % 10 >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    min_diff = math.inf\n    for i in range(1,n+1):\n        if abs(i-2**i) < min_diff:\n            min_diff = abs(i-2**i)\n    return min_diff\n"}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        return (3 * sqrt(3) * r**2) / 2\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    low = 0\n    high = size - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if ar[mid] - ar[low]!= mid - low:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return ar[low]\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    \n    # Step 1. Iterate through the array.\n    for i in range(n):\n        # Step 2. For each element, count the number of times it appears in the array.\n        count = 0\n        for j in range(n):\n            if arr[j] == i:\n                count += 1\n        # Step 3. If the count is odd, return the element.\n        if count % 2!= 0:\n            return i\n    # Step 4. If no element appears an odd number of times, return None.\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if (sx == dx) and (sy == dy) :\n        return True\n    if (sx == dx) and (sy!= dy) :\n        return True\n    if (sy == dy) and (sx!= dx) :\n        return True\n    return False\n"}
{"task_id": "Open/163", "completion": "    count = 0\n    if n % 2!= 0:\n        return 0\n    else:\n        for i in range(1, n-1, 2):\n            if (n-i) % 4 == 0:\n                count += 1\n        return count\n"}
{"task_id": "Open/164", "completion": "    d = {}\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    count = 1\n    for i in d:\n        count *= d[i]\n    return count\n"}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 1\n    elif height == 1 :\n        return 2\n    else :\n        return AVLnodes(height-1) + AVLnodes(height-1)\n"}
{"task_id": "Open/166", "completion": "    current = source\n    count = 0\n    while current!= dest:\n        if current == dest:\n            return count\n        if current > dest:\n            return sys.maxsize\n        count += 1\n        current += step\n        if current == dest:\n            return count\n        current -= step\n        if current == dest:\n            return count\n        count += 1\n        current += -step\n        if current == dest:\n            return count\n        current -= -step\n        if current == dest:\n            return count\n    return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "    #Initialize the sequence with \"1\".\n    sequence = \"1\"\n    #Iterate n-1 times.\n    for i in range(n-1) :\n        #Initialize a new sequence.\n        new_sequence = \"\"\n        #Iterate through the current sequence.\n        for digit in sequence :\n            #Count the number of consecutive digits.\n            count = sequence.count(digit)\n            #Append the count and the digit to the new sequence.\n            new_sequence += str(count) + digit\n        #Set the current sequence to the new sequence.\n        sequence = new_sequence\n    #Return the current sequence.\n    return sequence\n"}
{"task_id": "Open/168", "completion": "    max_len = 0\n    curr_len = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 0\n    if curr_len > max_len:\n        max_len = curr_len\n    if arr[0] >= 0:\n        return N\n    else:\n        return max_len\n"}
{"task_id": "Open/169", "completion": "    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    count = 0\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l,r+1) :\n        if isPrime(i) and isPrime(i*2) and isPrime(i*3) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    # Step 1. Convert n to binary representation.\n    binary = bin(n)[2:]\n    # Step 2. Toggle the last m bits of the binary representation.\n    binary = binary[:-m] + binary[-m+1:]\n    # Step 3. Convert the modified binary representation back to decimal.\n    return int(binary, 2)\n"}
{"task_id": "Open/174", "completion": "    count = 0\n    if K == 9:\n        K = 0\n    if L == R:\n        return 0\n    if L > R:\n        return 0\n    for i in range(R, L - 1, -1):\n        if i % 9 == K:\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    product = n * math.log(n)\n    product = str(product)\n    product = product[:k]\n    return product\n"}
{"task_id": "Open/176", "completion": "    if A == None or len(A) == 0 :\n        return -1\n    \n    for i in range(1, len(A)-1) :\n        if A[i] > max(A[:i]) and A[i] < min(A[i+1:]):\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    \n    sum_a = sum(a)\n    sum_b = sum(b)\n    sum_c = sum(c)\n    \n    if sum_a >= sum_b and sum_a >= sum_c:\n        return 0\n    \n    else:\n        return sum_c - sum_a\n"}
