{"task_id": "Open/0", "completion": "    sum = 0\n    count = 0\n    for i in arr :\n        sum += i\n        if sum > K :\n            count += 1\n    return count\n\narr = [1,2,3,4,5]\nN = len(arr)\nK = 5"}
{"task_id": "Open/1", "completion": "    min_val = arr[0]\n    min_freq = 0\n    for i in range(1,n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n            min_freq += 1\n    return min_freq\n"}
{"task_id": "Open/2", "completion": "    n = bin(n)\n    n = n[2:]\n    n = n.zfill(32)\n    for i in range(l,r+1) :\n        if n[i]!= \"1\" :\n            return \"No\"\n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/4", "completion": "    \n    sum1 = 0\n    for i in a :\n        sum1 += i\n        \n    if sum1 == n/2 :\n        return True\n    else :\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/5", "completion": "    \n    # Step 1. Convert the input integer to its binary representation.\n    x_bin = bin(x)\n    x_bin = x_bin[2:]\n    x_bin = x_bin[::-1]\n    \n    # Step 2. Count the number of 1 bits in the binary representation.\n    count = 0\n    for i in x_bin :\n        if i == '1' :\n            count += 1\n    \n    # Step 3. If the count is odd, return 1. Otherwise, return 0.\n    if count % 2 == 1 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in vec :\n        if i > 0 :\n            output.append(i + 1)\n    return output\n"}
{"task_id": "Open/7", "completion": "    max_len = 0\n    curr_len = 1\n    digits = set()\n    for i in arr :\n        digits.add(str(i))\n    for i in range(n) :\n        curr_len += 1\n        if curr_len > max_len :\n            max_len = curr_len\n    return max_len\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/8", "completion": "    prime_factors = []\n    for i in a :\n        if i > 1 :\n            for j in range( 2, int( math.sqrt( i ) + 1 ) ) :\n                if i % j == 0 :\n                    break\n            else :\n                prime_factors.append( i )\n    return( len( prime_factors ) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/9", "completion": "    arr.sort()\n    return arr[k-1] - arr[0]\n\n"}
{"task_id": "Open/10", "completion": "    \n    # Step 1. Initialize total time as 0.\n    total_time = 0\n    \n    # Step 2. Iterate through the elements in list A.\n    for element in A :\n        if element == B :\n            total_time += 1\n        else :\n            B.append(element)\n            B.popleft()\n            A.append(element)\n    \n    # Step 3. Return the total time.\n    return total_time\n\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in array :\n        if i % 2 == 0 or i == 2 :\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/12", "completion": "\n    # Step 1. Initialize a counter variable to keep track of the number of substrings.\n    counter = 0\n\n    # Step 2. Iterate through each character in the string.\n    for c in s :\n\n        # Step 3. Initialize a set to keep track of distinct characters.\n        distinct_chars = set()\n\n        # Step 4. Iterate through the string starting from the current character.\n        for i in range( len( s ) ) :\n\n            # Step 5. Add the characters to the set.\n            distinct_chars.add( s[i] )\n\n            # Step 6. If the length of the set is less than or equal to k, increment the counter.\n            if len( distinct_chars ) <= k :\n                counter += 1\n\n            # Step 7. If the length of the set is greater than k, break out of the inner loop.\n            else :\n                break\n\n    return counter\n\n"}
{"task_id": "Open/13", "completion": "    current_number = 2\n    while current_number < n :\n        if n == 1 :\n            return True\n        if n % current_number == 0 :\n            return False\n        current_number += 1\n    return False\n"}
{"task_id": "Open/14", "completion": "    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    power = (n-1)/2\n    for i in range(t) :\n        a = (a**power)%n\n        if a == 1 or a == n-1 :\n            return -1\n        elif a == n-1 :\n            return 1\n    return 0\n"}
{"task_id": "Open/16", "completion": "    if len(s1)!= len(s2) :\n        return False\n    if len(s1) == 0 :\n        return True\n    if len(s2) == 0 :\n        return True\n    if s1[0] == s2[0] :\n        if isDefeat(s1[1:],s2[1:],n-1) :\n            return True\n        else :\n            return False\n    else :\n        if isDefeat(s1[1:],s2[1:],n-1) :\n            return True\n        else :\n            return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range( length ) :\n        if s[i] == '1' :\n            count += 1\n        else :\n            count -= 1\n    return min( count, length )\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range ( 1, n + 1 ) :\n        if math.pow ( i, n ) == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    \n    if y == 0 :\n        return 0\n    else :\n        return x * product( x, y-1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    \n    for i in range( n ) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    \n    if count0 == 4 and count1 == 4 and count2 == 4 and count3 == 4 :\n        return 1\n    else :\n        return 2\n\n\n"}
{"task_id": "Open/22", "completion": "    max_len = 1\n    curr_len = 1\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            curr_len += 1\n        else :\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    return max(max_len, curr_len)\n\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        return count\n    if sum == 0 :\n        count += 1\n    return subsetSum ( arr, n, i + 1, sum, count ) + subsetSum ( arr, n, i + 1, sum - arr[i], count )\n\n"}
{"task_id": "Open/24", "completion": "    return (16 * n**2) - (16 * n) + 6\n"}
{"task_id": "Open/25", "completion": "    sum_squares = 0\n    sum_numbers = 0\n    for i in range ( 1, n + 1 ) :\n        sum_squares = sum_squares + i * i\n        sum_numbers = sum_numbers + i\n    return sum_squares, sum_numbers, 1\n"}
{"task_id": "Open/26", "completion": "    \n    max_sum = 0\n    for i in range( 1, n + 1 ) :\n        if n % i == 0 :\n            sum = 0\n            for j in range( 1, i + 1 ) :\n                if n % j == 0 :\n                    sum += i\n            if sum > max_sum :\n                max_sum = sum\n    return max_sum\n\n"}
{"task_id": "Open/27", "completion": "    if x > y :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return (100 * (b - a)) / (b + a)\n"}
{"task_id": "Open/30", "completion": "    sum_squares = 0\n    for i in range ( 1, n + 1 ) :\n        sum_squares = sum_squares + i * i\n    return sum_squares / n\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/32", "completion": "    return 3**(n-1)\n"}
{"task_id": "Open/33", "completion": "    \n    # Step 1. Initialize the first term of the sequence as 1.\n    firstTerm = 1\n    \n    # Step 2. Iterate from 2 to n.\n    for i in range ( 2, n + 1 ) :\n        # Step 3. Return the nth term.\n        firstTerm = firstTerm * 2 + i\n        \n    return firstTerm\n\n"}
{"task_id": "Open/34", "completion": "    \n    count = 0\n    product = 1\n    \n    for i in range( len( a ) ) :\n        product = product * a[i]\n        if product < k :\n            count += 1\n            \n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1) :\n        count += int(str(i)[d-1])\n    return count\n"}
{"task_id": "Open/36", "completion": "    missing = 1\n    for i in range(n) :\n        if arr[i] < 0 or arr[i] > n :\n            return missing\n        missing = missing * arr[i] + 1\n    return missing\n\n"}
{"task_id": "Open/37", "completion": "    if n == 0 or n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    else :\n        dp = [0 for i in range(n+1)]\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n+1) :\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]\n"}
{"task_id": "Open/38", "completion": "    total_area = 0\n    side = 1\n    while side <= min(l, b) :\n        total_area += side * side\n        side += 1\n    return total_area\n"}
{"task_id": "Open/39", "completion": "    return sum( range(1, N+1) )\n"}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    count = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            count += 1\n        else :\n            max_zeros = max(max_zeros, count)\n            count = 0\n    return max_zeros\n\n"}
{"task_id": "Open/41", "completion": "    max_len = 0\n    curr_len = 0\n    for i in range(n) :\n        if arr[i]!= 0 :\n            curr_len += 1\n        else :\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n    max_len = max(max_len, curr_len)\n    return max_len\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/42", "completion": "    \n    # Step 1.\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0], a[-1])\n    else :\n        return max(a)\n    \n    # Step 2.\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0], a[-1])\n    else :\n        return max(a)\n    \n    # Step 3.\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0], a[-1])\n    else :\n        return max(a)\n    \n    # Step 4.\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0], a[-1])\n    else :\n        return max(a)\n    \n    # Step 5.\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0], a[-1])\n   "}
{"task_id": "Open/43", "completion": "    \n    count = 0\n    for i in range( n ) :\n        for j in range( i + 1, n ) :\n            count += ( array[i] * array[j] ) < k\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/44", "completion": "    arr.sort()\n    sum = 0\n    for i in range( n ) :\n        sum += abs( arr[i] - i + 1 )\n    return sum\n\n"}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    min_cost = 0\n    for i in range(1,n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n            min_cost = i\n    return min_cost * min_cost\n\n"}
{"task_id": "Open/46", "completion": "    \n    max_diff = 0\n    for i in range( len( array ) ) :\n        max_diff = max( max_diff, array[i] - i )\n    return max_diff\n\n"}
{"task_id": "Open/47", "completion": "    x = (x1 * b) - (x2 * b)\n    y = (y1 * c) - (y2 * c)\n    if x == 0 :\n        return True\n    elif y == 0 :\n        return False\n    else :\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/48", "completion": "    \n    count = 0\n    for i in range ( 0, a ) :\n        count += 1\n        a = i + ( a ^ i )\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_val = 0\n    for i in range(L,R+1) :\n        max_val = max(max_val, i & max_val)\n    return max_val\n"}
{"task_id": "Open/50", "completion": "    \n    smallest = -1\n    \n    for i in range( n ) :\n        if a[i] % n!= 0 :\n            smallest = a[i]\n    \n    return smallest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range ( n ) :\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    result = 0\n    for i in range( n ) :\n        for j in range( n ) :\n            if arr[i][j] % 2 == 1 :\n                for k in range( n ) :\n                    result ^= arr[i][k] * arr[k][j]\n    return result\n\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range ( N ) :\n        count += ( i ^ count )\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in a :\n        sum += i\n    if sum == k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/55", "completion": "    return ( n & ( n - 1 ) ) == 0\n"}
{"task_id": "Open/56", "completion": "    \n    max_partitions = 0\n    current_partition = 1\n    \n    for i in range( len( s ) ) :\n        if s[i] == s[i-1] :\n            current_partition += 1\n        else :\n            max_partitions = max( max_partitions, current_partition )\n            current_partition = 1\n    \n    max_partitions = max( max_partitions, current_partition )\n    \n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2,N+1) :\n        result = result + var1 * var2\n        var1 = var2\n        var2 = result\n    return result\n\n"}
{"task_id": "Open/59", "completion": "    if len( arr ) == 0 :\n        return 0\n    if len( arr ) == 1 :\n        return arr[0]\n    if len( arr ) == 2 :\n        return arr[0] + arr[1]\n    if len( arr ) == 3 :\n        return arr[0] + arr[1] + arr[2]\n    if len( arr ) == 4 :\n        return arr[0] + arr[1] + arr[2] + arr[3]\n    if len( arr ) == 5 :\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n    if len( arr ) == 6 :\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n    if len( arr ) == 7 :\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n    if len( arr ) == 8 :\n        return arr[0] +"}
{"task_id": "Open/60", "completion": "    if n == 0 :\n        return False\n    for a in range ( 0, int( n**0.5 + 1 ) ) :\n        b = int( n - a**2 )\n        if b == a + b :\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    \n    # Step 1. Initialize a variable `count` as 0.\n    count = 0\n    \n    # Step 2. Check if `a` is empty or if the length of `a` is greater than the length of `b`. If either of these conditions is true, return -1.\n    if len(a) == 0 or len(a) > len(b):\n        return -1\n    \n    # Step 3. Calculate the maximum number of times `a` can be repeated to form `b` by dividing the length of `b` by the length of `a`.\n    count = max(count, len(a)//len(b))\n    \n    # Step 4. Iterate `count` from 1 to the maximum number of repetitions calculated in step 3.\n    #    - Check if `a` repeated `count` times is equal to `b`. If true, return `count`.\n    for i in range(1, count+1):\n        if a == b*i:\n            return i\n    \n    # Step 5. If no match is found in step 4, return -1.\n    return -1\n\n"}
{"task_id": "Open/62", "completion": "    modified_str = \"\"\n    for i in range( len( str ) - 1 ) :\n        if str[ i ] > str[ i + 1 ] :\n            modified_str += str[ i ]\n            modified_str += str[ i + 1 ]\n            modified_str += str[ i ]\n            modified_str += str[ i + 1 ]\n        else :\n            modified_str += str[ i ]\n    modified_str += str[ 0 ]\n    return modified_str\n"}
{"task_id": "Open/63", "completion": "    min_value = arr[0]\n    for i in range(1,n) :\n        min_value = min(min_value,math.log(arr[i]))\n    return min_value\n\n"}
{"task_id": "Open/64", "completion": "    if len(s) == 0 or s[0]!= '1' :\n        return '-1'\n    start = 0\n    end = 0\n    max_len = 0\n    for i in range( len(s) ) :\n        if s[i] == '1' :\n            start = end + 1\n        end = i\n        max_len = max(max_len, end - start + 1)\n    return s[start:start + max_len]\n"}
{"task_id": "Open/65", "completion": "    d = {}\n    for i in a :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    for i in a :\n        if d[i] > k :\n            del d[i]\n    return len(d)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/66", "completion": "    if n == 0 :\n        return 0\n    if k == 0 :\n        return 0\n    if k > n :\n        return 0\n    if k < 0 :\n        return 0\n    if n % 2 == 0 :\n        return ( ( arr[n//2] + arr[n//2-1] ) / 2 )\n    else :\n        return ( arr[n//2] )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/67", "completion": "    \n    # Step 1. Initialize step count as 0.\n    step_count = 0\n    \n    # Step 2. Count the number of positive, negative, and zero elements in the array.\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    for i in a :\n        if i == 1 :\n            pos_count += 1\n        elif i == -1 :\n            neg_count += 1\n        else :\n            zero_count += 1\n    \n    # Step 3. For each negative element, add the absolute difference between the element and -1 to the step count.\n    for i in range(0, n) :\n        if a[i] == -1 :\n            step_count += abs(a[i] - -1)\n        else :\n            step_count += abs(a[i] - 1)\n    \n    # Step 4. For each positive element, add the absolute difference between the element and 1 to the step count.\n    for i in range(0, n) :\n        if a[i] == 1 :\n            step_count += abs"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    v = []\n    n -= 1\n    while n!= 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in reversed(v) :\n        result = result * 10 + i\n    return result\n"}
{"task_id": "Open/69", "completion": "    if n == 0 :\n        return False\n    else :\n        return areSetBitsIncreasing ( n >> 1 )\n"}
{"task_id": "Open/70", "completion": "    \n    if x > n :\n        return x\n    \n    remainder = n % x\n    if remainder <= (n // 2) :\n        return n - remainder\n    else :\n        return n + (x - remainder)\n"}
{"task_id": "Open/71", "completion": "    \n    sum = 0\n    for i in range( n ) :\n        sum += i\n        sum += 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum = sum + i\n    return sum\n"}
{"task_id": "Open/73", "completion": "    max_value = -1\n    count_dict = {}\n    for i in arr :\n        if i not in count_dict :\n            count_dict[i] = 1\n        else :\n            count_dict[i] += 1\n    for i in count_dict :\n        if i == max_value :\n            max_value = max_value + 1\n    return max_value\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n) :\n        for j in range(n) :\n            if a[i] > a[j] :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/75", "completion": "    return int(bin(n)[2:],2)\n"}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range(1,n-2) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            changes += 1\n            A[i+1] = 0\n    return changes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/77", "completion": "    \n    degree = radian * 180 / math.pi\n    return degree\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n / 2)\n"}
{"task_id": "Open/79", "completion": "    \n    sum = (n/2) * (2*a + (n-1)*d)\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 1 :\n        return 1\n    else :\n        power = 1\n        while n % 2 == 0 :\n            power = power * 2\n            n = n / 2\n        return power\n"}
{"task_id": "Open/81", "completion": "    count = 0\n    for i in range(moves) :\n        row = row + 1\n        column = column + 1\n        if row > 8 or column > 8 :\n            count += 1\n    return count\n"}
{"task_id": "Open/82", "completion": "    sum = 0\n    for i in range ( n ) :\n        sum += i\n    return sum\n\n"}
{"task_id": "Open/83", "completion": "\n    # Step 1. Initialize an empty list to store the last occurrence of each character in the string.\n    last = []\n    for i in s :\n        last.append(i)\n    \n    # Step 2. Iterate through the string and update the last occurrence of each character in the list.\n    for i in range( len( s ) ) :\n        if last[i] < last[i+1] :\n            last[i], last[i+1] = last[i+1], last[i]\n    \n    # Step 3. Sort the string.\n    last.sort()\n    \n    # Step 4. Iterate through the string and compare each character with its corresponding character in the sorted string.\n    for i in range( len( s ) ) :\n        if last[i]!= s[i] :\n            last[i], last[i+1] = last[i+1], last[i]\n    \n    # Step 5. Return the modified string.\n    return ''.join( last )\n\n"}
{"task_id": "Open/84", "completion": "    arr = [0] * n\n    for i in range(l, r+1) :\n        if i % 2 == 0 :\n            arr[i] += 1\n    return sum(arr)\n"}
{"task_id": "Open/85", "completion": "    if x > y :\n        x, y = y, x\n    if x % y == 0 :\n        return x\n    else :\n        return getHCF ( x, y // 2 )\n"}
{"task_id": "Open/86", "completion": "    list = [A,B]\n    for i in range(N-2) :\n        list.append(list[-1]+list[-2])\n    return list[N-1]\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)) :\n        if str[i:i+len(substr)] == substr :\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "    counter = 0\n    for i in range(A,B+1) :\n        for j in range(i+1,C+1) :\n            for k in range(j+1,C+1) :\n                if i*k > j*j :\n                    counter += 1\n    return counter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range( l, r + 1 ) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    d = {}\n    max_len = 0\n    for i in arr :\n        if i in d :\n            max_len = max(max_len, d[i] + 1)\n        else :\n            max_len = max(max_len, 2)\n        d[i] = max_len\n    return max_len\n\n\n"}
{"task_id": "Open/92", "completion": "\n    max_len = 0\n    max_substring = \"\"\n    \n    for i in range( len( str ) ) :\n        if str[i].isalnum() :\n            if i % 2 == 0 :\n                max_len = max( max_len, len( str[i:i+2] ) )\n            else :\n                max_substring = max( max_substring, str[i:i+2] )\n    if max_len == 0 :\n        return \"-1\"\n    else :\n        return max_substring\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1 :\n        n = n // 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    s = str(n)\n    for i in range(n-1,-1,-1) :\n        if k >= 0 :\n            if k >= 26 :\n                s = s.replace(s[i], 'z'+str(26-k)+'a')\n            else :\n                s = s.replace(s[i], 'z'+str(97+k)+'a')\n        else :\n            s = s.replace(s[i], 'a')\n    return s\n"}
{"task_id": "Open/95", "completion": "    \n    # Step 1. Initialize total distance covered as 0.\n    totalDistance = 0\n    \n    # Step 2. Calculate the distance covered by dividing the fuel by the number of stops and add it to the total distance covered.\n    while n > 0 :\n        totalDistance += fuel\n        n -= 1\n    \n    # Step 3. Decrement the number of stops by 1.\n    n = 1\n    \n    # Step 4. Repeat steps 2 and 3 until there are no more stops.\n    while n > 0 :\n        totalDistance += fuel\n        n -= 1\n    \n    # Step 5. Return the total distance covered.\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    \n    total = 0\n    sum_before = 0\n    \n    for i in arr :\n        total += i\n        sum_before += i\n        \n    if total == sum_before :\n        return 1\n    else :\n        return 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "    \n    if a == b and c == k :\n        return True\n    elif k == 0 :\n        return False\n    elif k % 2 == 0 :\n        return True\n    elif a == b and c % k == 0 :\n        return True\n    elif a == c and b % k == 0 :\n        return True\n    elif b == c and a % k == 0 :\n        return True\n    elif b == c and b % k == 0 :\n        return True\n    elif b == c and c % k == 0 :\n        return True\n    elif b == c and b % k == 0 :\n        return True\n    elif b == c and c % k == 0 :\n        return True\n    elif b == c and b % k == 0 :\n        return True\n    elif b == c and c % k == 0 :\n        return True\n    elif b == c and c % k == 0 :\n        return True\n    elif b == c and b % k == 0 :\n        return True\n    elif b == c and c % k == 0 :\n        return True\n    elif b == c and c % k =="}
{"task_id": "Open/100", "completion": "    if x == y :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range( len( s ) ) :\n        if s[i]!= s[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for char in string :\n        if char == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n\n"}
{"task_id": "Open/103", "completion": "    \n    minRemovals = 0\n    arr.sort()\n    for i in range(1,n) :\n        if arr[i] - arr[i-1] > 1 :\n            minRemovals += arr[i] - arr[i-1]\n    return minRemovals\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/104", "completion": "    \n    # Step 1. Convert `left` and `right` to binary representation.\n    left_bin = bin(left)\n    right_bin = bin(right)\n    \n    # Step 2. Initialize a variable `max_bits` as 0.\n    max_bits = 0\n    \n    # Step 3. Iterate through the binary representation of `left`.\n    for bit in left_bin :\n        if bit == '1' :\n            max_bits += 1\n            \n    # Step 4. Convert `max_bits` number of bits to 1 in the binary representation of `left`.\n    left_bin = left_bin.replace('1', '0')\n    \n    # Step 5. Convert the modified binary representation of `left` back to decimal.\n    left_decimal = int(left_bin,2)\n    \n    # Step 6. If the decimal representation of `left` is greater than `right`, return `right`.\n    if left_decimal > right :\n        return right\n    \n    # Step 7. Return the decimal representation of `left`.\n    return left_decimal\n"}
{"task_id": "Open/105", "completion": "    power = 1\n    while power <= n :\n        power = power * 2\n    return power\n"}
{"task_id": "Open/106", "completion": "    \n    sum_divisors = 0\n    for i in range ( 1, n ) :\n        if n % i == 0 :\n            sum_divisors += i\n    if sum_divisors == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "    if N < 100 or N > 400 :\n        return \"Invalid year\"\n    else :\n        leapYear = N & 0b11\n        nonLeapYear = (N & 0b0011) >> 2\n        oddDays = (N - leapYear) + (N - nonLeapYear)\n        return oddDays\n"}
{"task_id": "Open/108", "completion": "    \n    if a < 0 :\n        return -1\n    else :\n        return a * (a + 1) / 2\n"}
{"task_id": "Open/109", "completion": "    string = str(n)\n    count = 0\n    for i in string :\n        if i == d :\n            count += 1\n    return count\n"}
{"task_id": "Open/110", "completion": "    \n    # Step 1. Convert the integer to a string.\n    s = str(n)\n    \n    # Step 2. Iterate through each digit in the string.\n    for i in s :\n        if s.count(i) > 1 :\n            return False\n    \n    # Step 3. If no repeated digits are found, return True.\n    return True\n"}
{"task_id": "Open/111", "completion": "    \n    # Step 1. Iterate through the list of integers.\n    for i in a :\n        # Step 2. Divide each element by 5 and 3 until it is no longer divisible by either.\n        while i % 5 == 0 and i % 3 == 0 :\n            i = i / 5\n            i = i / 3\n        # Step 3. Check if all elements are equal.\n        if i == n :\n            return True\n    # Step 4. Return False.\n    return False\n"}
{"task_id": "Open/112", "completion": "\n    # Step 1. Initialize an array with length n+1 and all elements set to 0.\n    arr = [0] * (n+1)\n    arr[0] = 4\n    arr[1] = 7\n\n    # Step 2. Set the first element of the array to 4 and the second element to 7.\n    for i in range(2,n+1) :\n        if i % 2 == 0 :\n            arr[i] = arr[i//2] * 10\n        else :\n            arr[i] = arr[(i//2)-1] * 10\n\n    # Step 3. Iterate through the array starting from index 3 to n+1.\n    for i in range(3,n+1) :\n        print(arr[i],end=\" \")\n    print()\n\n    # Step 4. Return the value at index n of the array.\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(2,n+1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10\n        else :\n            array[i] = array[(i//2)-1] * 10\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "    \n    # Step 1. Initialize an array with length n+1 and all elements set to 0.\n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    \n    # Step 2. Set the first element of the array to 1 and the second element to 2.\n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10 + 1\n        else :\n            array[i] = array[(i//2)-1] * 10 + 2\n    \n    # Step 3. Iterate through the array starting from index 2.\n    for i in range(2, n+1) :\n        print(array[i], end = \" \")\n    print()\n    \n    # Step 4. Return the element at index n.\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    # Step 1. Initialize an empty string to store the concatenated elements.\n    s = \"\"\n\n    # Step 2. Iterate through the array of integers.\n    for i in a :\n        s = s + str(i)\n\n    # Step 3. Convert the concatenated string to an integer.\n    i = int(s)\n\n    # Step 4. Check if the integer is divisible by 11.\n    if i % 11 == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b * h\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    words = string.split()\n    new_string = ''\n    for word in words :\n        if word.isalpha() :\n            new_string += word[0].upper() + word[-1].upper() +''\n        else :\n            new_string += word +''\n    return new_string\n"}
{"task_id": "Open/118", "completion": "    return int( math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2 )\n"}
{"task_id": "Open/119", "completion": "    if len(arr) == 0 :\n        return False\n    else :\n        seen = set()\n        for i in arr :\n            if i in seen :\n                return False\n            else :\n                seen.add(i)\n        return True\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "Open/120", "completion": "    set = set()\n    for i in range( len( string ) ) :\n        if i + 1 < len( string ) :\n            set.add( string[i] + string[i+1] )\n    return len( set )\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    maximum = 0\n    for i in ss :\n        if i.isdigit() :\n            maximum = maximum * 10 + int(i)\n        else :\n            maximum = max(maximum, int(i))\n    return maximum\n"}
{"task_id": "Open/123", "completion": "    longest = \"\"\n    current = \"\"\n    for i in range(length) :\n        if s[i].isdigit() :\n            current += s[i]\n        else :\n            if len(current) > len(longest) :\n                longest = current\n            current = \"\"\n    if len(current) > len(longest) :\n        longest = current\n    return longest\n"}
{"task_id": "Open/124", "completion": "    if N > M :\n        return (N - M) * (N - M)\n    else :\n        return (M - N) * (M - N)\n"}
{"task_id": "Open/125", "completion": "    for i in range(0,length) :\n        if string[i]!= string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    power = 1\n    while power * 2 <= n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/127", "completion": "    A = str(A)\n    B = str(B)\n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/128", "completion": "    return ( x - y )!= 1\n"}
{"task_id": "Open/129", "completion": "    Sn_1 = \"12\"\n    Sn_2 = \"1213\"\n    Sn_3 = \"1\"\n    for i in range ( 3, n ) :\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    steps = 0\n    for i in range(1,n) :\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "    \n    remainder = n % 4\n    if remainder == 0 or remainder == 3 :\n        return 0\n    elif remainder == 1 or remainder == 2 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/132", "completion": "    m = 0\n    sum = 0\n    for i in range(1,N+1) :\n        if (a % i == 0) :\n            m += 1\n        sum += (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if ( arr[0] % 2 == 0 ) :\n        return True\n    elif ( arr[-1] % 2 == 0 ) :\n        return True\n    elif ( n % 2 == 0 ) :\n        return True\n    else :\n        return False\n\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/135", "completion": "    \n    if N == 1 :\n        return (R - L)\n    elif N > 1 :\n        return (countSum (N - 1, L, R) + 1)\n    else :\n        return 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/136", "completion": "    \n    arr.sort()\n    min_num = 1\n    for i in range(n) :\n        if arr[i] == min_num :\n            min_num += 1\n        elif arr[i] > min_num :\n            return min_num\n    return min_num\n\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1. Convert the string into a list of characters.\n    list_of_chars = list(s)\n    list_of_chars.sort()\n    list_of_chars = ''.join(list_of_chars)\n    \n    # Step 2. Sort the list of characters in ascending order.\n    list_of_chars = list_of_chars.sort()\n    \n    # Step 3. Join the sorted list of characters into a string.\n    string_of_chars = ''.join(list_of_chars)\n    \n    # Step 4. Convert the string into an integer.\n    integer_of_chars = int(string_of_chars)\n    \n    # Step 5. Return the integer.\n    return integer_of_chars\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n        elif arr[i] < arr[i-1] :\n            arr[i] = arr[i-1]\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for c in s :\n        sum += ord(c)\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/140", "completion": "    banknotes = 0\n    max_banknotes_A = 0\n    banknotes_B = 0\n    remaining_amount = S\n    while remaining_amount > 0 :\n        if remaining_amount % B == 0 :\n            banknotes_B += 1\n            remaining_amount = remaining_amount // B\n        else :\n            banknotes += 1\n            max_banknotes_A += 1\n            remaining_amount = S\n    if banknotes_B == 0 :\n        return -1\n    else :\n        return banknotes_B\n"}
{"task_id": "Open/141", "completion": "    \n    # Step 1. Import the math module.\n    import math\n    \n    # Step 2. Define a function called lcm that takes two integers, x and y, as parameters.\n    def lcm ( x, y ) :\n        # Step 3. Use the math.gcd() function to find the greatest common divisor (GCD) of x and y.\n        gcd = math.gcd ( x, y )\n        \n        # Step 4. Calculate the LCM using the formula LCM = (x * y) / GCD.\n        return ( x * y ) / gcd\n    \n    # Step 5. Return the LCM.\n    return lcm ( x, y )\n"}
{"task_id": "Open/142", "completion": "    \n    # Step 1. Convert the given integer to its binary representation.\n    binary = bin(n)\n    binary = binary[2:]\n    \n    # Step 2. Count the number of trailing zeros in the binary representation.\n    count = 0\n    for i in range(len(binary)) :\n        if binary[i] == '0' :\n            count += 1\n            \n    # Step 3. Return the count of trailing zeros.\n    return count\n"}
{"task_id": "Open/143", "completion": "    max_sum = 0\n    max_index = -1\n    left_xor = 0\n    right_xor = 0\n    curr_sum = 0\n    for i in range( n ) :\n        curr_sum = curr_sum + arr[i]\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n            max_index = i\n        left_xor = left_xor ^ arr[i]\n        right_xor = right_xor ^ arr[i+1]\n    return max_index\n\n"}
{"task_id": "Open/144", "completion": "    max_len = 1\n    curr_len = 1\n    for i in range( 1, n ) :\n        if arr[i] < arr[i-1] :\n            curr_len += 1\n        else :\n            curr_len = 1\n        if curr_len > max_len :\n            max_len = curr_len\n    return max_len\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/145", "completion": "    if len(arr) == 0 :\n        return -1\n    if len(arr) == 1 :\n        return arr[0]\n    if k == 0 :\n        return -1\n    if k == 1 :\n        return arr[0]\n    if k == -1 :\n        return -1\n    min_val = min(arr)\n    for i in range(n) :\n        if arr[i]!= min_val :\n            return -1\n    return min_val + k\n"}
{"task_id": "Open/146", "completion": "\n    num = 1\n    count = 1\n    seen = set()\n\n    while num not in seen :\n        seen.add(num)\n        num = (num * 10 + 1) % K\n        count += 1\n\n    if num == 0 :\n        return count\n    else :\n        return -1\n"}
{"task_id": "Open/147", "completion": "    target = arr[n//2]\n    operations = 0\n    for i in range(n) :\n        operations += abs(arr[i] - target)\n    return operations\n"}
{"task_id": "Open/148", "completion": "    a = 3\n    b = 3\n    sum = 0\n    for i in range ( 1, n ) :\n        sum = sum + a\n        a = b\n        b = a\n    return sum\n"}
{"task_id": "Open/149", "completion": "    \n    import math\n    return math.sqrt(s)\n"}
{"task_id": "Open/150", "completion": "    p = p/100\n    q = q/100\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range( len1 ) :\n        result = result ^ ord( str1[i] )\n    return result\n"}
{"task_id": "Open/152", "completion": "    \n    # Step 1. Convert the input integer to its binary representation.\n    bin_n = bin(n)[2:]\n    \n    # Step 2. Iterate through the binary representation.\n    for i in range(len(bin_n)) :\n        if bin_n[i]!= '1' :\n            return False\n    \n    # Step 3. Return True.\n    return True\n"}
{"task_id": "Open/153", "completion": "\n    vowels = [ 'a', 'e', 'i', 'o', 'u' ]\n    for i in range ( len ( s ) ) :\n        if s[ i ] in vowels :\n            if i == 0 :\n                return False\n            elif i == len ( s ) - 1 :\n                return True\n        else :\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1) :\n        if i % 10 == k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    min_diff = math.inf\n    for i in range ( 1, int ( n ) + 1 ) :\n        if ( n % i == 0 ) :\n            min_diff = min ( min_diff, abs ( i ** 2 - n ) )\n    return min_diff\n\n"}
{"task_id": "Open/156", "completion": "    \n    if r < 0 :\n        return -1\n    else :\n        return (3 * (3 * r) / 2)\n"}
{"task_id": "Open/157", "completion": "    \n    # Step 1. Convert the input string into a list of characters.\n    list_of_characters = list(s)\n    list_of_characters.sort()\n    \n    # Step 2. Sort the list of characters in alphabetical order.\n    new_string = ''.join(list_of_characters)\n    \n    # Step 3. Convert the sorted list of characters back into a string.\n    return new_string\n"}
{"task_id": "Open/158", "completion": "\n    low = 0\n    high = size-1\n    while low <= high :\n        mid = (low + high) // 2\n        if ar[mid] - ar[low]!= mid - low :\n            high = mid - 1\n        else :\n            low = mid + 1\n    return ar[low]\n\n"}
{"task_id": "Open/159", "completion": "    \n    count = 0\n    for i in range( len( str ) ) :\n        if str[i] == \"010\" :\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    for i in range(n) :\n        if arr[i] % 2 == 0 :\n            return arr[i]\n    return None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in arr :\n        xorArr = xorArr ^ i\n    for i in arr :\n        if xorArr > ans :\n            ans = xorArr\n    return ans\n\n"}
{"task_id": "Open/162", "completion": "    if sx == dx and sy == dy :\n        return True\n    elif dx < sx or dy < sy :\n        return False\n    elif (dx - sx) % sy == 0 or (dy - sy) % sx == 0 :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/163", "completion": "    \n    if n % 2 == 0 :\n        return 0\n    else :\n        return (n - 1) * (n - 2) // 4\n\n"}
{"task_id": "Open/164", "completion": "    count = {}\n    for i in arr :\n        if i not in count :\n            count[i] = 1\n        else :\n            count[i] += 1\n    count = 1\n    for i in count :\n        count *= i\n    return count\n\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 1\n    elif height == 1 :\n        return 2\n    else :\n        return AVLnodes(height-1) + AVLnodes(height-2)\n"}
{"task_id": "Open/166", "completion": "    if source == dest :\n        return 0\n    if source < dest :\n        return steps( source + step, step, dest )\n    else :\n        return steps( source - step, -step, dest )\n"}
{"task_id": "Open/167", "completion": "    \n    # Step 1. Initialize the sequence with \"1\".\n    seq = \"1\"\n    \n    # Step 2. Iterate n-1 times.\n    for i in range( n-1 ) :\n        # Initialize a new sequence.\n        newSeq = \"\"\n        # Iterate through the current sequence.\n        for j in range( len( seq ) ) :\n            # Count the number of consecutive digits.\n            count = 0\n            # Iterate through the current sequence.\n            for k in range( len( seq ) ) :\n                # Check if the current digit is the same as the next digit.\n                if seq[j] == seq[k] :\n                    count += 1\n                # Append the count and the digit to the new sequence.\n                else :\n                    newSeq += str( count ) + seq[j]\n                    count = 1\n                    seq = newSeq\n            # Set the current sequence to the new sequence.\n            seq = newSeq\n        # Set the current sequence to the new sequence.\n        seq = seq + str( count ) + seq[j]\n    \n    # Step 3. Return the current sequence."}
{"task_id": "Open/168", "completion": "    \n    max_len = 0\n    curr_len = 0\n    \n    for i in range( len( arr ) ) :\n        if arr[ i ] > 0 :\n            curr_len += 1\n        else :\n            max_len = max( max_len, curr_len )\n            curr_len = 0\n    \n    if arr[ 0 ] > 0 :\n        max_len = max( max_len, curr_len )\n    \n    return max_len\n\n"}
{"task_id": "Open/169", "completion": "    \n    # Step 1. Calculate the absolute values of m and n.\n    abs_m = abs(m)\n    abs_n = abs(n)\n    \n    # Step 2. Calculate the square of the absolute values of m and n.\n    square_m = abs_m * abs_m\n    square_n = abs_n * abs_n\n    \n    # Step 3. Calculate the sum of the squares of the absolute values of m and n.\n    sum_square_m = abs_m * abs_m\n    sum_square_n = abs_n * abs_n\n    \n    # Step 4. Calculate the square root of the sum of the squares.\n    square_root = math.sqrt(sum_square_m + sum_square_n)\n    \n    # Step 5. Calculate the product of the absolute values of m and n.\n    product = abs_m * abs_n\n    \n    # Step 6. Divide the product by the square root.\n    normal = product / square_root\n    \n    return normal\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    sum = 0\n    for i in range(n) :\n        sum += arr[i]\n        if sum < k :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(n) :\n        for j in range(i+1, n) :\n            for k in range(j+1, n) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if i % 2 == 0 or i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return int(bin(n)[2:].zfill(m), 2)\n"}
{"task_id": "Open/174", "completion": "    \n    # Step 1. Replace K with 0 if K is equal to 9.\n    if K == 9 :\n        K = 0\n        \n    # Step 2. Calculate the total number of numbers between L and R (inclusive).\n    total = L + R\n    \n    # Step 3. Calculate the number of numbers divisible by 9 by dividing the total number by 9.\n    divisible = total // 9\n    \n    # Step 4. Calculate the remainder by taking the total number modulo 9.\n    remainder = total % 9\n    \n    # Step 5. Initialize count as 0.\n    count = 0\n    \n    # Step 6. Iterate through the numbers from R to R - remainder (inclusive).\n    for i in range( R, R - remainder ) :\n        if ( i % 9 == K ) :\n            count += 1\n            \n    return count\n"}
{"task_id": "Open/175", "completion": "    product = n * math.log10(n)\n    return str(product)[0:k]\n"}
{"task_id": "Open/176", "completion": "    \n    for i in range(1,n-2) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    if a > b :\n        a, b = b, a\n    if a > c :\n        a, c = c, a\n    return min(a, b) - max(a, c)\n"}
