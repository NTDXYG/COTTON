{"task_id": "Open/0", "completion": "\n    sum = 0\n    count = 0\n    for i in range(N) :\n        sum += arr[i]\n        if sum > sum + K :\n            count += 1\n    return count\n\n\narr = [1,2,3,4,5,6,7,8,9,10]\nN = len(arr)\nK = 3"}
{"task_id": "Open/1", "completion": "\n    min_val = arr[0]\n    min_freq = 0\n    for i in range(1, n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n            min_freq = 1\n    return min_freq\n\n"}
{"task_id": "Open/2", "completion": "\n    binary = bin(n)\n    if binary[0] == '1' :\n        return \"Yes\"\n    else :\n        return \"No\"\n\n\nn = int(input())\nl = int(input())\nr = int(input())\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n\n\nA = [1,2,3,4,5,6,7,8,9,10]"}
{"task_id": "Open/4", "completion": "\n    total_sum = 0\n    for i in a :\n        total_sum += i\n    if total_sum % 2 == 0 :\n        return False\n    sum1 = 0\n    for i in a :\n        sum1 += i\n    if sum1 == total_sum / 2 :\n        return True\n    return False\n\n"}
{"task_id": "Open/5", "completion": "\n    if x % 2 == 0 :\n        return 1\n    else :\n        return 0\n\n"}
{"task_id": "Open/6", "completion": "\n    output = []\n    for i in range( len( vec ) ) :\n        if vec[i] < 0 :\n            output.append( i + 1 )\n    return output\n\n"}
{"task_id": "Open/7", "completion": "\n    max_len = 0\n    curr_len = 1\n    for i in range( len(arr) ) :\n        curr_len = 1\n        for j in range( len(arr) ) :\n            if arr[j] == arr[i] :\n                curr_len += 1\n            else :\n                if curr_len > max_len :\n                    max_len = curr_len\n    return max_len\n\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,"}
{"task_id": "Open/8", "completion": "\n    count = 0\n    for i in a :\n        count += 1\n        if i % 2 == 0 :\n            for j in range(2, int(math.sqrt(i))+1) :\n                if i % j == 0 :\n                    count += 1\n    return count\n\n"}
{"task_id": "Open/9", "completion": "\n    arr.sort()\n    diff = 0\n    for i in range ( 1, n ) :\n        diff += arr[i] - arr[i - 1]\n    return diff\n\n"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    for i in range( len( A ) ) :\n        if A[i] == B[i] :\n            total_time += 1\n        else :\n            B.insert( i, A[i] )\n            A.insert( i, B[i] )\n    return total_time\n\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in array :\n        if i % 2 == 0 :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/12", "completion": "\n    counter = 0\n    for i in range( len( s ) ) :\n        set = set()\n        for j in range( len( s ) ) :\n            if s[j] in set :\n                counter += 1\n            else :\n                set.add( s[j] )\n        if len( set ) >= k :\n            counter += 1\n    return counter\n\n"}
{"task_id": "Open/13", "completion": "    while n > 1 :\n        n = n / 2\n        if n == 1 :\n            return True\n        elif n % 2 == 0 :\n            return False\n        else :\n            n += 1\n    return False\n"}
{"task_id": "Open/14", "completion": "    if n == 0 :\n        return n\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return n + 1\n    elif n == 3 :\n        return 0\n    else :\n        return \"\"\n\n"}
{"task_id": "Open/15", "completion": "\n    a = random.randint( 2, n-1 )\n    if a == 1 :\n        return 1\n    else :\n        for i in range ( t ) :\n            a = random.randint( 2, n-1 )\n            if a == 1 :\n                return 1\n            else :\n                return -1\n"}
{"task_id": "Open/16", "completion": "\n    # Step 1. Iterate through the indices of the strings.\n    for i in range ( len ( s1 ) ) :\n        if s1[i] == '0' and s2[i] == '1' :\n            if i == 0 :\n                return True\n            elif i == 1 :\n                return True\n            elif i == 2 :\n                return True\n            elif i == 3 :\n                return True\n            elif i == 4 :\n                return True\n            elif i == 5 :\n                return True\n            elif i == 6 :\n                return True\n            elif i == 7 :\n                return True\n            elif i == 8 :\n                return True\n            elif i == 9 :\n                return True\n            elif i == 10 :\n                return True\n            elif i == 11 :\n                return True\n            elif i == 12 :\n                return True\n            elif i == 13 :\n                return True\n            elif i == 14 :\n                return True\n            elif i == 15 :\n                return True\n            elif i == 16 :\n                return True\n            elif i == 17 :\n                return True\n            elif i == 18"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d - (b * c)) )\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(len(s)) :\n        if s[i] == '1' :\n            count += 1\n        elif s[i] == '0' :\n            count += 1\n    return ( min(count, length - count ), length - count )\n\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n+1) :\n        if i % i == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0:\n        return 0\n    elif y > 0:\n        return product( x, y - 1 ) + x\n    else:\n        return x\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if ( a[i] % 4 == 0 ) :\n            count0 += 1\n        elif ( a[i] % 4 == 1 ) :\n            count1 += 1\n        elif ( a[i] % 4 == 2 ) :\n            count2 += 1\n        elif ( a[i] % 4 == 3 ) :\n            count3 += 1\n    if ( count0 % 4 == 0 ) :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 1\n    curr_len = 1\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            curr_len += 1\n        else :\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    return max_len\n\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/23", "completion": "    \n    if i == n :\n        count += 1\n        return count\n    \n    if sum == 0 :\n        count += 1\n        return count\n    \n    return subsetSum ( arr, n, i + 1, sum, count ) + subsetSum ( arr, n, i + 1, sum, count )\n\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/24", "completion": "\n    return (16 * n**2) - (16 * n) + 6\n\n"}
{"task_id": "Open/25", "completion": "\n    sum_squares = 0\n    sum_numbers = 0\n    for i in range ( 1, n ) :\n        sum_squares += i ** 2\n        sum_numbers += i\n    return sum_squares, sum_numbers, 1\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range( 1, n ) :\n        if n % i == 0 :\n            sum = 0\n            for j in range( i, n ) :\n                if n % j == 0 :\n                    sum += j\n            if sum > max_sum :\n                max_sum = sum\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    if x > y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n\n"}
{"task_id": "Open/29", "completion": "\n    diff = b - a\n    change = diff / a * 100\n    return change\n"}
{"task_id": "Open/30", "completion": "\n    return sum( [ i**2 for i in range(1, n+1) ] ) / n\n\n"}
{"task_id": "Open/31", "completion": "\n    arr.sort()\n    return arr[k-1]\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nk = 3"}
{"task_id": "Open/32", "completion": "\n    return (n-1)**3\n"}
{"task_id": "Open/33", "completion": "\n    # Step 1. Initialize the first term of the sequence as 1\n    firstTerm = 1\n    # Step 2. Iterate from 2 to n\n    for i in range ( 2, n ) :\n        # Step 3. Calculate the current term by multiplying the previous term by 2 and adding the difference between the current index and 1\n        currentTerm = firstTerm * 2 + firstTerm - i\n        # Step 4. Return the nth term\n        return currentTerm\n\n"}
{"task_id": "Open/34", "completion": "\n    count = 0\n    product = 1\n    for i in range( len(a) ) :\n        product *= a[i]\n        if product < k :\n            count += 1\n    return count\n\n\na = [1,2,3,4,5,6,7,8,9]\nk = 5"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range(1,n+1) :\n        count += int(str(i)[d])\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    missing = 0\n    for i in range(1,n+1) :\n        if arr[i] < 0 :\n            missing += i\n    return missing\n\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/37", "completion": "\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    dp = [1] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    total_area = 0\n    side = 1\n    while side <= min(l, b) :\n        area = (l * side) * (b - side)\n        total_area += area\n        side += 1\n    return total_area\n\n"}
{"task_id": "Open/39", "completion": "\n    return sum( [ i for i in range(1, N+1) ] )\n"}
{"task_id": "Open/40", "completion": "\n    max_zeros = 0\n    count = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            count += 1\n        elif arr[i] == 1 :\n            max_zeros = max(max_zeros, count)\n            count = 0\n    return max_zeros\n\n\narr = [0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"}
{"task_id": "Open/41", "completion": "\n    max_len = 0\n    curr_len = 0\n    for i in range ( n ) :\n        if arr[i] == 0 :\n            curr_len += 1\n        else :\n            max_len = max( max_len, curr_len )\n            curr_len = 0\n    return max_len\n\n\narr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}
{"task_id": "Open/42", "completion": "\n    if k == 1 :\n        return a[0]\n    elif k == 2 :\n        return max(a[0:k], a[k:n])\n    else :\n        return max(a[0:k], a[k:n])\n\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i, n ) :\n            if array[i] * array[j] < k :\n                count += 1\n    return count\n\n\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99"}
{"task_id": "Open/44", "completion": "\n    sum = 0\n    for i in range(n) :\n        diff = abs( arr[i] - i ) + 1\n        sum += diff\n    return sum\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/45", "completion": "\n    min_element = arr[0]\n    product = 1\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n            product = 1\n        else :\n            product *= min_element\n    return product\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/46", "completion": "\n    max_diff = 0\n    for i in range( len( array ) ) :\n        diff = array[i] - array[i-1]\n        if diff > max_diff :\n            max_diff = diff\n    return max_diff\n\n"}
{"task_id": "Open/47", "completion": "\n    if ( ( ( x1 - x2 ) ** 2 ) + ( ( y1 - y2 ) ** 2 ) ) ** 0.5 == ( ( a * x1 + b * y1 ) + ( c * x2 + a * y2 ) ) ** 0.5 :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range ( 0, a ) :\n        count = count + (a ^ i)\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max_val = 0\n    for i in range ( L, R ) :\n        for j in range ( i, R ) :\n            if ( i & j ) :\n                max_val = max( max_val, i & j )\n    return max_val\n\n"}
{"task_id": "Open/50", "completion": "\n    smallest = -1\n    for i in range(1,n+1) :\n        if a[i] % i == 0 :\n            smallest = i\n    return smallest\n\na = [1,2,3,4,5,6,7,8,9]\nn = len(a)"}
{"task_id": "Open/51", "completion": "\n    sum = 0\n    for i in range ( 1, n ) :\n        sum += i * i * i\n    return sum\n"}
{"task_id": "Open/52", "completion": "\n    result = 0\n    for i in range(0, len(arr)) :\n        for j in range(0, len(arr[i])) :\n            if arr[i][j] % 2 == 0 :\n                result ^= arr[i][j]\n    return result\n\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(0,N) :\n        count = count ^ i\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    sum = 0\n    for i in a :\n        sum += i\n    length = len(a) - 1\n    if sum == k :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/55", "completion": "\n    if n == 0 :\n        return True\n    else :\n        return n & (1 << (len(str(n)) - 1)) == 1\n"}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    current_partition = 1\n    for i in range ( 1, len ( s ) ) :\n        if s[ i ] == s[ i - 1 ] :\n            current_partition += 1\n        else :\n            max_partitions = max ( max_partitions, current_partition )\n            current_partition = 1\n    return max_partitions\n\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - N % K\n\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2,N) :\n        result = result + var1 * var2\n        var1 = var1 * 100\n        var2 = var2 * 100\n    return result\n\n\narr = [1,2,3,4,5,6,7,8,9,10]\nN = int(input())"}
{"task_id": "Open/59", "completion": "\n    if index == len(arr) :\n        return arr[0]\n    for i in range(len(ranges)) :\n        arr[index] = arr[i]\n        for j in range(i+1, len(ranges)) :\n            arr[j] = arr[j] + ranges[i][0]\n    for i in range(len(reversals)) :\n        arr[index] = arr[index] + reversals[i]\n    return arr[index]\n\narr = [1,2,3,4,5,6,7,8,9,10]\nranges = [(0,10),(0,100),(0,1000),(0,10000),(0,100000)]\nreversals = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,"}
{"task_id": "Open/60", "completion": "\n    if n < 0 :\n        return False\n    if n == 1 :\n        return True\n    for a in range( 2, int(n**0.5) + 1 ) :\n        if n % a == 0 :\n            return False\n    return True\n"}
{"task_id": "Open/61", "completion": "\n    count = 0\n    if len(a) == 0 or len(b) > len(a):\n        return -1\n    else:\n        for i in range(len(a)):\n            if a[i] == b[i] :\n                count += 1\n        return count\n\n\na = input()\nb = input()"}
{"task_id": "Open/62", "completion": "\n    modified_str = \"\"\n    for i in range ( len ) :\n        if str[i] > str[i+1] :\n            modified_str = modified_str + str[i]\n        else :\n            modified_str = modified_str + str[i]\n    return modified_str\n\n"}
{"task_id": "Open/63", "completion": "\n    min_value = math.inf\n    for i in range( n ) :\n        sum = 0\n        for j in range( i, n ) :\n            sum += arr[j] * math.log( arr[j], i )\n        if sum < min_value :\n            min_value = sum\n    return min_value\n\n"}
{"task_id": "Open/64", "completion": "\n    if s == \"\" :\n        return \"-1\"\n    else :\n        start = 0\n        end = 0\n        max_len = 0\n        for i in range(len(s)) :\n            if s[i] == '1' :\n                end = i + 1\n            else :\n                max_len = max(max_len, end - start + 1)\n        return s[start : start + max_len]\n\n"}
{"task_id": "Open/65", "completion": "\n    d = {}\n    for i in range(n) :\n        d[a[i]] = d.get(a[i], 0) + 1\n    for i in range(n) :\n        if d[i] > k :\n            del d[a[i]]\n    return len(a)\n\n"}
{"task_id": "Open/66", "completion": "\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return arr[0]\n    elif n == 2 :\n        return (arr[0] + arr[1]) / 2\n    else :\n        size = len(arr)\n        if size % 2 == 0 :\n            return (arr[size // 2] + arr[size // 2 - 1]) / 2\n        else :\n            return (arr[size // 2] + arr[size // 2 + 1]) / 2\n\n"}
{"task_id": "Open/67", "completion": "    step_count = 0\n    for i in range(n) :\n        step_count += abs(a[i] - 1)\n    return step_count\n\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append( n % 5 )\n        n = n // 5\n    result = 0\n    for i in reversed( v ) :\n        result *= 10 + i\n    return result\n"}
{"task_id": "Open/69", "completion": "\n    # Step 1. Convert the integer to binary representation.\n    n = bin(n)\n    \n    # Step 2. Iterate through the binary representation.\n    for i in range(len(n)) :\n        if n[i] == '1' :\n            if i == 0 :\n                return True\n            else :\n                return False\n    return False\n"}
{"task_id": "Open/70", "completion": "\n    if n > x :\n        return x\n    remainder = n % x\n    if remainder < 0.5 * x :\n        return n - remainder\n    else :\n        return n + (x - remainder)\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range ( n ) :\n        sum += 2\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    finalSum = 0\n    for i in range ( 1, n ) :\n        finalSum = finalSum + i\n    return finalSum\n\n"}
{"task_id": "Open/73", "completion": "\n    # Step 1. Initialize a variable max_value as -1.\n    max_value = -1\n    # Step 2. Initialize a dictionary count_dict to store the count of each value in the array.\n    count_dict = {}\n    # Step 3. Iterate through the array.\n    for i in range(n) :\n        if arr[i] not in count_dict :\n            count_dict[arr[i]] = 1\n        else :\n            count_dict[arr[i]] += 1\n    # Step 4. Iterate through the count_dict.\n    for i in count_dict :\n        if arr[i] == n :\n            max_value = i\n    return max_value\n\n"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(0,n) :\n        if ( a[i] ** 2 > a[i+1] ) :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/75", "completion": "\n    # Step 1. Convert the integer to binary representation.\n    binary = bin( n )\n    # Step 2. Toggle all the bits in the binary representation.\n    toggled = binary[2:]\n    # Step 3. Convert the toggled binary representation back to an integer.\n    toggled_int = int( toggled, 2 )\n    # Step 4. Return the toggled integer.\n    return toggled_int\n"}
{"task_id": "Open/76", "completion": "\n    changes = 0\n    for i in range(1,n-2) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            changes += 1\n            A[i+1] = 0\n    return changes\n\n\nA = [1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1"}
{"task_id": "Open/77", "completion": "\n    return 180 * radian / (2 * pi)\n"}
{"task_id": "Open/78", "completion": "\n    if n == 0 :\n        return 0\n    else :\n        return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = (n/2) * (2*a + (n-1)*d)\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 0 :\n        return 1\n    else :\n        power = 1\n        while n % 2 == 0 :\n            power *= 2\n            n /= 2\n        return power\n"}
{"task_id": "Open/81", "completion": "\n    count = 0\n    for move in moves :\n        new_row = row + move\n        new_column = column + move\n        if new_row < 0 or new_row >= 8 or new_column < 0 or new_column >= 8 :\n            continue\n        if new_row == row and new_column == column :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/82", "completion": "\n    sum = 0\n    for i in range ( n ) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/83", "completion": "\n    # Step 1. Initialize an empty list to store the last occurrence of each character in the string.\n    last_occ = []\n    # Step 2. Iterate through the string and update the last occurrence of each character in the list.\n    for i in s :\n        last_occ.append( i )\n    # Step 3. Sort the string.\n    sorted_s = ''.join( sorted( last_occ ) )\n    # Step 4. Iterate through the string and compare each character with its corresponding character in the sorted string.\n    for i in s :\n        if i not in last_occ :\n            sorted_s = sorted_s[ :-1 ] + i\n    # Step 5. Return the modified string.\n    return sorted_s\n\n"}
{"task_id": "Open/84", "completion": "\n    # Step 1. Create an empty array of length n.\n    array = []\n    for i in range ( n ) :\n        if i % 2 == 0 :\n            array.append ( i )\n    # Step 2. Fill the array with consecutive odd numbers followed by consecutive even numbers.\n    for i in range ( l, r ) :\n        array[i] = ( array[i] + array[i-1] ) % 2\n    # Step 3. Calculate the sum of the elements in the array from index l-1 to index r.\n    sum = 0\n    for i in range ( l, r ) :\n        sum = sum + array[i]\n    return sum\n"}
{"task_id": "Open/85", "completion": "\n    if x % y == 0 :\n        return x\n    else :\n        return getHCF ( x, y / x )\n\n"}
{"task_id": "Open/86", "completion": "\n    # Step 1. Initialize a list with A and B as the first two elements.\n    list = [A, B]\n    # Step 2. Iterate N-2 times.\n    for i in range ( N - 2 ) :\n        # Compute the sum of the last two elements in the list.\n        sum = list[-2] + list[-1]\n        # Append the sum to the list.\n        list.append ( sum )\n    # Step 3. Return the Nth element in the list.\n    return list[len ( list ) - 1]\n\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range( len(str) ) :\n        if str[i] == substr :\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    # Step 1. Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100\n    r = r / 12\n    # Step 2. Convert the loan tenure from years to months by multiplying it by 12\n    t = t * 12\n    # Step 3. Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    EMI = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return EMI\n"}
{"task_id": "Open/89", "completion": "\n    counter = 0\n    for i in range(A, B+1) :\n        for j in range(i+1, B+1) :\n            for k in range(i+1, B+1) :\n                if i * k > j * j :\n                    counter += 1\n    return counter\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range( l, r ) :\n        if ( i % 10 == 0 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    # Step 1. Initialize a dictionary to store the length of the longest arithmetic subsequence for each number in arr.\n    longestAr = {}\n    # Step 2. Initialize the maximum length of arithmetic subsequence as 0\n    maxAr = 0\n    # Step 3. Iterate through each number in arr.\n    for i in range(n) :\n        # Step 4. Initialize a dictionary to store the difference between the current number and all previous numbers.\n        difference = {}\n        # Step 5. Iterate through all previous numbers.\n        for j in range(i + 1, n) :\n            difference[j] = arr[i] - arr[j]\n            if difference in longestAr :\n                longestAr[difference] = maxAr + 1\n            else :\n                longestAr[difference] = 2\n        # Step 6. Update the maximum length of arithmetic subsequence if necessary.\n        if len(difference) > maxAr :\n            maxAr = len(difference)\n    return maxAr\n"}
{"task_id": "Open/92", "completion": "\n    max_len = 0\n    max_substring = \"\"\n    for char in str :\n        if char.isalnum() :\n            if max_len == 0 :\n                max_len = len(max_substring)\n            else :\n                if max_len > len(max_substring) :\n                    max_len = len(max_substring)\n                    max_substring = \"\"\n        else :\n            max_substring += char\n    return max_substring\n\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 1 :\n        if n % 2 == 0 :\n            count += 1\n        n //= 2\n    return count\n"}
{"task_id": "Open/94", "completion": "    if k == 0 :\n        return 'a'\n    elif k == 26 :\n        return 'z'\n    else :\n        return str( ord( input( 'Enter the character to be replaced by:') ) - 26 ) + 'a'\n"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    for i in range(n) :\n        totalDistance += fuel // i\n    return totalDistance\n\n"}
{"task_id": "Open/96", "completion": "\n    total = 0\n    for i in range(n) :\n        total += arr[i]\n    for i in range(n-1) :\n        if total == arr[i] :\n            return 1\n    return 0\n\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    words = sentence.split()\n    for word in words :\n        if word == word.lower () :\n            return True\n    return False\n"}
{"task_id": "Open/98", "completion": "\n    if n == 0 :\n        return 0\n    else :\n        return len(str(n))\n"}
{"task_id": "Open/99", "completion": "\n    if a == 0 :\n        return True\n    elif a == 1 :\n        return False\n    elif a == 2 :\n        return True\n    elif a == 3 :\n        return True\n    elif a == 4 :\n        return True\n    elif a == 5 :\n        return True\n    elif a == 6 :\n        return True\n    elif a == 7 :\n        return True\n    elif a == 8 :\n        return True\n    elif a == 9 :\n        return True\n    elif a == 10 :\n        return True\n    elif a == 11 :\n        return True\n    elif a == 12 :\n        return True\n    elif a == 13 :\n        return True\n    elif a == 14 :\n        return True\n    elif a == 15 :\n        return True\n    elif a == 16 :\n        return True\n    elif a == 17 :\n        return True\n    elif a == 18 :\n        return True\n    elif a == 19 :\n        return True\n    elif a == 20 :\n        return True\n    elif a == 21 :\n        return True\n    elif a == 22 :\n        return True\n   "}
{"task_id": "Open/100", "completion": "\n    # Step 1. Shift the binary representation of x to the left by 32 bits.\n    x = bin(x)\n    x = x[2:]\n    x = x[0:32]\n    # Step 2. Perform a bitwise OR operation with the original x.\n    x = x | y\n    # Step 3. Check if the resulting value is equal to y.\n    if x == y :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in s :\n        if i!= s[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for char in string :\n        if char == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/103", "completion": "\n    minRemovals = 0\n    for i in range ( 1, n ) :\n        if abs( arr[i] - arr[i-1] ) > 1 :\n            minRemovals += abs( arr[i] - arr[i-1] ) - 1\n    return minRemovals\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/104", "completion": "\n    # Step 1. Convert `left` and `right` to binary representation.\n    left = bin( left )\n    right = bin( right )\n    \n    # Step 2. Initialize a variable `max_bits` as 0.\n    max_bits = 0\n    \n    # Step 3. Iterate through the binary representation of `left`.\n    #     -Count the number of consecutive 1s.\n    #     -If the count is greater than `max_bits`, update `max_bits`.\n    for i in range( len( left ) ) :\n        if left[i] == '1' :\n            max_bits += 1\n    \n    # Step 4. Convert `max_bits` number of bits to 1 in the binary representation of `left`.\n    left = left[ : max_bits ]\n    \n    # Step 5. Convert the modified binary representation of `left` back to decimal.\n    left = bin( left )\n    \n    # Step 6. If the decimal representation of `left` is greater than `right`, return `right`.\n    if left[0] == '1' :\n        return right\n    "}
{"task_id": "Open/105", "completion": "\n    power = 1\n    while power < n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/106", "completion": "\n    sum_divisors = 0\n    for i in range ( 1, n ) :\n        if n % i == 0 :\n            sum_divisors += i\n    if sum_divisors == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "\n    # Step 1. Divide the year by 100 and 400 to determine the number of centuries and leap centuries respectively.\n    year = int ( N )\n    centuries = year // 100\n    leap_centuries = year % 100\n\n    # Step 2. Shift the year by 2 bits to calculate the number of leap years.\n    year = year >> 2\n\n    # Step 3. Subtract the number of leap years from the total number of days in the year to get the number of non-leap years.\n    if centuries!= 0 :\n        year -= centuries\n    if leap_centuries!= 0 :\n        year += leap_centuries\n\n    # Step 4. Adjust the number of non-leap years and leap years if there are any centuries or leap centuries.\n    if centuries!= 0 :\n        year += centuries\n    if leap_centuries!= 0 :\n        year -= centuries\n\n    # Step 5. Calculate the total number of days by adding the number of non-leap years and twice the number of leap years.\n    total"}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    else :\n        return ( a * a ) / ( a + 1 )\n"}
{"task_id": "Open/109", "completion": "\n    # Step 1. Convert the number n to a string.\n    n = str(n)\n    # Step 2. Initialize a variable count as 0.\n    count = 0\n    # Step 3. Iterate through each character in the string representation of n.\n    # -If the character is equal to the digit d, increment count by 1.\n    for i in n :\n        if i == d :\n            count += 1\n    # Step 4. Return count.\n    return count\n\n"}
{"task_id": "Open/110", "completion": "\n    # Step 1. Convert the integer to a string.\n    n = str(n)\n    # Step 2. Iterate through each digit in the string.\n    for i in n :\n        # Step 3. If the digit appears more than once in the string, return False.\n        if i in n :\n            return False\n    # Step 4. If no repeated digits are found, return True.\n    return True\n"}
{"task_id": "Open/111", "completion": "\n    for i in range ( n ) :\n        for j in range ( 5 ) :\n            if ( a[i] % j == 0 ) :\n                return False\n    return True\n"}
{"task_id": "Open/112", "completion": "\n    array = [ 0 ] * n + [ 0 ] * (n+1)\n    for i in range ( 3, n+1 ) :\n        if i % 2 == 0 :\n            array[ i ] = array[ i // 2 ] * 10 + 4\n        else :\n            array[ i ] = array[ (i//2)-1 ] * 10 + 7\n    return array[ n ]\n"}
{"task_id": "Open/113", "completion": "\n    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range ( 2, n+1 ) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10 + 3\n        else :\n            array[i] = array[i//2] * 10 + 5\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    for i in range ( 2, n+1 ) :\n        if i % 2 == 0 :\n            array[i] = array[i] * 10 + 1\n        else :\n            array[i] = array[i] * 10 + 2\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    # Step 1. Initialize an empty string to store the concatenated elements.\n    s = \"\"\n    # Step 2. Iterate through the array of integers.\n    for i in range ( 0, n ) :\n        # Step 3. Convert each integer to a string and concatenate it to the string from step 1.\n        s = s + str( a[i] )\n    # Step 4. Convert the concatenated string to an integer.\n    return int( s ) % 11 == 0\n\n"}
{"task_id": "Open/116", "completion": "\n    if l < 0 :\n        return -1\n    elif l == 0 :\n        return 0\n    elif b < 0 :\n        return -1\n    elif b == 0 :\n        return 0\n    elif h < 0 :\n        return -1\n    elif h == 0 :\n        return 0\n    else :\n        return l * b * h\n"}
{"task_id": "Open/117", "completion": "\n    words = string.split()\n    for word in words :\n        if word.isalpha() :\n            word = word.capitalize()\n        else :\n            word = word.lower()\n    return word\n"}
{"task_id": "Open/118", "completion": "\n    # Step 1. Calculate the value inside the square root: (8 * p + 1).\n    value = 8 * p + 1\n    # Step 2. Take the ceiling of the square root.\n    ceiling = math.ceil(value)\n    # Step 3. Subtract 1 from the result.\n    result = ceiling - 1\n    # Step 4. Divide the result by 2.\n    result = result / 2\n    # Step 5. Return the final result as the bucket number.\n    return result\n"}
{"task_id": "Open/119", "completion": "\n    # Step 1. Iterate through the array.\n    for i in range( len( arr ) ) :\n        # Step 2. For each element, check if it appears more than once in the array.\n        if arr[ i ] in arr :\n            return False\n    # Step 3. If no duplicate elements are found, return True.\n    return True\n\n"}
{"task_id": "Open/120", "completion": "\n    set = set()\n    for i in range( len( string ) ) :\n        if i + 1 in range( len( string ) ) :\n            set.add( string[i] + string[i + 1] )\n    return len( set )\n\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n\n"}
{"task_id": "Open/122", "completion": "\n    maximum = 0\n    for i in ss :\n        if i.isdigit() :\n            maximum = maximum * 10 + int(i)\n        else :\n            maximum = maximum + int(i)\n    return maximum\n\n"}
{"task_id": "Open/123", "completion": "\n    longest = \"\"\n    current = \"\"\n    for char in s :\n        if char.isdigit() :\n            current += char\n        else :\n            if len(current) > len(longest) :\n                longest = current\n                current = \"\"\n            else :\n                current = \"\"\n    if len(current) > len(longest) :\n        longest = current\n    return longest\n\n"}
{"task_id": "Open/124", "completion": "\n    # Step 1. Initialize remaining area as 0.\n    remaining_area = 0\n    \n    # Step 2. While K is greater than 0 and both N and M are greater than 0, do the following:\n    # -If N is greater than or equal to M, subtract M from N and update N.\n    # -Otherwise, subtract N from M and update M.\n    # -Decrement K by 1.\n    while K > 0 and N > 0 and M > 0 :\n        if N > M :\n            remaining_area -= M\n            N -= M\n        else :\n            remaining_area -= N\n            N -= N\n        K -= 1\n    \n    # Step 3. If both N and M are greater than 0, return the product of N and M.\n    if N > 0 :\n        return remaining_area * N\n    else :\n        return 0\n\n"}
{"task_id": "Open/125", "completion": "\n    for i in range(0, len(string) - length + 1) :\n        if string[i] == string[i + 1] :\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/126", "completion": "\n    power = 1\n    while power * 2 < n :\n        power = power * 2\n    return power\n\n"}
{"task_id": "Open/127", "completion": "\n    A = str(A)\n    B = str(B)\n    if len(A) == len(B):\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/128", "completion": "\n    if x == 0 or y == 0 :\n        return True\n    else :\n        return x - y == 1\n\n"}
{"task_id": "Open/129", "completion": "    \n    Sn_1 = \"12\"\n    Sn_2 = \"1213\"\n    \n    for i in range ( 3, n ) :\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    \n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    steps = 0\n    prev = 0\n    for i in range(n) :\n        steps += abs(arr[i] - prev)\n        prev = arr[i]\n    return steps\n\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/131", "completion": "\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return fnMod ( n % 4 )\n"}
{"task_id": "Open/132", "completion": "\n    m = 0\n    sum = 0\n    ans = 0\n    for i in range(1,N+1) :\n        if i % a == 0 :\n            m += 1\n        else :\n            sum += i\n            ans += i\n    return m, sum, ans\n"}
{"task_id": "Open/133", "completion": "\n    if N < 2 :\n        return N\n    elif N < 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 == 1 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "\n    if len(arr) % 2 == 0 :\n        return True\n    else :\n        return False\n\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/135", "completion": "\n    if N == 1 :\n        return L + R\n    elif N == 2 :\n        return L + R + 1\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "\n    arr.sort()\n    min_num = 1\n    for i in range(1,n+1) :\n        if arr[i] == min_num :\n            min_num += 1\n        elif arr[i] > min_num :\n            return min_num\n    return min_num\n\n"}
{"task_id": "Open/137", "completion": "\n    # Step 1. Convert the string into a list of characters.\n    s = list(s)\n    s.sort()\n    # Step 2. Sort the list of characters in ascending order.\n    s = ''.join(s)\n    # Step 3. Join the sorted list of characters into a string.\n    s = str(int(s))\n    # Step 4. Convert the string into an integer.\n    n = int(s)\n    # Step 5. Return the integer.\n    return n\n\n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range( n ) :\n        if arr[i] > arr[i - 1] :\n            count += arr[i] - arr[i - 1]\n        else :\n            arr[i] = arr[i - 1]\n    return count\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for c in s :\n        sum += ord( c )\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/140", "completion": "\n    banknotes = 0\n    max_banknotes_A = 0\n    banknotes_B = 0\n    for i in range ( A, max_banknotes_A + 1 ) :\n        if ( i % B ) == 0 :\n            banknotes_B += 1\n        else :\n            banknotes_B = 0\n        if ( banknotes_B == N ) :\n            banknotes += 1\n        else :\n            banknotes = 0\n    if ( banknotes == 0 ) :\n        return -1\n    else :\n        return banknotes\n\n"}
{"task_id": "Open/141", "completion": "\n    gcd = math.gcd ( x, y )\n    return ( x * y ) / gcd\n"}
{"task_id": "Open/142", "completion": "\n    # Step 1\n    n = bin(n)\n    # Step 2\n    count = 0\n    while n[0] == '0' :\n        count += 1\n        n = n[1:]\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    max_sum = 0\n    max_index = -1\n    for i in range ( 1, n ) :\n        left_xor = arr[i] ^ arr[i-1]\n        right_xor = arr[i] ^ arr[i-1]\n        curr_sum = left_xor ^ right_xor\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n            max_index = i\n    return max_index\n\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,"}
{"task_id": "Open/144", "completion": "\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n) :\n        if arr[i] < arr[i-1] :\n            curr_len += 1\n        elif curr_len > max_len :\n            max_len = curr_len\n        else :\n            arr[i] = arr[i-1]\n            curr_len = 1\n    return max_len\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/145", "completion": "\n    if n == 0 :\n        return -1\n    if k == 0 :\n        return min(arr)\n    if n == 1 :\n        return min(arr)\n    if k % n == 0 :\n        return min(arr) + k\n    for i in range(1,n) :\n        if arr[i] - arr[i-1] == k :\n            return min(arr) + k\n    return -1\n\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,"}
{"task_id": "Open/146", "completion": "\n    # Step 1. Initialize a variable \"num\" as 1.\n    num = 1\n    count = 1\n    seen = set()\n    \n    # Step 2. Initialize a variable \"count\" as 1.\n    count = 1\n    seen = set()\n    \n    # Step 3. Initialize a set \"seen\" to store the remainders.\n    while num not in seen :\n        num = (num * 10 + 1) % K\n        seen.add(num)\n        count += 1\n    \n    # Step 4. Iterate while \"num\" is not in \"seen\".\n    #     -Add \"num\" to \"seen\".\n    #     -Update \"num\" as (num * 10 + 1) % K.\n    #     -Increment \"count\" by 1.\n    while num not in seen :\n        num = (num * 10 + 1) % K\n        count += 1\n    \n    # Step 5. If \"num\" is 0, return \"count\". Otherwise, return -1.\n    if num == 0 :\n        return count\n    else :\n        return -1\n\n"}
{"task_id": "Open/147", "completion": "\n    target = arr[n-1]\n    operations = 0\n    for i in range(n-2, -1, -1) :\n        operations += abs(arr[i] - target)\n    return operations\n"}
{"task_id": "Open/148", "completion": "\n    a = 3\n    b = 0\n    sum = 0\n    for i in range ( 1, n ) :\n        a = a + a\n        b = b + b\n        sum = sum + a\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return ( s ** 0.5 )\n"}
{"task_id": "Open/150", "completion": "\n    return ( p ** 2 + q ** 2 ) / ( p + q )\n"}
{"task_id": "Open/151", "completion": "\n    result = 0\n    for i in range ( len1 ) :\n        result = result ^ ord ( str1[i] )\n    return result\n\n"}
{"task_id": "Open/152", "completion": "\n    binary = bin(n)[2:]\n    if len(binary) == 1:\n        return False\n    else:\n        return True\n"}
{"task_id": "Open/153", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels.sort()\n    return s in vowels\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range ( low, high + 1 ) :\n        if ( int ( str ( i )[-1] ) > k ) :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/155", "completion": "\n    min_diff = math.inf\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            min_diff = min(min_diff, abs(n % i))\n    return min_diff\n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else :\n        return (3 * math.sqrt(3) * r ** 2) / 2\n"}
{"task_id": "Open/157", "completion": "\n    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    \n    low = 0\n    high = size - 1\n    mid = (low + high) // 2\n    if ar[mid] - ar[low]!= mid - low :\n        high = mid - 1\n    else :\n        low = mid + 1\n    return ar[low]\n\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in str :\n        if i == \"010\" :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/160", "completion": "\n    for i in range( n ) :\n        if arr[i] % 2 == 0 :\n            return arr[i]\n    return None\n\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range ( n ) :\n        xorArr = xorArr ^ arr[i]\n        ans = ans ^ arr[i]\n    if ans > 0 :\n        ans = ans ^ 0\n    return ans\n\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    if sx == dx and sy == dy :\n        return True\n    elif dx < sx or dy < sy :\n        return False\n    elif (dx - sx) % sy == 0 or (dy - sy) % sx == 0 :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/163", "completion": "\n    if n % 2 == 0 :\n        return 0\n    count = 0\n    for i in range ( 1, n ) :\n        if ( i + i ) % 4 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/164", "completion": "\n    count = 1\n    for i in range( n ) :\n        if arr[i] not in dict :\n            dict[arr[i]] = 1\n        else :\n            dict[arr[i]] += 1\n    for i in dict :\n        count *= dict[i]\n    return count\n\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/165", "completion": "\n    if height == 0:\n        return 1\n    elif height == 1:\n        return 2\n    else:\n        return AVLnodes( height-1 ) + AVLnodes( height-2 )\n\n"}
{"task_id": "Open/166", "completion": "    current = source\n    count = 0\n    while current!= dest :\n        count += 1\n        current += step\n        if current == dest :\n            return count\n        else :\n            count -= step\n            current -= step\n    return sys.maxsize\n\n"}
{"task_id": "Open/167", "completion": "\n    # Step 1. Initialize the sequence with \"1\".\n    sequence = [ '1' ]\n    for i in range ( n - 1 ) :\n        # Initialize a new sequence.\n        new_sequence = sequence\n        # Iterate through the current sequence.\n        for j in range ( len ( new_sequence ) ) :\n            # Count the number of consecutive digits.\n            count = 0\n            # Append the count and the digit to the new sequence.\n            for k in range ( len ( new_sequence ) ) :\n                if new_sequence[k] == '1' :\n                    count += 1\n                else :\n                    new_sequence[k] = new_sequence[k] + str ( count )\n            # Set the current sequence to the new sequence.\n            sequence = new_sequence\n    return sequence\n\n"}
{"task_id": "Open/168", "completion": "\n    max_len = 0\n    curr_len = 0\n    for i in range( len(arr) ) :\n        if arr[i] > 0 :\n            curr_len += 1\n        else :\n            max_len = max( max_len, curr_len )\n            curr_len = 0\n    return max_len\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nN = 10"}
{"task_id": "Open/169", "completion": "\n    m = abs(m)\n    n = abs(n)\n    sum_sq = m * m\n    sum_sq_sq = sum_sq ** 2\n    square_root = sum_sq_sq / math.sqrt(m + n)\n    product = m * n\n    product_sq = product ** 2\n    div_sq = product_sq / square_root\n    return div_sq\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    sum = 0\n    for i in range(n) :\n        sum += arr[i]\n        if sum < k :\n            count += 1\n    return count\n\n\narr = [1,2,3,4,5]\nn = len(arr)\nk = 5"}
{"task_id": "Open/171", "completion": "\n    arr.sort()\n    count = 0\n    for i in range(n-2) :\n        for j in range(i+1, n) :\n            if arr[i] - arr[j] < L :\n                count += 1\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range ( l, r ) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    binary = bin(n)[2:]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary[::-1]\n    binary = binary"}
{"task_id": "Open/174", "completion": "\n    count = 0\n    while L < R :\n        if L % 9 == 0 :\n            L = L + 1\n        else :\n            count += 1\n    return count\n\nL = int ( input () )\nR = int ( input () )\nK = int ( input () )\n"}
{"task_id": "Open/175", "completion": "\n    product = n * math.log( n, 10 )\n    string = str( product )\n    return string[0 : k]\n"}
{"task_id": "Open/176", "completion": "\n    for i in range ( 1, n ) :\n        for j in range ( i, n ) :\n            if A[i] > A[j] :\n                return A[i]\n    return -1\n\n"}
{"task_id": "Open/177", "completion": "\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    sum = sum(a) + sum(b) + sum(c)\n    if sum > c :\n        return 0\n    else :\n        return sum - c\n\n"}
