{"task_id": "Open/0", "completion": "    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    count = 0\n    for i in range(N):\n        if arr[i] + K > sum:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    if arr[0] < arr[1] :\n        return 1\n    else :\n        return maxLen(arr[1:], n-1) + 1\n"}
{"task_id": "Open/2", "completion": "    \n    # Convert n to binary representation.\n    binaryRepresentation = bin(n)\n    \n    # Check if all bits within the range from l to r are set to 1.\n    for i in range(l, r+1) :\n        if binaryRepresentation[2:].find(str(i)) == -1 :\n            return \"No\"\n    \n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n) :\n        for j in range(i + 1, n) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    \n    totalSum = sum(a)\n    if totalSum % 2!= 0 :\n        return False\n    else :\n        sum1 = 0\n        for i in a :\n            sum1 += i\n            if sum1 == totalSum/2 :\n                return True\n        return False\n"}
{"task_id": "Open/5", "completion": "    \n    # Convert the input integer to its binary representation\n    binary = bin(x)\n    \n    # Count the number of 1 bits in the binary representation\n    count = binary.count('1')\n    \n    # If the count is odd, return 1. Otherwise, return 0.\n    if count % 2 == 1 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in range(len(vec)) :\n        vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)) :\n        if vec[i] > 0 :\n            output.append(i + 1)\n    return output\n"}
{"task_id": "Open/7", "completion": "    max_len = 0\n    for i in range(n):\n        curr_len = 1\n        for j in range(i+1,n):\n            if set(str(arr[i])) & set(str(arr[j]))!= set():\n                curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n"}
{"task_id": "Open/8", "completion": "Write a function that takes a list of integers as input.\n        \n        How to solve:\n        Step 1. Define a function that takes a list of integers as input.\n        Step 2. Iterate through each integer in the list.\n            -For each integer, find the distinct prime factors.\n            -Count the number of distinct prime factors.\n            -Return the count for each integer.\n        Step 3. Return the list of counts.\n        \"\"\"\n        \n        # Step 2\n        def distinct_prime_factors_helper ( a ) :\n            \"\"\"Write a function that takes a list of integers as input.\n            \n            How to solve:\n            Step 1. Define a function that takes a list of integers as input.\n            Step 2. Iterate through each integer in the list.\n                -For each integer, find the distinct prime factors.\n                -Count the number of distinct prime factors.\n                -Return the count for each integer.\n            Step 3. Return the list of counts.\n            \"\"\"\n            \n            "}
{"task_id": "Open/9", "completion": "    \n    arr.sort()\n    \n    diff = abs(arr[k-1] - arr[0])\n    \n    for i in range(1,k):\n        diff = min(diff, abs(arr[k-1] - arr[i]))\n    \n    return diff\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.pop(0)\n            B.pop(0)\n        else :\n            B.append(B.pop(0))\n            A.append(A.pop(0))\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    \n    # Initialize a counter variable to keep track of the number of substrings.\n    counter = 0\n    \n    # Iterate through each character in the string.\n    for i in range(len(s)) :\n        \n        # Create a set to keep track of distinct characters.\n        char_set = set()\n        \n        # Iterate through the string starting from the current character.\n        for j in range(i, len(s)) :\n            \n            # Add the characters to the set.\n            char_set.add(s[j])\n            \n            # If the length of the set is less than or equal to k, increment the counter.\n            if len(char_set) <= k :\n                counter += 1\n            \n            # If the length of the set is greater than k, break out of the inner loop.\n            else :\n                break\n    \n    # Return the counter variable.\n    return counter\n"}
{"task_id": "Open/13", "completion": "    current = 2\n    while current <= n :\n        if n % current == 0 :\n            return False\n        current += 1\n    return True\n"}
{"task_id": "Open/14", "completion": "    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    \n    for i in range(0,t):\n        a = random.randint(2,n-1)\n        b = pow(a,(n-1)/2,n)\n        if b == 1 or b == n-1:\n            continue\n        else:\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "\n        Check if there is a defeat condition at any index.\n        A defeat condition is defined as follows: if at any index i, s1[i] is '0' and s2[i] is '1', or s1[i] is '1' and s2[i] is '0', or s1[i] is '0' and s2[i] is 'Z', or s1[i] is 'Z' and s2[i] is '0', then the function returns True.\n        \"\"\"\n        for i in range( n ) :\n            if ( s1[i] == '0' and s2[i] == '1' ) or ( s1[i] == '1' and s2[i] == '0' ) or ( s1[i] == '0' and s2[i] == 'Z' ) or ( s1[i] == 'Z' and s2[i] == '0' ) :\n                return True\n        return False\n    \n    def defeatCondition2 ( s1"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(length):\n        if i % 2 == 0 and s[i] == '1':\n            count += 1\n        elif i % 2 == 1 and s[i] == '0':\n            count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1) :\n        if i == 1 :\n            count += 1\n        elif i == 2 :\n            count += 1\n        else :\n            if i % 2 == 0 :\n                if i % 3 == 0 :\n                    count += 1\n            else :\n                if i % 3 == 0 :\n                    count += 1\n                elif i % 2 == 1 :\n                    if i % 4 == 1 :\n                        count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 1\n    return max_len\n"}
{"task_id": "Open/23", "completion": "    if i == len(arr) :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        return subsetSum(arr, n, i + 1, sum - arr[i], count) + subsetSum(arr, n, i + 1, sum, count)\n"}
{"task_id": "Open/24", "completion": "    return (16 * n * n) - (16 * n) + 6\n"}
{"task_id": "Open/25", "completion": "    sum_squares = 0\n    sum_numbers = 0\n    for i in range(1, n+1) :\n        sum_squares += i**2\n        sum_numbers += i\n    return sum_squares + sum_numbers + 1\n"}
{"task_id": "Open/26", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_factors = 1\n            for j in range(1, i+1):\n                if i % j == 0:\n                    sum_of_factors += j\n            if sum_of_factors > max_sum:\n                max_sum = sum_of_factors\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    \n    return (b - a) / a * 100\n"}
{"task_id": "Open/30", "completion": "    return ( sum ( [ i ** 2 for i in range ( 1, n + 1 ) ] ) / n )\n"}
{"task_id": "Open/31", "completion": "    \n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "    \n    # Initialize the first term of the sequence as 1.\n    term = 1\n    \n    # Iterate from 2 to n.\n    for i in range(2, n+1) :\n        term = term * 2 + 1\n    \n    return term\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    product = 1\n    for i in range(len(a)):\n        product *= a[i]\n        if product < k:\n            count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1, n+1) :\n        string = str(i)\n        count += string.count(str(d))\n    return count\n"}
{"task_id": "Open/36", "completion": "    \n    # Remove all negative and zero values\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i] = 0\n    \n    # Create a set of the remaining positive values\n    positive_set = set()\n    for i in range(n):\n        if arr[i] > 0:\n            positive_set.add(arr[i])\n    \n    # Iterate through positive integers starting from 1\n    for i in range(1, n+1):\n        if i not in positive_set:\n            return i\n    \n    # If all positive integers are present in the set, return the next positive integer after the maximum value in the set\n    return i + 1\n"}
{"task_id": "Open/37", "completion": "    if n == 0 or n == 1 :\n        return 1\n    if n == 2 :\n        return 2\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    total_area = 0\n    side = 1\n    while side <= min(l, b):\n        total_area += side * side\n        side += 1\n    return total_area\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1,N+1))\n"}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    count = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count += 1\n        elif arr[i] == 1:\n            max_zeros = max(max_zeros, count)\n            count = 0\n    if max_zeros == 0:\n        return -1\n    else:\n        return max_zeros\n"}
{"task_id": "Open/41", "completion": "    max_len = 0\n    curr_len = 0\n    for i in range(n):\n        if arr[i]!= 0:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n    return max(max_len, curr_len)\n"}
{"task_id": "Open/42", "completion": "    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0],a[n-1])\n    else :\n        return max(a)\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n) :\n        for j in range(i,n) :\n            if ( array[i] * array[j] <= k ) :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    arr.sort()\n    sum = 0\n    for i in range(n):\n        sum += abs(arr[i] - (i+1))\n    return sum\n"}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        diff = abs(array[i] - i)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    \n    # Calculate the value of the left side of the equation for point (x1, y1) and point (x2, y2).\n    leftSide = (a * x1) + (b * y1) - c\n    \n    # If the values have the same sign, return True. Otherwise, return False.\n    if leftSide * leftSide > 0 :\n        return True\n    else :\n        return False\n    \n    "}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a+1) :\n        if (a ^ i) == i + (a ^ i) :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_val = 0\n    for i in range(L, R + 1) :\n        for j in range(L, R + 1) :\n            if i & j > max_val :\n                max_val = i & j\n    return max_val\n"}
{"task_id": "Open/50", "completion": "    smallest = -1\n    for i in range(n):\n        if smallest == -1:\n            smallest = a[i]\n        else:\n            if smallest % a[i] == 0:\n                continue\n            else:\n                smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "    result = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(i+1):\n                for l in range(j+1):\n                    if (i*j)%2 == 1:\n                        result ^= arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(N+1) :\n        if i ^ i == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    if ( a[0] + a[n - 1] + n * (n - 1) / 2 ) == k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/55", "completion": "    \n    # Convert the integer to binary representation\n    binary = bin(n)\n    \n    # Check if the first and last bits are set to 1\n    if binary[0] == '1' and binary[-1] == '1' :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    current_partition = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_partition += 1\n        else:\n            max_partitions = max(max_partitions, current_partition)\n            current_partition = 1\n    return max(max_partitions, current_partition)\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2,N+1):\n        result = result + var1 + var2\n        var1 = var1 * var2\n        var2 = result / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "    \n    # Iterate through the list of ranges.\n    for i in range ( len ( ranges ) ) :\n        # Reverse the elements within the range.\n        arr [ ranges [ i ][ 0 ] : ranges [ i ][ 1 ] + 1 ]. reverse ()\n    \n    # Iterate through the specified number of reversals.\n    for i in range ( reversals ) :\n        # Reverse the elements within the range.\n        arr [ ranges [ i ][ 0 ] : ranges [ i ][ 1 ] + 1 ]. reverse ()\n    \n    # Return the value at the given index in the array.\n    return arr [ index ]\n"}
{"task_id": "Open/60", "completion": "    for a in range(0, int(n**0.5) + 1) :\n        b = int(n - a**2)\n        if b**0.5 == b :\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    if a == \"\" or len(a) > len(b):\n        return -1\n    \n    count = 0\n    while count < len(b) / len(a):\n        if a * count == b:\n            return count\n        count += 1\n    return -1\n"}
{"task_id": "Open/62", "completion": "    modified_str = \"\"\n    for i in range ( len - 1, -1, -1 ) :\n        if str[i] > str[i + 1] :\n            modified_str += \"9\"\n        else :\n            modified_str += str[i]\n    return modified_str + str[0]\n"}
{"task_id": "Open/63", "completion": "    min_value = max(arr)\n    for i in range(n):\n        sum = 0\n        for j in range(n):\n            sum += math.log(arr[j])\n        if sum < math.log(min_value) * n:\n            min_value = arr[i]\n    return min_value\n"}
{"task_id": "Open/64", "completion": "    if len(s) == 0:\n        return \"-1\"\n    if s.count(\"1\") == len(s):\n        return \"-1\"\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[j]!= \"1\":\n                if j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    max_str = s[i:j+1]\n    return max_str\n"}
{"task_id": "Open/65", "completion": "    \n    # Initialize a dictionary to store the count of each element in the array.\n    count = {}\n    for i in range(n) :\n        count[a[i]] = count.get(a[i], 0) + 1\n    \n    # Iterate through the array and update the count in the dictionary.\n    for i in range(n) :\n        count[a[i]] = count.get(a[i], 0) - 1\n    \n    # Iterate through the array again and remove elements that have a count greater than 'k'.\n    for i in range(n) :\n        if count[a[i]] < k :\n            a[i] = None\n    \n    # Return the length of the modified array.\n    return len([i for i in a if i!= None])\n"}
{"task_id": "Open/66", "completion": "    \n    # Step 1. Calculate the size of the array after adding k elements.\n    size = n + k\n    \n    # Step 2. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 3. If the size is even, calculate the median by taking the average of the two middle elements.\n    if size % 2 == 0 :\n        median = (arr[size/2] + arr[size/2 - 1]) / 2\n    \n    # Step 4. If the size is odd, return the middle element as the median.\n    else :\n        median = arr[size/2]\n    \n    return median\n"}
{"task_id": "Open/67", "completion": "    \n    step_count = 0\n    \n    # Step 1\n    step_count += 1\n    \n    # Step 2\n    pos = 0\n    neg = 0\n    zero = 0\n    for i in range(n) :\n        if a[i] > 0 :\n            pos += 1\n        elif a[i] < 0 :\n            neg += 1\n        else :\n            zero += 1\n    \n    # Step 3\n    step_count += abs(neg - 1)\n    \n    # Step 4\n    step_count += abs(pos - 1)\n    \n    # Step 5\n    if neg % 2 == 0 :\n        step_count += zero\n    else :\n        if zero > 0 :\n            step_count += 1\n        else :\n            step_count += 2\n    \n    # Step 6\n    return step_count\n"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append(n%5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "    if n == 0 :\n        return True\n    if n == 1 :\n        return False\n    if n % 2 == 0 :\n        return areSetBitsIncreasing ( n / 2 )\n    else :\n        return areSetBitsIncreasing ( ( n - 1 ) / 2 )\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        remainder = n % x\n        if remainder <= (x / 2) :\n            return n - remainder\n        else :\n            return n + (x - remainder)\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    finalSum = 0\n    for i in range(1, n+1):\n        sum = 0\n        for j in range(1, i+1):\n            sum += j\n        finalSum += sum\n    return finalSum\n"}
{"task_id": "Open/73", "completion": "    max_value = -1\n    count_dict = {}\n    for i in range(n):\n        if arr[i] not in count_dict:\n            count_dict[arr[i]] = 1\n        else:\n            count_dict[arr[i]] += 1\n    for key in count_dict:\n        if count_dict[key] == count_dict[key] and count_dict[key] > max_value:\n            max_value = count_dict[key]\n    return max_value\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (2**j) > a[i]:\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    return int( ''.join( [ '1' if int(x) == 0 else '0' for x in bin(n)[2:] ] ), 2 )\n"}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            A[i+1] = 0\n            changes += 1\n    return changes\n"}
{"task_id": "Open/77", "completion": "    return radian * 180 / pi\n"}
{"task_id": "Open/78", "completion": "    return n // 2\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    sum = (n/2) * (2*a + (n-1)*d)\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 0 :\n        return 1\n    else :\n        power = 1\n        while n % 2 == 0 :\n            n /= 2\n            power *= 2\n        return power\n"}
{"task_id": "Open/81", "completion": "    count = 0\n    for move in moves :\n        if (move == 'up' and row - 1 >= 0) :\n            row -= 1\n        elif (move == 'down' and row + 1 <= 7) :\n            row += 1\n        elif (move == 'left' and column - 1 >= 0) :\n            column -= 1\n        elif (move == 'right' and column + 1 <= 7) :\n            column += 1\n        count += 1\n    return count\n"}
{"task_id": "Open/82", "completion": "    sum = 0\n    for i in range(n):\n        sum = sum + i\n    return sum\n"}
{"task_id": "Open/83", "completion": "    \n    # Initialize an empty list to store the last occurrence of each character in the string\n    lastOccurrence = []\n    \n    # Iterate through the string and update the last occurrence of each character in the list\n    for i in range(len(s)) :\n        lastOccurrence.append(s.rfind(s[i]))\n    \n    # Sort the string\n    sortedString = sorted(s)\n    \n    # Iterate through the string and compare each character with its corresponding character in the sorted string\n    for i in range(len(s)) :\n        if lastOccurrence[i]!= sortedString.index(s[i]) :\n            s = s[:lastOccurrence[i]] + s[lastOccurrence[i]].replace(s[i],sortedString[sortedString.index(s[i])]) + s[lastOccurrence[i]+1:]\n    \n    return s\n"}
{"task_id": "Open/84", "completion": "    \n    # Step 1\n    arr = [0] * n\n    \n    # Step 2\n    for i in range(n) :\n        if i % 2 == 0 :\n            arr[i] = i + 1\n        else :\n            arr[i] = i - 1\n    \n    # Step 3\n    sum = 0\n    for i in range(l - 1, r) :\n        sum += arr[i]\n    \n    return sum\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range(2, smaller + 1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    \n    # Initialize a list with A and B as the first two elements.\n    list = [A,B]\n    \n    # Iterate N-2 times.\n    for i in range(N-2):\n        # Compute the sum of the last two elements in the list.\n        list.append(list[-1] + list[-2])\n    \n    # Return the Nth element in the list.\n    return list[-1]\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str) - len(substr) + 1) :\n        if str[i:i+len(substr)] == substr :\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    \n    # Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n    monthly_interest_rate = (r / 100) / 12\n    \n    # Convert the loan tenure from years to months by multiplying it by 12.\n    loan_tenure_in_months = t * 12\n    \n    # Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = (p * monthly_interest_rate * (1 + monthly_interest_rate)**loan_tenure_in_months) / ((1 + monthly_interest_rate)**loan_tenure_in_months - 1)\n    \n    # Return the calculated EMI.\n    return emi\n    \n    "}
{"task_id": "Open/89", "completion": "    \n    # Initialize a counter variable to 0.\n    count = 0\n    \n    # Iterate through all possible combinations of (i, j, k) from the given range of A, B, and C.\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * k > B[j] * B[j]:\n                    count += 1\n    \n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l, r+1):\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9:\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    \n    # Step 1\n    d = {}\n    for i in range(n):\n        d[i] = 0\n    \n    # Step 2\n    m = 0\n    \n    # Step 3\n    for i in range(n):\n        d[i] = {}\n        for j in range(i):\n            d[i][j] = 0\n        for j in range(i):\n            d[i][j] = abs(arr[i] - arr[j])\n        for j in range(i):\n            if d[i][j] in d[i]:\n                d[i][j] += 1\n            else:\n                d[i][j] = 2\n        m = max(m, max(d[i].values()))\n    \n    # Step 4\n    return m\n"}
{"task_id": "Open/92", "completion": "    max_len = 0\n    max_substring = \"\"\n    for i in range(len(str)):\n        if str[i].isalnum():\n            if len(str[i:i+2]) % 2 == 0:\n                if len(str[i:i+2]) > max_len:\n                    max_len = len(str[i:i+2])\n                    max_substring = str[i:i+2]\n    if max_len == 0:\n        return \"-1\"\n    else:\n        return max_substring\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        n = n / 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    \n    # Step 1\n    s = 'a' * n\n    \n    # Step 2\n    for i in range(n-1, -1, -1) :\n        \n        # Step 2.1\n        if k >= 0 :\n            \n            # Step 2.1.1\n            if k >= 26 :\n                s = s[:i] + 'z' + s[i+1:]\n                k -= 26\n            \n            # Step 2.1.2\n            else :\n                s = s[:i] + chr(97 + k) + s[i+1:]\n                k -= k\n        \n        # Step 2.2\n        else :\n            break\n    \n    # Step 3\n    return s\n"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    totalSum = sum(arr)\n    sumBefore = 0\n    for i in range(n):\n        sumBefore += arr[i]\n        if sumBefore == totalSum / 3 and (totalSum - sumBefore) == (totalSum / 3 * 2):\n            return 1\n    return 0\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "    if a == b and b == c and a == c:\n        return True\n    elif k == 0:\n        return False\n    elif k % 2 == 0:\n        return True\n    elif abs(a - b) % k == 0:\n        return True\n    elif abs(a - c) % k == 0:\n        return True\n    elif abs(b - c) % k == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/100", "completion": "    x = x << 32\n    y = y << 32\n    if x | y == y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    minRemovals = 0\n    arr.sort()\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) > 1:\n            minRemovals += abs(arr[i] - arr[i-1]) - 1\n    return minRemovals\n"}
{"task_id": "Open/104", "completion": "    \n    # Convert `left` and `right` to binary representation.\n    left_bin = bin(left)[2:]\n    right_bin = bin(right)[2:]\n    \n    # Initialize a variable `max_bits` as 0.\n    max_bits = 0\n    \n    # Iterate through the binary representation of `left`.\n    for i in range(len(left_bin)) :\n        \n        # Count the number of consecutive 1s.\n        count = 0\n        for j in range(i, len(left_bin)) :\n            if left_bin[j] == '1' :\n                count += 1\n            else :\n                break\n        \n        # If the count is greater than `max_bits`, update `max_bits`.\n        if count > max_bits :\n            max_bits = count\n    \n    # Convert `max_bits` number of bits to 1 in the binary representation of `left`.\n    left_bin = left_bin[:max_bits] + '1' + left_bin[max_bits+1:]\n    \n    # Convert the modified binary representation of"}
{"task_id": "Open/105", "completion": "    power = 1\n    while power <= n:\n        power *= 2\n    return power\n"}
{"task_id": "Open/106", "completion": "    if n < 0 :\n        return False\n    if n == 0 :\n        return False\n    divisors = []\n    for i in range(1, n) :\n        if n % i == 0 :\n            divisors.append(i)\n    return sum(divisors) == n\n"}
{"task_id": "Open/107", "completion": "    century = N // 100\n    leap_century = N // 400\n    leap_year = (N % 400) // 100\n    non_leap_year = N % 100\n    \n    if century % 4 == 0 :\n        if century % 100 == 0 :\n            if century % 400 == 0 :\n                leap_year = 0\n            else :\n                leap_year = 1\n        else :\n            leap_year = 0\n    else :\n        leap_year = 1\n    \n    total_days = 365 * non_leap_year + leap_year * 366\n    \n    if leap_year == 1 :\n        total_days += 1\n    \n    return total_days % 7\n"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return (3 * a + 1) / 2\n"}
{"task_id": "Open/109", "completion": "    \n    # Convert the number n to a string.\n    n = str(n)\n    \n    # Initialize a variable count as 0.\n    count = 0\n    \n    # Iterate through each character in the string representation of n.\n    for i in n :\n        \n        # If the character is equal to the digit d, increment count by 1.\n        if i == d :\n            count += 1\n    \n    # Return count.\n    return count\n"}
{"task_id": "Open/110", "completion": "    return len(set(str(n))) == len(str(n))\n"}
{"task_id": "Open/111", "completion": "    \n    # Step 1\n    for i in range(len(a)) :\n        while a[i] % 5 == 0 or a[i] % 3 == 0 :\n            a[i] = a[i] / 5\n            a[i] = a[i] / 3\n    \n    # Step 2\n    for i in range(len(a)) :\n        if a[i]!= 1 :\n            return False\n    \n    # Step 3\n    return True\n"}
{"task_id": "Open/112", "completion": "    # Initialize an array with length n+1 and all elements set to 0.\n    array = [0] * (n+1)\n    \n    # Set the first element of the array to 4 and the second element to 7.\n    array[0] = 4\n    array[1] = 7\n    \n    # Iterate through the array starting from index 3 to n+1.\n    for i in range(3, n+1):\n        # If the index is odd, set the value at index i to the value at index i//2 multiplied by 10 and added to 4.\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 4\n        # If the index is even, set the value at index i to the value at index (i//2)-1 multiplied by 10 and added to 7.\n        else:\n            array[i] = array[i//2 - 1] * 10 + 7\n    \n    # Return the value at index n of the array.\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 3\n    elif n == 2 :\n        return 5\n    else :\n        if n % 2 == 0 :\n            return printNthElement(n//2-1) * 10 + 5\n        else :\n            return printNthElement(n//2) * 10 + 3\n"}
{"task_id": "Open/114", "completion": "    \n    # Initialize an array with length n+1 and all elements set to 0.\n    arr = [0] * (n+1)\n    \n    # Set the first element of the array to 1 and the second element to 2.\n    arr[0] = 1\n    arr[1] = 2\n    \n    # Iterate through the array starting from index 2.\n    for i in range(2, n+1):\n        # If the index is odd, calculate the element by multiplying the element at index i//2 by 10 and adding 1.\n        if i % 2 == 1:\n            arr[i] = arr[i//2] * 10 + 1\n        # If the index is even, calculate the element by multiplying the element at index (i//2)-1 by 10 and adding 2.\n        else:\n            arr[i] = arr[i//2 - 1] * 10 + 2\n    \n    # Return the element at index n.\n    return arr[n]\n"}
{"task_id": "Open/115", "completion": "    if a == [] :\n        return True\n    else :\n        if a[0] % 11 == 0 :\n            return isPossibleToZero(a[1:], n)\n        else :\n            return False\n"}
{"task_id": "Open/116", "completion": "    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return l * b * h\n"}
{"task_id": "Open/117", "completion": "    \n    # Split the string into a list of words\n    words = string.split()\n    \n    # Iterate through each word in the list\n    for word in words:\n        \n        # If the word contains non-alphabetic characters, ignore it\n        if word.isalpha() == False:\n            continue\n        \n        # Otherwise, capitalize the first and last letter of the word\n        else:\n            word = word[0].upper() + word[1:-1] + word[-1].upper()\n        \n    # Join the modified words back into a string and return it\n    return \" \".join(words)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n    return True\n"}
{"task_id": "Open/120", "completion": "    \n    # Initialize a set to store distinct two-character codes.\n    distinct_codes = set()\n    \n    # Iterate through the string.\n    for i in range( len( string ) - 1 ) :\n        \n        # Check if the current index + 1 is within the string length.\n        if i + 1 < len( string ) :\n            \n            # Add the two-character code formed by the current character and the next character to the set.\n            distinct_codes.add( string[i] + string[i+1] )\n    \n    # Return the length of the set.\n    return len( distinct_codes )\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    maximum = 0\n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            maximum = maximum * 10 + int(ss[i])\n        else :\n            if maximum < int(ss[i]) :\n                maximum = int(ss[i])\n    return maximum\n"}
{"task_id": "Open/123", "completion": "    longest = \"\"\n    current = \"\"\n    for i in range(0, len(s)):\n        if s[i].isdigit():\n            current += s[i]\n        else:\n            if len(current) > len(longest):\n                longest = current\n            current = \"\"\n    if len(current) > len(longest):\n        longest = current\n    return longest\n"}
{"task_id": "Open/124", "completion": "    if N > M :\n        N, M = M, N\n    if N == 0 or M == 0 :\n        return 0\n    else :\n        while K > 0 :\n            if N > M :\n                N -= M\n                K -= 1\n            else :\n                M -= N\n                K -= 1\n        return N * M\n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length :\n        return False\n    for i in range(len(string)-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n"}
{"task_id": "Open/127", "completion": "    return len(str(A)) == len(str(B))\n"}
{"task_id": "Open/128", "completion": "    return (x - y)!= 1\n"}
{"task_id": "Open/129", "completion": "    Sn_1 = \"12\"\n    Sn_2 = \"1213\"\n    Sn_3 = \"\"\n    for i in range(3, n+1):\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    steps = 0\n    for i in range(1, n):\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "    return 0 if n % 4 == 0 or n % 4 == 3 else 1\n"}
{"task_id": "Open/132", "completion": "    m = (N // a) * a\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if arr[0] % 2!= 0 :\n        return False\n    if arr[n-1] % 2!= 0 :\n        return False\n    if n % 2!= 0 :\n        return False\n    return True\n"}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return R - L + 1\n    elif N == 2 :\n        return R - L + 2\n    else :\n        return (R - L + 1) + countSum(N-2,L,R)\n"}
{"task_id": "Open/136", "completion": "    \n    arr.sort()\n    min_num = 1\n    \n    for i in range(n):\n        if arr[i] == min_num:\n            min_num += 1\n        elif arr[i] > min_num:\n            return min_num\n    \n    return min_num\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1. Convert the string into a list of characters.\n    l = list(s)\n    \n    # Step 2. Sort the list of characters in ascending order.\n    l.sort()\n    \n    # Step 3. Join the sorted list of characters into a string.\n    s = ''.join(l)\n    \n    # Step 4. Convert the string into an integer.\n    n = int(s)\n    \n    # Step 5. Return the integer.\n    return n\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    \n    sum = 0\n    count = 0\n    \n    for i in s:\n        sum += ord(i)\n        count += 1\n    \n    return sum/count\n"}
{"task_id": "Open/140", "completion": "    banknotes = 0\n    max_banknotes_A = S // A\n    for i in range(max_banknotes_A + 1) :\n        remaining_amount = S - i * A\n        if remaining_amount % B == 0 :\n            banknotes_B = remaining_amount // B\n            banknotes += banknotes_B + i\n    if banknotes == 0 :\n        return -1\n    else :\n        return banknotes\n"}
{"task_id": "Open/141", "completion": "    return x * y // math.gcd(x, y)\n"}
{"task_id": "Open/142", "completion": "    \n    # convert the given integer to its binary representation\n    binary_representation = bin(n)\n    \n    # count the number of trailing zeros in the binary representation\n    count = 0\n    for i in range(len(binary_representation) - 1, -1, -1):\n        if binary_representation[i] == '0':\n            count += 1\n        else:\n            break\n    \n    # return the count of trailing zeros\n    return count\n"}
{"task_id": "Open/143", "completion": "    max_sum = 0\n    max_index = -1\n    for i in range(1,n-1):\n        left_xor = arr[i-1]\n        right_xor = arr[i+1]\n        curr_sum = left_xor ^ right_xor\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/144", "completion": "    \n    max_len = 1\n    curr_len = 1\n    \n    for i in range(1, n) :\n        if arr[i] < arr[i-1] :\n            curr_len += 1\n        elif curr_len > max_len :\n            max_len = curr_len\n        else :\n            curr_len = 1\n    \n    return max_len\n"}
{"task_id": "Open/145", "completion": "    \n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        \n        # If the difference between the current element and the minimum element is not divisible by k, return -1\n        if (arr[i] - min_element) % k!= 0:\n            return -1\n    \n    # Return the minimum element plus k\n    return min_element + k\n"}
{"task_id": "Open/146", "completion": "    num = 1\n    count = 1\n    seen = set()\n    while num not in seen :\n        seen.add(num)\n        num = (num * 10 + 1) % K\n        count += 1\n    if num == 0 :\n        return count\n    else :\n        return -1\n"}
{"task_id": "Open/147", "completion": "    target = median(arr)\n    operations = 0\n    for i in range(n):\n        operations += abs(arr[i] - target)\n    return operations\n"}
{"task_id": "Open/148", "completion": "    a = 3\n    b = 3\n    sum = 0\n    for i in range(1, n+1) :\n        sum = sum + a\n        a = a + b\n        b = a - b\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    \n    # Convert the input integer to its binary representation.\n    binary = bin(n)\n    \n    # Iterate through the binary representation.\n    for i in range(2, len(binary)) :\n        # If there are consecutive 1's, return False.\n        if binary[i] == '1' and binary[i-1] == '1' :\n            return False\n    \n    # Return True.\n    return True\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i]!= vowels[i]:\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high + 1) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    min_diff = float(\"inf\")\n    for i in range(0, n+1):\n        if i == 0:\n            continue\n        if i == 1:\n            min_diff = abs(i - 1)\n            break\n        if i == 2:\n            min_diff = abs(i - 2)\n            break\n        if i == 3:\n            min_diff = abs(i - 3)\n            break\n        if i == 4:\n            min_diff = abs(i - 4)\n            break\n        if i == 5:\n            min_diff = abs(i - 5)\n            break\n        if i == 6:\n            min_diff = abs(i - 6)\n            break\n        if i == 7:\n            min_diff = abs(i - 7)\n            break\n        if i == 8:\n            min_diff = abs(i - 8)\n            break\n        if i == 9:\n            min_diff = abs(i - 9)\n            break\n        if i == 10:\n            min_diff = abs(i - 10)\n            break\n        if i"}
{"task_id": "Open/156", "completion": "    \n    # Check if the input radius is negative. If it is, return -1.\n    if r < 0 :\n        return -1\n    \n    # Calculate the area of the Reuleaux triangle using the formula: (3 * sqrt(3) * r^2) / 2.\n    return (3 * math.sqrt(3) * r**2) / 2\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    low = 0\n    high = size - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if ar[mid] - ar[low]!= mid - low:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return ar[low]\n"}
{"task_id": "Open/159", "completion": "    return str.count(\"010\")\n"}
{"task_id": "Open/160", "completion": "    \n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[j] == arr[i]:\n                count += 1\n        if count % 2!= 0:\n            return arr[i]\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    ans = 0\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if sx == dx and sy == dy:\n        return True\n    if dx < sx or dy < sy:\n        return False\n    if (dx - sx) % sy == 0 or (dy - sy) % sx == 0:\n        return True\n    return False\n"}
{"task_id": "Open/163", "completion": "    if n%2 == 1 :\n        return 0\n    else :\n        count = 0\n        for i in range(1, n, 2) :\n            if i + 1 < n and (i + 1)%4 == 0 :\n                count += 1\n        return count\n"}
{"task_id": "Open/164", "completion": "    \n    # Initialize an empty dictionary to store the count of occurrences of each element in the array.\n    d = {}\n    \n    # Iterate through the array.\n    for i in range(n):\n        \n        # If the element is not in the dictionary, add it with a count of 1.\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        \n        # If the element is already in the dictionary, increment its count by 1.\n        else:\n            d[arr[i]] += 1\n    \n    # Initialize a variable \"count\" as 1.\n    count = 1\n    \n    # Iterate through the values of the dictionary.\n    for i in d.values():\n        \n        # Multiply \"count\" by the value.\n        count *= i\n    \n    # Return the final value of \"count\".\n    return count\n"}
{"task_id": "Open/165", "completion": "    if height == 0:\n        return 1\n    elif height == 1:\n        return 2\n    else:\n        return AVLnodes(height-1) + AVLnodes(height-1)\n"}
{"task_id": "Open/166", "completion": "    current = source\n    count = 0\n    while current!= dest :\n        count += 1\n        current += step\n        if current == dest :\n            return count\n        current -= step\n        if current == dest :\n            return count\n        current += -step\n        if current == dest :\n            return count\n        current += -step\n    return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "\n        :type n: int\n        :rtype: str\n        \"\"\"\n        if n == 1:\n            return \"1\"\n        \n        prev = \"1\"\n        for i in range(n-1):\n            curr = \"\"\n            count = 1\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n        return prev\n    \n    return countAndSay(n)\n"}
{"task_id": "Open/168", "completion": "    max_len = 0\n    curr_len = 0\n    for i in range(N):\n        if arr[i] >= 0:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n    return max(max_len, curr_len)\n"}
{"task_id": "Open/169", "completion": "    return ( abs(m) * abs(n) ) / math.sqrt( ( abs(m) * abs(m) ) + ( abs(n) * abs(n) ) )\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i,n):\n            sum += arr[j]\n            if sum < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            k = j+1\n            while k < n:\n                if arr[k] - arr[i] <= L:\n                    count += 1\n                k += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    \n    count = 0\n    for i in range(l, r+1) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return n ^ ( ( 1 << m ) - 1 )\n"}
{"task_id": "Open/174", "completion": "    \n    if K == 9 :\n        K = 0\n    \n    total = R - L + 1\n    divisible = total / 9\n    remainder = total % 9\n    count = 0\n    \n    for i in range ( R, L - 1, -1 ) :\n        if ( i % 9 ) == K :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/175", "completion": "    \n    # Step 1.\n    product = n * math.log10(n)\n    \n    # Step 2.\n    product = str(product)\n    \n    # Step 3.\n    return product[:k]\n"}
{"task_id": "Open/176", "completion": "    \n    for i in range(1,n-1) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    a, b, c = sorted([a, b, c])\n    if a + b >= c:\n        return 0\n    else:\n        return c - (a + b)\n"}
