{"task_id": "Open/0", "completion": "\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    count = 0\n    for i in range(N):\n        if (arr[i] + K) > sum:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    \n    min_val = arr[0]\n    min_freq = 0\n    \n    for i in range(n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] == min_val:\n            min_freq += 1\n    \n    return min_freq\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nn = len(arr)"}
{"task_id": "Open/2", "completion": "\n    \n    n_binary = bin(n)\n    \n    for i in range(l, r+1) :\n        if n_binary[i]!= \"1\" :\n            return \"No\"\n    \n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    \n    totalSum = sum(a)\n    if totalSum % 2!= 0 :\n        return False\n    \n    sum1 = 0\n    for i in range(len(a)) :\n        sum1 += a[i]\n        if sum1 == totalSum/2 :\n            return True\n    \n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/5", "completion": "\n    \n    binary = bin(x)\n    count = binary.count('1')\n    \n    if count % 2 == 0 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/6", "completion": "\n    output = []\n    for i in range(len(vec)) :\n        vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)) :\n        if vec[i] > 0 :\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/7", "completion": "\n    \n    max_len = 0\n    \n    for i in range(n):\n        curr_len = 1\n        for j in range(i+1, n):\n            if len(set(str(arr[i])) & set(str(arr[j]))) > 0:\n                curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/8", "completion": "Write a function that takes a list of integers and returns the number of distinct prime factors for each integer in the list.\n        \n        How to solve:\n        Step 1. Define a function that takes a list of integers as input.\n        Step 2. Iterate through each integer in the list.\n            -For each integer, find the distinct prime factors.\n            -Count the number of distinct prime factors.\n            -Return the count for each integer.\n        Step 3. Return the list of counts.\n        \"\"\"\n        \n        def Distinct_Prime_factors ( a ) :\n            \"\"\"Write a function that takes a list of integers and returns the number of distinct prime factors for each integer in the list.\n            \n            How to solve:\n            Step 1. Define a function that takes a list of integers as input.\n            Step 2. Iterate through each integer in the list.\n                -For each integer, find the distinct prime factors.\n                -Count the number of distinct prime factors.\n                -Return the count for each integer.\n            Step 3. Return the list of"}
{"task_id": "Open/9", "completion": "\n    arr.sort()\n    diff = arr[k-1] - arr[0]\n    for i in range(1,k):\n        diff = min(diff, arr[i] - arr[i-1])\n    return diff\n\narr = [1,2,3,4,5,6,7,8,9,10]\nk = 3"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.appendleft(B.pop())\n            A.append(A.pop())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    counter = 0\n    for i in range(len(s)) :\n        char_set = set()\n        for j in range(i, len(s)) :\n            char_set.add(s[j])\n            if len(char_set) > k :\n                break\n            counter += 1\n    return counter\n"}
{"task_id": "Open/13", "completion": "\n    current_number = 2\n    while current_number <= n :\n        if n % current_number == 0 :\n            return False\n        current_number += 1\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "\n    for i in range(0,t) :\n        a = random.randint(2,n-1)\n        if ( pow(a,(n-1)/2,n)!= 1 ) and ( pow(a,(n-1)/2,n)!= n-1 ) :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "\n    \n    for i in range(n) :\n        if s1[i] == '0' and s2[i] == '1' :\n            return True\n        elif s1[i] == '1' and s2[i] == '0' :\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(length):\n        if i % 2 == 0 and s[i] == '1':\n            count += 1\n        elif i % 2 == 1 and s[i] == '0':\n            count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if i == math.pow(i, i):\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    if n == 0 :\n        return 0\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            curr_len += 1\n        else :\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    return max(max_len, curr_len)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        return count\n    if sum == 0 :\n        return count + 1\n    return subsetSum ( arr, n, i + 1, sum - arr[i], count ) + subsetSum ( arr, n, i + 1, sum, count )\n"}
{"task_id": "Open/24", "completion": "\n    \n    return (16 * n**2) - (16 * n) + 6\n"}
{"task_id": "Open/25", "completion": "\n    sum_squares = 0\n    sum_numbers = 0\n    for i in range(1, n+1) :\n        sum_squares += i**2\n        sum_numbers += i\n    return sum_squares + sum_numbers + 1\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1, n+1) :\n        sum = 0\n        for j in range(1, i+1) :\n            if i % j == 0 :\n                sum += j\n        if sum > max_sum :\n            max_sum = sum\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    \n    difference = b - a\n    percentage = difference / a * 100\n    return percentage\n    "}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i*i\n    return sum/n\n"}
{"task_id": "Open/31", "completion": "\n    \n    arr.sort()\n    return arr[k-1]\n\narr = [1,2,3,4,5,6,7,8,9,10]\nk = 3"}
{"task_id": "Open/32", "completion": "\n    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "\n    \n    term = 1\n    for i in range(2, n+1) :\n        term = term * 2 + i - 1\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    count = 0\n    product = 1\n    for i in range(len(a)):\n        product *= a[i]\n        if product < k:\n            count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        string = str(i)\n        count += string.count(str(d))\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    for i in range(1, n + 1) :\n        if i not in arr :\n            return i\n    return n + 1\n"}
{"task_id": "Open/37", "completion": "\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    total_area = 0\n    side = 1\n    while side <= min(l, b):\n        total_area += (side * side)\n        side += 1\n    return total_area\n"}
{"task_id": "Open/39", "completion": "\n    if N == 1 :\n        return 1\n    else :\n        return N + count ( N - 1 )\n"}
{"task_id": "Open/40", "completion": "\n    max_zeros = 0\n    count = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count += 1\n        elif arr[i] == 1:\n            max_zeros = max(max_zeros, count)\n            count = 0\n    if max_zeros == 0:\n        return -1\n    else:\n        return max_zeros\n\narr = [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}
{"task_id": "Open/41", "completion": "\n    max_len = 0\n    curr_len = 0\n    for i in range(n):\n        if arr[i]!= 0:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n    return max(max_len, curr_len)\n"}
{"task_id": "Open/42", "completion": "\n    \n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0],a[n-1])\n    else :\n        return max(a)\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (array[i] * array[j]) <= k:\n                count += 1\n    return count\n\narray = [1,2,3,4,5,6,7,8,9,10]\nn = len(array)\nk = 20"}
{"task_id": "Open/44", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(n) :\n        sum += abs(arr[i] - (i+1))\n    return sum\n"}
{"task_id": "Open/45", "completion": "\n    min_element = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "\n    max_diff = 0\n    for i in range(len(array)):\n        diff = abs(array[i] - i)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "\n    \n    leftSide = (a * x1 + b * y1) - c\n    \n    if leftSide * leftSide > 0 :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/48", "completion": "\n    return sum(a == i + (a ^ i) for i in range(0, a + 1))\n"}
{"task_id": "Open/49", "completion": "\n    max_val = 0\n    for i in range(L, R+1) :\n        for j in range(L, R+1) :\n            if i & j > max_val :\n                max_val = i & j\n    return max_val\n"}
{"task_id": "Open/50", "completion": "\n    smallest = -1\n    for i in range(n):\n        if smallest == -1:\n            smallest = a[i]\n        else:\n            if smallest % a[i] == 0:\n                continue\n            else:\n                smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "\n    sum = 0\n    for i in range ( n ) :\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            result = result ^ arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(N+1):\n        count += (i & i)\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    \n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    \n    if (sum + n - 1) == k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/55", "completion": "\n    \n    binary = bin(n)\n    \n    if binary[0] == '0' and binary[-1] == '1' :\n        return True\n    else :\n        return False\n    "}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    current_partition = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_partition += 1\n        else:\n            max_partitions = max(max_partitions, current_partition)\n            current_partition = 1\n    return max(max_partitions, current_partition)\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    for i in range ( 2, N + 1 ) :\n        var1 = arr[i - 1]\n        var2 = arr[i - 2]\n        result = result + var1 + var2\n        result = result + (var1 * var2) / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "\n    for i in range(len(ranges)) :\n        for j in range(ranges[i][0],ranges[i][1]+1) :\n            arr[j] = arr[j] + reversals\n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    if n == 0 :\n        return True\n    if n < 0 :\n        return False\n    for i in range(1, int(n**0.5)+1) :\n        if (n-i**2)**0.5 == int((n-i**2)**0.5) :\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    if a == \"\" or len(a) > len(b):\n        return -1\n    \n    count = 0\n    while count <= len(b) / len(a):\n        if a * count == b:\n            return count\n        count += 1\n    return -1\n"}
{"task_id": "Open/62", "completion": "\n    modified_str = \"\"\n    for i in range(len-1, -1, -1) :\n        if str[i] > str[i+1] :\n            modified_str += \"9\"\n        else :\n            modified_str += str[i]\n    return modified_str + str[0]\n"}
{"task_id": "Open/63", "completion": "\n    min_value = math.inf\n    for i in range(n):\n        sum = 0\n        for j in range(n):\n            sum += math.log(arr[j])\n        if sum < min_value * n:\n            min_value = arr[i]\n    return min_value\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/64", "completion": "\n    if len(s) == 0 or s == '1':\n        return \"-1\"\n    start = 0\n    end = 0\n    max_len = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            start = end + 1\n        end = i\n        max_len = max(max_len, end - start + 1)\n    return s[start:start + max_len]\n"}
{"task_id": "Open/65", "completion": "\n    \n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    \n    for i in range(n):\n        if d[a[i]] > k:\n            a[i] = None\n    \n    return len([i for i in a if i!= None])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/66", "completion": "\n    \n    size = n + k\n    arr.sort()\n    \n    if size % 2 == 0:\n        return (arr[size//2] + arr[size//2 - 1]) / 2.0\n    else:\n        return arr[size//2]\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nk = 3"}
{"task_id": "Open/67", "completion": "\n    stepCount = 0\n    pos = 0\n    neg = 0\n    zero = 0\n    for i in range(n):\n        if a[i] > 0:\n            pos += 1\n        elif a[i] < 0:\n            neg += 1\n        else:\n            zero += 1\n    if neg % 2 == 0:\n        stepCount += zero\n    else:\n        if zero > 0:\n            stepCount += zero\n        else:\n            stepCount += 2\n    return stepCount\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    if n == 0 :\n        return True\n    if n & 1 == 0 :\n        return False\n    return areSetBitsIncreasing( n >> 1 )\n"}
{"task_id": "Open/70", "completion": "\n    if x > n :\n        return x\n    \n    remainder = n % x\n    if remainder <= (x / 2) :\n        return n - remainder\n    else :\n        return n + (x - remainder)\n    "}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(0, n + 1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    finalSum = 0\n    for i in range(1, n + 1):\n        sumOfTheSeries = 0\n        for j in range(1, i + 1):\n            sumOfTheSeries += j\n        finalSum += sumOfTheSeries\n    return finalSum\n"}
{"task_id": "Open/73", "completion": "\n    max_value = -1\n    count_dict = {}\n    for i in range(n) :\n        if arr[i] not in count_dict :\n            count_dict[arr[i]] = 1\n        else :\n            count_dict[arr[i]] += 1\n    for key in count_dict :\n        if count_dict[key] == count_dict[key] and count_dict[key] > max_value :\n            max_value = count_dict[key]\n    return max_value\n"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (a[i] > a[j]) and (a[i] & a[j] == 0):\n                count += 1\n    return count\n\na = [1,2,4,8,16,32,64,128]\nn = len(a)"}
{"task_id": "Open/75", "completion": "\n    \n    binary = bin(n)\n    binary = binary[2:]\n    binary = binary[::-1]\n    \n    for i in range(len(binary)):\n        if binary[i] == '1':\n            binary = binary[:i] + '0' + binary[i+1:]\n        else:\n            binary = binary[:i] + '1' + binary[i+1:]\n    \n    return int(binary, 2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/76", "completion": "\n    changes = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            changes += 1\n            A[i+1] = 0\n    return changes\n\nA = [0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"}
{"task_id": "Open/77", "completion": "\n    \n    degree = radian * 180 / pi\n    return degree\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    sum = (n/2) * (2*a + (n-1)*d)\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 0 :\n        return 1\n    else :\n        power = 1\n        while n % 2 == 0 :\n            n = n / 2\n            power = power * 2\n        return power\n"}
{"task_id": "Open/81", "completion": "\n    count = 0\n    for i in range(moves+1) :\n        new_row = row + i\n        new_column = column + i\n        if new_row >= 0 and new_column >= 0 and new_row < 8 and new_column < 8 :\n            count += 1\n    return count\n"}
{"task_id": "Open/82", "completion": "\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n"}
{"task_id": "Open/83", "completion": "\n    \n    sorted_string = sorted(s)\n    \n    last_occurrence = []\n    \n    for i in range(len(s)):\n        last_occurrence.append(s.rfind(sorted_string[i]))\n    \n    modified_string = \"\"\n    \n    for i in range(len(s)):\n        modified_string += s[last_occurrence[i]]\n    \n    return modified_string\n"}
{"task_id": "Open/84", "completion": "\n    \n    arr = [0] * n\n    \n    for i in range(n) :\n        if i % 2 == 0 :\n            arr[i] = i + 1\n        else :\n            arr[i] = i\n    \n    return sum(arr[l-1:r])\n    \n    "}
{"task_id": "Open/85", "completion": "\n    if x > y :\n        smaller = y\n    else :\n        smaller = x\n    for i in range(1, smaller + 1) :\n        if x % i == 0 and y % i == 0 :\n            hcf = i\n    return hcf\n"}
{"task_id": "Open/86", "completion": "\n    \n    list = [A,B]\n    \n    for i in range(N-2):\n        list.append(list[-1]+list[-2])\n    \n    return list[-1]\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    \n    r = r / 12\n    t = t * 12\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    \n    counter = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[k] > B[j] * B[j]:\n                    counter += 1\n    return counter\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    \n    # Initialize a dictionary to store the length of the longest arithmetic subsequence for each number in arr.\n    d = {}\n    for i in range(n):\n        d[i] = 0\n    \n    # Initialize the maximum length of arithmetic subsequence as 0.\n    max_length = 0\n    \n    # Iterate through each number in arr.\n    for i in range(n):\n        \n        # Initialize a dictionary to store the difference between the current number and all previous numbers.\n        diff = {}\n        for j in range(i):\n            diff[j] = arr[i] - arr[j]\n        \n        # Iterate through all previous numbers.\n        for j in range(i):\n            \n            # Calculate the difference between the current number and the previous number.\n            diff_value = arr[i] - arr[j]\n            \n            # If the difference is already in the dictionary, update the length of the arithmetic subsequence for the current number.\n            if diff_value in diff:\n                d[i] = max(d[i], d[j] + 1)\n            "}
{"task_id": "Open/92", "completion": "\n    max_len = 0\n    max_substring = \"\"\n    for i in range(len(str)):\n        if str[i].isalnum():\n            if i + 1 < len(str) and i + 2 < len(str) and str[i + 1].isalnum() and str[i + 2].isalnum():\n                if len(str[i:i + 2]) % 2 == 0:\n                    if len(str[i:i + 2]) > max_len:\n                        max_len = len(str[i:i + 2])\n                        max_substring = str[i:i + 2]\n    if max_len == 0:\n        return \"-1\"\n    return max_substring\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 1:\n        n = n / 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    string = \"\"\n    for i in range(n) :\n        string += 'a'\n    \n    for i in range(n-1, -1, -1) :\n        k -= 1\n        if k >= 26 :\n            if k >= 26 :\n                string = string[:i] + 'z' + string[i+1:]\n                k -= 26\n            else :\n                string = string[:i] + chr(k+97) + string[i+1:]\n                k -= 1\n        else :\n            string = string[:i] + chr(k+97) + string[i+1:]\n            k -= 1\n    \n    return string\n"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    totalSum = 0\n    for i in range(n):\n        totalSum += arr[i]\n    \n    if totalSum == 0:\n        return 0\n    \n    sumBeforeSplit = 0\n    for i in range(n):\n        sumBeforeSplit += arr[i]\n        if sumBeforeSplit == totalSum/3 and totalSum/3 == totalSum/3:\n            return 1\n    \n    return 0\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    sentence = sentence.split()\n    for i in sentence :\n        if i == word :\n            return True\n    return False\n"}
{"task_id": "Open/98", "completion": "\n    if n < 0 :\n        n = -n\n    if n == 0 :\n        return 1\n    return int(math.log10(n)) + 1\n"}
{"task_id": "Open/99", "completion": "\n    if a == b and b == c:\n        return True\n    if k == 0:\n        return False\n    if k % 2 == 0:\n        return True\n    if a - b == k or a - c == k or b - c == k:\n        return True\n    return False\n"}
{"task_id": "Open/100", "completion": "\n    \n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    \n    if x == y:\n        return True\n    \n    while len(x) < len(y):\n        x = \"0\" + x\n    \n    if x[:len(y)] == y:\n        return True\n    else:\n        return False\n    "}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    \n    minRemovals = 0\n    \n    arr.sort()\n    \n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) > 1:\n            minRemovals += abs(arr[i] - arr[i-1]) - 1\n    \n    return minRemovals\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\n"}
{"task_id": "Open/104", "completion": "\n    \n    left_bin = bin(left)[2:]\n    right_bin = bin(right)[2:]\n    \n    max_bits = 0\n    \n    for i in range(len(left_bin)) :\n        if left_bin[i] == '1' :\n            count = 0\n            for j in range(i, len(left_bin)) :\n                if left_bin[j] == '1' :\n                    count += 1\n                else :\n                    break\n            if count > max_bits :\n                max_bits = count\n    \n    if max_bits > len(right_bin) :\n        return right\n    \n    left_bin = left_bin[:max_bits] + '1' + left_bin[max_bits:]\n    \n    return int(left_bin, 2)\n    "}
{"task_id": "Open/105", "completion": "\n    power = 1\n    while power <= n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/106", "completion": "\n    divisors = []\n    for i in range(1, n) :\n        if n % i == 0 :\n            divisors.append(i)\n    if sum(divisors) == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "\n    \n    century = N // 100\n    leap_centuries = N // 400\n    \n    leap_years = (century // 4) + (leap_centuries // 4)\n    \n    non_leap_years = N - leap_years * 4\n    \n    total_days = non_leap_years + (2 * leap_years)\n    \n    return total_days % 7\n"}
{"task_id": "Open/108", "completion": "\n    \n    if a < 0 :\n        return -1\n    \n    return int((3 * a * (a + 1)) / 2)\n"}
{"task_id": "Open/109", "completion": "\n    \n    string = str(n)\n    count = 0\n    for char in string:\n        if char == str(d):\n            count += 1\n    return count\n"}
{"task_id": "Open/110", "completion": "\n    n = str(n)\n    for i in range(len(n)):\n        if n.count(n[i]) > 1:\n            return False\n    return True\n"}
{"task_id": "Open/111", "completion": "\n    \n    for i in range(0,n):\n        if a[i] % 5 == 0 or a[i] % 3 == 0:\n            continue\n        else:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/112", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 4\n    array[1] = 7\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 7\n        else:\n            array[i] = array[i//2] * 10 + 4\n    \n    return array[n]\n    \n    "}
{"task_id": "Open/113", "completion": "\n    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 5\n        else:\n            array[i] = array[i//2] * 10 + 3\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 2\n        else:\n            array[i] = array[i//2] * 10 + 1\n    \n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    for i in range(n) :\n        if (a[i] % 11!= 0) :\n            return False\n    return True\n"}
{"task_id": "Open/116", "completion": "\n    if l < 0 or b < 0 or h < 0 :\n        return -1\n    return l * b * h\n"}
{"task_id": "Open/117", "completion": "\n    \n    string = string.split()\n    for i in range(len(string)):\n        if string[i].isalpha():\n            string[i] = string[i][0].upper() + string[i][1:].lower()\n    return \" \".join(string)\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil( math.sqrt(8 * p + 1) / 2 ) - 1\n"}
{"task_id": "Open/119", "completion": "\n    return len(arr) == len(set(arr))\n"}
{"task_id": "Open/120", "completion": "\n    \n    distinctCode = set()\n    for i in range(len(string) - 1) :\n        if i + 1 < len(string) :\n            distinctCode.add(string[i] + string[i + 1])\n    return len(distinctCode)\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    maximum = 0\n    for i in range(len(ss)):\n        if ss[i].isdigit():\n            maximum = maximum * 10 + int(ss[i])\n        else:\n            if maximum > maximum:\n                maximum = maximum\n            else:\n                maximum = maximum * 10\n    return maximum\n"}
{"task_id": "Open/123", "completion": "\n    \n    longest = \"\"\n    current = \"\"\n    \n    for i in range(len(s)):\n        if s[i].isdigit():\n            current += s[i]\n        else:\n            if len(current) > len(longest):\n                longest = current\n            current = \"\"\n    \n    if len(current) > len(longest):\n        longest = current\n    \n    return longest\n"}
{"task_id": "Open/124", "completion": "\n    remainingArea = 0\n    while K > 0 and N > 0 and M > 0:\n        if N >= M:\n            N -= M\n        else:\n            M -= N\n        remainingArea += N * M\n        K -= 1\n    return remainingArea\n"}
{"task_id": "Open/125", "completion": "\n    if len(string)!= length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    power = 1\n    while power * 2 <= n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/127", "completion": "\n    \n    A = str(A)\n    B = str(B)\n    \n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n    "}
{"task_id": "Open/128", "completion": "\n    \n    diff = abs(x - y)\n    if diff!= 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1 = \"12\"\n    Sn_2 = \"1213\"\n    Sn_3 = \"\"\n    for i in range(3, n+1):\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    steps = 0\n    for i in range(1, n):\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    elif n % 4 == 1 or n % 4 == 2 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/132", "completion": "\n    m = N / a\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/134", "completion": "\n    \n    if arr[0] % 2 == 0:\n        return False\n    if arr[n-1] % 2 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    return True\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/135", "completion": "\n    if N == 1 :\n        return ( R - L + 1 )\n    elif N == 2 :\n        return ( R - L + 1 ) + ( R - L + 2 )\n    else :\n        return ( R - L + 1 ) + ( R - L + 2 ) + ( R - L + 3 )\n"}
{"task_id": "Open/136", "completion": "\n    \n    arr.sort()\n    min_num = 1\n    \n    for i in range(n):\n        if arr[i] == min_num:\n            min_num += 1\n        elif arr[i] > min_num:\n            return min_num\n    \n    return min_num\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/137", "completion": "\n    \n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    return int(s)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(n-1) :\n        if arr[i] > arr[i+1] :\n            count += arr[i] - arr[i+1]\n            arr[i+1] = arr[i]\n    return count\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for char in s :\n        sum += ord(char)\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/140", "completion": "\n    banknotes = 0\n    max_banknotes_A = S // A\n    for i in range(max_banknotes_A + 1):\n        remaining_amount = S - i * A\n        if remaining_amount % B == 0:\n            banknotes_B = remaining_amount // B\n            banknotes += banknotes_B + i\n            if banknotes < 0:\n                return -1\n    return banknotes\n"}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "\n    \n    count = 0\n    \n    while ( n > 0 ) :\n        n = n // 2\n        count += n\n    \n    return count\n    "}
{"task_id": "Open/143", "completion": "\n    max_sum = 0\n    max_index = -1\n    for i in range(1, n-1):\n        left_xor = 0\n        right_xor = 0\n        for j in range(i):\n            left_xor = left_xor ^ arr[j]\n        for k in range(i+1, n):\n            right_xor = right_xor ^ arr[k]\n        curr_sum = left_xor ^ right_xor\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_index = i\n    return max_index\n\narr = [1,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/144", "completion": "\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n) :\n        if arr[i] < arr[i-1] :\n            curr_len += 1\n        elif curr_len > max_len :\n            max_len = curr_len\n        else :\n            curr_len = 1\n    return max_len\n"}
{"task_id": "Open/145", "completion": "\n    \n    min_element = min(arr)\n    for i in range(n):\n        if (arr[i] - min_element) % k!= 0:\n            return -1\n    return min_element + k\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "Open/146", "completion": "\n    num = 1\n    count = 1\n    seen = set()\n    while num not in seen:\n        seen.add(num)\n        num = (num * 10 + 1) % K\n        count += 1\n    if num == 0:\n        return count\n    else:\n        return -1\n"}
{"task_id": "Open/147", "completion": "\n    target = arr[n//2]\n    operations = 0\n    for i in range(n):\n        operations += abs(arr[i] - target)\n    return operations\n"}
{"task_id": "Open/148", "completion": "\n    a = 3\n    b = 3\n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum = sum + a\n        a = a + b\n        b = a - b\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n    \n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "\n    \n    binary = bin(n)\n    \n    for i in range(2, len(binary) ) :\n        if binary[i] == '1' and binary[i-1] == '1' :\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/153", "completion": "\n    vowels = ['a','e','i','o','u']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i]!= vowels[i]:\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low, high+1):\n        if i%10 >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    min_diff = math.inf\n    for i in range(0, n+1):\n        if i*2 <= n:\n            diff = abs(i*2 - n)\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"}
{"task_id": "Open/156", "completion": "\n    \n    if r < 0 :\n        return -1\n    else :\n        return (3 * sqrt(3) * r**2) / 2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/157", "completion": "\n    sorted_string = sorted(s)\n    return ''.join(sorted_string)\n"}
{"task_id": "Open/158", "completion": "\n    low = 0\n    high = size - 1\n    while low <= high :\n        mid = (low + high) // 2\n        if ar[mid] - ar[low]!= mid - low :\n            high = mid - 1\n        else :\n            low = mid + 1\n    return ar[low]\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    \n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[j] == arr[i]:\n                count += 1\n        if count % 2!= 0:\n            return arr[i]\n    return None\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,"}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    \n    if sx == dx and sy == dy:\n        return True\n    if dx < sx or dy < sy:\n        return False\n    if (dx - sx) % sy == 0 or (dy - sy) % sx == 0:\n        return True\n    return False\n"}
{"task_id": "Open/163", "completion": "\n    if n % 2 == 1 :\n        return 0\n    else :\n        count = 0\n        for i in range(1, n, 2) :\n            if (i + 1) % 4 == 0 :\n                count += 1\n        return count\n"}
{"task_id": "Open/164", "completion": "\n    d = {}\n    for i in range(n) :\n        d[arr[i]] = d.get(arr[i],0) + 1\n    count = 1\n    for i in d :\n        count *= d[i]\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/165", "completion": "\n    \n    if height == 0 :\n        return 1\n    elif height == 1 :\n        return 2\n    else :\n        return AVLnodes(height-1) + AVLnodes(height-1)\n"}
{"task_id": "Open/166", "completion": "\n    current = source\n    count = 0\n    while current!= dest :\n        count += 1\n        current += step\n        if current == dest :\n            return count\n        current -= step\n        if current == dest :\n            return count\n        current += -step\n        if current == dest :\n            return count\n        current += -step\n    return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "\n    \n    if n == 1 :\n        return \"1\"\n    \n    sequence = \"1\"\n    for i in range ( n - 1 ) :\n        new_sequence = \"\"\n        count = 0\n        for j in range ( len ( sequence ) ) :\n            if j == 0 :\n                count = 1\n            elif sequence[j] == sequence[j - 1] :\n                count += 1\n            else :\n                new_sequence += str ( count ) + sequence[j - 1]\n                count = 1\n        sequence = new_sequence\n    return sequence\n"}
{"task_id": "Open/168", "completion": "\n    \n    max_len = 0\n    curr_len = 0\n    \n    for i in range(N):\n        if arr[i] >= 0:\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 0\n    \n    if curr_len > max_len:\n        max_len = curr_len\n    \n    return max_len\n\narr = [1,2,3,4,5,-6,7,8,9,-10,11,12,-13,14,15,-16,17,18,-19,20]\nN = 20"}
{"task_id": "Open/169", "completion": "\n    \n    abs_m = abs(m)\n    abs_n = abs(n)\n    \n    square_m = abs_m * abs_m\n    square_n = abs_n * abs_n\n    \n    sum_of_squares = square_m + square_n\n    \n    square_root = math.sqrt(sum_of_squares)\n    \n    product = abs_m * abs_n\n    \n    normal_value = product / square_root\n    \n    return normal_value\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += arr[j]\n            if sum < k:\n                count += 1\n    return count\n\narr = [1, 4, 45, 6, 0, 19]\nn = len(arr)\nk = 5"}
{"task_id": "Open/171", "completion": "\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l,r+1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    return n ^ ( ( 1 << m ) - 1 )\n"}
{"task_id": "Open/174", "completion": "\n    \n    if K == 9 :\n        K = 0\n    \n    total = R - L + 1\n    divisible = total / 9\n    remainder = total % 9\n    count = 0\n    \n    for i in range ( R, L - remainder, -1 ) :\n        if i % 9 == K :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/175", "completion": "\n    \n    product = n * math.log(n)\n    \n    return str(product)[:k]\n    "}
{"task_id": "Open/176", "completion": "\n    \n    for i in range(1, n-1) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    \n    return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/177", "completion": "\n    \n    a, b, c = sorted(a, b, c)\n    \n    if a + b >= c :\n        return 0\n    \n    return c - (a + b)\n    "}
