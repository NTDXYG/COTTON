{"task_id": "Open/0", "completion": "\n    sum = 0\n    count = 0\n    for i in arr :\n        sum += i\n    for i in arr :\n        if (i + K) > sum :\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    max_freq = 0\n    freq = {}\n    for i in range(n) :\n        if arr[i] in freq :\n            freq[arr[i]] += 1\n        else :\n            freq[arr[i]] = 1\n    for key in freq :\n        if freq[key] > max_freq :\n            max_freq = freq[key]\n    return max_freq\n\narr = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/2", "completion": "\n    \n    # Step 1. Convert n to binary representation.\n    binary_rep = bin(n)[2:]\n    \n    # Step 2. Check if all bits within the range from l to r are set to 1.\n    for i in range(l, r+1):\n        if binary_rep[i] == '0':\n            return \"No\"\n    \n    # Step 3. If all bits within the range are set to 1, return \"Yes\".\n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (A[i]+A[j]) % K == 0 :\n                count += 1\n    return count\n\nA = [1,2,3,4,5,6]\nn = len(A)\nK = 3"}
{"task_id": "Open/4", "completion": "\n    total = sum(a)\n    if total % 2 == 1 :\n        return False\n    sum1 = 0\n    for i in a :\n        sum1 += i\n        if sum1 == total / 2 :\n            return True\n    return False\n"}
{"task_id": "Open/5", "completion": "\n    binary = bin(x)\n    count = binary.count('1')\n    if count % 2 == 0 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/6", "completion": "\n    output = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/7", "completion": "\n    max_len = 0\n    curr_len = 1\n    for i in range(n) :\n        curr_set = set()\n        for j in range(i,n) :\n            curr_str = str(arr[j])\n            for digit in curr_str :\n                if digit in curr_set :\n                    curr_len += 1\n                    break\n            curr_set.add(curr_str[0])\n        if curr_len > max_len :\n            max_len = curr_len\n        curr_len = 1\n    return max_len\n"}
{"task_id": "Open/8", "completion": "Write a function that takes a list of integers as input.\n        \n        How to solve:\n        Step 1. Define a function that takes a list of integers as input.\n        Step 2. Iterate through each integer in the list.\n            -For each integer, find the distinct prime factors.\n            -Count the number of distinct prime factors.\n            -Return the count for each integer.\n        Step 3. Return the list of counts.\n        \"\"\"\n        \n        counts = []\n        for i in a :\n            count = 0\n            for j in range(1,i+1) :\n                if i % j == 0 :\n                    count += 1\n            counts.append(count)\n        return counts\n    \n    return Distinct_Prime_factors_helper( a )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/9", "completion": "\n    arr.sort()\n    return min(arr[k] - arr[0], arr[k] - arr[1], arr[k] - arr[2], arr[k] - arr[3], arr[k] - arr[4], arr[k] - arr[5], arr[k] - arr[6], arr[k] - arr[7], arr[k] - arr[8], arr[k] - arr[9], arr[k] - arr[10], arr[k] - arr[11], arr[k] - arr[12], arr[k] - arr[13], arr[k] - arr[14], arr[k] - arr[15], arr[k] - arr[16], arr[k] - arr[17], arr[k] - arr[18], arr[k] - arr[19], arr[k] - arr[20], arr[k] - arr[21], arr[k] - arr[22], arr[k] - arr[23], arr[k] - arr["}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A) > 0 and len(B) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            A.append(A.popleft())\n            B.append(B.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    counter = 0\n    for i in range(len(s)) :\n        set_of_characters = set()\n        for j in range(i,len(s)) :\n            set_of_characters.add(s[j])\n            if len(set_of_characters) <= k :\n                counter += 1\n            else :\n                break\n    return counter\n"}
{"task_id": "Open/13", "completion": "\n    current = 2\n    while current <= n:\n        if n % current == 0:\n            return False\n        current = current + 1\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    \n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "\n    if n < 2 :\n        return -1\n    a = random.randint(2,n-1)\n    x = pow(a,(n-1)/2,n)\n    if x == 1 or x == n-1 :\n        return 1\n    else :\n        return -1\n"}
{"task_id": "Open/16", "completion": "\n    for i in range(len(s1)) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == '1':\n                count += 1\n        else:\n            if s[i] == '0':\n                count += 1\n    return min(count, len(s) - count)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n+1) :\n        if math.log(i, 2) == int(math.log(i, 2)) :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return 0\n    else :\n        return x + product(x,y-1)\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        if i % 4 == 1 :\n            count1 += 1\n        if i % 4 == 2 :\n            count2 += 1\n        if i % 4 == 3 :\n            count3 += 1\n    if count0 == count1 and count1 == count2 and count2 == count3 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 1\n    curr_len = 1\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            curr_len += 1\n        else :\n            max_len = max(max_len,curr_len)\n            curr_len = 1\n    return max(max_len,curr_len)\n\narr = [10, 22, 9, 33, 21, 50, 41, 60]\nn = len(arr)"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        count = subsetSum ( arr, n, i + 1, sum, count )\n        count = subsetSum ( arr, n, i + 1, sum - arr [i], count )\n        return count\n"}
{"task_id": "Open/24", "completion": "\n    return (16 * n**2) - (16 * n) + 6\n"}
{"task_id": "Open/25", "completion": "\n    sum_squares = 0\n    sum_numbers = 0\n    for i in range(1, n+1) :\n        sum_squares += i**2\n        sum_numbers += i\n    return sum_squares, sum_numbers, sum_numbers + 1\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return ( b - a ) / a * 100\n"}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum/n\n"}
{"task_id": "Open/31", "completion": "\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "\n    chicks = 3**(n-1)\n    return chicks\n"}
{"task_id": "Open/33", "completion": "\n    \n    term = 1\n    for i in range(2, n+1) :\n        term = term * 2 + (i - 1)\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    count = 0\n    product = 1\n    for i in a:\n        product *= i\n        if product < k:\n            count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range(1,n+1) :\n        s = str(i)\n        count += s.count(d)\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    arr = [x for x in arr if x > 0]\n    arr = set(arr)\n    for i in range(1, n + 1):\n        if i not in arr:\n            return i\n    return n + 1\n"}
{"task_id": "Open/37", "completion": "\n    dp = [1,1,2]\n    for i in range(3,n+1) :\n        dp.append(dp[i-1] + dp[i-2])\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    total_area = 0\n    side = 1\n    while side <= min(l, b):\n        area = side * side\n        total_area += area\n        side += 1\n    return total_area\n"}
{"task_id": "Open/39", "completion": "\n    if N == 1 :\n        return 1\n    else :\n        return N + count(N-1)\n"}
{"task_id": "Open/40", "completion": "\n    max_zeros = 0\n    count = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            count += 1\n        else :\n            if count > max_zeros :\n                max_zeros = count\n            count = 0\n    if count > max_zeros :\n        max_zeros = count\n    if max_zeros == 0 :\n        return -1\n    return max_zeros\n"}
{"task_id": "Open/41", "completion": "\n    max_len = 0\n    curr_len = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            curr_len = 0\n        else :\n            curr_len += 1\n        if curr_len > max_len :\n            max_len = curr_len\n    return max_len\n"}
{"task_id": "Open/42", "completion": "\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0],a[-1])\n    else :\n        return max(a)\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(0, n) :\n        for j in range(i, n) :\n            if array[i] * array[j] <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    sum = 0\n    arr.sort()\n    for i in range(0,n) :\n        sum += abs(arr[i]-i)\n    return sum\n"}
{"task_id": "Open/45", "completion": "\n    min_element = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "\n    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            diff = array[j] - array[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "\n    \n    # Step 1. Calculate the value of the left side of the equation for point (x1, y1) and point (x2, y2).\n    leftSide = (a * x1) + (b * y1) - c\n    rightSide = (a * x2) + (b * y2) - c\n    \n    # Step 2. If the values have the same sign, return True. Otherwise, return False.\n    if leftSide * rightSide > 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(0, a + 1) :\n        if (a ^ i) == (a + i) :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max_val = 0\n    for i in range(L,R+1):\n        for j in range(L,R+1):\n            if i & j > max_val:\n                max_val = i & j\n    return max_val\n"}
{"task_id": "Open/50", "completion": "\n    smallest = -1\n    for i in range(n) :\n        if a[i] % a[0] == 0 :\n            smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "\n    sum = 0\n    for i in range(n) :\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            result ^= arr[i][j]\n            if (i+1) * (j+1) % 2 == 1:\n                result ^= arr[i+1][j+1]\n    return result\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(N+1) :\n        if xorEqualsOrCount(i) == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    sum += n - 1\n    if sum == k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/55", "completion": "\n    return n & 1 == 1\n"}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    current_partition = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_partition += 1\n        else:\n            max_partitions = max(max_partitions, current_partition)\n            current_partition = 1\n    max_partitions = max(max_partitions, current_partition)\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    for i in range(2, N+1):\n        var1 = arr[i-1]\n        var2 = arr[i-2]\n        result = result + var1 + var2\n        result = result / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "\n    \n    for i in range(ranges) :\n        arr.reverse()\n    \n    for i in range(reversals) :\n        arr.reverse()\n    \n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    for a in range(0, int(n**0.5) + 1) :\n        b = int(n - a**2)\n        if b**0.5 == int(b**0.5) :\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    if a == \"\" or len(a) > len(b):\n        return -1\n    count = 0\n    for i in range(1, len(b)//len(a)+1):\n        if a*i == b:\n            return i\n    return -1\n"}
{"task_id": "Open/62", "completion": "\n    modified_str = \"\"\n    for i in range(len-1, -1, -1) :\n        if str[i] > str[i+1] :\n            modified_str += str[i] - 1\n            str[i] = 9\n        else :\n            modified_str += str[i]\n    modified_str += str[0]\n    return modified_str\n"}
{"task_id": "Open/63", "completion": "\n    min_value = math.inf\n    for i in arr :\n        sum_log = math.log(i)\n        if sum_log < min_value :\n            min_value = sum_log * n\n    return min_value\n"}
{"task_id": "Open/64", "completion": "\n    if s == \"\" or s.count(\"1\") == 0 :\n        return \"-1\"\n    start = 0\n    end = 0\n    max_len = 0\n    for i in range(len(s)) :\n        if s[i] == \"1\" :\n            end = i\n        else :\n            end = i + 1\n        if end - start > max_len :\n            max_len = end - start\n    return s[start : start + max_len]\n"}
{"task_id": "Open/65", "completion": "\n    d = {}\n    for i in a :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    \n    for i in a :\n        if d[i] > k :\n            d[i] = 0\n        else :\n            d[i] -= 1\n    \n    for i in d :\n        if d[i] == 0 :\n            del d[i]\n    \n    return len(d)\n"}
{"task_id": "Open/66", "completion": "\n    size = n + k\n    arr.sort()\n    if size % 2 == 0 :\n        return (arr[size//2-1] + arr[size//2])/2\n    else :\n        return arr[size//2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/67", "completion": "\n    step = 0\n    pos = 0\n    neg = 0\n    zero = 0\n    for i in a :\n        if i == 1 :\n            pos += 1\n        elif i == -1 :\n            neg += 1\n        elif i == 0 :\n            zero += 1\n    if pos % 2 == 0 :\n        step += pos\n    else :\n        step += pos + 1\n    if neg % 2 == 0 :\n        step += neg\n    else :\n        step += neg + 1\n    if zero % 2 == 0 :\n        step += zero\n    else :\n        step += zero + 1\n    return step\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    else :\n        v = list(range(1, n+1))\n        n = n-1\n        while n > 0 :\n            v.append(v[n//5])\n            n = n-1\n        result = 0\n        for i in range(len(v)-1, -1, -1) :\n            result = result*10 + v[i]\n        return result\n"}
{"task_id": "Open/69", "completion": "\n    binary = bin(n)[2:]\n    for i in range(len(binary) - 1):\n        if binary[i] == '1' and binary[i+1] == '1':\n            return False\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    if x > n :\n        return x\n    else :\n        remainder = n % x\n        if remainder <= x/2 :\n            return n - remainder\n        else :\n            return n + (x - remainder)\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(n+1) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    \n    finalSum = 0\n    for i in range(1, n+1) :\n        finalSum += i\n        i += 2\n    return finalSum\n"}
{"task_id": "Open/73", "completion": "\n    max_value = -1\n    count_dict = {}\n    for i in arr :\n        if i not in count_dict :\n            count_dict[i] = 1\n        else :\n            count_dict[i] += 1\n    for i in count_dict :\n        if count_dict[i] > max_value :\n            max_value = count_dict[i]\n    return max_value\n\narr = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n) :\n        if a[i] > 0 :\n            if a[i] & 1 == 1 :\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    return int( bin( n )[2:], 2)\n"}
{"task_id": "Open/76", "completion": "\n    changes = 0\n    for i in range(1,n-1) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            A[i+1] = 0\n            changes += 1\n    return changes\n"}
{"task_id": "Open/77", "completion": "\n    return 180 * radian / pi\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n / 2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    sum = (n/2) * (2*a + (n-1)*d)\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 1 :\n        return 1\n    else :\n        power = 1\n        while n % 2 == 0 :\n            n = n / 2\n            power = power * 2\n        return power\n"}
{"task_id": "Open/81", "completion": "\n    count = 0\n    for i in range(row, row+moves+1) :\n        for j in range(column, column+moves+1) :\n            if i>=0 and i<8 and j>=0 and j<8 :\n                count += 1\n    return count\n"}
{"task_id": "Open/82", "completion": "\n    sum = 0\n    for i in range(n) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/83", "completion": "\n    s = list(s)\n    s.sort()\n    for i in range(len(s)):\n        if s[i]!= s[-i-1]:\n            s[i], s[-i-1] = s[-i-1], s[i]\n    return \"\".join(s)\n"}
{"task_id": "Open/84", "completion": "\n    arr = []\n    for i in range(n) :\n        arr.append(i+1)\n    for i in range(n) :\n        if i%2 == 0 :\n            arr[i] = arr[i]*2\n    return sum(arr[l-1:r])\n"}
{"task_id": "Open/85", "completion": "\n    if x > y :\n        min = x\n    else :\n        min = y\n    \n    while min > 0 :\n        if x % min == 0 and y % min == 0 :\n            return min\n        else :\n            min -= 1\n    return 1\n"}
{"task_id": "Open/86", "completion": "\n    \n    list = [A,B]\n    \n    for i in range(N-2) :\n        list.append(list[-1] + list[-2])\n    \n    return list[-1]\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    emi = ( p * r * (1 + r)**t ) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    counter = 0\n    for i in range(A,B+1):\n        for j in range(B,C+1):\n            if i*j > j*j:\n                counter += 1\n    return counter\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if ( i % 10 == 2 or i % 10 == 3 or i % 10 == 9 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    if n == 0 :\n        return 0\n    \n    max_length = 0\n    d = {}\n    \n    for i in range(n) :\n        d[arr[i]] = d.get(arr[i], 0) + 1\n        \n        for j in range(i) :\n            d[arr[i] - arr[j]] = d.get(arr[i] - arr[j], 0) + 1\n            \n        if i > 0 :\n            d[arr[i] - arr[i-1]] = d.get(arr[i] - arr[i-1], 0) + 1\n            \n        if max_length < d[arr[i]] :\n            max_length = d[arr[i]]\n            \n    return max_length\n"}
{"task_id": "Open/92", "completion": "\n    max_len = 0\n    max_substring = \"\"\n    for i in range(len(str)):\n        if str[i].isalnum():\n            if i % 2 == 0:\n                if len(str[i:i+2]) > max_len:\n                    max_len = len(str[i:i+2])\n                    max_substring = str[i:i+2]\n        else:\n            continue\n    if max_len == 0:\n        return \"-1\"\n    else:\n        return max_substring\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 1 :\n        n = n // 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    string = \"a\" * n\n    \n    for i in range(n-1, -1, -1) :\n        if k >= 0 :\n            if k >= 26 :\n                string = string[:i] + \"z\" + string[i+1:]\n                k -= 26\n            else :\n                string = string[:i] + chr(97 + k) + string[i+1:]\n                k -= 1\n        else :\n            break\n    \n    return string\n"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel/n\n        fuel = fuel/n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    totalSum = sum(arr)\n    sumBeforeSplit = 0\n    for i in range(n) :\n        sumBeforeSplit += arr[i]\n        if sumBeforeSplit == totalSum/3 and sumAfterSplit == totalSum*2/3 :\n            return 1\n    return 0\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "\n    return math.floor(math.log10(n)) + 1\n"}
{"task_id": "Open/99", "completion": "\n    if a == b and b == c and k == 0 :\n        return True\n    elif k == 0 :\n        return False\n    elif k % 2 == 0 :\n        return True\n    elif (a - b) % k == 0 :\n        return True\n    elif (a - c) % k == 0 :\n        return True\n    elif (b - c) % k == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/100", "completion": "\n    \n    if x == y :\n        return True\n    \n    x = x << 32\n    \n    while x!= y :\n        x = x | x >> 1\n        \n        if x == y :\n            return True\n    \n    return False\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    minRemovals = 0\n    arr.sort()\n    for i in range(1,n):\n        if abs(arr[i] - arr[i-1]) > 1:\n            minRemovals += abs(arr[i] - arr[i-1]) - 1\n    return minRemovals\n"}
{"task_id": "Open/104", "completion": "\n    max_bits = 0\n    while left > right:\n        count = 0\n        while left & 1 == 0:\n            left = left >> 1\n            count += 1\n        max_bits = max(max_bits, count)\n        left = left >> 1\n    return max_bits\n"}
{"task_id": "Open/105", "completion": "\n    power = 1\n    while power <= n :\n        power = power * 2\n    return power\n"}
{"task_id": "Open/106", "completion": "\n    if n == 1 :\n        return False\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum += i\n    if sum == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "\n    \n    century = 100\n    leap_century = 400\n    \n    total_days = 0\n    \n    for i in range(1, N+1) :\n        if i % century == 0 :\n            total_days += leap_century\n        elif i % leap_century == 0 :\n            total_days += century\n        else :\n            total_days += leap_century\n            \n    total_days -= leap_century\n    \n    leap_days = total_days // 2\n    \n    total_days -= leap_days\n    \n    leap_days = leap_days * 2\n    \n    total_days += leap_days\n    \n    odd_days = total_days % 7\n    \n    return odd_days\n    "}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    else :\n        return (1 + 5*a) // 2\n"}
{"task_id": "Open/109", "completion": "\n    count = 0\n    n = str(n)\n    for i in n :\n        if i == d :\n            count += 1\n    return count\n"}
{"task_id": "Open/110", "completion": "\n    \n    if type(n)!= int :\n        return False\n    \n    if n < 0 :\n        return False\n    \n    if n == 0 :\n        return True\n    \n    str_n = str(n)\n    \n    for i in str_n :\n        if str_n.count(i) > 1 :\n            return False\n    \n    return True\n"}
{"task_id": "Open/111", "completion": "\n    for i in a :\n        if i % 5!= 0 and i % 3!= 0 :\n            return False\n    return True\n"}
{"task_id": "Open/112", "completion": "\n    array = [0] * (n+1)\n    array[0] = 4\n    array[1] = 7\n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] + 4\n        else :\n            array[i] = array[i//2] + 7\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] + 3\n        else :\n            array[i] = array[i//2] + 5\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10 + 1\n        else :\n            array[i] = array[i//2] * 10 + 2\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    \n    concatenatedString = \"\"\n    for i in a :\n        concatenatedString += str(i)\n    \n    concatenatedString = int(concatenatedString)\n    \n    return concatenatedString % 11 == 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/116", "completion": "\n    if ( l > 0 and b > 0 and h > 0 ) :\n        return l * b * h\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "\n    \n    string = string.split()\n    new_string = []\n    for word in string :\n        if word.isalpha() :\n            new_string.append(word.capitalize())\n        else :\n            new_string.append(word)\n    return \" \".join(new_string)\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil(math.sqrt(8 * p + 1) - 1) // 2\n"}
{"task_id": "Open/119", "completion": "\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/120", "completion": "\n    \n    set = set()\n    \n    for i in range(len( string )):\n        if i + 1 < len( string ):\n            set.add( string[i] + string[i + 1] )\n    \n    return len( set )\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    maximum = 0\n    for i in range(len(ss)):\n        if ss[i].isdigit():\n            maximum = max(maximum, int(ss[i])*10+int(ss[i-1]))\n        else:\n            maximum = max(maximum, int(ss[i-1]))\n    return maximum\n"}
{"task_id": "Open/123", "completion": "\n    longest = \"\"\n    current = \"\"\n    for i in range(len(s)) :\n        if s[i].isdigit() :\n            current += s[i]\n        else :\n            if len(current) > len(longest) :\n                longest = current\n            current = \"\"\n    if len(current) > len(longest) :\n        longest = current\n    return longest\n"}
{"task_id": "Open/124", "completion": "\n    remainingArea = 0\n    while K > 0 and N > 0 and M > 0:\n        if N >= M:\n            remainingArea -= M\n            N -= M\n        else:\n            remainingArea -= N\n            M -= N\n        K -= 1\n    if N > 0 and M > 0:\n        return remainingArea * N * M\n    return 0\n"}
{"task_id": "Open/125", "completion": "\n    \n    for i in range(length) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    power = 1\n    while power * 2 <= n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/127", "completion": "\n    \n    if len(str(A)) == len(str(B)) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/128", "completion": "\n    return (x-y)!= 1\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1 = \"12\"\n    Sn_2 = \"1213\"\n    Sn_3 = \"\"\n    for i in range(3,n+1):\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    steps = 0\n    for i in range(1,n) :\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "\n    return 0 if n % 4 == 0 or n % 4 == 3 else 1\n"}
{"task_id": "Open/132", "completion": "\n    m = (N // a) + 1\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n    "}
{"task_id": "Open/134", "completion": "\n    if arr[0]%2!= 0 :\n        return False\n    if arr[-1]%2!= 0 :\n        return False\n    if n%2!= 0 :\n        return False\n    return True\n"}
{"task_id": "Open/135", "completion": "\n    if N == 1 :\n        return countSum(N-1, L, R ) + (R-L+1)\n    elif N > 1 :\n        return countSum(N-2, L, R ) + (R-L+1)\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "\n    if n == 0 :\n        return 1\n    if n == 1 :\n        return 2\n    if n == 2 :\n        return 3\n    if arr[0] < arr[1] :\n        return arr[0]\n    if arr[0] > arr[1] :\n        return arr[1]\n    if arr[0] == arr[1] :\n        return arr[0] + 1\n    return findMin(arr[1:], n-1)\n"}
{"task_id": "Open/137", "completion": "\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = int(s)\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1,n):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for char in s :\n        sum += ord(char)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "\n    banknotes = 0\n    max_banknotes_A = S // A\n    if max_banknotes_A == 0:\n        return -1\n    for banknotes_A in range(0, max_banknotes_A + 1):\n        remaining_amount = S - banknotes_A * A\n        if remaining_amount % B == 0:\n            banknotes_B = remaining_amount // B\n            banknotes += banknotes_A + banknotes_B\n    return banknotes\n\nA = 5\nB = 3\nS = 10\nN = 2"}
{"task_id": "Open/141", "completion": "\n    return math.gcd(x,y) * math.floor(x/math.gcd(x,y)) * math.floor(y/math.gcd(x,y))\n"}
{"task_id": "Open/142", "completion": "\n    \n    count = 0\n    \n    while n > 0 :\n        if n % 2 == 0 :\n            count += 1\n        n = n // 2\n    \n    return count\n"}
{"task_id": "Open/143", "completion": "\n    max_sum = 0\n    max_index = -1\n    for i in range(1,n-1):\n        left_xor = arr[i-1] ^ arr[i]\n        right_xor = arr[i+1] ^ arr[i]\n        curr_sum = left_xor ^ right_xor\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_index = i\n    return max_index\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/144", "completion": "\n    max_len = 1\n    curr_len = 1\n    for i in range(1,n) :\n        if arr[i-1] < arr[i] :\n            curr_len += 1\n        elif curr_len > max_len :\n            max_len = curr_len\n        curr_len = 1\n    return max_len\n"}
{"task_id": "Open/145", "completion": "\n    if n == 0 :\n        return -1\n    \n    min_element = min(arr)\n    \n    if min_element % k!= 0 :\n        return -1\n    \n    for i in range(n) :\n        if arr[i] % k!= 0 :\n            return -1\n    \n    return min_element + k\n"}
{"task_id": "Open/146", "completion": "\n    num = 1\n    count = 1\n    seen = set()\n    while num not in seen :\n        seen.add(num)\n        num = (num * 10 + 1) % K\n        count += 1\n    if num == 0 :\n        return count\n    else :\n        return -1\n"}
{"task_id": "Open/147", "completion": "\n    target = arr[int(n/2)]\n    operations = 0\n    for i in range(n):\n        if arr[i]!= target:\n            operations += abs(arr[i] - target)\n    return operations\n"}
{"task_id": "Open/148", "completion": "\n    a = 3\n    b = 0\n    sum = 0\n    for i in range(1, n+1) :\n        sum = a + b\n        a = b\n        b = sum\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    result = 0\n    for i in range(len1) :\n        result ^= ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "\n    binary = bin(n)\n    binary = binary[2:]\n    \n    for i in range(len(binary)):\n        if binary[i] == '1' :\n            if i == len(binary)-1 :\n                return False\n            else:\n                continue\n        else:\n            return True\n        "}
{"task_id": "Open/153", "completion": "\n    vowels = ['a','e','i','o','u']\n    \n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == 0:\n                if s[i]!= s[i+1]:\n                    return False\n            elif s[i]!= s[i-1]:\n                return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low, high + 1):\n        if i % 10 >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    min_diff = math.inf\n    for i in range(1, math.floor(math.log2(n))+1) :\n        if abs(n - 2**i) < min_diff :\n            min_diff = abs(n - 2**i)\n    return min_diff\n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else:\n        return (3 * (3 ** 0.5) * r ** 2) / 2\n"}
{"task_id": "Open/157", "completion": "\n    \n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    return s\n"}
{"task_id": "Open/158", "completion": "\n    low = 0\n    high = size - 1\n    while low <= high :\n        mid = (low + high) // 2\n        if ar[mid] - ar[low]!= mid - low :\n            high = mid - 1\n        else :\n            low = mid + 1\n    return ar[low]\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    \n    for i in range(n) :\n        count = arr.count(arr[i])\n        if count % 2 == 0 :\n            return arr[i]\n    return None\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nn = len(arr)"}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n    \n    for i in range(n) :\n        ans = ans ^ arr[i]\n    \n    return ans\n"}
{"task_id": "Open/162", "completion": "\n    if sx == dx and sy == dy :\n        return True\n    if dx < sx or dy < sy :\n        return False\n    if (dx - sx) % sy == 0 or (dy - sy) % sx == 0 :\n        return True\n    return False\n"}
{"task_id": "Open/163", "completion": "\n    count = 0\n    if n % 2 == 1 :\n        return 0\n    else :\n        for i in range(1, n-1, 2) :\n            if (i + 1) % 2 == 0 :\n                if (i + 2) % 4 == 0 :\n                    count += 1\n        return count\n"}
{"task_id": "Open/164", "completion": "\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    count = {k: v*(v-1)//2 for k, v in count.items()}\n    return sum(count.values())\n"}
{"task_id": "Open/165", "completion": "\n    if height == 0 :\n        return 1\n    elif height == 1 :\n        return 2\n    else :\n        return AVLnodes(height-1) + AVLnodes(height-1)\n"}
{"task_id": "Open/166", "completion": "\n    current = source\n    count = 0\n    while current!= dest :\n        if current == dest :\n            return count\n        count += 1\n        current += step\n        if current == dest :\n            return count\n        current -= step\n        if current == dest :\n            return count\n        count += 1\n        current += -step\n        if current == dest :\n            return count\n        current -= -step\n        if current == dest :\n            return count\n        count += 1\n    return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "\n    sequence = \"1\"\n    for i in range(n-1) :\n        new_sequence = \"\"\n        count = 1\n        for j in range(len(sequence)) :\n            if sequence[j] == sequence[j+1] :\n                count += 1\n            else :\n                new_sequence += str(count) + sequence[j]\n                count = 1\n        sequence = new_sequence\n    return sequence\n"}
{"task_id": "Open/168", "completion": "\n    max_len = 0\n    curr_len = 0\n    for i in arr:\n        if i > 0:\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 0\n    if curr_len > max_len:\n        max_len = curr_len\n    if arr[0] > 0:\n        return N\n    else:\n        return max_len\n\narr = [-1, -2, -3, -4, -5]\nN = 5"}
{"task_id": "Open/169", "completion": "\n    abs_m = abs( m )\n    abs_n = abs( n )\n    square_m = abs_m ** 2\n    square_n = abs_n ** 2\n    sum_m_n = square_m + square_n\n    square_root_sum_m_n = math.sqrt( sum_m_n )\n    product_m_n = abs_m * abs_n\n    normal_value = product_m_n / square_root_sum_m_n\n    return normal_value\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-2) :\n        for j in range(i+1,len(arr)-1) :\n            for k in range(j+1,len(arr)) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if (i%2 == 0) and (i%3 == 0) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    \n    return int(bin(n)[2:].zfill(m)[::-1],2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/174", "completion": "\n    count = 0\n    if K == 9:\n        K = 0\n    for i in range(L, R + 1):\n        if i % 9 == K:\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    product = n * math.log(n, 10)\n    return str(product)[:k]\n"}
{"task_id": "Open/176", "completion": "\n    for i in range(1,n-1) :\n        if A[i-1] > A[i] and A[i+1] > A[i] :\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "\n    a.sort()\n    b.sort()\n    c.sort()\n    \n    if a[0] + b[0] >= c[-1] :\n        return 0\n    \n    return c[-1] - b[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
