{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n    \n    "}
{"task_id": "HumanEval/1", "completion": "\n    paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    current_group = ''\n    counter = 0\n\n    for char in paren_string:\n        if char == '(':\n            counter += 1\n            current_group += char\n        elif char == ')':\n            counter -= 1\n            current_group += char\n        if counter == 0:\n            paren_groups.append(current_group)\n            current_group = ''\n\n    return paren_groups\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n    pass\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n    \n    "}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i, num in enumerate(numbers):\n        if i == len(numbers) - 1:\n            result.append(num)\n        else:\n            result.append(num)\n            result.append(delimeter)\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/6", "completion": "\n    # Split the input string by spaces to get individual groups.\n    groups = paren_string.split(' ')\n\n    # Initialize an empty list to store the deepest level of nesting for each group.\n    max_levels = []\n\n    # Iterate through each group.\n    for group in groups:\n        # Initialize a counter variable to keep track of the current level of nesting.\n        current_level = 0\n        # Iterate through each character in the group.\n        for char in group:\n            # If the character is '(', increment the counter.\n            if char == '(':\n                current_level += 1\n            # If the character is ')', decrement the counter.\n            elif char == ')':\n                current_level -= 1\n        # Append the maximum level of nesting encountered so far to the list.\n        max_levels.append(current_level)\n\n    # Return the list of maximum levels of nesting for each group.\n    return max_levels\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    rolling_max_list = []\n    for index, number in enumerate(numbers):\n        rolling_max_list.append(max(numbers[index:index+len(numbers)]))\n    return rolling_max_list\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    \n    # Step 1.\n    if is_palindrome(string[::-1]):\n        return string[::-1]\n    \n    # Step 2.\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string[i:] + string[:i]\n    \n    # Step 3.\n    return string + string[::-1]\n    \n    "}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    return max(strings, key=len)\n    \n    "}
{"task_id": "HumanEval/13", "completion": "\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    result = ''\n    for i in range(n + 1):\n        result += str(i) +''\n    return result[:-1]\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    return [4 if c == 'o' else 2 if c == 'o|' else 1 for c in music_string]\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    counter = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            counter += 1\n    return counter\n"}
{"task_id": "HumanEval/19", "completion": "\n    numbers_to_numerals = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n       'six': '6',\n       'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n\n    numbers_list = numbers.split()\n    numbers_list = [numbers_to_numerals[numberal] for numberal in numbers_list]\n    numbers_list.sort()\n    numbers_list = [numbers_to_numerals[numberal] for numberal in numbers_list]\n\n    return''.join(numbers_list)\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    closest_pair = None\n    min_diff = None\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if min_diff is None or diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    smallest = min(numbers)\n    largest = max(numbers)\n    return [((x - smallest) / (largest - smallest)) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n    \n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    if n == 1:\n        return []\n\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n\n    if n > 1:\n        factors.append(n)\n\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n    \n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2!= 0:\n        raise ValueError(\"Polynomial must have even number of coefficients.\")\n    \n    largest_non_zero_coeff = max(xs, key=lambda x: xs[xs.index(x)])\n    return -largest_non_zero_coeff\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_ = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_.append(l[i])\n        else:\n            l_.append(sorted(l[i]))\n    return l_\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return list(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0 and '7' in str(i):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n        else:\n            l_.append(sorted(l[i]))\n    return l_\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[2:] + group[:2] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    counter = 0\n    current = 1\n    while counter < n:\n        current, next_ = current + current, current\n        if next_ == 1:\n            counter += 1\n    return current\n"}
{"task_id": "HumanEval/40", "completion": "\n    for i in l:\n        for j in l:\n            for k in l:\n                if i + j + k == 0:\n                    return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    collisions = 0\n    for i in range(1, n+1):\n        collisions += i\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    converted_number = \"\"\n    while x > 0:\n        remainder = x % base\n        converted_number = str(remainder) + converted_number\n        x = x // base\n    return converted_number\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n    \n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join(i for i in text if i not in vowels)\n"}
{"task_id": "HumanEval/52", "completion": "\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    s0_set = set(s0)\n    s1_set = set(s1)\n    s0_set = sorted(s0_set)\n    s1_set = sorted(s1_set)\n    if s0_set == s1_set:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(list(set(l1).intersection(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    assert n > 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    if len(brackets) % 2!= 0:\n        return False\n    else:\n        opening_brackets = []\n        for i in range(len(brackets)):\n            if brackets[i] == \"(\":\n                opening_brackets.append(i)\n            elif brackets[i] == \")\":\n                if len(opening_brackets) == 0:\n                    return False\n                else:\n                    opening_brackets.pop()\n        return len(opening_brackets) == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    count = 0\n    for char in s:\n        if char in 'aeiouy':\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/65", "completion": "\n    x_str = str(x)\n    num_digits = len(x_str)\n    if shift > num_digits:\n        return x_str[::-1]\n    else:\n        return x_str[shift % num_digits:] + x_str[:shift % num_digits]\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    count = 0\n    for char in s:\n        if char =='m':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    \n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    \n    return [min(evens), arr.index(min(evens))]\n"}
{"task_id": "HumanEval/69", "completion": "\n    frequency = {}\n    for i in lst:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    \n    for i in frequency:\n        if frequency[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    lst.sort()\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n        else:\n            result.append(lst[i-1])\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        semi_perimeter = (a + b + c) / 2\n        area = round(sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c)), 2)\n        return area\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\n    count = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left]!= arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count\n"}
{"task_id": "HumanEval/74", "completion": "\n    total_chars1 = 0\n    total_chars2 = 0\n    for string in lst1:\n        total_chars1 += len(string)\n    for string in lst2:\n        total_chars2 += len(string)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    counter = 0\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            if is_prime(i):\n                counter += 1\n            if counter >= 3:\n                return True\n    return counter == 3\n"}
{"task_id": "HumanEval/76", "completion": "\n    i = 0\n    while i < n:\n        if n**i == x:\n            return True\n        if n**i > x:\n            return False\n        i += 1\n    return False\n"}
{"task_id": "HumanEval/77", "completion": "\n    i = 1\n    while i**3 <= a:\n        if i**3 == a:\n            return True\n        i += 1\n    return False\n"}
{"task_id": "HumanEval/78", "completion": "\n    count = 0\n    for char in num:\n        if char == '2' or char == '3' or char == '5' or char == '7' or char == 'B' or char == 'D':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal)\n    binary = binary[2:]\n    binary = 'db' + binary + 'db'\n    return binary\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-3):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    pass\n"}
{"task_id": "HumanEval/82", "completion": "\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(length**0.5)+1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if i < 10:\n            if i == 1 or i == n:\n                count += 1\n        else:\n            if i % 10 == 1 or i % 10 == n:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\n    \n    sum_digits = 0\n    \n    while N > 0:\n        sum_digits += N % 10\n        N = N // 10\n    \n    return str(sum_digits)\n"}
{"task_id": "HumanEval/85", "completion": "\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/86", "completion": "\n    pass\n"}
{"task_id": "HumanEval/87", "completion": "\n    return sorted([(i, j) for i, row in enumerate(lst) for j, _ in enumerate(row) if row[j] == x], key=lambda x: (x[0], -x[1]))\n"}
{"task_id": "HumanEval/88", "completion": "\n    copy_array = array[:]\n    sum_array = sum(copy_array[0:len(copy_array)])\n    if sum_array % 2 == 0:\n        copy_array.sort()\n    else:\n        copy_array.sort(reverse=True)\n    return copy_array\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            encrypted_string += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "HumanEval/90", "completion": "\n    smallest = None\n    second_smallest = None\n    for i in lst:\n        if smallest is None or i < smallest:\n            smallest = i\n        elif second_smallest is None or i < second_smallest:\n            second_smallest = i\n    return second_smallest\n"}
{"task_id": "HumanEval/91", "completion": "\n    boredom_counter = 0\n    \n    for sentence in S.split('.'):\n        for word in sentence.split():\n            if word == 'I':\n                boredom_counter += 1\n    return boredom_counter\n"}
{"task_id": "HumanEval/92", "completion": "\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    \n    if x == y + z or x == z + y or y == x + z:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/93", "completion": "\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            encoded_message += char.swapcase()\n        elif char.lower() in 'aeiou':\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n    return sum(int(i) for i in str(max_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    lower_case = True\n    upper_case = True\n    for key in dict:\n        if not isinstance(key, str):\n            lower_case = False\n        if not isinstance(key, str):\n            upper_case = False\n    if lower_case or upper_case:\n        return True\n    return False\n"}
{"task_id": "HumanEval/96", "completion": "\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    \n    def unit_digit(n):\n        return n % 10\n    \n    def unit_digit(n):\n        return n % 10\n    \n    return unit_digit(a) * unit_digit(b)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    return int(round(float(value)))\n"}
{"task_id": "HumanEval/100", "completion": "\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            result.append(i)\n        else:\n            result.append(i+1)\n    return result\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split(',')\n"}
{"task_id": "HumanEval/102", "completion": "\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(int(avg))[2:]\n"}
{"task_id": "HumanEval/104", "completion": "\n    result = []\n    for i in x:\n        i = str(i)\n        for j in i:\n            if int(j) % 2 == 0:\n                break\n        else:\n            result.append(i)\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "completion": "\n    arr = [x for x in arr if x >= 1 and x <= 9]\n    arr.sort()\n    arr.reverse()\n    d = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    return [d[x] for x in arr]\n"}
{"task_id": "HumanEval/106", "completion": "\n    return []\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for element in arr:\n        element_str = str(element)\n        if element < 0:\n            element_str = element_str[1:]\n        sum_of_digits = sum([int(digit) for digit in element_str])\n        if sum_of_digits > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/110", "completion": "\n    count = 0\n    for i in lst1:\n        if i % 2 == 1:\n            count += 1\n    if count % 2 == 1:\n        return \"NO\"\n    return \"YES\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    \n    hist = {}\n    \n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    \n    max_count = max(hist.values())\n    \n    new_hist = {}\n    \n    for letter in hist:\n        if hist[letter] == max_count:\n            new_hist[letter] = hist[letter]\n    \n    return new_hist\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/112", "completion": "\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for string in lst:\n        count = 0\n        for char in string:\n            if char in '13579':\n                count += 1\n        result.append(count)\n    return [\"the number of odd elements \" + str(n) + \"n the str4ng \" + str(string) + \" of the \" + str(lst.index(string)) + \"nput.\" for n, string in enumerate(lst)]\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            min_sum = min(min_sum, sum(nums[i:j+1]))\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    count = 0\n    for row in grid:\n        total_water = sum(row)\n        num_buckets = math.ceil(total_water / capacity)\n        count += num_buckets\n    return count\n\ngrid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity = 1"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    result = []\n    if s == \"\":\n        return result\n    words = s.split()\n    for word in words:\n        consonant_count = 0\n        for character in word:\n            if character in \"bcdfghjklmnpqrstvwxyz\":\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in \"aeiouAEIOU\":\n            if word[i + 1] in \"aeiouAEIOU\":\n                closest_vowel = word[i + 1]\n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "\n    count = 0\n    for char in lst[0]:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n            return 'No'\n    count = 0\n    for char in lst[1]:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes' if count == 0 else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0])\n"}
{"task_id": "HumanEval/122", "completion": "\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz_seq = []\n    collatz_seq.append(n)\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted(filter(lambda x: x % 2!= 0, collatz_seq))\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if int(month) < 1 or int(month) > 12:\n        return False\n    \n    if int(day) < 1 or int(day) > 31:\n        return False\n    \n    if int(month) in [4, 6, 9, 11] and int(day) > 30:\n        return False\n    \n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) < 1:\n        return False\n    \n    if int(month) == 2 and int(day) > 29:\n        return False\n    \n    if not year.isdigit() or len(year)!= 4:\n        return False\n    \n    return True\n    "}
{"task_id": "HumanEval/125", "completion": "\n    if \" \" in txt:\n        return txt.split()\n    if \",\" in txt:\n        return txt.split(\",\")\n    return len([x for x in txt if x.islower() and ord(x) % 2 == 1])\n"}
{"task_id": "HumanEval/126", "completion": "\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i-1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    \n    interval1_start = max(interval1[0], interval2[0])\n    interval1_end = min(interval1[1], interval2[1])\n    interval2_start = max(interval1[0], interval2[0])\n    interval2_end = min(interval1[1], interval2[1])\n    \n    if interval1_start > interval1_end or interval2_start > interval2_end:\n        return \"NO\"\n    \n    intersection_length = interval1_end - interval1_start\n    \n    if intersection_length == 1:\n        return \"YES\"\n    \n    if intersection_length % 2 == 0:\n        return \"NO\"\n    \n    return \"YES\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    product = 1\n    sum = 0\n    for num in arr:\n        product *= num if num > 0 else -1 * num\n        sum += abs(num)\n    return product * sum\n"}
{"task_id": "HumanEval/129", "completion": "\n    pass\n"}
{"task_id": "HumanEval/130", "completion": "\n    tribonacci = [3, 1]\n    if n < 2:\n        return tribonacci[:n + 1]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + (i / 2))\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    n = str(n)\n    for i in n:\n        if int(i) % 2!= 0:\n            product *= int(i)\n    return product if product!= 1 else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[' or char == '{' or char == '(':\n            stack.append(char)\n        elif char == ']' or char == '}' or char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == '[' and char == ']':\n                    continue\n                elif top == '{' and char == '}':\n                    continue\n                elif top == '(' and char == ')':\n                    continue\n                else:\n                    return False\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    sum_squares = 0\n    for element in lst:\n        sum_squares += round(element)**2\n    return sum_squares\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if last_char.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "\n    negative = None\n    positive = None\n    for i in lst:\n        if i < 0:\n            if negative is None:\n                negative = i\n            elif i > negative:\n                negative = i\n        elif i > 0:\n            if positive is None:\n                positive = i\n            elif i < positive:\n                positive = i\n    return (negative, positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    elif a == b:\n        return None\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    counter = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            for k in range(1, n):\n                for l in range(1, n):\n                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                        counter += 1\n    return counter > 0\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            if result[-1] == \" \":\n                result = result[:-1] + \"_\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "\n    \n    if len(file_name) > 3:\n        return 'No'\n    elif '.' not in file_name:\n        return 'No'\n    else:\n        file_name_split = file_name.split('.')\n        if file_name_split[0] == '':\n            return 'No'\n        elif file_name_split[0][0] not in 'abcdefghijklmnopqrstuvwxyz':\n            return 'No'\n        elif file_name_split[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for index in range(len(lst)):\n        if index % 3 == 0:\n            sum += lst[index] ** 2\n        elif index % 4 == 0 and not index % 3 == 0:\n            sum += lst[index] ** 3\n        else:\n            sum += lst[index]\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    words = sentence.split()\n    prime_length_words = []\n\n    for word in words:\n        if len(word) > 1 and is_prime(len(word)):\n            prime_length_words.append(word)\n\n    return \" \".join(prime_length_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x = int(x[0])\n    n = int(n[0])\n    x = x * n\n    if x % n == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "\n        Return the sum of the digits of the given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=get_sum_of_digits)\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = []\n    counter = 0\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    counter += 1\n    return counter\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = {\n        \"Mercury\": 0,\n        \"Venus\": 1,\n        \"Earth\": 2,\n        \"Mars\": 3,\n        \"Jupiter\": 4,\n        \"Saturn\": 5,\n        \"Uranus\": 6,\n        \"Neptune\": 7\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    planet1_order = planets[planet1]\n    planet2_order = planets[planet2]\n    planet_list = []\n    for planet in planets:\n        if planets[planet] >= planet1_order and planets[planet] <= planet2_order:\n            planet_list.append(planet)\n    planet_list.sort()\n    return tuple(planet_list)\n"}
{"task_id": "HumanEval/149", "completion": "\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=len)\n    return result\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    \n    sum_squares = 0\n    for element in lst:\n        if element >= 0 and type(element) == int:\n            if element % 2!= 0:\n                sum_squares += element ** 2\n    return sum_squares\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(guess[i] - game[i]) for i in range(len(game))]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension_name = \"\"\n    strongest_extension_strength = None\n    for extension in extensions:\n        strength = CAP - SM\n        if strongest_extension_strength is None or strength > strongest_extension_strength:\n            strongest_extension_name = extension\n            strongest_extension_strength = strength\n    return \"{}.{}\".format(class_name, strongest_extension_name)\n"}
{"task_id": "HumanEval/154", "completion": "\n    \n    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            return False\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    num_str = str(num)\n    for char in num_str:\n        if char.isdigit() and int(char) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    \n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n\n    roman_numeral = ''\n\n    for key in sorted(roman_numerals, reverse=True):\n        while number >= key:\n            roman_numeral += roman_numerals[key]\n            number -= key\n\n    return roman_numeral\n"}
{"task_id": "HumanEval/157", "completion": "\n    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2)\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_chars and word < max_word:\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    total_eaten_carrots = number\n    remaining_carrots = remaining - need\n    if remaining_carrots < 0:\n        remaining_carrots = 0\n    total_eaten_carrots += remaining_carrots\n    return [total_eaten_carrots, remaining_carrots]\n"}
{"task_id": "HumanEval/160", "completion": "\n    pass\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n            has_letter = True\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    even_digits = []\n    for i in range(a, b+1):\n        i_str = str(i)\n        for digit in i_str:\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    return sorted(even_digits)\n"}
