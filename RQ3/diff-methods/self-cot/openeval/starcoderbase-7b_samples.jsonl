{"task_id": "Open/0", "completion": "    sum = 0\n    count = 0\n    for i in range(len(arr)) :\n        sum += arr[i]\n        if arr[i] + K > sum :\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    \n    min_val = arr[0]\n    min_freq = 1\n    \n    for i in range(1,n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n            min_freq = 1\n        elif arr[i] == min_val :\n            min_freq += 1\n            \n    return min_freq\n"}
{"task_id": "Open/2", "completion": "    count = 0\n    for i in range(l,r+1):\n        if n & (1 << i):\n            count += 1\n        if count == r - l + 1:\n            return \"Yes\"\n        if count > r - l + 1:\n            return \"No\"\n    return \"No\""}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A [ i ] + A [ j ] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    \n    sum = 0\n    for i in a :\n        sum += i\n        if sum > n :\n            return True\n        elif sum == n :\n            return False\n        else :\n            sum = 0\n    return False\n"}
{"task_id": "Open/5", "completion": "    parity = 0\n    while x > 0:\n        if x & 1 == 1:\n            parity += 1\n        else:\n            parity -= 1\n        x = x >> 1\n    if parity == 0:\n        return 1\n    else:\n        return 0\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in vec:\n        if i > 0:\n            output.append(i)\n        else:\n            output.append(i + 1)\n    return output\n"}
{"task_id": "Open/7", "completion": "    \n    longestSubsequence = 0\n    for i in range(n) :\n        currentSubsequence = 1\n        for j in range(i+1,n) :\n            if arr[j] > arr[i] :\n                currentSubsequence += 1\n            else :\n                currentSubsequence = 1\n        if currentSubsequence > longestSubsequence :\n            longestSubsequence = currentSubsequence\n    return longestSubsequence\n"}
{"task_id": "Open/8", "completion": "    prime_factors = {}\n    for i in a :\n        if i == 1 :\n            continue\n        elif i == 2 :\n            prime_factors[2] = 1\n        else :\n            for j in range ( 2, int(math.sqrt(i)) + 1 ) :\n                if i % j == 0 :\n                    prime_factors[j] = prime_factors.get(j, 0) + 1\n                    while i % j == 0 :\n                        i = i / j\n    return prime_factors\n"}
{"task_id": "Open/9", "completion": "    sum = 0\n    for i in range(n):\n        if i > k:\n            arr.pop(0)\n        sum += abs(arr[k] - arr[i])\n    return sum\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    B = deque(B)\n    for i in A :\n        if i == B[0] :\n            total_time += 1\n            B.popleft()\n        else :\n            B.append(B.popleft())\n            B.append(i)\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range( size ) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    substring = \"\"\n    for i in s :\n        if i not in substring :\n            substring += i\n        if len(substring) < k :\n            continue\n        if len(substring) == k :\n            count += 1\n            substring = substring[1:]\n        if len(substring) > k :\n            substring = substring[1:]\n    return count\n"}
{"task_id": "Open/13", "completion": "    current = 2\n    while current <= n:\n        if n % current == 0:\n            return False\n        if current > n:\n            return True\n        n = n // current\n        current += 1\n    return False\n"}
{"task_id": "Open/14", "completion": "    if n%4 == 0 :\n        return n\n    elif n%4 == 1 :\n        return 1\n    elif n%4 == 2 :\n        return n+1\n    elif n%4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    for i in range(t):\n        if (pow(a,(n-1)//2,n)!=1 and pow(a,(n-1)//2,n)!=n-1):\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "    counter = 0\n    for i in range(len(s1)):\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            counter += 1\n        if counter == n:\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == '1':\n                count += 1\n        else:\n            if s[i] == '0':\n                count += 1\n    return min(count, len(s) - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1,n+1):\n        if math.log(i,2) == math.floor(math.log(i,2)):\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    \n    for i in range(n):\n        if a[i] % 4 == 0:\n            count0 += 1\n        elif a[i] % 4 == 1:\n            count1 += 1\n        elif a[i] % 4 == 2:\n            count2 += 1\n        elif a[i] % 4 == 3:\n            count3 += 1\n    \n    if count0 % 2 == 0 and count1 % 2 == 0 and count2 % 2 == 0 and count3 % 2 == 0:\n        return 1\n    else:\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_ending_here = max_so_far = 0\n    for i in range( n ) :\n        max_ending_here = max( max_ending_here + arr[ i ], arr[ i ] )\n        max_so_far = max( max_so_far, max_ending_here )\n    return max_so_far\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        return count\n    if sum == 0 :\n        count += 1\n    subsetSum( arr, n, i + 1, sum - arr[i], count )\n    subsetSum( arr, n, i + 1, sum, count )\n    return count\n\narr = [ 1, 2, 3, 4, 5 ]\nn = len( arr )\nsum = 10\ncount = 0"}
{"task_id": "Open/24", "completion": "    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result += i\n        else:\n            result -= i\n    return result\n"}
{"task_id": "Open/25", "completion": "    sumOfSquares = 0\n    sumOfNumbers = 0\n    sumOfNumbersAndSquares = 1\n    for i in range(1,n+1):\n        sumOfSquares += i**2\n        sumOfNumbers += i\n        sumOfNumbersAndSquares += i**2\n    return sumOfSquares, sumOfNumbers, sumOfNumbersAndSquares\n"}
{"task_id": "Open/26", "completion": "    maxSum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            maxSum = max(maxSum, i + n//i)\n    return maxSum\n"}
{"task_id": "Open/27", "completion": "    return x <= y\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return 0\n"}
{"task_id": "Open/30", "completion": "    return sum(i**2 for i in range(1,n+1)) / n\n"}
{"task_id": "Open/31", "completion": "    \n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3 ** ( n - 1 )\n"}
{"task_id": "Open/33", "completion": "    return n * 2 + (n - 1)\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in range ( len ( a ) ) :\n        prod = 1\n        for j in range ( i, len ( a ) ) :\n            prod *= a [ j ]\n            if prod < k :\n                count += 1\n            else :\n                break\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1):\n        if i%d == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    # Initialize a variable to store the smallest positive integer\n    smallest_positive = 1\n    \n    # Iterate through the array\n    for i in range( n ) :\n        # If the element is positive, add it to the variable\n        if arr[i] > 0 :\n            smallest_positive += arr[i]\n    \n    # Return the variable\n    return smallest_positive\n"}
{"task_id": "Open/37", "completion": "    counter = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            counter += 1\n        else:\n            counter += 2\n    return counter\n"}
{"task_id": "Open/38", "completion": "    area = 0\n    current_area = 1\n    current_length = 1\n    \n    while current_length <= l:\n        area = area + current_area\n        current_area = current_area + current_length * current_length\n        current_length = current_length + 1\n    \n    return area"}
{"task_id": "Open/39", "completion": "    return N * (N + 1) / 2\n"}
{"task_id": "Open/40", "completion": "    count = 0\n    max = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count += 1\n        else:\n            count = 0\n        if count > max:\n            max = count\n    return max\n\narr = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,"}
{"task_id": "Open/41", "completion": "    max_len = 0\n    start = 0\n    end = 0\n    \n    for i in range(n):\n        if arr[i] == 0:\n            start = i\n            end = i\n        else:\n            end += 1\n        max_len = max(max_len, end-start+1)\n        \n    return max_len\n"}
{"task_id": "Open/42", "completion": "    max_so_far = a[0]\n    min_so_far = a[0]\n    for i in range(1,n):\n        if a[i] < min_so_far:\n            min_so_far = a[i]\n        if a[i] > max_so_far:\n            max_so_far = a[i]\n        if a[i] > min_so_far and a[i] < max_so_far:\n            max_so_far = a[i]\n    return max_so_far\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    product = 1\n    \n    for i in range( n ) :\n        if product > k :\n            product = product - array[i-1]\n        if product <= k :\n            product = product * array[i]\n            count = count + 1\n            \n    return count\n"}
{"task_id": "Open/44", "completion": "    arr.sort()\n    return sum(abs(i-j) for i,j in zip(arr,range(1,n+1)))\n"}
{"task_id": "Open/45", "completion": "    min_val = min(arr)\n    return min_val * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_distance = -1\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            max_distance = max(max_distance, array[i] - array[i+1])\n        elif array[i] < array[i+1]:\n            max_distance = max(max_distance, array[i+1] - array[i])\n    return max_distance\n"}
{"task_id": "Open/47", "completion": "    if ( type(a) == int and type(b) == int and type(c) == int and type(x1) == int and type(y1) == int and type(x2) == int and type(y2) == int ) and ( a >= 0 and b >= 0 and c >= 0 and x1 >= 0 and y1 >= 0 and x2 >= 0 and y2 >= 0 ) and ( x1!= x2 and y1!= y2 ) :\n        if ( a == 0 ) :\n            if ( b == 0 ) :\n                if ( c == 0 ) :\n                    if ( x1 == x2 and y1 == y2 ) :\n                        return True\n                    else :\n                        return False\n                else :\n                    return False\n            else :\n                return False\n        else :\n            if ( b == 0 ) :\n                return False\n            else :\n                if ( c == 0 ) :\n                    return False\n                else :\n                    if ( x1 == x2 and y1 == y2 ) :\n                        return True\n                    else :\n                        if ( ( ( x1 - x2 ) * a ) + ( ( y1 - y2 ) * b"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a+1):\n        if a ^ i == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max = 0\n    for i in L :\n        for j in R :\n            if i & j > max :\n                max = i & j\n    return max\n"}
{"task_id": "Open/50", "completion": "    smallest = a[0]\n    for i in range(1, n) :\n        if a[i] % smallest == 0 :\n            smallest = a[i]\n        else :\n            smallest = smallest / a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    counter = 1\n    while counter <= n:\n        sum = sum + 1/3**counter\n        counter += 1\n    return sum\n"}
{"task_id": "Open/52", "completion": "    \n    result = 0\n    \n    for i in range(n) :\n        for j in range(n) :\n            if (i+1)*(j+1) % 2 == 1 :\n                result ^= arr[i][j]\n                \n    return result"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(N+1):\n        if (i^i) == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum + n - 1 == k\n"}
{"task_id": "Open/55", "completion": "    binary = bin(n)[2:]\n    for i in binary:\n        if i == '1':\n            return True\n        elif i == '0':\n            return False\n    return False\n"}
{"task_id": "Open/56", "completion": "    max_count = 0\n    count = 1\n    for i in range(1,len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n"}
{"task_id": "Open/57", "completion": "    remainder = 0\n    for i in range( N ) :\n        remainder = N % K\n        if remainder == 0 :\n            return N\n        else :\n            N = N - remainder\n    return N\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = result + var1 + var2 + (var1 * var2) / 100\n    for i in range(2,N):\n        result = result + arr[i] + (result * arr[i]) / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "    value = arr[index]\n    for _ in range(reversals):\n        start, end = ranges.pop()\n        arr[start], arr[end] = arr[end], arr[start]\n    return value"}
{"task_id": "Open/60", "completion": "    sum = 0\n    for i in range(n+1):\n        sum += i\n        if sum**2 == n:\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(a)):\n        if a[i] == b[count]:\n            count += 1\n        else:\n            count = 0\n    return count\n"}
{"task_id": "Open/62", "completion": "    newStr = \"\"\n    for i in range(len-1,-1,-1):\n        if str[i] > str[i+1]:\n            newStr += str[i] - 1\n        else:\n            newStr += str[i]\n    return newStr\n"}
{"task_id": "Open/63", "completion": "    sum = 0\n    min = arr[0]\n    for i in range(1,n):\n        sum += math.log(arr[i])\n        if arr[i] < min:\n            min = arr[i]\n    return sum + math.log(min) * n\n"}
{"task_id": "Open/64", "completion": "    largest_substring = \"\"\n    for char in s :\n        if char!= '1' :\n            largest_substring += char\n        else :\n            largest_substring = \"\"\n    return largest_substring\n"}
{"task_id": "Open/65", "completion": "    count = [0]*n\n    for i in range(n):\n        count[a[i]] += 1\n    i = 0\n    j = 0\n    while i < n:\n        if count[a[i]] > k:\n            count[a[j]] -= 1\n            j += 1\n        i += 1\n    return j\n"}
{"task_id": "Open/66", "completion": "    arr.sort()\n    size = n + k\n    if size % 2 == 0 :\n        return ( arr[ size // 2 - 1 ] + arr[ size // 2 ] ) / 2\n    else :\n        return arr[ size // 2 ]\n"}
{"task_id": "Open/67", "completion": "    step = 0\n    neg = 0\n    pos = 0\n    zero = 0\n    for i in range(n):\n        if a[i] == 0:\n            zero += 1\n        elif a[i] < 0:\n            neg += 1\n            step += abs(a[i] + 1)\n        else:\n            pos += 1\n            step += abs(a[i] - 1)\n    if neg % 2 == 0:\n        step += zero\n    elif neg % 2 == 1:\n        if zero > 0:\n            step += zero\n        else:\n            step += 2\n    return step\n"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    else :\n        v = []\n        n -= 1\n        while n > 0 :\n            v.append( n % 5 )\n            n = n // 5\n        result = 0\n        for i in reversed( v ) :\n            result = result * 10 + i\n        return 2 * result\n"}
{"task_id": "Open/69", "completion": "    currentSetBit = 0\n    for i in range(0, n):\n        if (n & (1 << i)) > currentSetBit:\n            return False\n        else:\n            currentSetBit = n & (1 << i)\n    return True\n"}
{"task_id": "Open/70", "completion": "    closest = n\n    for i in range( n + 1 ) :\n        if n % x == 0 :\n            closest = n\n            break\n        else :\n            closest = n + x\n    return closest\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(n+1):\n        sum += 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    series = [1]\n    for i in range(1, n+1):\n        series.append(series[-1]+2)\n        sum += sum(series)\n    return sum\n"}
{"task_id": "Open/73", "completion": "    max_count = 0\n    max_val = -1\n    for i in range( n ) :\n        if arr[i] == max_val :\n            max_count += 1\n        elif arr[i] > max_val :\n            max_count = 1\n            max_val = arr[i]\n        else :\n            continue\n    return max_val\n"}
{"task_id": "Open/74", "completion": "    \n    count = 0\n    \n    for i in a :\n        if i == 1 :\n            continue\n        for j in a :\n            if j == 1 :\n                continue\n            if i == j :\n                continue\n            if i == 2**j :\n                count += 1\n    \n    return count\n"}
{"task_id": "Open/75", "completion": "    \n    result = 0\n    for i in range(n):\n        if n & 1:\n            result = result | 1\n        else:\n            result = result & 0\n        n = n >> 1\n    return result\n"}
{"task_id": "Open/76", "completion": "    \n    count = 0\n    \n    for i in range(n) :\n        if A[i] == 1 :\n            count += 1\n        elif A[i] == 0 :\n            count -= 1\n        if count < 0 :\n            return -1\n            \n    return count\n"}
{"task_id": "Open/77", "completion": "    degree = radian * 180 / math.pi\n    return degree\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    current_term = a\n    counter = 1\n    while counter <= n:\n        sum += current_term\n        counter += 1\n        current_term += d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 1 :\n        return 1\n    else :\n        power = 2\n        while n > 1 :\n            n = n // 2\n            power = power * 2\n        return power\n"}
{"task_id": "Open/81", "completion": "    total_squares = 0\n    for move in moves :\n        if move % 2 == 0 :\n            total_squares += 1\n        else :\n            total_squares += 2\n    return total_squares\n"}
{"task_id": "Open/82", "completion": "    sum = 0\n    for i in range(n):\n        sum = sum + i\n    return sum\n"}
{"task_id": "Open/83", "completion": "    # Step 1. Initialize a list of last occurrence of each character in the string.\n    last_occ = [0] * 26\n    for i in range(len(s)):\n        last_occ[ord(s[i]) - ord('a')] = i\n    \n    # Step 2. Sort the string.\n    s = sorted(s)\n    \n    # Step 3. Iterate through the sorted string.\n    for i in range(len(s)):\n        # If the character is not in the correct position, swap it with the character at its last occurrence.\n        if i!= last_occ[ord(s[i]) - ord('a')]:\n            s[i], s[last_occ[ord(s[i]) - ord('a')]] = s[last_occ[ord(s[i]) - ord('a')]], s[i]\n    \n    # Step 4. Return the modified string.\n    return s\n"}
{"task_id": "Open/84", "completion": "    # Step 1. Create an array of length n.\n    arr = [0] * n\n    # Step 2. Fill the array with consecutive odd numbers followed by consecutive even numbers.\n    for i in range(n):\n        if i % 2 == 0:\n            arr[i] = i + 1\n        else:\n            arr[i] = i + 2\n    # Step 3. Calculate the sum of the elements in the array from index l-1 to index r.\n    sum = 0\n    for i in range(l-1, r):\n        sum += arr[i]\n    # Step 4. Return the sum.\n    return sum\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        min = x\n    else :\n        min = y\n    for i in range ( min // 2, 1, -1 ) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    sequence = [A, B]\n    while len(sequence) < N :\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    monthly_interest_rate = r / 1200\n    monthly_tenure = t * 12\n    emi = (p * monthly_interest_rate * (1 + monthly_interest_rate)**monthly_tenure) / ((1 + monthly_interest_rate)**monthly_tenure - 1)\n    return emi\n\nemi_calculator(10000, 10, 10)"}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range ( 1, A + 1 ) :\n        for j in range ( 1, B + 1 ) :\n            for k in range ( 1, C + 1 ) :\n                if i * k > j * j :\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range( l, r + 1 ) :\n        if i % 10 in [ 2, 3, 9 ] :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    max_len = 0\n    for i in range( len( arr ) ) :\n        curr_len = 1\n        for j in range( i+1, len( arr ) ) :\n            if arr[j] - arr[j-1] == arr[j+1] - arr[j] :\n                curr_len += 1\n        if curr_len > max_len :\n            max_len = curr_len\n    return max_len\n"}
{"task_id": "Open/92", "completion": "    max_len = 0\n    start = 0\n    for i in range(len(str)) :\n        if str[i].isalnum() :\n            max_len += 1\n        else :\n            max_len = 0\n            start = i + 1\n    return max_len\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    for i in range(1,n+1):\n        if i <= 1:\n            return count\n        else:\n            i = i/2\n            count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    string = \"\"\n    for i in range(n):\n        string += \"a\"\n    k = n\n    for i in range(n-1,-1,-1):\n        k -= i\n        if k >= 0:\n            if k >= 26:\n                string = string[:i] + \"z\" + string[i+1:]\n                k -= 26\n            else:\n                string = string[:i] + chr(k+97) + string[i+1:]\n                k -= chr(k+97) - 97\n        if k < 0:\n            break\n        k += i\n    return string\n"}
{"task_id": "Open/95", "completion": "    total = 0\n    while n > 0 :\n        total += fuel / n\n        n -= 1\n    return total\n"}
{"task_id": "Open/96", "completion": "    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    if sum == 0:\n        return 1\n    elif sum < 0:\n        return 2\n    else:\n        return 0\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    return math.floor(math.log10(n))+1\n"}
{"task_id": "Open/99", "completion": "    return ( a + k == b + k == c + k ) or ( a - k == b - k == c - k ) or ( a + k == b - k == c - k ) or ( a - k == b + k == c + k )"}
{"task_id": "Open/100", "completion": "    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    x_bin_rot = x_bin + x_bin[0:32]\n    return x_bin_rot == y_bin\n"}
{"task_id": "Open/101", "completion": "    count = 1\n    for i in range(1, len(s)) :\n        if s[i] == s[i-1] :\n            count += 1\n        else :\n            return count\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    \n    min_diff = float( \"inf\" )\n    for i in range( n - 1 ) :\n        if arr[ i ] > arr[ i + 1 ] :\n            min_diff = min( min_diff, arr[ i ] - arr[ i + 1 ] )\n        elif arr[ i ] < arr[ i + 1 ] :\n            min_diff = min( min_diff, arr[ i + 1 ] - arr[ i ] )\n            \n    return min_diff\n"}
{"task_id": "Open/104", "completion": "    max_count = 0\n    count = 0\n    for i in range(left, right+1):\n        if (i & 1) == 1:\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n"}
{"task_id": "Open/105", "completion": "    return 1 << n\n"}
{"task_id": "Open/106", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            sum += i\n    if sum == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "    oddDays = 0\n    totalDays = 0\n    nonLeapYears = 0\n    leapYears = 0\n    centuries = 0\n    leapCenturies = 0\n    year = N\n    \n    while year % 400 == 0:\n        leapCenturies += 1\n        year = year / 400\n        \n    while year % 100 == 0:\n        centuries += 1\n        year = year / 100\n        \n    while year % 4 == 0:\n        leapYears += 1\n        year = year / 4\n        \n    while year % 100 == 0:\n        leapYears += 1\n        year = year / 100\n        \n    while year % 400 == 0:\n        leapYears += 1\n        year = year / 400\n        \n    nonLeapYears = year - leapYears\n    totalDays = nonLeapYears + 2 * leapYears\n    oddDays = totalDays % 7\n    \n    return oddDays\n"}
{"task_id": "Open/108", "completion": "    diagonal = 1\n    for i in range(1,a+1):\n        diagonal += 1\n        diagonal *= 3\n    return diagonal\n"}
{"task_id": "Open/109", "completion": "    frequency = 0\n    for digit in str(n):\n        if digit == str(d):\n            frequency += 1\n    return frequency\n"}
{"task_id": "Open/110", "completion": "    # Your code here\n    pass\n"}
{"task_id": "Open/111", "completion": "    sum = 0\n    for i in a :\n        if i % 5 == 0 and i % 3 == 0 :\n            sum += i // 5 // 3\n        else :\n            return False\n    return sum == n\n"}
{"task_id": "Open/112", "completion": "    # Initialize array with 0s\n    arr = [0 for i in range(n+1)]\n    # Set the first element of the array to 4\n    arr[0] = 4\n    # Set the second element of the array to 7\n    arr[1] = 7\n    # Iterate through the array\n    for i in range(2, n+1):\n        # If the index is odd, set the value of the index to the value of the index//2 multiplied by 10 and added to 4.\n        if i % 2 == 1:\n            arr[i] = arr[i//2] * 10 + 4\n        # If the index is even, set the value of the index to the value of the index//2-1 multiplied by 10 and added to 7.\n        else:\n            arr[i] = arr[i//2-1] * 10 + 7\n    # Return the value of the index n.\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(2, n+1):\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 3\n        else:\n            array[i] = array[i//2 - 1] * 10 + 5\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "    arr = [0] * (n+1)\n    arr[0] = 1\n    arr[1] = 2\n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            arr[i] = arr[i//2] * 10 + 2\n        else :\n            arr[i] = arr[i//2] * 10 + 1\n    return arr[n]\n"}
{"task_id": "Open/115", "completion": "    sum = 0\n    for i in range(n) :\n        sum += a[i]\n    if sum % 11 == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/116", "completion": "    \n    area = 0\n    if l > 0 and b > 0 and h > 0 :\n        area = l * b * h\n    else :\n        area = -1\n    return area\n"}
{"task_id": "Open/117", "completion": "    pass"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt( 8 * p + 1 ) / 2 ) - 1\n"}
{"task_id": "Open/119", "completion": "    return len(set(arr)) == len(arr)\n"}
{"task_id": "Open/120", "completion": "    count = 0\n    previous = \"\"\n    for char in string:\n        if char!= previous:\n            count += 1\n        previous = char\n    return count\n"}
{"task_id": "Open/121", "completion": "    pass\n"}
{"task_id": "Open/122", "completion": "    max_num = 0\n    for i in ss:\n        if i.isdigit():\n            max_num = max_num * 10 + int(i)\n        else:\n            max_num = max(max_num, int(i))\n    return max_num\n"}
{"task_id": "Open/123", "completion": "    longest = 0\n    substring = \"\"\n    for i in range( length ) :\n        if s[i].isdigit() :\n            substring += s[i]\n        else :\n            if len( substring ) > longest :\n                longest = len( substring )\n            substring = \"\"\n    if len( substring ) > longest :\n        longest = len( substring )\n    return longest\n"}
{"task_id": "Open/124", "completion": "    if N > M :\n        N, M = M, N\n    while K > 0 :\n        if N > M :\n            N -= M\n        else :\n            M -= N\n        K -= 1\n    return N * M\n"}
{"task_id": "Open/125", "completion": "    counter = 0\n    for char in string :\n        if char == string[counter] :\n            counter += 1\n        if counter > length :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n"}
{"task_id": "Open/127", "completion": "    count = 0\n    for i in A :\n        if i in B :\n            count += 1\n    if count == len(A) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/128", "completion": "    x = 0\n    y = 0\n    for i in range(len(list)):\n        if x + y == 1:\n            return True\n        elif x + y!= 1:\n            return False\n        x = list[i]\n        y = list[i+1]\n    return False\n"}
{"task_id": "Open/129", "completion": "    pass\n"}
{"task_id": "Open/130", "completion": "    min_steps = 0\n    for i in range(n):\n        current_steps = 0\n        for j in range(i):\n            if arr[j] < arr[i]:\n                current_steps += 2\n            else:\n                current_steps += 1\n        if current_steps < min_steps:\n            min_steps = current_steps\n    return min_steps\n"}
{"task_id": "Open/131", "completion": "    return 0 if n % 4 == 0 or n % 4 == 3 else 1\n"}
{"task_id": "Open/132", "completion": "    m = 0\n    sum = 0\n    for i in range(1, N+1):\n        if i % a == 0:\n            sum += i\n            m += 1\n    return a * sum\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if arr[0] % 2 == 1 and arr[n-1] % 2 == 1 and n % 2 == 1 :\n        return True\n    else :\n        return False\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/135", "completion": "    count = 0\n    sum = 0\n    i = 1\n    while i < N:\n        sum += i\n        count += sum\n        i += 1\n    return count\n"}
{"task_id": "Open/136", "completion": "    min = 1\n    for i in range(n) :\n        if arr[i] > min :\n            min = arr[i]\n    return min + 1\n"}
{"task_id": "Open/137", "completion": "    result = 0\n    for i in s :\n        if i.isdigit() :\n            result += int(i)\n        else :\n            result -= int(i)\n    return result\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum/len(s)\n"}
{"task_id": "Open/140", "completion": "    # Initialize the number of banknotes needed as 0.\n    num_banknotes = 0\n    \n    # Initialize the amount of money left as S.\n    amount_left = S\n    \n    # While amount of money left > 0:\n    while amount_left > 0:\n        # If amount of money left is divisible by the value of the banknote, subtract the value of the banknote from the amount of money left.\n        if amount_left % B == 0:\n            amount_left -= B\n        # Add 1 to the number of banknotes needed.\n        else:\n            num_banknotes += 1\n    \n    # If amount of money left is 0, return the number of banknotes needed.\n    if amount_left == 0:\n        return num_banknotes\n    # If amount of money left is not 0, return -1.\n    else:\n        return -1\n"}
{"task_id": "Open/141", "completion": "    return ( x * y ) / math.gcd( x, y )\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n % 2 == 0:\n        count += 1\n        n /= 2\n    return count\n"}
{"task_id": "Open/143", "completion": "    max_xor = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n        for j in range(i+1,n):\n            xor = xor ^ arr[j]\n        if xor > max_xor:\n            max_xor = xor\n    return max_xor\n"}
{"task_id": "Open/144", "completion": "    longest = 1\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            longest += 1\n        else :\n            longest = 1\n    return longest\n\narr = [10, 22, 9, 33, 21, 50, 41, 60]"}
{"task_id": "Open/145", "completion": "    min_element = arr[0]\n    for i in range(1,n):\n        if arr[i] - k < min_element:\n            min_element = arr[i] - k\n    return min_element + k\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nk = 1"}
{"task_id": "Open/146", "completion": "    counter = 0\n    counter2 = 0\n    for i in range(1,K+1):\n        if i%K == 0:\n            counter += 1\n        else:\n            counter = 0\n        if counter > counter2:\n            counter2 = counter\n    if counter2 == 0:\n        return -1\n    else:\n        return counter2\n"}
{"task_id": "Open/147", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i]!= arr[i-1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/148", "completion": "    sum = 3\n    for i in range(1,n):\n        sum = sum + (sum-1)\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    p = 0\n    q = 0\n    for i in range(len(list)):\n        if list[i] == 1:\n            p += 1\n        elif list[i] == 2:\n            q += 1\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1):\n        result ^= ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    counter = 0\n    for digit in bin(n)[2:] :\n        if digit == '1' :\n            counter += 1\n        else :\n            counter = 0\n        if counter > 1 :\n            return False\n    return True\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)-1):\n        if s[i] in vowels and s[i+1] in vowels:\n            if s[i] > s[i+1]:\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1):\n        if i % 10 >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    return int(2**math.ceil(math.log2(n))) - n\n"}
{"task_id": "Open/156", "completion": "    area = 0\n    perimeter = 0\n    radius = r\n    if radius < 0:\n        return -1\n    else:\n        area = 3.14 * (radius**2)\n        perimeter = 3.14 * (radius * 2)\n        return area, perimeter\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    left = 0\n    right = size - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if ar[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)) :\n        if str[i] == '0' :\n            if str[i+1] == '1' :\n                count += 1\n            else :\n                count += 2\n        else :\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    count = 0\n    for i in range(n):\n        if count%2!= 0:\n            return arr[i]\n        else:\n            count += 1\n    return -1\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n        ans = max(ans, xorArr)\n    return ans\n"}
{"task_id": "Open/162", "completion": "    return ( ( sx == dx ) or ( sy == dy ) )\n"}
{"task_id": "Open/163", "completion": "    count = 0\n    for i in range(1, n//2+1) :\n        if n % i == 0 :\n            if n//i % 2 == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/164", "completion": "    d = {}\n    for i in range(n):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    return 1 * d[1] * d[2] * d[3] * d[4] * d[5] * d[6] * d[7] * d[8] * d[9]\n"}
{"task_id": "Open/165", "completion": "    pass\n"}
{"task_id": "Open/166", "completion": "    steps = 0\n    current = source\n    while current!= dest:\n        if current + step > dest:\n            step = step - 1\n        elif current + step < dest:\n            step = step + 1\n        steps += 1\n    return steps\n"}
{"task_id": "Open/167", "completion": "    result = \"1\"\n    for i in range(1, n+1) :\n        current = result\n        count = 1\n        for j in range(1, len(current)) :\n            if current[j] == current[j-1] :\n                count += 1\n            else :\n                result += str(count) + current[j-1]\n                count = 1\n        result += str(count) + current[-1]\n    return result\n"}
{"task_id": "Open/168", "completion": "    max_len = 1\n    product = arr[0]\n    for i in range(1, N) :\n        if product < 0 :\n            return max_len\n        product *= arr[i]\n        max_len = max(max_len, i+1)\n    return max_len\n"}
{"task_id": "Open/169", "completion": "    m_abs = abs(m)\n    n_abs = abs(n)\n    m_square = m_abs * m_abs\n    n_square = n_abs * n_abs\n    sum_square = m_square + n_square\n    square_root = math.sqrt(sum_square)\n    normal_value = (m_abs * n_abs) / square_root\n    return normal_value\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range ( n ) :\n        sum = 0\n        for j in range ( i, n ) :\n            sum += arr [ j ]\n            if sum < k :\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range( len( arr ) - 2 ) :\n        for j in range( i + 1, len( arr ) - 1 ) :\n            for k in range( j + 1, len( arr ) ) :\n                if arr[ k ] - arr[ i ] <= L :\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l,r+1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    result = 0\n    for i in range(m):\n        if n & 1:\n            result += 1\n        n = n >> 1\n    return result\n"}
{"task_id": "Open/174", "completion": "    count = 0\n    i = L\n    while i <= R:\n        if i % 9 == K:\n            count += 1\n        i += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    product = 1\n    result = \"\"\n    for i in range(n):\n        product = product * i\n    for i in range(k):\n        result = result + str(math.log10(product))\n    return result\n"}
{"task_id": "Open/176", "completion": "    left = 0\n    right = n-1\n    while left < right :\n        if A[left] > A[right] :\n            A[left], A[right] = A[right], A[left]\n            left += 1\n            right -= 1\n        else :\n            left += 1\n    return A[left]\n"}
{"task_id": "Open/177", "completion": "    min_increase = 0\n    for i in range(len(a)):\n        if a[i] < min_increase:\n            min_increase = a[i]\n        if b[i] < min_increase:\n            min_increase = b[i]\n        if c[i] < min_increase:\n            min_increase = c[i]\n    return min_increase\n"}
