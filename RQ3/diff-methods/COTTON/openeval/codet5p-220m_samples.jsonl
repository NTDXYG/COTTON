{"task_id": "Open/0", "completion": "\n    sum = 0\n    count = 0\n    for i in range ( N ) :\n        sum += arr[i]\n        if sum > K :\n            count += 1\n    return count\n\n\narr = [1,2,3,4,5,6,7,8,9]\nN = len(arr)\nK = 5"}
{"task_id": "Open/1", "completion": "\n    min_value = arr[0]\n    min_count = 1\n    for i in range(1, n) :\n        if arr[i] < min_value :\n            min_value = arr[i]\n            min_count = 1\n        else :\n            min_count += 1\n    return min_count\n\n"}
{"task_id": "Open/2", "completion": "\n    # Step 1. Convert the binary representation of n to a string\n    n = bin(n)\n    \n    # Step 2. Iterate through the bits in the string from l to r (inclusive).\n    # -If any bit is not set to 1, return \"No\".\n    for i in range(l,r+1) :\n        if n[i] == '1' :\n            return \"Yes\"\n    return \"No\"\n\n"}
{"task_id": "Open/3", "completion": "\n    counter = 0\n    for i in range(n) :\n        for j in range(i + 1, n) :\n            if ( A[i] + A[j] ) % K == 0 :\n                counter += 1\n    return counter\n\n\nA = [1, 2, 3, 4, 5]\nn = len(A)\nK = 5"}
{"task_id": "Open/4", "completion": "\n    total_sum = 0\n    for i in range( len(a) ) :\n        total_sum += a[i]\n    for i in range( len(a) ) :\n        for j in range( i + 1, len(a) ) :\n            if total_sum == a[i] + a[j] :\n                return True\n    return False\n\n"}
{"task_id": "Open/5", "completion": "\n    if x % 2 == 0 :\n        return 1\n    else :\n        return 0\n\n"}
{"task_id": "Open/6", "completion": "\n    output = []\n    for i in vec :\n        if abs(i) < 1 :\n            output.append(i)\n    return output\n"}
{"task_id": "Open/7", "completion": "\n    max_length = 0\n    length = 1\n    for i in range(1,n+1) :\n        for j in range(1,i+1) :\n            if arr[i] == arr[j] :\n                length += 1\n                if length > max_length :\n                    max_length = length\n    return max_length\n\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/8", "completion": "\n    prime_factors = []\n    count = 0\n    for i in a :\n        if i % 2 == 0 :\n            count += 1\n        for j in range(2, int(math.sqrt(i)) + 1) :\n            if i % j == 0 :\n                count += 1\n                prime_factors.append(j)\n    return count\n"}
{"task_id": "Open/9", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(1,n) :\n        sum += arr[i] - arr[i-1]\n    return sum\n\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 3"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    for i in range( len(A) ) :\n        if A[i] == B[i] :\n            total_time += 1\n        else :\n            B_front = A[i]\n            A_front = B[i]\n            B_end = A[i+1]\n            A_end = B[i+1]\n            B_front.append( A_front )\n            B_front.append( B_end )\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in array :\n        if i!= 0 and i!= 2 and i % 2 == 0 :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/12", "completion": "\n    count = 0\n    for i in range( len( s ) ) :\n        if len( set( s[ i : i + k ] ) ) > k :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/13", "completion": "\n    current_number = 2\n    while current_number <= n :\n        if current_number % 2 == 0 :\n            return True\n        else :\n            current_number = current_number // 2\n    return False\n\n"}
{"task_id": "Open/14", "completion": "    if n == 0 :\n        return n\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return n + 1\n    elif n == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "\n    a = random.randint( 2, n - 1 )\n    for i in range ( t ) :\n        a = random.randint( 2, n - 1 )\n        if a == a % n :\n            return 1\n    return -1\n"}
{"task_id": "Open/16", "completion": "Iterate through all indices from 0 to n-1.\n        Check if s1[i] is '0' and s2[i] is '1', or s1[i] is '1' and s2[i] is '0', or s1[i] is '0' and s2[i] is 'Z', or s1[i] is 'Z' and s2[i] is '0'.\n        -If true, return True.\n        \"\"\"\n        for i in range ( n ) :\n            if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n                return True\n        return False\n\n    def isDefeat_iter_2 ( s1, s2, n ) :\n        \"\"\"Iterate through all"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d - (b * c)) )\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range ( len( s ) ) :\n        if s[i] == '1' :\n            count += 1\n        elif s[i] == '0' :\n            count -= 1\n    return ( count, len( s ) - count )\n\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n + 1) :\n        if i % 2 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return 1\n    else :\n        return x * y\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if ( a[i] % 4 == 0 ) :\n            count0 += 1\n        else :\n            count1 += 1\n        if ( a[i] % 4 == 1 ) :\n            count2 += 1\n        else :\n            count3 += 1\n    if ( count0 % 4 == 0 ) :\n        return 1\n    else :\n        return 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 0\n    curr_len = 1\n    for i in range(n) :\n        if arr[i] > arr[i+1] :\n            curr_len += 1\n        else :\n            max_len = max( max_len, curr_len )\n            curr_len = 1\n    return max_len\n\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        return count\n    if sum == 0 :\n        count += 1\n        return subsetSum ( arr, n, i, sum, count )\n    else :\n        return subsetSum ( arr, n, i + 1, sum, count ) + subsetSum ( arr, n, i + 2, sum, count )\n\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nsum = 6\ncount = 0"}
{"task_id": "Open/24", "completion": "\n    # Step 1. Calculate the center hexadecagonal number for the given value of n.\n    center_hexadecagonal_num = 0\n    while n > 0 :\n        center_hexadecagonal_num += n % 10\n        n //= 10\n    return center_hexadecagonal_num\n"}
{"task_id": "Open/25", "completion": "\n    sum = 0\n    for i in range ( 1, n+1 ) :\n        sum += i * i\n    return sum, sum + 1\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1, n+1) :\n        for j in range(1, i) :\n            if i % j == 0 :\n                max_sum += int(str(i) + str(j))\n    return max_sum\n\n"}
{"task_id": "Open/27", "completion": "\n    if x < y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return ( a - b ) / a\n"}
{"task_id": "Open/30", "completion": "\n    return sum( [ i**2 for i in range(1, n+1) ] ) / n\n"}
{"task_id": "Open/31", "completion": "\n    arr.sort()\n    return arr[k-1]\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nk = 3"}
{"task_id": "Open/32", "completion": "\n    return n**3\n\n"}
{"task_id": "Open/33", "completion": "\n    term = 1\n    for i in range ( 2, n ) :\n        term = term * 2 + ( i - 1 )\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    count = 0\n    for i in range(len(a)) :\n        if a[i] > k :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range ( 1, n + 1 ) :\n        count += int ( str ( i ) ) * int ( str ( i ) )\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    set = set( arr )\n    missing = 0\n    for i in range( 1, n ) :\n        if i not in set :\n            missing += 1\n    return missing\n\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\nn = len(arr)"}
{"task_id": "Open/37", "completion": "\n    if n == 0 :\n        return 1\n    dp = [1] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    area = 0\n    length = l\n    breadth = b\n    while length and breadth > 0 :\n        area += length * breadth\n        length -= 1\n        breadth -= 1\n    return area\n\n"}
{"task_id": "Open/39", "completion": "\n    return sum( [ i for i in range(1, N+1) ] )\n"}
{"task_id": "Open/40", "completion": "\n    max_zeros = 0\n    count_zeros = 0\n    for i in range(1, n + 1) :\n        if arr[i] == 1 :\n            count_zeros += 1\n        else :\n            count_zeros = 1\n            max_zeros = max(max_zeros, count_zeros)\n    return max_zeros\n\n\narr = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            length = 0\n            for j in range(i+1,n) :\n                if arr[j] == 0 :\n                    length = max(length, j - i)\n            max_length = max(max_length, length)\n    return max_length\n\n"}
{"task_id": "Open/42", "completion": "\n    # Step 1. Initialize an empty list called'max_min_segments'.\n    max_min_segments = []\n    for i in range(n) :\n        max_min_segments.append( a[i] )\n    # Step 2. Iterate through the array 'a' with a step size of 'k'.\n    for i in range(n) :\n        for j in range(k) :\n            if j == 0 :\n                max_min_segments[i] = min(max_min_segments[i], a[i] )\n            else :\n                max_min_segments[i] = max(max_min_segments[i], a[i], a[j-1] )\n    # Step 3. Find the maximum element in'max_min_segments'.\n    return max_min_segments[n-1]\n\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if array[i] * array[j] < k :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/44", "completion": "\n    sum = 0\n    for i in range( n ) :\n        sum += abs( arr[i] - i + 1 )\n    return sum\n\n"}
{"task_id": "Open/45", "completion": "\n    min_element = arr[0]\n    product = 1\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n            product = 1\n        else :\n            product *= min_element\n    return product\n\n"}
{"task_id": "Open/46", "completion": "\n    max_diff = 0\n    for i in range( len( array ) ) :\n        for j in range( i + 1, len( array ) ) :\n            if array[ i ] - array[ j ] > max_diff :\n                max_diff = array[ i ] - array[ j ]\n    return max_diff\n\n"}
{"task_id": "Open/47", "completion": "\n    return ( ( a * x1 + b * y1 ) ** 2 ) + ( ( c * x2 + b * y2 ) ** 2 ) == ( a * x2 + b * y2 )\n\n"}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range ( 0, a ) :\n        if ( i ^ a ) == a :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/49", "completion": "\n    max_AND = 0\n    for i in range ( L, R + 1 ) :\n        max_AND = max( max_AND, i & ( i - 1 ) )\n    return max_AND\n\n"}
{"task_id": "Open/50", "completion": "\n    smallest = None\n    for i in range(1,n+1) :\n        if a[i] % i == 0 :\n            smallest = i\n    return smallest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/51", "completion": "\n    sum = 0\n    for i in range ( 1, n ) :\n        sum += 1 / 3 ** i\n    return sum\n"}
{"task_id": "Open/52", "completion": "\n    result = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( arr[i][j] % 2 ) :\n                result ^= arr[i][j]\n    return result\n\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range ( N ) :\n        xor = i ^ i\n        if xor == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    # Step 1. Initialize a set to store unique elements.\n    unique = set()\n    # Step 2. Iterate through the array.\n    for i in a :\n        # Step 3. If an element is already in the set, return False.\n        if i in unique :\n            return False\n        # Step 4. Otherwise, add the element to the set.\n        unique.add(i)\n    # Step 5. Return True. \n    return True\n\n"}
{"task_id": "Open/55", "completion": "\n    binary = bin( n )\n    first = binary[0]\n    last = binary[-1]\n    if first == '1' and last == '1' :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    current_partitions = 1\n    for i in range( len( s ) ) :\n        if s[i] == s[i-1] :\n            current_partitions += 1\n        else :\n            max_partitions = max( max_partitions, current_partitions )\n            current_partitions = 1\n    return max_partitions\n\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - N % K\n\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2,N) :\n        result += var1\n        var1 = var1 * var2\n        var2 = var2 * var1\n    result += var1\n    result += var2\n    result += var1 * var2 / 100\n    result += var2 * var1 / 100\n    return result\n\n\narr = [1,2,3,4,5,6,7,8,9]\nN = int(input())\nresult = successiveChange(arr, N)"}
{"task_id": "Open/59", "completion": "\n    result = arr[index]\n    for i in range(len(ranges)) :\n        if i == 0 :\n            result = result[::-1]\n        else :\n            result = result[::-1] + ranges[i][0] + result[i-1]\n    return result\n\n"}
{"task_id": "Open/60", "completion": "\n    for i in range( 1, n + 1 ) :\n        for j in range( 1, i + 1 ) :\n            if i * i == j * j :\n                return True\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    count = 0\n    for i in range ( len(a) ) :\n        if a[i] == a[i-1] :\n            count += 1\n        else :\n            return -1\n    return count\n\n\na = \"abcd\"\nb = \"abcd\""}
{"task_id": "Open/62", "completion": "\n    modified_string = \"\"\n    for i in range ( len ) :\n        if str[i] > str[i+1] :\n            modified_string += str[i]\n            if i + 1 < len :\n                modified_string += str[i+1]\n        else :\n            modified_string += str[i]\n    return modified_string\n\n"}
{"task_id": "Open/63", "completion": "\n    min_value = math.inf\n    running_sum = 0\n    for num in arr :\n        running_sum += num\n        if running_sum < min_value * len(arr) :\n            min_value = running_sum\n    return min_value\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/64", "completion": "\n    if s == \"\" :\n        return \"-1\"\n    if len(s) == 0 :\n        return \"-1\"\n    max_len = 0\n    start = 0\n    curr_len = 0\n    for i in range( len( s ) ) :\n        if s[i] == '1' :\n            start = i\n            curr_len = 1\n        else :\n            curr_len += 1\n            if curr_len > max_len :\n                max_len = curr_len\n                start = i\n    return s[start : start + max_len]\n"}
{"task_id": "Open/65", "completion": "\n    counter = {}\n    for i in range(n) :\n        counter[a[i]] = counter.get(a[i], 0) + 1\n    sorted_array = sorted(counter.keys())\n    modified_array_length = 0\n    for i in range(len(sorted_array)) :\n        if counter[sorted_array[i]] < k :\n            modified_array_length += 1\n    return modified_array_length\n\n"}
{"task_id": "Open/66", "completion": "\n    if n == 0 :\n        return None\n    if k == 0 :\n        return arr[0]\n    if n % 2 == 0 :\n        return (arr[n//2] + arr[n//2-1]) / 2\n    else :\n        return (arr[n//2] + arr[n//2-1]) / 2 + arr[n//2]\n\n"}
{"task_id": "Open/67", "completion": "\n    step_count = 0\n    for i in range(n) :\n        if a[i] == 1 :\n            step_count += 1\n        elif a[i] == -1 :\n            step_count += 1\n        else :\n            step_count += abs(a[i] - 1)\n    return step_count\n\n\na = [1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1, 0, 1, -1"}
{"task_id": "Open/68", "completion": "\n    if n == 1:\n        return 0\n    else:\n        v = []\n        n = n - 1\n        while n > 0:\n            v.append(n % 5)\n            n = n // 5\n        result = 0\n        for i in v:\n            result *= 10\n            result += i\n        return result * 2\n\n"}
{"task_id": "Open/69", "completion": "\n    prev = None\n    for i in range(n) :\n        if (prev is not None) and (prev > i) :\n            return False\n        prev = i\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    if n == 0 :\n        return x\n    elif n == 1 :\n        return x\n    else :\n        return (x - 1) * (n - 1) / 2\n\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range ( n ) :\n        sum = sum + 2\n    return sum\n\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    count = {}\n    max_value = 0\n    for i in range(n) :\n        if arr[i] in count :\n            count[arr[i]] += 1\n        else :\n            count[arr[i]] = 1\n    for i in range(n) :\n        if count[arr[i]] == i :\n            max_value = i\n    return max_value\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range ( n ) :\n        if ( a[i] ** 2 ) > a[i] :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/75", "completion": "\n    # Step 1. Convert the integer to binary representation using the bin() function.\n    binary = bin( n )\n    # Step 2. Remove the '0b' prefix from the binary representation.\n    binary = binary.replace( '0b', '' )\n    # Step 3. Iterate through each bit in the binary representation.\n    for bit in binary :\n        # If the bit is '0', change it to '1'.\n        if bit == '0' :\n            n = n ^ 1\n        # If the bit is '1', change it to '0'.\n        else :\n            n = n ^ 0\n    # Step 4. Convert the modified binary representation back to an integer using the int() function.\n    return int( binary )\n\n"}
{"task_id": "Open/76", "completion": "\n    changes = 0\n    for i in range ( n ) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            changes += 1\n            A[i+1] = 0\n    return changes\n\n"}
{"task_id": "Open/77", "completion": "\n    return ( radian * 180 / math.pi )\n"}
{"task_id": "Open/78", "completion": "\n    return int(math.floor(n/2))\n\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range ( 1, n ) :\n        sum += a + (i-1)*d\n    return sum\n\n"}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 0 :\n        return 1\n    power = 1\n    while power * 2 < n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/81", "completion": "\n    board = [[False for i in range(8)] for j in range(8)]\n    count = 0\n    for i in range(moves) :\n        row = row + 1\n        column = column + 1\n        if row < 8 and board[row][column] :\n            board[row][column] = True\n            count += 1\n    return count\n\n"}
{"task_id": "Open/82", "completion": "\n    current_number = 0\n    numbers = []\n    for i in range ( n ) :\n        current_number += i\n        numbers.append( current_number )\n    return numbers\n"}
{"task_id": "Open/83", "completion": "\n    # Step 1. Create an empty list to store the last occurrence of each character in the string.\n    last_occurrences = []\n    # Step 2. Iterate through the characters in the string and find the last occurrence of each character.\n    # -Store the last occurrence in the list.\n    for char in s :\n        last_occurrences.append ( s.index ( char ) )\n    # Step 3. Sort the string.\n    sorted_string = ''\n    # Step 4. Compare each character in the sorted string with its corresponding character in the original string.\n    # -If a character is not in the correct position, swap it with the character at its last occurrence.\n    for char in sorted ( s ) :\n        if char not in last_occurrences :\n            s[ last_occurrences.index ( char ) ] = char\n            last_occurrences.append ( char )\n    # Step 5. Return the modified string. \n    return ''.join ( s )\n\n"}
{"task_id": "Open/84", "completion": "\n    # Step 1. Create an array of length n.\n    array = [0] * n\n    for i in range(n) :\n        if i % 2 == 0 :\n            array[i] += 1\n        else :\n            array[i] += 1\n    # Step 2. Fill the array with consecutive odd numbers followed by consecutive even numbers.\n    for i in range(l, r) :\n        if array[i] % 2 == 0 :\n            array[i] += 1\n        else :\n            array[i] += 1\n    # Step 3. Calculate the sum of the elements in the array from index l-1 to index r.\n    sum = 0\n    for i in range(l, r) :\n        sum += array[i]\n    return sum\n"}
{"task_id": "Open/85", "completion": "\n    # Step 1. Find the minimum of x and y.\n    min_x = x\n    min_y = y\n    for i in range( min_x, min_x + 1 ) :\n        for j in range( min_y, min_y + 1 ) :\n            if ( i % j ) == 0 :\n                return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "\n    current = A\n    for i in range(N-1) :\n        current = current + B\n    return current\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range ( len ( str ) ) :\n        if str[i] == substr :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/88", "completion": "\n    # Step 1. Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100\n    r = r / 12\n    # Step 2. Convert the loan tenure from years to months by multiplying it by 12\n    t = t * 12\n    # Step 3. Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    EMI = (p * r * (1 + r) ** t) / ((1 + r) ** t - 1)\n    return EMI\n"}
{"task_id": "Open/89", "completion": "\n    count = 0\n    for i in range(1, A+1) :\n        for j in range(1, B+1) :\n            for k in range(1, C+1) :\n                if i * k > j * j :\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range( l, r ) :\n        if i % 10 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    max_length = 0\n    curr_num = 0\n    for i in range(n) :\n        curr_num = curr_num + arr[i]\n        length = 1\n        while curr_num!= 0 :\n            if curr_num - curr_num == 0 :\n                length += 1\n            else :\n                curr_num = curr_num - arr[i]\n        max_length = max(length, max_length)\n    return max_length\n\n"}
{"task_id": "Open/92", "completion": "\n    max_len = -1\n    for i in range( len(str) ) :\n        if str[i] == str[i].upper() :\n            if len(str) % 2 == 0 :\n                max_len = max( max_len, i - i + 1 )\n    return max_len\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 1 :\n        count += 1\n        n = n // 2\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    # Step 1. Create a string of length n, consisting of all 'a' characters.\n    s = ''\n    for i in range(n) :\n        s += chr( ord( input() ) - k )\n    # Step 2. Iterate through the string in reverse order.\n    for i in range(len(s) - 1, -1, -1) :\n        if s[i] == 'a' :\n            s[i] = 'z'\n        else :\n            s[i] = ord( s[i] ) + k\n    # Step 3. Return the modified string.\n    return s\n\n"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n\n"}
{"task_id": "Open/96", "completion": "\n    total = 0\n    for i in range(n) :\n        total += arr[i]\n    for i in range(n) :\n        if total % 2 == 0 :\n            return 1\n        else :\n            return 0\n\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    if word in sentence :\n        return True\n    else :\n        return False\n\n\nsentence = \"This is a test sentence\"\nword = \"test\"\n"}
{"task_id": "Open/98", "completion": "\n    # Step 1. Convert the integer to a string.\n    n = str(n)\n    # Step 2. Return the length of the string.\n    return len(n)\n"}
{"task_id": "Open/99", "completion": "\n    if a == 0 and b == 0 and c == 0 :\n        return True\n    elif a == 0 :\n        return False\n    elif b == 0 :\n        return True\n    elif c == 0 :\n        return True\n    elif a - k == b :\n        return True\n    elif a + k == b :\n        return True\n    elif b - k == c :\n        return True\n    elif b + k == c :\n        return True\n    elif c - k == a :\n        return True\n    elif c + k == a :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/100", "completion": "\n    # Step 1. Convert x and y to binary representation.\n    x = bin( x )\n    # Step 2. Shift x to the left by 32 bits and perform a bitwise OR operation with the original x.\n    x = x[2:] + x[:2]\n    # Step 3. Check if the resulting value is equal to y. If it is, return True.\n    if int( x, 2 ) == y :\n        return True\n    # Step 4. If it is not, continue shifting the value to the right by 1 bit until it is less than y.\n    while int( x, 2 ) < y :\n        x = x[2:] + x[:2]\n    # Step 5. If the value becomes less than y without being equal to it.\n    return False\n\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in s :\n        if i!= s[i-1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n\n"}
{"task_id": "Open/103", "completion": "\n    arr.sort()\n    removal = 0\n    for i in range(1,n) :\n        if abs(arr[i] - arr[i-1]) > 1 :\n            removal += 1\n    return removal\n\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]"}
{"task_id": "Open/104", "completion": "\n    # Step 1. Convert left to binary representation.\n    left_bin = bin( left )\n    # Step 2. Initialize a variable `max_set_bits` to 0.\n    max_set_bits = 0\n    # Step 3. Iterate through the bits in the binary representation of `left`.\n    for i in range( len( left_bin ) ) :\n        # If the current bit is 1 and `max_set_bits` is less than or equal to the current position, increment `max_set_bits` by 1.\n        if left_bin[i] == '1' and max_set_bits < i :\n            max_set_bits = 1\n    # Step 4. Return `max_set_bits`. \n    return max_set_bits\n\n"}
{"task_id": "Open/105", "completion": "\n    power = 1\n    while power <= n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/106", "completion": "\n    sum_divisors = 0\n    for i in range(1, n-1) :\n        if n % i == 0 :\n            sum_divisors += i\n    if sum_divisors == n :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/107", "completion": "\n    # Step 1. Calculate the number of centuries and leap centuries in the year.\n    centuries = N // 100\n    leap_centuries = N % 100\n    # Step 2. Calculate the number of leap years by shifting the year by 2 bits.\n    leap_years = leap_centuries // 2\n    # Step 3. Subtract the number of leap years from the total number of days in the year to get the number of non-leap years.\n    non_leap_years = leap_centuries - leap_years\n    # Step 4. If there are any centuries or leap centuries, adjust the number of non-leap years and leap years accordingly.\n    if non_leap_years > 0 :\n        non_leap_years = non_leap_years - leap_years\n    # Step 5. Calculate the total number of days by adding the number of non-leap years and twice the number of leap years.\n    total_days = non_leap_years + leap_years\n    # Step 6. Take the modulus of the total number of days divided by"}
{"task_id": "Open/108", "completion": "\n    if a == -1 :\n        return -1\n    else :\n        return a * (3 * a - 2)\n"}
{"task_id": "Open/109", "completion": "\n    # Step 1. Convert the integer n to a string.\n    n = str(n)\n    # Step 2. Initialize a counter variable to 0.\n    counter = 0\n    # Step 3. Iterate through each character in the string.\n    # -If the character is equal to the digit d, increment the counter.\n    for i in n :\n        if i == d :\n            counter += 1\n    # Step 4. Return the counter. \n    return counter\n\n"}
{"task_id": "Open/110", "completion": "\n    # Step 1. Convert the integer to a string.\n    n = str(n)\n    # Step 2. Iterate through each character in the string.\n    for i in n :\n        # Step 3. If the character is not unique in the string, return False.\n        if i not in n :\n            return False\n    return True\n\n"}
{"task_id": "Open/111", "completion": "\n    count = 0\n    for i in a :\n        if i % 5 == 0 or i % 3 == 0 :\n            count += 1\n    if count == n :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/112", "completion": "\n    array = [4, 7]\n    for i in range ( 3, n+1 ) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10 + array[i]\n        else :\n            array[i] = array[i//2] * 10 + array[i]\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    array = [3, 5]\n    for i in range ( 3, n + 1 ) :\n        if i % 2 == 0 :\n            array[i] = array[i] * 10 + 3\n        else :\n            array[i] = array[i] * 10 + 5\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    array = [0] * n + [1]\n    for i in range( n ) :\n        if i % 2 == 0 :\n            array[i] = array[i] * 10 + 1\n        else :\n            array[i] = array[i] * (i // 2) + 1\n    return array[n]\n\n"}
{"task_id": "Open/115", "completion": "\n    result = 0\n    for i in range(n) :\n        result += a[i]\n    if result % 11 == 0 :\n        return True\n    else :\n        return False\n\n\na = [1,2,3,4,5,6,7,8,9,10]\nn = len(a)"}
{"task_id": "Open/116", "completion": "\n    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return l * b + b * h + l * h\n\n"}
{"task_id": "Open/117", "completion": "\n    words = string.split()\n    for word in words :\n        word = word.capitalize()\n        word = word.capitalize()\n        word = word.replace( word[0], word[-1] )\n    return word\n"}
{"task_id": "Open/118", "completion": "\n    bucketNo = math.ceil ( (8 * p + 1) / 2 )\n    return bucketNo\n\n"}
{"task_id": "Open/119", "completion": "\n    return len(set(arr)) == len(arr)\n\n"}
{"task_id": "Open/120", "completion": "\n    # Step 1. Initialize a set to store distinct two-character codes.\n    distinct_codes = set()\n    # Step 2. Iterate through the string.\n    for char in string :\n        # Step 3. Create a two-character code by concatenating the current character and the remaining character.\n        two_character_code = char + char\n        # Step 4. Add the two-character code to the set.\n        distinct_codes.add( two_character_code )\n    # Step 5. Return the count of distinct two-character codes in the set. \n    return len( distinct_codes )\n\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    # Step 1. Initialize variables: current number = 0, maximum number = 0\n    current_number = 0\n    maximum_number = 0\n    for character in ss :\n        if character.isdigit() :\n            current_number = current_number * 10 + int(character)\n        else :\n            current_number = current_number + int(character)\n            if current_number > maximum_number :\n                maximum_number = current_number\n    return maximum_number\n\n"}
{"task_id": "Open/123", "completion": "\n    longest = \"\"\n    for i in range(0,len(s)) :\n        if s[i] == \"0\" :\n            continue\n        if s[i] == \"1\" :\n            if i+1 < len(s) and s[i+1] == \"0\" :\n                continue\n            if i+1 < len(s) and s[i+1] == \"1\" :\n                continue\n            if i+1 < len(s) and s[i+1] == \"1\" :\n                continue\n            if i+1 < len(s) and s[i+1] == \"1\" :\n                continue\n            if i+1 < len(s) and s[i+1] == \"1\" :\n                continue\n            if i+1 < len(s) and s[i+1] == \"1\" :\n                continue\n            if i+1 < len(s) and s[i+1] == \"1\" :\n                continue\n            if i+1 < len(s) and s[i+1] == \"1\" :\n                continue\n"}
{"task_id": "Open/124", "completion": "\n    # Step 1. Initialize variables N and M.\n    N = 0\n    M = 0\n    # Step 2. While K is greater than 0 and either N or M is greater than 0.\n    while K > 0 and N or M > 0 :\n        # Subtract the smaller value between N and M from the larger value.\n        N -= M\n        # Decrement K by 1.\n        K -= 1\n    # Step 3. If both N and M are greater than 0, return the product of N and M.\n    if N > 0 :\n        return N * M\n    else :\n        return 0\n\n"}
{"task_id": "Open/125", "completion": "\n    # Step 1. Iterate through the string.\n    for i in range(len(string)) :\n        if string[i] == string[i+1] :\n            return False\n    # Step 2. Check if the current character is equal to the next character.\n    if string[i] == string[i+1] :\n        return False\n    # Step 3. Check if the length of the string is equal to the given length.\n    if len(string) == length :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/126", "completion": "\n    i = 1\n    while i < n:\n        i = i * 2\n    return i - 1\n"}
{"task_id": "Open/127", "completion": "\n    # Step 1. Convert A and B to strings.\n    A = str(A)\n    B = str(B)\n    \n    # Step 2. Get the length of A and B.\n    lengthA = len(A)\n    lengthB = len(B)\n    \n    # Step 3. If the length of A is equal to the length of B, return True.\n    if lengthA == lengthB :\n        return True\n    \n    # Step 4. Otherwise, return False. \n    else :\n        return False\n\n"}
{"task_id": "Open/128", "completion": "\n    return abs(x - y)!= 1\n\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    for i in range ( 3, n ) :\n        Sn_1 = Sn_1 + Sn_2\n        Sn_2 = Sn_3 + Sn_1\n        Sn_3 = Sn_3 + Sn_2\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    minSteps = []\n    prev = arr[0]\n    for i in range(1, len(arr)) :\n        diff = abs(arr[i] - prev)\n        minSteps.append(diff)\n        prev = arr[i]\n    return minSteps\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/131", "completion": "\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return fnMod ( n - 1 )\n"}
{"task_id": "Open/132", "completion": "\n    m = 0\n    sum = 0\n    ans = 0\n    for i in range ( 1, N + 1 ) :\n        if ( i % a == 0 ) :\n            m += 1\n            sum += i\n            ans += i\n    return ( m, sum, ans )\n\n"}
{"task_id": "Open/133", "completion": "\n    if N < 2 :\n        return N\n    elif N < 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 == 1 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "\n    if ( n % 2 == 0 ) :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/135", "completion": "\n    count = 0\n    if N == 1 :\n        for i in range ( L, R + 1 ) :\n            count += i\n    elif N == 2 :\n        for i in range ( L, R + 1 ) :\n            count += i + 1\n    return count\n\n"}
{"task_id": "Open/136", "completion": "\n    result = 1\n    for i in range(n) :\n        if arr[i] > result :\n            result = i + 1\n    return result\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/137", "completion": "\n    # Step 1. Convert the string to a list of characters.\n    s = list(s)\n    s = sorted(s)\n    # Step 2. Sort the list of characters.\n    s = ''.join(s)\n    # Step 3. Join the sorted list of characters into a string.\n    s = str(int(s))\n    # Step 4. Convert the string back to an integer.\n    n = int(s)\n    # Step 5. Return the integer. \n    return n\n\n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += 1\n        else :\n            arr[i] = arr[i-1]\n    return count\n\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for char in s :\n        sum += ord( char )\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/140", "completion": "\n    count = 0\n    while S > A :\n        count += 1\n        S -= count\n    if S == 0 :\n        return -1\n    else :\n        return count\n"}
{"task_id": "Open/141", "completion": "\n    max_num = 0\n    lcm = 0\n    while lcm < x * y :\n        if lcm % x == 0 and lcm % y == 0 :\n            lcm += 1\n        else :\n            max_num = max( max_num, lcm )\n            lcm = 1\n    return max_num\n"}
{"task_id": "Open/142", "completion": "\n    # Step 1. Convert the integer to binary representation.\n    n = bin(n)\n    # Step 2. Count the number of trailing zeros in the binary representation.\n    count = 0\n    for i in n :\n        if i == '0' :\n            count += 1\n    # Step 3. Return the count of trailing zeros.\n    return count\n\n"}
{"task_id": "Open/143", "completion": "\n    max_index = 0\n    for i in range(n) :\n        sum_left = 0\n        sum_right = 0\n        for j in range(i) :\n            sum_left = sum_left ^ arr[j]\n            sum_right = sum_right ^ arr[i]\n        if sum_left > max_sum :\n            max_index = i\n    return max_index\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/144", "completion": "\n    max_len = 0\n    curr_len = 1\n    for i in range(1, n) :\n        if arr[i] < arr[i-1] :\n            curr_len += 1\n        else :\n            max_len = max( max_len, curr_len )\n            curr_len = 1\n    return max_len\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Open/145", "completion": "\n    if n == 0 :\n        return -1\n    if k == 0 :\n        return min( arr )\n    if k > 0 :\n        return min( arr, key = lambda x : x + k )\n    if k < 0 :\n        return min( arr, key = lambda x : x - k )\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,"}
{"task_id": "Open/146", "completion": "\n    length = 1\n    while K % 10 == 0 :\n        length += 1\n        K /= 10\n    if K == 1 :\n        return length\n    else :\n        return -1\n"}
{"task_id": "Open/147", "completion": "\n    min_ops = 0\n    for i in range(n) :\n        min_ops += abs(arr[i] - min(arr))\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "\n    sum = 3\n    for i in range ( 1, n ) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return ( s ** 0.5 )\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n\n"}
{"task_id": "Open/151", "completion": "\n    xor = 0\n    for i in range ( len1 ) :\n        xor ^= ord ( str1[i] )\n    return xor\n\n"}
{"task_id": "Open/152", "completion": "\n    if n == 0:\n        return False\n    else:\n        binary = bin(n)[2:]\n        if binary == '1' :\n            return True\n        else:\n            return False\n\n"}
{"task_id": "Open/153", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    previous_vowel = s[0]\n    for i in range(1, len(s)):\n        if s[i] in vowels:\n            if s[i-1] < previous_vowel:\n                return False\n            else:\n                previous_vowel = s[i]\n        else:\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low, high + 1) :\n        if i % 10 == 0 :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/155", "completion": "\n    min_diff = math.inf\n    for i in range(1, n + 1) :\n        diff = abs(i)\n        if diff < min_diff :\n            min_diff = diff\n    return min_diff\n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else :\n        return (1 + math.sqrt(3)) * r ** 2 / 4\n"}
{"task_id": "Open/157", "completion": "\n    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "\n    if len(ar) == 0 :\n        return 1\n    elif len(ar) == 1 :\n        return ar[0]\n    else :\n        mid = (len(ar) - 1) // 2\n        missing = 0\n        start = mid + 1\n        end = mid - 1\n        while start <= end :\n            mid = (start + end) // 2\n            if ar[mid]!= ar[mid + 1] :\n                missing = mid\n                break\n            elif ar[mid] == ar[mid - 1] :\n                start = mid + 1\n            else :\n                end = mid - 1\n        return missing\n\n\nar = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range( len( str ) - 3 ) :\n        if str[i] == '010' :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/160", "completion": "\n    d = {}\n    for i in arr :\n        if i not in d :\n            d[i] = 1\n        else :\n            d[i] += 1\n    for i in range ( n ) :\n        if d[i] % 2 == 0 :\n            return i\n    return None\n\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range( n ) :\n        xorArr = xorArr ^ arr[i]\n        ans = ans ^ arr[i]\n    if ans > 0 :\n        ans = ans ^ xorArr\n    return ans\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    visited = set()\n    queue = []\n    queue.append ( (sx, sy) )\n    visited.add ( sx )\n    visited.add ( sy )\n    \n    while queue :\n        point = queue.pop ( 0 )\n        if point == (dx, dy) :\n            return True\n        if ( point[0] + point[1] ) in visited :\n            return False\n        if ( point[0] + point[1] + point[2] ) in visited :\n            return False\n        if ( point[0] + point[1] + point[3] ) in visited :\n            return False\n        visited.add ( point[0] + point[1] + point[2] )\n        queue.append ( ( point[0] + point[1] + point[3] ) )\n    return False\n\n"}
{"task_id": "Open/163", "completion": "\n    if n % 2 == 0 :\n        return 0\n    count = 0\n    for i in range(2, n) :\n        if i % 4 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/164", "completion": "\n    # Step 1. Initialize a dictionary to store the count of each element in the array.\n    d = {}\n    for i in range(n) :\n        d[arr[i]] = d.get(arr[i], 0) + 1\n    \n    # Step 2. Iterate through the array and update the count of each element in the dictionary.\n    for i in range(n) :\n        for j in range(i + 1, n) :\n            d[arr[j]] = d.get(arr[j], 0) * d.get(arr[i], 0) + 1\n    \n    # Step 3. Calculate the count of all possible subsequences by multiplying the values in the dictionary.\n    count = 0\n    for i in range(n) :\n        count = count * d[arr[i]]\n    \n    # Step 4. Return the count of all possible subsequences. \n    return count\n\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/165", "completion": "\n    count = 1\n    if height > 0 :\n        count = AVLnodes ( height - 1 ) + count\n        count = AVLnodes ( height - 2 ) + count\n    return count\n\n"}
{"task_id": "Open/166", "completion": "\n    steps = 0\n    while source!= dest :\n        if source == 0 :\n            return steps\n        elif source > 0 :\n            steps += 1\n        elif source < 0 :\n            steps -= 1\n        else :\n            return sys.maxsize\n    return steps\n"}
{"task_id": "Open/167", "completion": "\n    if n == 1:\n        return \"1\"\n    else:\n        prev = 1\n        count = 1\n        term = \"\"\n        for i in range ( 1, n ):\n            term = term + str( prev )\n            prev = count\n            count = count + 1\n        return term\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/168", "completion": "\n    max_length = 0\n    for i in range(1,N+1) :\n        for j in range(1,i+1) :\n            product = arr[i-1] * arr[j-1]\n            if product > 0 :\n                max_length = max(max_length, i-1)\n    return max_length\n\n\narr = [1,2,3,4,5,6,7,8,9]\nN = len(arr)"}
{"task_id": "Open/169", "completion": "\n    return ( (m * n) / math.sqrt((m * m) + (n * n)) )\n"}
{"task_id": "Open/170", "completion": "\n    counter = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if arr[i] + arr[j] < k :\n                counter += 1\n    return counter\n\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nk = 7"}
{"task_id": "Open/171", "completion": "\n    arr.sort()\n    count = 0\n    for i in range(n-2) :\n        for j in range(i+1, n) :\n            if arr[j] - arr[i] <= L :\n                count += 1\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l, r + 1) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/173", "completion": "\n    mask = 1\n    while m > 0 :\n        mask = (mask << 1) ^ n\n        m -= 1\n    return mask\n\n"}
{"task_id": "Open/174", "completion": "\n    count = 0\n    while L < R :\n        if L % 9 == 0 :\n            L = L + 1\n        else :\n            count += 1\n    if K == 9 :\n        K = 0\n    while R < R - K :\n        if R % 9 == 0 :\n            R = R + 1\n        else :\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    product = n * math.log(n)\n    result = str(product)\n    return result[:k]\n"}
{"task_id": "Open/176", "completion": "\n    for i in range ( 1, n ) :\n        for j in range ( i, n ) :\n            if A[j] > A[i] :\n                return A[i]\n    return -1\n\n"}
{"task_id": "Open/177", "completion": "\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    sum = sum(a) + sum(b) + sum(c)\n    if sum > c :\n        return c - sum\n    else :\n        return sum - c\n\n"}
