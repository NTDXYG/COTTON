{"task_id": "Open/0", "completion": "\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    count = 0\n    for i in range(N):\n        if sum + K > arr[i]:\n            count += 1\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nN = len(arr)\nK = 5"}
{"task_id": "Open/1", "completion": "\n    min_val = arr[0]\n    max_freq = 1\n    for i in range(1, n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n        if arr[i] == min_val :\n            max_freq += 1\n    return max_freq\n\narr = [1, 2, 2, 3, 1, 3, 3]\nn = len(arr)"}
{"task_id": "Open/2", "completion": "\n    \n    string = bin(n)\n    \n    for i in range(l, r + 1) :\n        if string[2:].find(str(i)) == -1 :\n            return \"No\"\n    \n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    \n    totalSum = sum(a)\n    \n    for i in range(1, n):\n        if totalSum - a[i] == totalSum - a[i-1]:\n            return True\n    \n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/5", "completion": "\n    \n    binary = bin(x)\n    count = binary.count('1')\n    if count % 2 == 0 :\n        return 0\n    else :\n        return 1\n    "}
{"task_id": "Open/6", "completion": "\n    output = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/7", "completion": "\n    max_length = 0\n    for i in range(n):\n        length = 1\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                length += 1\n        max_length = max(max_length, length)\n    return max_length\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/8", "completion": "\n    \n    distinct_prime_factors = []\n    for i in a :\n        distinct_prime_factors.append(0)\n    \n    for i in range(len(a)) :\n        for j in range(2, int(math.sqrt(a[i])) + 1) :\n            if a[i] % j == 0 :\n                distinct_prime_factors[i] += 1\n    \n    return distinct_prime_factors\n"}
{"task_id": "Open/9", "completion": "\n    \n    arr.sort(reverse = True)\n    sum = 0\n    for i in range(k):\n        sum += arr[i] - arr[0]\n    \n    for i in range(k, n):\n        sum += arr[i] - arr[i - k]\n    \n    return sum\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 4"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.appendleft(B.pop())\n            A.append(A.pop())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i] == 0 or array[i] == 2 :\n            continue\n        elif array[i] % 2 == 0 :\n            count += 1\n    return count\n\narray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nsize = len(array)"}
{"task_id": "Open/12", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if len(set(s[i:j+1])) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "\n    current_number = 2\n    while current_number <= n :\n        if n % current_number == 0 :\n            return False\n        current_number += 1\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    switch = {\n        0 : n,\n        1 : 1,\n        2 : n + 1,\n        3 : 0\n    }\n    return switch.get(n % 4, \"\")\n"}
{"task_id": "Open/15", "completion": "\n    for i in range(t) :\n        a = random.randint(2, n-1)\n        if ( pow(a, (n-1)/2, n)!= 1 ) and ( pow(a, (n-1)/2, n)!= n-1 ) :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "\n    for i in range( n ) :\n        if ( s1[i] == '0' and s2[i] == '1' ) or ( s1[i] == '1' and s2[i] == '0' ) or ( s1[i] == '0' and s2[i] == 'Z' ) or ( s1[i] == 'Z' and s2[i] == '0' ) :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(length) :\n        if i % 2 == 0 :\n            if s[i] == '0' :\n                count += 1\n        else :\n            if s[i] == '1' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if math.pow(i, i) <= n:\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 0\n    curr_len = 1\n    for i in range(n):\n        if arr[i] > arr[i-1]:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    return max(max_len, curr_len)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        return count\n    else :\n        if sum == 0 :\n            count += 1\n        return subsetSum ( arr, n, i + 1, sum - arr[i], count ) + subsetSum ( arr, n, i + 1, sum, count )\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]"}
{"task_id": "Open/24", "completion": "\n    \n    center_hexadecagonal_num = ( 3 * n * ( n + 1 ) ) // 2\n    \n    return center_hexadecagonal_num\n"}
{"task_id": "Open/25", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        sum += i**2\n    sum += 1\n    return sum\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1, n + 1) :\n        sum = 0\n        for j in range(1, i + 1) :\n            if i % j == 0 :\n                sum += j\n        if sum > max_sum :\n            max_sum = sum\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    \n    percentage = (b - a) / a\n    return percentage\n"}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i*i\n    return sum/n\n"}
{"task_id": "Open/31", "completion": "\n    \n    arr.sort()\n    return arr[k-1]\n\narr = [1,2,3,4,5,6,7,8,9,10]\nk = 5\nn = len(arr)"}
{"task_id": "Open/32", "completion": "\n    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "\n    \n    if n == 1 :\n        return 1\n    else :\n        return findTerm(n-1) * 2 + 1\n"}
{"task_id": "Open/34", "completion": "\n    \n    count = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if (a[i] * a[j]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        string = str(i)\n        count += string.count(str(d))\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    \n    # Initialize a set to store positive integers from the array.\n    positive_integers = set()\n    \n    for i in range(n) :\n        if arr[i] > 0 :\n            positive_integers.add(arr[i])\n    \n    for i in range(1, n+1) :\n        if i not in positive_integers :\n            return i\n    \n    return n+1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/37", "completion": "\n    dp = [1, 1]\n    for i in range(2, n+1) :\n        dp.append(dp[i-1] + dp[i-2])\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    area = 0\n    length = l\n    breadth = b\n    while length > 0 and breadth > 0:\n        area += (length * breadth)\n        length -= 1\n        breadth -= 1\n    return area\n"}
{"task_id": "Open/39", "completion": "\n    return sum ( range ( 1, N + 1 ) )\n"}
{"task_id": "Open/40", "completion": "\n    max_zeros = 0\n    count_zeros = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count_zeros = 0\n        else:\n            count_zeros += 1\n        if count_zeros > max_zeros:\n            max_zeros = count_zeros\n    if max_zeros > 0:\n        return max_zeros\n    else:\n        return -1\n"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            length = i\n            while arr[length] == 0:\n                length += 1\n            if length > max_length:\n                max_length = length\n    return max_length\n\narr = [1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"task_id": "Open/42", "completion": "\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0], a[n-1])\n    else :\n        return max(a)\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (array[i] * array[j]) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    \n    arr.sort()\n    sum = 0\n    for i in range(n):\n        sum += abs(arr[i] - (i+1))\n    return sum\n"}
{"task_id": "Open/45", "completion": "\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/46", "completion": "\n    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            diff = abs(array[i] - array[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "\n    \n    if ( a * x1 + b * y1 == c ) :\n        return True\n    elif ( a * x2 + b * y2 == c ) :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/48", "completion": "\n    solutions = 0\n    for i in range(0, a + 1) :\n        for j in range(0, a + 1) :\n            if i + (a ^ i) == j :\n                solutions += 1\n    return solutions\n"}
{"task_id": "Open/49", "completion": "\n    max_AND = 0\n    for i in range(L,R+1):\n        if i & max_AND < i:\n            max_AND = i & max_AND\n    return max_AND\n"}
{"task_id": "Open/50", "completion": "\n    smallest = None\n    for i in range(1, n):\n        if smallest is None or i % smallest == 0:\n            smallest = i\n    return smallest\n"}
{"task_id": "Open/51", "completion": "\n    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum ( n - 1 )\n"}
{"task_id": "Open/52", "completion": "\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if (i+1) * (j+1) > n:\n                break\n            if (i+1) * (j+1) == n:\n                result += arr[i][j]\n            else:\n                if (arr[i][j] * arr[i+1][j+1]) % 2 == 1:\n                    result += arr[i][j]\n    return result\n\narr = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]\nn = 5"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(N+1) :\n        xor = i ^ i\n        if xor == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    \n    if ( len(a) == 0 ) :\n        return True\n    \n    unique = set()\n    \n    for i in range(0, len(a)):\n        if ( a[i] in unique ):\n            return False\n        else:\n            unique.add(a[i])\n    \n    if ( len(a) + len(a) - 1 == k ):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/55", "completion": "\n    \n    binary = bin(n)\n    \n    if binary[0] == '1' and binary[-1] == '1' :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    current_partitions = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_partitions += 1\n        else:\n            max_partitions = max(max_partitions, current_partitions)\n            current_partitions = 1\n    max_partitions = max(max_partitions, current_partitions)\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = var1 + var2\n    for i in range(2, N):\n        var1 = arr[i]\n        result = result + var1\n        result = result + (var1 * var2) / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "\n    result = arr[index]\n    for i in range(reversals) :\n        for range in ranges :\n            arr[range[0]], arr[range[1]] = arr[range[1]], arr[range[0]]\n    return result\n"}
{"task_id": "Open/60", "completion": "\n    \n    for i in range ( 1, n ) :\n        for j in range ( 1, n ) :\n            if ( i * i + j * j ) == n :\n                return True\n            elif ( i * i + j * j ) > n :\n                break\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    \n    count = 0\n    for i in range(len(b)) :\n        if b[i] == a[0] :\n            count += 1\n        else :\n            return -1\n    return count\n"}
{"task_id": "Open/62", "completion": "\n    modified_string = \"\"\n    for i in range ( len - 2, -1, -1 ) :\n        if str[i] > str[i + 1] :\n            modified_string += \"9\"\n        else :\n            modified_string += str[i]\n    return modified_string\n"}
{"task_id": "Open/63", "completion": "\n    min_value = math.inf\n    running_sum = 0\n    for i in range(n):\n        running_sum += math.log(arr[i])\n        if running_sum < min_value * n:\n            min_value = arr[i]\n    return min_value\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/64", "completion": "\n    if len(s) == 0 or s == '1':\n        return \"-1\"\n    max_len = 0\n    start = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            continue\n        curr_len = 0\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                break\n            curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n            start = i\n    if max_len > 0:\n        return s[start:start+max_len]\n    else:\n        return \"-1\"\n"}
{"task_id": "Open/65", "completion": "\n    \n    counter = {}\n    for i in range(n):\n        if a[i] in counter:\n            counter[a[i]] += 1\n        else:\n            counter[a[i]] = 1\n    \n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    \n    modified_array_length = 0\n    for i in range(len(sorted_counter)):\n        if sorted_counter[i][1] <= k:\n            modified_array_length += 1\n    \n    return modified_array_length\n"}
{"task_id": "Open/66", "completion": "\n    size = n + k\n    arr.sort()\n    if size % 2 == 0 :\n        median = (arr[size // 2] + arr[size // 2 - 1]) / 2\n    else :\n        median = arr[size // 2]\n    return median\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nk = 3"}
{"task_id": "Open/67", "completion": "\n    \n    positive = 0\n    negative = 0\n    zero = 0\n    \n    for i in range(n):\n        if a[i] > 0:\n            positive += 1\n        elif a[i] < 0:\n            negative += 1\n        else:\n            zero += 1\n    \n    step = 0\n    \n    if negative % 2 == 0:\n        step += zero\n    else:\n        if zero > 0:\n            step += zero\n        else:\n            step += 2\n    \n    step += abs(positive - negative)\n    \n    return step\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v) - 1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    n = bin(n)[2:]\n    n = [int(x) for x in n]\n    for i in range(1, len(n)):\n        if n[i] < n[i-1]:\n            return False\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    if x > n :\n        return x\n    else :\n        return n * (x // n)\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(n+1):\n        sum += i + 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    \n    count = {}\n    for i in range(n) :\n        if arr[i] in count :\n            count[arr[i]] += 1\n        else :\n            count[arr[i]] = 1\n    \n    max_val = 0\n    for i in range(n) :\n        if count[arr[i]] == arr[i] :\n            if max_val < arr[i] :\n                max_val = arr[i]\n    \n    return max_val\n\narr = [1,1,1,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] > a[j] and (a[i] & a[j]) == 0):\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    \n    return int(bin(n)[2:], 2)\n    "}
{"task_id": "Open/76", "completion": "\n    changes = 0\n    for i in range(1, n-1) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            changes += 1\n            A[i+1] = 0\n    return changes\n\nA = [0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"task_id": "Open/77", "completion": "\n    \n    return ( radian * 180 ) / pi\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        sum += a + (i-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 0 :\n        return 1\n    else :\n        power = 1\n        while power * 2 <= n :\n            power *= 2\n        return power\n"}
{"task_id": "Open/81", "completion": "\n    board = [[False for i in range(8)] for j in range(8)]\n    board[row][column] = True\n    count = 0\n    for i in range(moves):\n        if row > 0 and board[row - 1][column] == False:\n            count += 1\n            board[row - 1][column] = True\n        if row < 7 and board[row + 1][column] == False:\n            count += 1\n            board[row + 1][column] = True\n        if column > 0 and board[row][column - 1] == False:\n            count += 1\n            board[row][column - 1] = True\n        if column < 7 and board[row][column + 1] == False:\n            count += 1\n            board[row][column + 1] = True\n        row += 1\n        column += 1\n        row %= 8\n        column %= 8\n    return count\n"}
{"task_id": "Open/82", "completion": "\n    current_number = 0\n    numbers = []\n    for i in range(n):\n        current_number += i\n        numbers.append(current_number)\n    return numbers\n"}
{"task_id": "Open/83", "completion": "\n    \n    sortedString = sorted(s)\n    lastOccurrence = []\n    for i in range(len(s)):\n        lastOccurrence.append(s.rfind(sortedString[i]))\n    \n    modifiedString = \"\"\n    for i in range(len(s)):\n        modifiedString += s[lastOccurrence[i]]\n    \n    return modifiedString\n"}
{"task_id": "Open/84", "completion": "\n    \n    arr = [ ]\n    for i in range(n) :\n        if i % 2 == 0 :\n            arr.append(i)\n        else :\n            arr.append(i)\n            arr.append(i)\n    \n    return sum(arr[l-1:r])\n"}
{"task_id": "Open/85", "completion": "\n    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range ( 1, smaller + 1 ) :\n        if x % i == 0 and y % i == 0 :\n            hcf = i\n    return hcf\n"}
{"task_id": "Open/86", "completion": "\n    current = A\n    for i in range(N-1):\n        current = current + B\n    return current\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:].find(substr)!= -1:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    \n    r = r / 12\n    t = t * 12\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    count = 0\n    for i in range(1, A+1):\n        for j in range(1, B+1):\n            for k in range(1, C+1):\n                if i * k > j * j:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range(l, r+1) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    max_length = 0\n    for i in range(n):\n        length = 1\n        curr_num = arr[i]\n        for j in range(i+1, n):\n            if arr[j] - curr_num == 0:\n                length += 1\n                curr_num = arr[j]\n            elif arr[j] - curr_num!= 0:\n                curr_num = arr[j]\n                length = 1\n            if length > max_length:\n                max_length = length\n    return max_length\n"}
{"task_id": "Open/92", "completion": "\n    max_len = -1\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1]) % 2 == 0 and str[i:j+1].isalnum():\n                max_len = max(max_len, len(str[i:j+1]))\n    return max_len\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 1 :\n        count += 1\n        n = n / 2\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/95", "completion": "\n    distance = 0\n    while n > 0 :\n        distance += fuel / n\n        n -= 1\n    return distance\n"}
{"task_id": "Open/96", "completion": "\n    totalSum = 0\n    for i in range(n):\n        totalSum += arr[i]\n    if totalSum == 0:\n        return 0\n    \n    for i in range(n):\n        sumBefore = 0\n        sumAfter = 0\n        for j in range(i):\n            sumBefore += arr[j]\n        for j in range(i+1, n):\n            sumAfter += arr[j]\n        if sumBefore == totalSum / 3 and sumAfter == totalSum * 2 / 3:\n            return 1\n    return 0\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    return word in sentence\n"}
{"task_id": "Open/98", "completion": "\n    \n    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "\n    if a == b and b == c and c == a:\n        return True\n    if k == 0:\n        return False\n    if a - k == b:\n        return True\n    if a + k == b:\n        return True\n    if b - k == c:\n        return True\n    if b + k == c:\n        return True\n    if c - k == a:\n        return True\n    if c + k == a:\n        return True\n    return False\n"}
{"task_id": "Open/100", "completion": "\n    \n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    \n    if x == y:\n        return True\n    \n    while len(x) < len(y):\n        x = '0' + x\n    \n    if x[:len(y)] == y:\n        return True\n    \n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    arr.sort()\n    removal = 0\n    for i in range(n-1):\n        if abs(arr[i] - arr[i+1]) > 1:\n            removal += 1\n    return removal\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/104", "completion": "\n    \n    left_bin = bin(left)[2:]\n    right_bin = bin(right)[2:]\n    max_set_bits = 0\n    \n    for i in range(len(left_bin)):\n        if left_bin[i] == '1' and max_set_bits <= i:\n            max_set_bits += 1\n    \n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "\n    power = 1\n    while power <= n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/106", "completion": "\n    divisors = []\n    for i in range(1, n) :\n        if n % i == 0 :\n            divisors.append(i)\n    if sum(divisors) == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "\n    \n    # Calculate the number of centuries and leap centuries in the year.\n    centuries = N // 100\n    leap_centuries = N // 400\n    \n    # Calculate the number of leap years by shifting the year by 2 bits.\n    leap_years = (N & 0x3E0) >> 6\n    \n    # Subtract the number of leap years from the total number of days in the year.\n    non_leap_years = N - leap_years\n    \n    # If there are any centuries or leap centuries, adjust the number of non-leap years and leap years accordingly.\n    if (centuries or leap_centuries) :\n        non_leap_years -= leap_years\n        leap_years = 0\n    \n    # Calculate the total number of days by adding the number of non-leap years and twice the number of leap years.\n    total_days = non_leap_years + 2 * leap_years\n    \n    # Take the modulus of the total number of days divided by 7 to get the number of odd days.\n    odd_days = total_days %"}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    else :\n        return a * (3 * a - 2)\n"}
{"task_id": "Open/109", "completion": "\n    \n    n = str(n)\n    d = str(d)\n    \n    return n.count(d)\n"}
{"task_id": "Open/110", "completion": "\n    n = str(n)\n    for i in range(len(n)):\n        if n.count(n[i]) > 1:\n            return False\n    return True\n"}
{"task_id": "Open/111", "completion": "\n    count = 0\n    for i in range(len(a)):\n        if a[i] % 5 == 0:\n            a[i] = a[i] / 5\n            count += 1\n        elif a[i] % 3 == 0:\n            a[i] = a[i] / 3\n            count += 1\n        else:\n            return False\n    if count == n:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/112", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 4\n    array[1] = 7\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 7\n        else:\n            array[i] = array[(i//2)-1] * 10 + 4\n    \n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 5\n        else:\n            array[i] = array[i//2] * 10 + 3\n    \n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    \n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 2\n        else:\n            array[i] = array[i//2 - 1] * 10 + 1\n    \n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    for i in range(n) :\n        if (a[i] % 11!= 0) :\n            return False\n    return True\n"}
{"task_id": "Open/116", "completion": "\n    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return l * b + b * h + l * h\n"}
{"task_id": "Open/117", "completion": "\n    \n    words = string.split()\n    new_string = \"\"\n    for word in words:\n        new_string += word[0].upper() + word[1:-1] + word[-1].upper() + \" \"\n    return new_string[:-1]\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil(math.sqrt(8 * p + 1) - 1) // 2\n"}
{"task_id": "Open/119", "completion": "\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n    return True\n"}
{"task_id": "Open/120", "completion": "\n    \n    distinctCode = set()\n    for i in range(len(string) - 1):\n        for j in range(i + 1, len(string)):\n            distinctCode.add(string[i] + string[j])\n    return len(distinctCode)\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    currentNumber = 0\n    maximumNumber = 0\n    for character in ss:\n        if character.isdigit():\n            currentNumber = currentNumber * 10 + int(character)\n        else:\n            if currentNumber > maximumNumber:\n                maximumNumber = currentNumber\n            currentNumber = 0\n    return maximumNumber\n"}
{"task_id": "Open/123", "completion": "\n    longest = \"\"\n    for i in range(length):\n        if s[i].isdigit():\n            if s[i+1].isdigit():\n                continue\n            else:\n                if len(longest) < len(s[i:]):\n                    longest = s[i:]\n    return longest\n"}
{"task_id": "Open/124", "completion": "\n    \n    N, M = min(N,M), max(N,M)\n    \n    while K > 0 and N > 0 and M > 0 :\n        if N > M :\n            N -= M\n        else :\n            M -= N\n        K -= 1\n    \n    if N > 0 and M > 0 :\n        return N * M\n    else :\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/125", "completion": "\n    if len(string)!= length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    i = 1\n    while i <= n :\n        i = i * 2\n    return i - 1\n"}
{"task_id": "Open/127", "completion": "\n    \n    A = str(A)\n    B = str(B)\n    \n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n    "}
{"task_id": "Open/128", "completion": "\n    \n    if abs(x-y)!= 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    for i in range(3, n+1):\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2 + Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    \n    steps = [0] * n\n    prev = arr[0]\n    for i in range(1, n):\n        steps[i] = abs(arr[i] - prev)\n        prev = arr[i]\n    return steps\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    elif n % 4 == 1 or n % 4 == 2 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/132", "completion": "\n    m = N / a\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n    "}
{"task_id": "Open/134", "completion": "\n    if arr[0] % 2!= 0:\n        return False\n    if arr[n-1] % 2!= 0:\n        return False\n    if n % 2!= 0:\n        return False\n    return True\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/135", "completion": "\n    count = 0\n    if N == 1 :\n        for i in range ( L, R + 1 ) :\n            count += 1\n    elif N > 1 :\n        for i in range ( L, R + 1 ) :\n            if i % ( N - 1 ) == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/136", "completion": "\n    arr.sort()\n    result = 1\n    for i in range(n):\n        if arr[i] >= result:\n            result += 1\n    return result\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/137", "completion": "\n    \n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    return int(s)\n    "}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i - 1] :\n            count += arr[i] - arr[i - 1]\n            arr[i] = arr[i - 1]\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    \n    sum = 0\n    count = 0\n    for i in s :\n        sum += ord(i)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "\n    count = 0\n    while S >= A:\n        count += S // B\n        S = S % B\n    return count if S == 0 else -1\n"}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n > 0 :\n        if n & 1 == 0 :\n            count += 1\n        else :\n            break\n        n = n >> 1\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    max_index = 0\n    max_sum = 0\n    for i in range(n):\n        max_sum = max_sum ^ arr[i]\n        if max_sum > max_sum:\n            max_index = i\n    return max_index\n\narr = [1,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98"}
{"task_id": "Open/144", "completion": "\n    \n    max_len = 0\n    for i in range(n):\n        curr_len = 1\n        for j in range(i):\n            if arr[j] < arr[i]:\n                curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n\narr = [10, 22, 9, 33, 21, 50, 41, 60]\nn = len(arr)"}
{"task_id": "Open/145", "completion": "\n    if k < 0 :\n        return -1\n    if k == 0 :\n        return min(arr)\n    if k > 0 :\n        return min(arr) + k\n    if k < 0 :\n        return -1\n    return -1\n"}
{"task_id": "Open/146", "completion": "\n    length = 1\n    while K % 10 == 0 :\n        K = K / 10\n        length += 1\n    if K!= 1 :\n        return -1\n    return length\n"}
{"task_id": "Open/147", "completion": "\n    min_ops = 0\n    for i in range(n):\n        min_ops += abs(arr[i] - min(arr))\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "\n    sum = 3\n    for i in range(1, n) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s**0.5\n"}
{"task_id": "Open/150", "completion": "\n    \n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    XOR = 0\n    for i in range(len1) :\n        XOR = XOR ^ ord(str1[i])\n    return XOR\n"}
{"task_id": "Open/152", "completion": "\n    \n    binary = bin(n)\n    \n    if binary.count(\"1\") == 1 :\n        return False\n    else :\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/153", "completion": "\n    previous_vowel = s[0]\n    for char in s[1:]:\n        if char in \"aeiou\":\n            if char < previous_vowel:\n                return False\n            previous_vowel = char\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low, high + 1):\n        last_digit = i % 10\n        if last_digit >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    min_diff = math.inf\n    for i in range(1, n+1):\n        diff = abs(i - math.pow(2, math.floor(math.log(i, 2))))\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": "Open/156", "completion": "\n    \n    if r < 0 :\n        return -1\n    else :\n        return (1 + sqrt(3)) * r**2 / 4\n"}
{"task_id": "Open/157", "completion": "\n    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "\n    if size == 0 :\n        return 1\n    elif size == 1 :\n        return ar[0] + 1\n    elif ar[mid] == ar[mid + 1] :\n        return search(ar, size - 1)\n    elif ar[mid] == ar[mid - 1] :\n        return search(ar, size - 1)\n    else :\n        return search(ar, size - 1)\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str) - 2):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    \n    count = {}\n    \n    for i in range(n):\n        if arr[i] not in count:\n            count[arr[i]] = 1\n        else:\n            count[arr[i]] += 1\n    \n    for i in range(n):\n        if count[arr[i]] % 2!= 0:\n            return arr[i]\n    \n    return None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "\n    if (sx == dx and sy == dy) :\n        return True\n    if (sx == dx and sy!= dy) :\n        return True\n    if (sx!= dx and sy == dy) :\n        return True\n    if (sx!= dx and sy!= dy) :\n        return False\n"}
{"task_id": "Open/163", "completion": "\n    if n % 2 == 1 :\n        return 0\n    else :\n        count = 0\n        for i in range(2, n, 2) :\n            if i % 4 == 0 :\n                count += 1\n        return count\n"}
{"task_id": "Open/164", "completion": "\n    d = {}\n    for i in range(n) :\n        d[arr[i]] = d.get(arr[i],0) + 1\n    count = 1\n    for i in d :\n        count *= d[i]\n    return count\n\narr = [1,2,3,4,5,6]\nn = len(arr)"}
{"task_id": "Open/165", "completion": "\n    count = 1\n    if height > 0:\n        count += AVLnodes(height-1)\n        count += AVLnodes(height-2)\n    return count\n"}
{"task_id": "Open/166", "completion": "\n    if source == dest :\n        return 0\n    diff = dest - source\n    if diff == 0 :\n        return steps\n    if diff > 0 :\n        steps += 1\n    if diff < 0 :\n        steps -= 1\n    if diff!= step :\n        return sys.maxsize\n    return steps\n"}
{"task_id": "Open/167", "completion": "\n    if n == 1 :\n        return \"1\"\n    else :\n        current_term = countnndSay(n-1)\n        count = 1\n        next_term = \"\"\n        for i in range(1, len(current_term)) :\n            if current_term[i] == current_term[i-1] :\n                count += 1\n            else :\n                next_term += str(count) + current_term[i-1]\n                count = 1\n        next_term += str(count) + current_term[-1]\n        return next_term\n"}
{"task_id": "Open/168", "completion": "\n    max_length = 0\n    for i in range(N):\n        for j in range(i,N):\n            product = 1\n            for k in range(i,j+1):\n                product *= arr[k]\n            if product >= 0:\n                max_length = max(max_length, j-i+1)\n    return max_length\n\narr = [1,2,3,4,5]\nN = 5"}
{"task_id": "Open/169", "completion": "\n    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n"}
{"task_id": "Open/170", "completion": "\n    \n    counter = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                counter += 1\n    return counter\n\narr = [1,4,2,3,5,2,1]\nn = len(arr)\nk = 5"}
{"task_id": "Open/171", "completion": "\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2) :\n        for j in range(i + 1, len(arr) - 1) :\n            k = j + 1\n            while k < len(arr) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n                k += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    return n ^ (2**m - 1)\n"}
{"task_id": "Open/174", "completion": "\n    \n    total = R - L + 1\n    div = total // 9\n    rem = total % 9\n    \n    if K == 9 :\n        K = 0\n    \n    count = 0\n    for i in range(R, L - rem, -1) :\n        if i % 9 == K :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/175", "completion": "\n    \n    product = math.log10(n) * n\n    result = str(product)\n    return result[0:k]\n"}
{"task_id": "Open/176", "completion": "\n    for i in range(1, n) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "\n    \n    a, b, c = sorted(a, b, c)\n    \n    if a + b >= c :\n        return 0\n    \n    return c - a - b\n    \n    "}
