{"task_id": "Open/0", "completion": "    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    for i in range(len(arr)):\n        if (sum - arr[i]) % K == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    min_value = arr[0]\n    min_count = 1\n    for i in range(1, n):\n        if arr[i] < min_value:\n            min_value = arr[i]\n            min_count = 1\n        elif arr[i] == min_value:\n            min_count += 1\n    return min_count\n"}
{"task_id": "Open/2", "completion": "    \n    # Step 1. Convert the binary representation of n to a string.\n    binary_string = str(bin(n))\n    \n    # Step 2. Iterate through the bits in the string from l to r (inclusive).\n    for i in range(l, r+1):\n        if binary_string[i] == '0':\n            return \"No\"\n    \n    # Step 3. Return \"Yes\".\n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if A[i]+A[j]%K == 0:\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    totalSum = sum(a)\n    if totalSum % 2!= 0:\n        return False\n    \n    for i in range(len(a)):\n        leftSum = totalSum - a[i]\n        if leftSum % 2!= 0:\n            return False\n        \n        rightSum = totalSum - leftSum\n        if rightSum % 2!= 0:\n            return False\n        \n    return True\n"}
{"task_id": "Open/5", "completion": "    return 1 if x % 2 == 0 else 0\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in range(len(vec)):\n        if vec[i] < 0:\n            vec[i] *= -1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    for i in range(n) :\n        length = 1\n        for j in range(i+1, n) :\n            if arr[i] == arr[j] :\n                length += 1\n        if length > max_length :\n            max_length = length\n    return max_length\n"}
{"task_id": "Open/8", "completion": "    \n    # Step 1. Initialize an empty list to store the distinct prime factors.\n    distinct_prime_factors = []\n    \n    # Step 2. Iterate through each integer in the input list.\n    for i in range(len(a)):\n        \n        # Step 3. For each integer, find its prime factors and add them to the list of distinct prime factors.\n        prime_factors = []\n        for j in range(2, a[i]):\n            if a[i] % j == 0:\n                prime_factors.append(j)\n        \n        # Step 4. Count the number of distinct prime factors in the list.\n        distinct_prime_factors.append(len(prime_factors))\n        \n    # Step 5. Return the count.\n    return distinct_prime_factors\n"}
{"task_id": "Open/9", "completion": "    # Step 1. Sort the array in descending order.\n    arr.sort(reverse=True)\n    \n    # Step 2. Calculate the sum of the difference between the kth largest element and the first element of the array.\n    sum = 0\n    for i in range(n-1):\n        sum += arr[i] - arr[i+1]\n    \n    # Step 3. Calculate the sum of the difference between the kth largest element and each element from index 1 to k.\n    sum = 0\n    for i in range(n-1):\n        sum += arr[i] - arr[i+1]\n    \n    # Step 4. Return the minimum value among these differences.\n    return sum\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while len(A) > 0 and len(B) > 0:\n        if A[0] == B[0]:\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else:\n            A.append(A.popleft())\n            B.append(B.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i]!= 0 and array[i]!= 2 and array[i] % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if len(set(s[i:j+1])) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    current_number = 2\n    while current_number <= n:\n        if current_number % n == 0:\n            return False\n        current_number = current_number - (current_number // n)\n    return True\n"}
{"task_id": "Open/14", "completion": "    # Step 1. Compute the remainder of the input integer divided by 4.\n    remainder = n % 4\n    # Step 2. Use a switch statement to determine the XOR value based on the remainder.\n    if remainder == 0:\n        return n\n    elif remainder == 1:\n        return 1\n    elif remainder == 2:\n        return n + 1\n    elif remainder == 3:\n        return 0\n    else:\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    for i in range(t):\n        if (a**((n-1)/2))%n == 1:\n            return 1\n        else:\n            a = random.randint(2,n-1)\n    return -1\n"}
{"task_id": "Open/16", "completion": "    for i in range(n):\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(len(s)) :\n        if i%2 == 0 :\n            if s[i] == '0' :\n                count += 1\n        else :\n            if s[i] == '1' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1,n+1):\n        if i**2 == n:\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 1\n    else :\n        return x + product(x,y-1)\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        if a[i] % 4 == 1 :\n            count1 += 1\n        if a[i] % 4 == 2 :\n            count2 += 1\n        if a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == count1 and count0 == count2 and count0 == count3 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 0\n    curr_len = 1\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            curr_len += 1\n        else :\n            curr_len = 1\n        max_len = max(max_len, curr_len)\n    return max_len\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        count = subsetSum(arr, n, i + 1, sum, count)\n        count = subsetSum(arr, n, i + 1, sum - arr[i], count)\n        return count\n"}
{"task_id": "Open/24", "completion": "    return n * (n**2 + 1) / 2\n"}
{"task_id": "Open/25", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    sum += 1\n    return sum\n"}
{"task_id": "Open/26", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        sum_of_digits = 0\n        for j in range(1, i+1):\n            sum_of_digits += int(str(j))\n        if sum_of_digits > max_sum:\n            max_sum = sum_of_digits\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return (b-a)/a\n"}
{"task_id": "Open/30", "completion": "    return sum(x*x for x in range(1,n+1)) / n\n"}
{"task_id": "Open/31", "completion": "    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    # Step 2. Return the element at index k-1.\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3 ** (n - 1)\n"}
{"task_id": "Open/33", "completion": "    # Step 1. Initialize the first term of the sequence as 1.\n    term = 1\n    # Step 2. Iterate from 2 to n.\n    for i in range(2, n+1) :\n        # Step 3. Calculate the next term by multiplying the previous term by 2 and adding the difference between the current index and 1.\n        term = term * 2 + (i - 1)\n    # Step 4. Return the nth term.\n    return term\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            product = a[i] * a[j]\n            if product < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1):\n        s = str(i)\n        count += s.count(d)\n    return count\n"}
{"task_id": "Open/36", "completion": "    \n    # Step 1. Initialize a set to store positive integers from the array.\n    positive_set = set()\n    \n    # Step 2. Iterate through the array and add positive integers to the set.\n    for i in range(1, n+1):\n        positive_set.add(i)\n    \n    # Step 3. Iterate through positive integers starting from 1.\n    for i in range(1, n+1):\n        if i not in positive_set:\n            return i\n    \n    # Step 4. If all positive integers are present, return the next positive integer after the maximum integer in the array.\n    return max(positive_set)+1\n"}
{"task_id": "Open/37", "completion": "    \n    if n == 0 or n == 1:\n        return 1\n    \n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    area = 0\n    length = l\n    breadth = b\n    while length > 0 and breadth > 0:\n        area = area + length * breadth\n        length = length - 1\n        breadth = breadth - 1\n    return area\n"}
{"task_id": "Open/39", "completion": "    sum = 0\n    for i in range(1,N+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    count_zeros = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            count_zeros = 0\n        else:\n            count_zeros += 1\n        if count_zeros > max_zeros:\n            max_zeros = count_zeros\n    if max_zeros == 0:\n        return -1\n    return max_zeros\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            length = 0\n            for j in range(i,n):\n                if arr[j] == 0:\n                    length += 1\n                else:\n                    break\n            if length > max_length:\n                max_length = length\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    max_min_segments = []\n    for i in range(0, n, k):\n        min_element = min(a[i:i+k])\n        max_min_segments.append(min_element)\n    return max(max_min_segments)\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            product = 1\n            for k in range(i,j+1):\n                product *= array[k]\n            if product <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    # Step 2. Initialize a variable \"sum\" as 0.\n    sum = 0\n    # Step 3. Iterate through the array.\n    for i in range(0, n):\n        # Step 4. Add the absolute difference between the current element and its index plus one to \"sum\".\n        sum += abs(i - arr[i])\n    # Step 5. Return \"sum\".\n    return sum\n"}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            diff = array[j] - array[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    # Step 1. Calculate the value of the equation ax + by for the given points (x1, y1) and (x2, y2).\n    a = x2 - x1\n    b = y2 - y1\n    c = -(a * x1 + b * y1)\n    \n    # Step 2. If the value is on the same side of the line as c, return True.\n    if (a * c - b * c) < 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a + 1):\n        xor = i ^ i\n        if xor == a:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_AND = 0\n    for i in range(L, R+1):\n        max_AND = max(max_AND, i & R)\n    return max_AND\n"}
{"task_id": "Open/50", "completion": "    smallest = None\n    for i in range(1,n+1):\n        if smallest == None:\n            smallest = i\n        elif i % smallest!= 0:\n            smallest = i\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "    result = 0\n    for i in range(n):\n        for j in range(n):\n            if (i+1)*(j+1)%2 == 1:\n                result ^= arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(0, N+1):\n        xor = i ^ i\n        if xor == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    # Step 1. Initialize a set to store unique elements.\n    unique = set()\n    # Step 2. Iterate through the array.\n    for i in range(len(a)):\n        # -If an element is already in the set, return False.\n        if a[i] in unique:\n            return False\n        # -Otherwise, add the element to the set.\n        else:\n            unique.add(a[i])\n    # Step 3. Return True. \n    return True\n"}
{"task_id": "Open/55", "completion": "    # Step 1. Convert the integer to binary representation.\n    binary = bin(n)\n    # Step 2. Check if the first bit is set to 1 and the last bit is set to 1.\n    if binary[0] == '1' and binary[-1] == '1':\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    current_partitions = 1\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            current_partitions += 1\n        else:\n            max_partitions = max(max_partitions, current_partitions)\n            current_partitions = 1\n    max_partitions = max(max_partitions, current_partitions)\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = var1 + var2\n    for i in range(2, N):\n        result = result + var1 + var2\n        var1 = var2\n        var2 = result\n    return result\n"}
{"task_id": "Open/59", "completion": "    result = arr[index]\n    for i in range(reversals):\n        for j in range(ranges):\n            temp = arr[index + j]\n            arr[index + j] = arr[index - j]\n            arr[index - j] = temp\n    return result\n"}
{"task_id": "Open/60", "completion": "    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i + j == n:\n                if isSquare(i) and isSquare(j):\n                    return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(b)):\n        if b[i] == a[0]:\n            count += 1\n        else:\n            return -1\n    return count\n"}
{"task_id": "Open/62", "completion": "    modified_string = \"\"\n    for i in range(len-2, -1, -1) :\n        if str[i] > str[i+1] :\n            str[i] -= 1\n            str[i+1:] = \"9\" * (len(str) - i - 1)\n        modified_string += str[i]\n    return modified_string\n"}
{"task_id": "Open/63", "completion": "    min_value = math.inf\n    for i in range(n):\n        running_sum = 0\n        for j in range(i, n):\n            running_sum += math.log(arr[j])\n        if running_sum < min_value:\n            min_value = running_sum * (n - i)\n    return min_value\n"}
{"task_id": "Open/64", "completion": "    max_len = 0\n    start = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            continue\n        curr_len = 1\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                break\n            curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n            start = i\n    if max_len > 0:\n        return s[start:start+max_len]\n    else:\n        return \"-1\"\n"}
{"task_id": "Open/65", "completion": "    # Initialize a counter dictionary to keep track of the count of each element in the array.\n    counter = {}\n    for i in range(n):\n        counter[a[i]] = counter.get(a[i], 0) + 1\n    # Sort the array based on the count of each element in the counter dictionary.\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Initialize a variable to keep track of the modified array length.\n    modified_array_length = 0\n    for i in range(len(sorted_counter)):\n        if sorted_counter[i][1] <= k:\n            modified_array_length += 1\n    # Iterate through the sorted array.\n    for i in range(modified_array_length):\n        if counter[sorted_counter[i][0]] <= k:\n            modified_array_length += 1\n    return modified_array_length\n"}
{"task_id": "Open/66", "completion": "    # Step 1. Calculate the size of the array after adding k elements.\n    size = n + k\n    \n    # Step 2. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 3. If the size is even, calculate the median by taking the average of the two middle elements.\n    if size % 2 == 0:\n        return (arr[size//2] + arr[size//2 - 1]) / 2\n    \n    # Step 4. If the size is odd, return the middle element as the median.\n    return arr[size//2]\n"}
{"task_id": "Open/67", "completion": "    positive = 0\n    negative = 0\n    zero = 0\n    for i in range(0, n):\n        if a[i] > 0:\n            positive += 1\n        elif a[i] < 0:\n            negative += 1\n        elif a[i] == 0:\n            zero += 1\n    if negative % 2 == 0:\n        step = positive + zero\n    else:\n        step = positive + zero + abs(negative - 1)\n    return step\n"}
{"task_id": "Open/68", "completion": "    # Step 1. Check if n is equal to 1. If so, return 0.\n    if n == 1:\n        return 0\n    \n    # Step 2. Create an empty list v.\n    v = []\n    \n    # Step 3. Subtract 1 from n.\n    n = n - 1\n    \n    # Step 4. Enter a while loop.\n    while n > 0:\n        v.append(n % 5)\n        n = n // 5\n    \n    # Step 5. Initialize a variable result to 0.\n    result = 0\n    \n    # Step 6. Iterate over the elements in the list v in reverse order.\n    for i in range(len(v) - 1, -1, -1):\n        result = result * 10 + v[i]\n    \n    # Step 7. Return 2 times the result.\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "    prev = None\n    for bit in range(0, 32):\n        if (n & (1 << bit)) and prev!= None:\n            if bit > prev:\n                return False\n        prev = bit\n    return True\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        return (x * 2) - n\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += (1 + 2 * i)\n    return sum\n"}
{"task_id": "Open/73", "completion": "    \n    # Step 1. Initialize a dictionary to store the count of each value in the array.\n    count = {}\n    \n    # Step 2. Iterate through the array and update the count of each value in the dictionary.\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # Step 3. Find the maximum value in the array that occurs the same number of times as its value.\n    max_value = 0\n    max_count = 0\n    for i in count:\n        if count[i] > max_count:\n            max_count = count[i]\n            max_value = i\n    \n    # Step 4. Return the maximum value.\n    return max_value\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n):\n        if a[i] > 0:\n            if a[i] & 1 == 1:\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    return int(bin(n)[2:], 2)\n"}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            changes += 1\n            A[i+1] = 0\n    return changes\n"}
{"task_id": "Open/77", "completion": "    return 180 * radian / math.pi\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += a + (i-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return 1\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n"}
{"task_id": "Open/81", "completion": "    board = [[False for i in range(8)] for j in range(8)]\n    count = 0\n    for i in range(8) :\n        board[row][column] = True\n        row += 1\n        column += 1\n        if row == 8 :\n            row = 0\n        if column == 8 :\n            column = 0\n        if board[row][column] == False :\n            count += 1\n            board[row][column] = True\n    return count\n"}
{"task_id": "Open/82", "completion": "    current_number = 0\n    numbers = []\n    for i in range(n):\n        numbers.append(current_number)\n        current_number = current_number + i\n    return numbers\n"}
{"task_id": "Open/83", "completion": "    \n    # Step 1. Create an empty list to store the last occurrences of each character in the string.\n    lastOccur = []\n    for i in range(len(s)) :\n        lastOccur.append(s[i])\n    \n    # Step 2. Iterate through the characters in the string and find the last occurrence of each character.\n    #         -Store the last occurrence in the list.\n    for i in range(len(s)) :\n        for j in range(len(lastOccur)) :\n            if s[i] == lastOccur[j] :\n                lastOccur[j] = s[i]\n                break\n    \n    # Step 3. Sort the string.\n    sortedString = sorted(lastOccur)\n    \n    # Step 4. Compare each character in the sorted string with its corresponding character in the original string.\n    #         -If a character is not in the correct position, swap it with the character at its last occurrence.\n    for i in range(len(sortedString)) :\n        for j in range(len(s)) :\n            if sortedString[i]"}
{"task_id": "Open/84", "completion": "    \n    # Step 1. Create an array of length n.\n    arr = []\n    for i in range(n):\n        arr.append(i)\n    \n    # Step 2. Fill the array with consecutive odd numbers followed by consecutive even numbers.\n    for i in range(n):\n        if i % 2 == 0:\n            arr[i] = arr[i] + arr[i+1]\n    \n    # Step 3. Calculate the sum of the elements in the array from index l-1 to index r.\n    sum = 0\n    for i in range(l-1, r):\n        sum = sum + arr[i]\n    \n    return sum\n"}
{"task_id": "Open/85", "completion": "    if x > y :\n        min = y\n    else :\n        min = x\n    for i in range(min, 1, -1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    current = A\n    for i in range(N-1):\n        current = current + B\n    return current\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    \n    # convert annual interest rate to monthly interest rate\n    r = r/12\n    \n    # convert loan tenure from years to months\n    t = t*12\n    \n    # calculate EMI\n    emi = p*r*(1+r)**t / ((1+r)**t - 1)\n    \n    return emi\n"}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range(1, A+1):\n        for j in range(1, B+1):\n            for k in range(1, C+1):\n                if i * k > j * j:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l, r+1):\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9:\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    # Step 1. Initialize a variable max_length to 0.\n    max_length = 0\n    # Step 2. Iterate through each number in arr.\n    for i in range(len(arr)):\n        # Step 3. Initialize a variable length to 1.\n        length = 1\n        # Step 4. Iterate through the remaining numbers in arr.\n        for j in range(i+1, len(arr)):\n            # Step 5. If the difference between the current number and the previous number is the same, increment length by 1.\n            if arr[i] - arr[j] == 0:\n                length += 1\n            # Step 6. If the difference between the current number and the previous number is not the same, update curr_num to the current number.\n            else:\n                # Step 7. If length is greater than max_length, update max_length to length.\n                if length > max_length:\n                    max_length = length\n    # Step 8. Return max_length.\n    return max_length\n"}
{"task_id": "Open/92", "completion": "    max_len = -1\n    for i in range(len(str)):\n        if (len(str[i:]) % 2 == 0) and (str[i:].isalpha()):\n            max_len = max(max_len, len(str[i:]))\n    return max_len\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        count += 1\n        n = n // 2\n    return count\n"}
{"task_id": "Open/94", "completion": "    if (n < 0) or (k < 0) :\n        return \"Invalid input\"\n    if (n == 0) and (k == 0) :\n        return \"a\"\n    if (n == 0) and (k > 0) :\n        return \"z\"\n    if (n == 0) and (k < 0) :\n        return \"a\"\n    if (n > 0) and (k > 0) :\n        if (k > 26) :\n            return \"z\"\n        else :\n            return chr(97 + k)\n    if (n > 0) and (k < 0) :\n        return \"a\"\n    if (n > 0) and (k == 0) :\n        return \"a\"\n    if (n < 0) and (k > 0) :\n        return \"z\"\n    if (n < 0) and (k < 0) :\n        return \"a\"\n    if (n < 0) and (k == 0) :\n        return \"a\"\n    if (n == 0) and (k == 0) :\n        return \"a\"\n    "}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        fuel = fuel / n\n        totalDistance = totalDistance + fuel\n        n = n - 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    totalSum = sum(arr)\n    if totalSum % 3!= 0:\n        return 0\n    \n    totalSum = totalSum // 3\n    \n    for i in range(n):\n        beforeSum = 0\n        afterSum = 0\n        \n        for j in range(i):\n            beforeSum += arr[j]\n        \n        for j in range(i+1, n):\n            afterSum += arr[j]\n        \n        if beforeSum == totalSum and afterSum == totalSum:\n            return 1\n    \n    return 0\n"}
{"task_id": "Open/97", "completion": "    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "    count = 0\n    while n > 0 :\n        count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/99", "completion": "    if a == b and b == c and k == 0:\n        return True\n    if k == 0:\n        return False\n    if a == b and k == -1:\n        return True\n    if a == b and k == 1:\n        return True\n    if a == c and k == -1:\n        return True\n    if a == c and k == 1:\n        return True\n    if b == c and k == -1:\n        return True\n    if b == c and k == 1:\n        return True\n    return False\n"}
{"task_id": "Open/100", "completion": "    \n    # Step 1. Convert x and y to binary representation.\n    x = bin(x)\n    y = bin(y)\n    \n    # Step 2. Shift x to the left by 32 bits and perform a bitwise OR operation with the original x.\n    x = x[2:] + x[:2]\n    \n    # Step 3. Check if the resulting value is equal to y. If it is, return True.\n    if x == y:\n        return True\n    \n    # Step 4. If it is not, continue shifting the value to the right by 1 bit until it is less than y.\n    while x!= y:\n        x = x[1:] + x[:1]\n        if x == y:\n            return True\n    \n    # Step 5. If the value becomes less than y without being equal to it, return False.\n    return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i]!= s[i-1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    arr.sort()\n    removal = 0\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) > 1:\n            removal += 1\n    return removal\n"}
{"task_id": "Open/104", "completion": "    # Step 1. Convert `left` and `right` to binary representation.\n    left_binary = bin(left)[2:]\n    right_binary = bin(right)[2:]\n    \n    # Step 2. Initialize a variable `max_set_bits` to 0.\n    max_set_bits = 0\n    \n    # Step 3. Iterate through the bits in the binary representation of `left`.\n    for i in range(len(left_binary)) :\n        # Step 4. If the current bit is 1 and `max_set_bits` is less than or equal to the current position, increment `max_set_bits` by 1.\n        if left_binary[i] == '1' and max_set_bits <= i :\n            max_set_bits += 1\n    \n    # Step 5. Return `max_set_bits`.\n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "    power = 1\n    while power <= n:\n        power = power * 2\n    return power\n"}
{"task_id": "Open/106", "completion": "    if n <= 1:\n        return False\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n\n"}
{"task_id": "Open/107", "completion": "    \n    # Step 1. Calculate the number of centuries and leap centuries in the year.\n    centuries = int(N/100)\n    leap_centuries = int((N-centuries*100)/400)\n    \n    # Step 2. Calculate the number of leap years by shifting the year by 2 bits.\n    leap_years = int(N/400)\n    \n    # Step 3. Subtract the number of leap years from the total number of days in the year.\n    non_leap_days = int((N-leap_years*400)/100)\n    \n    # Step 4. If there are any centuries or leap centuries, adjust the number of non-leap years and leap years accordingly.\n    if centuries > 0:\n        non_leap_days += centuries*400\n    if leap_centuries > 0:\n        non_leap_days += leap_centuries*400\n        leap_years += leap_centuries\n    \n    # Step 5. Calculate the total number of days by adding the number of non-leap years and twice the number of leap years.\n    total"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else:\n        return (3 * a - 2)\n"}
{"task_id": "Open/109", "completion": "    if n == 0:\n        return 0\n    else:\n        return 1 + frequencyDigits(n//10, d) if n%10 == d else frequencyDigits(n//10, d)\n"}
{"task_id": "Open/110", "completion": "    \n    # Step 1. Convert the integer to a string.\n    n = str(n)\n    \n    # Step 2. Iterate through each character in the string.\n    for i in n :\n        if n.count(i) > 1 :\n            return False\n    \n    # Step 3. Return True.\n    return True\n"}
{"task_id": "Open/111", "completion": "    count = 0\n    for i in a:\n        if i % 5 == 0 or i % 3 == 0:\n            count += 1\n        else:\n            count = 0\n        if count == n:\n            return True\n    return False\n"}
{"task_id": "Open/112", "completion": "    \n    #Initialize an array with length n+1 and set the first two elements to 4 and 7 respectively.\n    arr = [0] * (n+1)\n    arr[0] = 4\n    arr[1] = 7\n    \n    #Iterate through the indices from 3 to n+1.\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            arr[i] = arr[i//2] + 4\n        else:\n            arr[i] = arr[i//2] + 7\n    \n    #Return the value at index n of the array.\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "    # Your code here\n    \n    # initialize an array with length n+1 and set the first two elements to 3 and 5\n    arr = [0] * (n+1)\n    arr[0] = 3\n    arr[1] = 5\n    \n    # iterate through the indices from 3 to n+1\n    for i in range(2, n+1):\n        # if the index is odd, set the element at index i to the element at index i//2 multiplied by 10 and added with 3\n        if i % 2!= 0:\n            arr[i] = arr[i//2] * 10 + 3\n        # if the index is even, set the element at index i to the element at index (i//2)-1 multiplied by 10 and added with 5\n        else:\n            arr[i] = arr[i//2] * 10 + 5\n    \n    # return the element at index n\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "    # Your code here\n    # initialize an array with length n+1 and the first two elements set to 1 and 2 respectively.\n    arr = [0] * (n+1)\n    arr[0] = 1\n    arr[1] = 2\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            arr[i] = arr[i//2] + 1\n        else:\n            arr[i] = arr[i//2] + 2\n    return arr[n]\n"}
{"task_id": "Open/115", "completion": "    result = 0\n    for i in range(len(a)) :\n        result += a[i]\n    return result % 11 == 0\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b + b * h + l * h\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    # Step 1. Split the input string into a list of words.\n    words = string.split()\n    # Step 2. Iterate through each word in the list.\n    for i in range(len(words)):\n        # Step 3. Capitalize the first letter of the word.\n        words[i] = words[i][0].upper() + words[i][1:]\n        # Step 4. Capitalize the last letter of the word.\n        words[i] = words[i][0].upper() + words[i][1:]\n    # Step 5. Concatenate the list of words back into a string.\n    return \" \".join(words)\n"}
{"task_id": "Open/118", "completion": "    return int(math.ceil(math.sqrt(8 * p + 1) - 1) / 2)\n"}
{"task_id": "Open/119", "completion": "    # Your code here\n    return len(set(arr)) == len(arr)\n"}
{"task_id": "Open/120", "completion": "    \n    # Initialize a set to store distinct two-character codes.\n    distinct_two_character_codes = set()\n    \n    # Iterate through the string.\n    for i in range(len(string) - 1) :\n        # Create a two-character code by concatenating the current character and the remaining character.\n        two_character_code = string[i] + string[i + 1]\n        # Add the two-character code to the set.\n        distinct_two_character_codes.add(two_character_code)\n    \n    # Return the count of distinct two-character codes in the set.\n    return len(distinct_two_character_codes)\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    current_number = 0\n    maximum_number = 0\n    \n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            current_number = current_number * 10 + int(ss[i])\n        else :\n            if current_number > maximum_number :\n                maximum_number = current_number\n            current_number = 0\n    \n    if current_number > maximum_number :\n        maximum_number = current_number\n    \n    return maximum_number\n"}
{"task_id": "Open/123", "completion": "    longest = \"\"\n    for i in range(0, length) :\n        if isInteger(s[i]) :\n            if isInteger(s[i+1]) :\n                continue\n            else :\n                if len(longest) < len(s[i:]) :\n                    longest = s[i:]\n    return longest\n"}
{"task_id": "Open/124", "completion": "    \n    # Step 1. Initialize variables N and M.\n    N = 0\n    M = 0\n    \n    # Step 2. While K is greater than 0 and either N or M is greater than 0:\n    while K > 0 and (N > 0 or M > 0):\n        # Step 2.1. Subtract the smaller value between N and M from the larger value.\n        if N > M:\n            N -= M\n        else:\n            M -= N\n        # Step 2.2. Decrement K by 1.\n        K -= 1\n    # Step 3. If both N and M are greater than 0, return the product of N and M.\n    if N > 0 and M > 0:\n        return N * M\n    # Step 4. Otherwise, return 0.\n    else:\n        return 0\n"}
{"task_id": "Open/125", "completion": "    # Step 1. Iterate through the string.\n    for i in range(0, len(string) - 1) :\n        if string[i] == string[i + 1] :\n            return False\n    # Step 2. Check if the length of the string is equal to the given length.\n    if len(string) == length :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/126", "completion": "    i = 1\n    while i <= n:\n        i = i * 2\n    return i - 1\n"}
{"task_id": "Open/127", "completion": "    \n    # Step 1. Convert A and B to strings.\n    A = str(A)\n    B = str(B)\n    \n    # Step 2. Get the length of A and B.\n    lenA = len(A)\n    lenB = len(B)\n    \n    # Step 3. If the length of A is equal to the length of B, return True.\n    if lenA == lenB:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/128", "completion": "    return abs(x - y)!= 1\n"}
{"task_id": "Open/129", "completion": "    \n    # Step 1. Initialize the first three strings in the sequence as \"1\", \"12\", and \"1213\".\n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    \n    # Step 2. Iterate from 3 to n.\n    for i in range(3, n+1):\n        # Step 3. Update Sn_1, Sn_2, and Sn_3 by concatenating the previous two strings.\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n        Sn_3 = Sn_1 + Sn_2 + Sn_3\n    \n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    # Step 1. Initialize an empty list to store the minimum number of steps for each element.\n    minSteps = []\n    \n    # Step 2. Initialize a variable to store the previous element in the array.\n    previous = arr[0]\n    \n    # Step 3. Iterate through the array.\n    for i in range(1, n):\n        # Step 4. Calculate the absolute difference between the current element and the previous element.\n        diff = abs(arr[i] - previous)\n        \n        # Step 5. Add the absolute difference to the list of minimum steps.\n        minSteps.append(diff)\n        \n        # Step 6. Update the previous element to the current element.\n        previous = arr[i]\n    \n    # Step 7. Return the list of minimum steps.\n    return minSteps\n"}
{"task_id": "Open/131", "completion": "    \n    # Step 1. Calculate the remainder of dividing the integer by 4.\n    remainder = n % 4\n    \n    # Step 2. If the remainder is 0 or 3, return 0.\n    if remainder == 0 or remainder == 3:\n        return 0\n    \n    # Step 3. If the remainder is 1 or 2, return 1.\n    elif remainder == 1 or remainder == 2:\n        return 1\n    \n    # Step 4. Otherwise, return None.\n    else:\n        return None\n"}
{"task_id": "Open/132", "completion": "    m = 0\n    for i in range(1,N+1):\n        if i % a == 0:\n            m += i\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if ( arr[0] % 2!= 0 ) or ( arr[-1] % 2!= 0 ) or ( len(arr) % 2!= 0 ) :\n        return False\n    else:\n        return True\n"}
{"task_id": "Open/135", "completion": "    count = 0\n    if N == 1:\n        for i in range(L,R+1):\n            count += 1\n        return count\n    else:\n        for i in range(L,R+1):\n            count += 1\n        return count + countSum(N-2,L,R)\n"}
{"task_id": "Open/136", "completion": "    arr.sort()\n    result = 1\n    for i in range(1, n+1):\n        if i not in arr:\n            return i\n    return result\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1. Convert the string to a list of characters.\n    s = list(s)\n    \n    # Step 2. Sort the list of characters.\n    s.sort()\n    \n    # Step 3. Join the sorted list of characters into a string.\n    s = ''.join(s)\n    \n    # Step 4. Convert the string back to an integer.\n    return int(s)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for i in s:\n        sum += ord(i)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    while S >= A:\n        count += S // A\n        S = S % A\n    if S > 0:\n        return -1\n    return count\n"}
{"task_id": "Open/141", "completion": "    return x * y // math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "    \n    # Step 1. Convert the integer to binary representation.\n    binary_representation = bin(n)\n    \n    # Step 2. Count the number of trailing zeros in the binary representation.\n    count = 0\n    for i in range(len(binary_representation)-1, -1, -1):\n        if binary_representation[i] == '0':\n            count += 1\n        else:\n            break\n    \n    # Step 3. Return the count of trailing zeros.\n    return count\n"}
{"task_id": "Open/143", "completion": "    max_index = 0\n    for i in range(n):\n        sum_left = 0\n        sum_right = 0\n        for j in range(i):\n            sum_left += arr[j]\n        for k in range(i,n):\n            sum_right += arr[k]\n        if sum_left > sum_right:\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/144", "completion": "    max_len = 0\n    for i in range(n) :\n        curr_len = 1\n        for j in range(i) :\n            if arr[j] < arr[i] :\n                curr_len += 1\n        if curr_len > max_len :\n            max_len = curr_len\n    return max_len\n"}
{"task_id": "Open/145", "completion": "    \n    # Step 1. Iterate through the array.\n    for i in range(n) :\n        # Step 2. Find the minimum element and the maximum element.\n        min_element = arr[i]\n        max_element = arr[i]\n        for j in range(i+1,n) :\n            if arr[j] < min_element :\n                min_element = arr[j]\n            if arr[j] > max_element :\n                max_element = arr[j]\n        # Step 3. Calculate the range between the minimum and maximum elements.\n        range_between_min_max = max_element - min_element\n        # Step 4. Check if k is greater than or equal to the range.\n        if k >= range_between_min_max :\n            # Step 5. Check if it is possible to make all elements of the array equal by adding or subtracting k from each element.\n            for j in range(n) :\n                if arr[j]!= min_element + k :\n                    return -1\n            return min_element + k\n    return -1\n"}
{"task_id": "Open/146", "completion": "    length = 1\n    while K % 10 == 0:\n        K = K // 10\n        length += 1\n    if K!= 1:\n        return -1\n    return length\n"}
{"task_id": "Open/147", "completion": "    min_ops = 0\n    for i in range(n):\n        min_ops += abs(arr[i] - min(arr))\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "    sum = 3\n    for i in range(1, n):\n        sum = sum + (i-1)\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s**0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    # Step 1. Convert the integer to its binary representation.\n    binary_rep = bin(n)[2:]\n    # Step 2. Check if the binary representation contains consecutive 1's.\n    if binary_rep.count('1') == len(binary_rep):\n        return False\n    else:\n        return True\n"}
{"task_id": "Open/153", "completion": "    previous_vowel = s[0]\n    for i in range(1, len(s)):\n        if s[i] in \"aeiou\":\n            if s[i] < previous_vowel:\n                return False\n        previous_vowel = s[i]\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low,high+1):\n        last_digit = int(str(i)[-1])\n        if last_digit >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    min_diff = math.inf\n    for i in range(1, n+1):\n        abs_diff = abs(i - math.pow(2, i))\n        if abs_diff < min_diff:\n            min_diff = abs_diff\n    return min_diff\n"}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        return (1 + sqrt(3)) * r**2 / 4\n"}
{"task_id": "Open/157", "completion": "    # Your code here\n    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    if ar == [] or size == 0:\n        return 1\n    if size == 1:\n        return ar[0]\n    if ar[mid]!= ar[mid + 1]:\n        return ar[mid]\n    if ar[mid]!= ar[mid - 1]:\n        return ar[mid] + 1\n    return search(ar, mid - 1) + 1\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    \n    # Step 1. Initialize an empty dictionary to store the count of each element.\n    count = {}\n    \n    # Step 2. Iterate through the array.\n    for i in arr:\n        # If the element is not in the dictionary, add it with a count of 1.\n        if i not in count:\n            count[i] = 1\n        # If the element is already in the dictionary, increment its count by 1.\n        else:\n            count[i] += 1\n    \n    # Step 3. Iterate through the array again.\n    for i in arr:\n        # If the count of an element is odd, return that element.\n        if count[i] % 2!= 0:\n            return i\n    \n    # Step 4. If no element is found, return None.\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if (sx == dx and sy == dy) :\n        return True\n    if (sx == dx and sy!= dy) :\n        return True\n    if (sy == dy and sx!= dx) :\n        return True\n    if (sx!= dx and sy!= dy) :\n        return False\n    if (sx == dx and sy == dy) :\n        return True\n    if (sy == dy and sx!= dx) :\n        return True\n    if (sx!= dx and sy == dy) :\n        return True\n    if (sx!= dx and sy!= dy) :\n        return False\n    return False\n"}
{"task_id": "Open/163", "completion": "    if n % 2 == 1:\n        return 0\n    else:\n        count = 0\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                count += 1\n            if i % 4 == 0:\n                count += 1\n        return count\n"}
{"task_id": "Open/164", "completion": "    \n    # Step 1. Initialize a dictionary to store the count of each element in the array.\n    count = {}\n    \n    # Step 2. Iterate through the array and update the count of each element in the dictionary.\n    for i in range(n):\n        count[arr[i]] = count.get(arr[i], 0) + 1\n    \n    # Step 3. Calculate the count of all possible subsequences by multiplying the values in the dictionary.\n    count = 1\n    for i in count.keys():\n        count *= count[i]\n    \n    # Step 4. Return the count of all possible subsequences.\n    return count\n"}
{"task_id": "Open/165", "completion": "    count = 1\n    if height > 0 :\n        count += AVLnodes(height-1)\n        count += AVLnodes(height-2)\n    return count\n"}
{"task_id": "Open/166", "completion": "    steps = 0\n    diff = abs(source - dest)\n    if diff == 0:\n        return steps\n    elif diff > 0:\n        steps += 1\n    elif diff < 0:\n        steps -= 1\n    if diff!= step:\n        return sys.maxsize\n    return steps\n"}
{"task_id": "Open/167", "completion": "    if n == 1:\n        return \"1\"\n    else:\n        current_term = \"1\"\n        count = 1\n        for i in range(2, n+1):\n            if current_term[-1]!= current_term[-2]:\n                current_term = current_term + str(count)\n                count = 1\n            else:\n                count += 1\n        return current_term\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    for i in range(1, N+1):\n        product = 1\n        for j in range(0, N):\n            product *= arr[j]\n        if product >= 0:\n            max_length = max(max_length, i)\n    return max_length\n"}
{"task_id": "Open/169", "completion": "    # Step 1. Calculate the absolute values of m and n.\n    m = abs(m)\n    n = abs(n)\n    \n    # Step 2. Calculate the normal value using the formula: N = (|m| * |n|) / sqrt((|m| * |m|) + (|n| * |n|)).\n    n = math.sqrt(m * m + n * n)\n    \n    # Step 3. Return the calculated normal value.\n    return n\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    count = 0\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l,r+1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    mask = (1 << m) - 1\n    return n ^ mask\n"}
{"task_id": "Open/174", "completion": "    count = 0\n    for i in range(L, R + 1):\n        if i % 9 == 0:\n            count += 1\n        else:\n            count += i % 9\n    return count\n"}
{"task_id": "Open/175", "completion": "    product = n * math.log(n, 10)\n    product = str(product)\n    product = product[:k]\n    return product\n"}
{"task_id": "Open/176", "completion": "    if A == None or len(A) == 0 :\n        return -1\n    \n    for i in range(1,len(A)) :\n        if A[i] > max(A[:i]) and A[i] < min(A[i+1:]):\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    sum_a = sum(a)\n    sum_b = sum(b)\n    sum_c = sum(c)\n    diff = sum_c - sum_a\n    if diff < 0:\n        diff = -diff\n    return diff\n"}
