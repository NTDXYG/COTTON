{"task_id": "Open/0", "completion": "    \n    sum = 0\n    count = 0\n    \n    for i in arr :\n        sum += i\n        \n        if sum > K :\n            count += 1\n            \n    return count\n\n\n"}
{"task_id": "Open/1", "completion": "    min_value = arr[0]\n    min_count = 1\n    for i in range(1,n) :\n        if arr[i] < min_value :\n            min_value = arr[i]\n            min_count = 1\n        else :\n            min_count += 1\n    return min_count\n\n"}
{"task_id": "Open/2", "completion": "    s = bin(n)\n    s = s[2:]\n    for i in range(l,r+1) :\n        if s[i]!= \"1\" :\n            return \"No\"\n    return \"Yes\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/4", "completion": "    total = 0\n    for i in a :\n        total += i\n    if total == n :\n        return True\n    else :\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/5", "completion": "    \n    # Step 1. Convert the integer to its binary representation.\n    bin_x = bin(x)[2:]\n    \n    # Step 2. Count the number of '1' bits in the binary representation.\n    count = 0\n    for i in bin_x :\n        if i == '1' :\n            count += 1\n    \n    # Step 3. If the count is odd, return 1. Otherwise, return 0. \n    if count % 2 == 1 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in vec :\n        if i < 0 :\n            output.append(i)\n        else :\n            output.append(i + 1)\n    return output\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    length = 1\n    for i in range( n ) :\n        if arr[i] == arr[i-1] :\n            length += 1\n        else :\n            max_length = max( max_length, length )\n            length = 1\n    return max_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/8", "completion": "\n    # Step 1. Initialize an empty list to store the distinct prime factors.\n    distinct_prime_factors = []\n\n    # Step 2. Iterate through each integer in the input list.\n    for i in a :\n\n        # Step 3. For each integer, find its prime factors and add them to the list of distinct prime factors.\n        for j in range(2, int(math.sqrt(i)) + 1) :\n            if i % j == 0 :\n                distinct_prime_factors.append(j)\n\n    # Step 4. Count the number of distinct prime factors in the list.\n    count = 0\n    for j in distinct_prime_factors :\n        count += 1\n\n    # Step 5. Return the count. \n    return count\n"}
{"task_id": "Open/9", "completion": "    arr.sort( reverse = True )\n    return arr[k-1] + arr[0] - arr[k]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    A_queue = deque(A)\n    B_queue = deque(B)\n    while A_queue :\n        if A_queue[0] == B_queue[0] :\n            total_time += 1\n            A_queue.popleft()\n            B_queue.popleft()\n        else :\n            B_queue.append(A_queue.popleft())\n            A_queue.append(B_queue.popleft())\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in array :\n        if i!= 0 and i!= 2 and i % 2 == 0 :\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range( len( s ) ) :\n        for j in range( i, len( s ) ) :\n            if len( set( s[i:j+1] ) ) <= k :\n                count += 1\n    return count\n\n"}
{"task_id": "Open/13", "completion": "    current_number = 2\n    while current_number <= n :\n        if n % current_number == 0 :\n            return True\n        current_number += 1\n    return False\n"}
{"task_id": "Open/14", "completion": "    result = \"\"\n    if n % 4 == 0 :\n        result = n\n    elif n % 4 == 1 :\n        result = 1\n    elif n % 4 == 2 :\n        result = n + 1\n    elif n % 4 == 3 :\n        result = 0\n    else :\n        result = \"\"\n    return result\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    b = pow(a,n-1,n)\n    for i in range(t) :\n        a = random.randint(2,n-1)\n        b = pow(a,n-1,n)\n        if b == 1 or b == n-1 :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "    # Step 1.\n    for i in range(0,n-1) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    # Step 2.\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range( length ) :\n        if s[i] == '1' :\n            count += 1\n        else :\n            count -= 1\n    return min( count, length )\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range ( 1, n + 1 ) :\n        if math.pow ( i, i ) == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 1\n    else :\n        return x * product( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        elif i % 4 == 1 :\n            count1 += 1\n        elif i % 4 == 2 :\n            count2 += 1\n        elif i % 4 == 3 :\n            count3 += 1\n\n    if count0 == 4 and count1 == 4 and count2 == 4 and count3 == 4 :\n        return 1\n    else :\n        return 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/22", "completion": "    max_len = 0\n    curr_len = 1\n    for i in range( n ) :\n        if arr[i] > arr[i-1] :\n            curr_len += 1\n        else :\n            max_len = max( max_len, curr_len )\n            curr_len = 1\n    return max_len\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        return count\n    if sum == 0 :\n        count += 1\n    return subsetSum ( arr, n, i + 1, sum, count ) + subsetSum ( arr, n, i + 1, sum - arr[i], count )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/24", "completion": "    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return (n * (n + 1)) // 2\n"}
{"task_id": "Open/25", "completion": "    sum = 0\n    for i in range(1,n+1) :\n        sum = sum + i**2\n    return sum, sum, sum + 1\n"}
{"task_id": "Open/26", "completion": "    \n    max_sum = 0\n    for i in range( 1, n + 1 ) :\n        if n % i == 0 :\n            sum = 0\n            for j in range( 1, i + 1 ) :\n                if i % j == 0 :\n                    sum += j\n            if sum > max_sum :\n                max_sum = sum\n    return max_sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/27", "completion": "    if x < y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return ( (b - a) / a ) * 100\n"}
{"task_id": "Open/30", "completion": "    \n    sum_squares = 0\n    for i in range ( 1, n+1 ) :\n        sum_squares = sum_squares + i * i\n    return sum_squares / n\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n\n"}
{"task_id": "Open/32", "completion": "    \n    # Step 1. Calculate the number of chicks by raising 3 to the power of (n-1).\n    chicks = 0\n    for i in range(1, n+1) :\n        chicks += 3**i\n    \n    # Step 2. Return the number of chicks. \n    return chicks\n\n"}
{"task_id": "Open/33", "completion": "    \n    # Step 1. Initialize the first term of the sequence as 1.\n    firstTerm = 1\n    \n    # Step 2. Iterate from 2 to n.\n    for i in range ( 2, n + 1 ) :\n        # Step 3. Return the nth term.\n        firstTerm = firstTerm * 2 + i\n        \n    return firstTerm\n"}
{"task_id": "Open/34", "completion": "    \n    count = 0\n    for i in range( len(a) ) :\n        for j in range( i + 1, len(a) ) :\n            if a[i] * a[j] < k :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1) :\n        str_i = str(i)\n        count += str_i.count(d)\n    return count\n"}
{"task_id": "Open/36", "completion": "    \n    # Step 1. Initialize a set to store positive integers from the array.\n    set = set()\n    for i in arr :\n        set.add(i)\n    \n    # Step 2. Iterate through the array and add positive integers to the set.\n    for i in arr :\n        if i not in set :\n            return i\n    \n    # Step 3. Iterate through positive integers starting from 1.\n        # -If the integer is not in the set, return it.\n    for i in range(1,n+1) :\n        if i not in set :\n            return i\n    \n    # Step 4. If all positive integers are present, return the next positive integer after the maximum integer in the array. \n    return n+1\n\n"}
{"task_id": "Open/37", "completion": "\n    if n == 0 or n == 1 :\n        return 1\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    area = 0\n    length = l\n    breadth = b\n    while length > 0 and breadth > 0 :\n        area += l * breadth\n        length -= 1\n        breadth -= 1\n    return area\n"}
{"task_id": "Open/39", "completion": "    return sum( range( 1, N + 1 ) )\n"}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    count_zeros = 0\n    for i in range( n ) :\n        if arr[i] == 1 :\n            count_zeros += 1\n        else :\n            if count_zeros > max_zeros :\n                max_zeros = count_zeros\n            count_zeros = 0\n    if max_zeros > 0 :\n        return max_zeros\n    else :\n        return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range( n ) :\n        if arr[i] == 0 :\n            max_length = max( max_length, i+1 )\n    return max_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/42", "completion": "    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0], a[-1])\n    else :\n        return max(a)\n\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range( n ) :\n        for j in range( n ) :\n            if array[i] * array[j] <= k :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/44", "completion": "    arr.sort()\n    sum = 0\n    for i in range(n) :\n        sum += abs(arr[i] - i + 1)\n    return sum\n"}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    cost = 0\n    for i in range(1,n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n        cost += min_element\n    return cost\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range( len( array ) ) :\n        for j in range( len( array ) ) :\n            if i!= j :\n                max_diff = max( max_diff, array[i] - array[j] )\n    return max_diff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/47", "completion": "    return a * x1 + b * y1 + c == 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range ( 0, a ) :\n        count += 1\n        count ^= i\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_AND = 0\n    for i in range( L, R + 1 ) :\n        max_AND = max( max_AND, i & i )\n    return max_AND\n\n"}
{"task_id": "Open/50", "completion": "    \n    smallest = None\n    for i in range(1,n) :\n        if a[i] % a[i-1] == 0 :\n            smallest = a[i]\n    return smallest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum += 1 / 3 ** i\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/52", "completion": "    result = 0\n    for i in range( n ) :\n        for j in range( n ) :\n            if ( arr[i][j] % 2 ) :\n                for k in range( n ) :\n                    result ^= arr[i][k]\n    return result\n"}
{"task_id": "Open/53", "completion": "    \n    count = 0\n    for i in range(N) :\n        count += i ^ i\n    return count\n"}
{"task_id": "Open/54", "completion": "    \n    # Step 1. Initialize a set to store unique elements.\n    unique = set()\n    \n    # Step 2. Iterate through the array.\n    for i in a :\n        if i in unique :\n            return False\n        else :\n            unique.add(i)\n    \n    # Step 3. Return True. \n    return True\n"}
{"task_id": "Open/55", "completion": "    \n    # Step 1. Convert the integer to binary representation.\n    bin_n = bin(n)\n    # Step 2. Check if the first bit is set to 1 and the last bit is set to 1.\n    if bin_n[0] == '1' and bin_n[-1] == '1' :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "    \n    max_partitions = 0\n    current_partitions = 1\n    \n    for i in range( len( s ) ) :\n        if s[i] == s[i-1] :\n            current_partitions += 1\n        else :\n            max_partitions = max( max_partitions, current_partitions )\n            current_partitions = 1\n    \n    max_partitions = max( max_partitions, current_partitions )\n    \n    return max_partitions\n\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2,N+1) :\n        result = result + var1 * var2\n        var1 = var2\n        var2 = result\n    return result\n\n"}
{"task_id": "Open/59", "completion": "    \n    result = arr[index]\n    for i in range(reversals) :\n        for j in range(len(ranges)) :\n            if ranges[j][0] <= index <= ranges[j][1] :\n                arr[index] = arr[j]\n                index = j\n                break\n    return result\n\n"}
{"task_id": "Open/60", "completion": "    for i in range ( 1, n + 1 ) :\n        for j in range ( 1, i + 1 ) :\n            if i ** 2 + j ** 2 == n :\n                return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in b :\n        if i == a[0] :\n            count += 1\n        else :\n            return -1\n    return count\n"}
{"task_id": "Open/62", "completion": "    modified_string = \"\"\n    for i in range( len( str ) - 1 ) :\n        if str[i] > str[i+1] :\n            modified_string += str[i]\n            modified_string += str[i+1]\n            modified_string += str[i]\n            modified_string += str[i+1]\n            modified_string += str[i]\n            modified_string += str[i+1]\n            modified_string += str[i]\n            modified_string += str[i+1]\n            modified_string += str[i]\n            modified_string += str[i+1]\n            modified_string += str[i]\n            modified_string += str[i+1]\n            modified_string += str[i]\n            modified_string += str[i+1]\n            modified_string += str[i]\n            modified_string += str[i+1]\n            modified_string += str[i]\n            modified_string += str[i+1]\n            modified_string += str[i]\n            modified_string += str[i+1"}
{"task_id": "Open/63", "completion": "    min_value = float(\"inf\")\n    running_sum = 0\n    for i in range(n) :\n        running_sum += math.log(arr[i])\n        if running_sum < math.log(min_value) * n :\n            min_value = arr[i]\n    return min_value\n\n\n"}
{"task_id": "Open/64", "completion": "    \n    max_len = 0\n    start = 0\n    curr_len = 0\n    \n    for i in range( len( s ) ) :\n        if s[i] == '1' :\n            curr_len += 1\n            if curr_len > max_len :\n                max_len = curr_len\n                start = i\n        else :\n            curr_len = 1\n    \n    if max_len == 0 :\n        return \"-1\"\n    \n    return s[start:start+max_len]\n"}
{"task_id": "Open/65", "completion": "    counter = {}\n    for i in a :\n        if i in counter :\n            counter[i] += 1\n        else :\n            counter[i] = 1\n    sorted_a = sorted(counter.items(), key = lambda x: x[1])\n    modified_length = 0\n    for i in range(n) :\n        if counter[sorted_a[i][0]] <= k :\n            modified_length += 1\n            a[i] = sorted_a[i][0]\n    return modified_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/66", "completion": "    if k == 0 :\n        return 0\n    if n == 0 :\n        return 0\n    if k == 1 :\n        return (arr[0] + arr[n-1])/2\n    if k == 2 :\n        return (arr[0] + arr[n-1] + arr[n-2])/3\n    if k == 3 :\n        return (arr[0] + arr[n-1] + arr[n-2] + arr[n-3])/4\n    if k == 4 :\n        return (arr[0] + arr[n-1] + arr[n-2] + arr[n-3] + arr[n-4])/5\n    if k == 5 :\n        return (arr[0] + arr[n-1] + arr[n-2] + arr[n-3] + arr[n-4] + arr[n-5])/6\n    if k == 6 :\n        return (arr[0] + arr[n-1] + arr[n-2] + arr[n-3] + arr[n-4] +"}
{"task_id": "Open/67", "completion": "    positive = 0\n    negative = 0\n    zero = 0\n    for i in a :\n        if i == 1 :\n            positive += 1\n        elif i == -1 :\n            negative += abs(i)\n        else :\n            zero += 1\n    if negative % 2 == 0 :\n        negative += zero\n    if negative % 2 == 1 :\n        negative += 2\n    return positive + negative + abs(negative)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/68", "completion": "    \n    if n == 1 :\n        return 0\n    else :\n        v = []\n        while n % 5 == 0 :\n            v.append(n % 5)\n            n = n // 5\n        result = 0\n        for i in reversed(v) :\n            result = result * 10 + i\n        return result * 2\n"}
{"task_id": "Open/69", "completion": "    \n    prev = None\n    for i in range( 32 ) :\n        if n & 1 :\n            if prev is not None :\n                if n > prev :\n                    return False\n            else :\n                return False\n        prev = n\n        n >>= 1\n    return True\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        return n - x\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range ( n ) :\n        sum += 2\n    return sum\n\n"}
{"task_id": "Open/72", "completion": "    \n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum = sum + i\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/73", "completion": "    dic = {}\n    for i in arr :\n        if i in dic :\n            dic[i] += 1\n        else :\n            dic[i] = 1\n    maxm = -1\n    for i in dic :\n        if dic[i] == n :\n            maxm = i\n    return maxm\n"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in a :\n        if ( i & ( i-1 ) ) == 0 :\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/75", "completion": "    return int(bin(n)[2:],2)\n"}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range( n ) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            changes += 1\n            A[i+1] = 0\n    return changes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/77", "completion": "    return radian * 180 / math.pi\n"}
{"task_id": "Open/78", "completion": "    return math.floor( n / 2 )\n"}
{"task_id": "Open/79", "completion": "    \n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum += a + ( i - 1 ) * d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    \n    if n % 2 == 0 :\n        return 1\n    \n    power = 1\n    \n    while power * 2 <= n :\n        power = power * 2\n    \n    return power\n"}
{"task_id": "Open/81", "completion": "    board = [[False for i in range(8)] for j in range(8)]\n    board[row][column] = True\n    count = 0\n    for i in range(moves) :\n        row = row + 1\n        if row > 8 :\n            row = row - 1\n        column = column + 1\n        if column > 8 :\n            column = column - 1\n        if row < 0 or row >= 8 :\n            row = row + 1\n        if column < 0 or column >= 8 :\n            column = column + 1\n        if board[row][column] :\n            count += 1\n            board[row][column] = False\n    return count\n"}
{"task_id": "Open/82", "completion": "    \n    current_number = 0\n    numbers = []\n    \n    for i in range(n) :\n        current_number = current_number + i\n        numbers.append(current_number)\n    \n    return numbers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/83", "completion": "\n    # Step 1. Create an empty list to store the last occurrences of each character in the string.\n    lastOccurrences = []\n    for i in range(len(s)) :\n        lastOccurrences.append(s[i])\n\n    # Step 2. Iterate through the characters in the string and find the last occurrence of each character.\n    # -Store the last occurrence in the list.\n    for i in range(len(s)) :\n        if s[i] not in lastOccurrences :\n            lastOccurrences.append(s[i])\n\n    # Step 3. Sort the string.\n    lastOccurrences.sort()\n\n    # Step 4. Compare each character in the sorted string with its corresponding character in the original string.\n    # -If a character is not in the correct position, swap it with the character at its last occurrence.\n    for i in range(len(s)) :\n        if s[i] not in lastOccurrences :\n            s[i], s[lastOccurrences.index(s[i])] = s[lastOccurrences.index(s[i])], s[i]\n\n"}
{"task_id": "Open/84", "completion": "    \n    # Step 1. Create an array of length n.\n    arr = [0] * n\n    \n    # Step 2. Fill the array with consecutive odd numbers followed by consecutive even numbers.\n    for i in range( l, r + 1 ) :\n        if ( i % 2 == 0 ) :\n            arr[i] = arr[i] + 1\n        else :\n            arr[i] = arr[i] + 2\n    \n    # Step 3. Calculate the sum of the elements in the array from index l-1 to index r.\n    sum = 0\n    for i in range( l, r + 1 ) :\n        sum = sum + arr[i]\n    \n    return sum\n"}
{"task_id": "Open/85", "completion": "    if x > y :\n        x, y = y, x\n    min_x = min(x,y)\n    for i in range(min_x,0,-1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    \n    current = A\n    for i in range(N-1) :\n        current = current + B\n    return current\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in str :\n        if i == substr :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/88", "completion": "    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range(1, A + 1) :\n        for j in range(1, B + 1) :\n            for k in range(1, C + 1) :\n                if i * k > j * j :\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1) :\n        if (i%10 == 2 or i%10 == 3 or i%10 == 9) :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    max_length = 0\n    length = 1\n    curr_num = arr[0]\n    for i in range(1, n) :\n        if arr[i] == curr_num :\n            length += 1\n        else :\n            curr_num = arr[i]\n            length = 1\n        if length > max_length :\n            max_length = length\n    return max_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/92", "completion": "    \n    max_len = -1\n    for i in range( len( str ) ) :\n        if ( str[i] =='' ) :\n            continue\n        if ( i % 2 == 0 ) :\n            if ( len( str[i:] ) == 0 ) :\n                max_len = max( max_len, i )\n            continue\n        if ( len( str[i:] ) > 0 ) :\n            max_len = max( max_len, i )\n    return max_len\n\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1 :\n        count += 1\n        n /= 2\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/94", "completion": "    s = 'a'\n    n = len(s)\n    k = int(k)\n    if k > 0 :\n        for i in range(n) :\n            s = s[::-1]\n            s = s[i:] + s[:i]\n            s = s[::-1]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n            s = s[i:] + s[:i]\n"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel // n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    total = 0\n    for i in arr :\n        total += i\n    for i in range( n ) :\n        if total - arr[i] == 3 :\n            return 1\n        elif total - arr[i] == 2 :\n            return 0\n    return 0\n\n"}
{"task_id": "Open/97", "completion": "    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "    \n    if ( a == b and c == k ) :\n        return True\n    elif ( k == 0 ) :\n        return False\n    elif ( a - k == b ) :\n        return True\n    elif ( a + k == b ) :\n        return True\n    elif ( b - k == c ) :\n        return True\n    elif ( b + k == c ) :\n        return True\n    elif ( c - k == a ) :\n        return True\n    elif ( c + k == a ) :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/100", "completion": "    if x < y :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range( len( s ) ) :\n        if s[ i ]!= s[ i - 1 ] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    \n    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 2. Initialize a variable \"removal\" to 0.\n    removal = 0\n    \n    # Step 3. Iterate through the sorted array.\n    for i in range(n) :\n        if arr[i] > 1 :\n            removal += 1\n            \n    return removal\n\n"}
{"task_id": "Open/104", "completion": "    \n    max_set_bits = 0\n    for i in range( left, right + 1 ) :\n        if ( i & 1 ) :\n            max_set_bits += 1\n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "    \n    power = 1\n    while power <= n :\n        power = power * 2\n    return power\n"}
{"task_id": "Open/106", "completion": "    \n    sum_divisors = 0\n    for i in range ( 1, n ) :\n        if n % i == 0 :\n            sum_divisors += i\n    if sum_divisors == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "    \n    # Step 1\n    centuries = (N // 100)\n    leap_centuries = (N // 400)\n    \n    # Step 2\n    leap_years = (N % 100) << 2\n    leap_years += (N % 400)\n    \n    # Step 3\n    leap_years -= leap_centuries\n    \n    # Step 4\n    if centuries or leap_centuries :\n        non_leap_years = (N % 100) << 2\n        non_leap_years += (N % 400)\n        leap_years += non_leap_years\n    \n    # Step 5\n    days = (N % 100) << 2 + (N % 400)\n    days += leap_years\n    \n    # Step 6\n    odd_days = (days % 7)\n    \n    return odd_days\n"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return a * (3 * a - 2)\n"}
{"task_id": "Open/109", "completion": "    string = str(n)\n    counter = 0\n    for i in string :\n        if i == d :\n            counter += 1\n    return counter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/110", "completion": "    \n    # Step 1. Convert the integer to a string.\n    s = str(n)\n    \n    # Step 2. Iterate through each character in the string.\n    for i in s :\n        if i not in s :\n            return False\n    \n    # Step 3. Return True. \n    return True\n"}
{"task_id": "Open/111", "completion": "    count = 0\n    for i in a :\n        if i % 5 == 0 :\n            count += 1\n        if i % 3 == 0 :\n            count += 1\n    return count == n\n"}
{"task_id": "Open/112", "completion": "    array = [0]*(n+1)\n    array[0] = 4\n    array[1] = 7\n    for i in range(2,n+1) :\n        if i%2 == 1 :\n            array[i] = array[i//2] * 10\n        else :\n            array[i] = array[(i//2)-1] * 10\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    # Step 1. Initialize an array with length n+1 and set the first two elements to 3 and 5.\n    array = [0]*(n+1)\n    array[0] = 3\n    array[1] = 5\n\n    # Step 2. Iterate through the indices from 3 to n+1.\n    for i in range(2,n+1) :\n        if i%2 == 0 :\n            array[i] = array[i//2] * 10\n        else :\n            array[i] = array[(i//2)-1] * 10\n\n    # Step 3. Return the element at index n.\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "    \n    # Step 1. Initialize an array with length n+1 and the first two elements set to 1 and 2 respectively.\n    array = [0]*(n+1)\n    array[0] = 1\n    array[1] = 2\n    \n    # Step 2. Iterate from 3 to n.\n    for i in range(3,n+1) :\n        if i%2 == 0 :\n            array[i] = array[i//2] * 10\n        else :\n            array[i] = array[(i//2)-1] * 10\n            \n    # Step 3. Return the element at index n.\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "    \n    result = 0\n    for i in range(n) :\n        result = result + a[i]\n    if result % 11 == 0 :\n        return True\n    else :\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b + b * h + l * h\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    words = string.split()\n    new_string = \"\"\n    for word in words :\n        new_string += word[0].upper() + word[1:].upper() + \" \"\n    return new_string.strip()\n"}
{"task_id": "Open/118", "completion": "    return int( math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2 )\n"}
{"task_id": "Open/119", "completion": "\n    # Your code here\n    # Write your code here\n    return len(set(arr)) == len(arr)\n\n"}
{"task_id": "Open/120", "completion": "    \n    # Step 1. Initialize a set to store distinct two-character codes.\n    codes = set()\n    \n    # Step 2. Iterate through the string.\n    for char in string :\n        # For each character, iterate through the remaining characters.\n        codes.add(char + char)\n        \n    # Step 3. Return the count of distinct two-character codes in the set.\n    return len(codes)\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    \n    # Step 1. Initialize variables: current number = 0, maximum number = 0.\n    currentNumber = 0\n    maximumNumber = 0\n    \n    # Step 2. Iterate through each character in the string.\n    for i in ss :\n        if i.isdigit() :\n            currentNumber = currentNumber * 10 + int(i)\n        else :\n            if currentNumber > maximumNumber :\n                maximumNumber = currentNumber\n    \n    # Step 3. Return the maximum number extracted from the string.\n    return maximumNumber\n"}
{"task_id": "Open/123", "completion": "    longest = \"\"\n    for i in range( length ) :\n        if s[i].isdigit() :\n            if s[i+1].isdigit() :\n                if s[i+1]!= s[i] :\n                    if len(longest) > len(s[i]) :\n                        longest = s[i]\n            else :\n                continue\n        else :\n            if len(longest) > len(s[i]) :\n                longest = s[i]\n    return longest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/124", "completion": "    if N > 0 and M > 0 :\n        return (N * M) - (K)\n    elif N > 0 :\n        return (N)\n    elif M > 0 :\n        return (M)\n    else :\n        return 0\n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length :\n        return False\n    for i in range(0,len(string)) :\n        if string[i]!= string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    i = 1\n    while i <= n :\n        i = i * 2\n    return i - 1\n"}
{"task_id": "Open/127", "completion": "\n    A = str(A)\n    B = str(B)\n\n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/128", "completion": "    return abs( x - y )!= 1\n"}
{"task_id": "Open/129", "completion": "    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    for i in range ( 3, n ) :\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    \n    # Step 1\n    min_steps = []\n    prev = arr[0]\n    for i in range(1,n) :\n        min_steps.append(abs(arr[i] - prev))\n        prev = arr[i]\n        \n    return min_steps\n    \n    "}
{"task_id": "Open/131", "completion": "    \n    remainder = n % 4\n    if remainder == 0 :\n        return 0\n    elif remainder == 1 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/132", "completion": "    m = 0\n    sum = 0\n    ans = 0\n    for i in range(1,N+1) :\n        if (a % i == 0) :\n            m = m + 1\n            sum = (m * (m + 1)) / 2\n            ans = ans + a\n    return ans\n"}
{"task_id": "Open/133", "completion": "    \n    if N < 2 :\n        return N\n    elif N < 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    else :\n        return N - 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/134", "completion": "    if arr[0] % 2!= 0 :\n        return False\n    if arr[-1] % 2!= 0 :\n        return False\n    if n % 2!= 0 :\n        return False\n    return True\n\n\n"}
{"task_id": "Open/135", "completion": "    count = 0\n    if N == 1 :\n        for i in range(L, R+1) :\n            count += i\n    elif N > 1 :\n        for i in range(L, R+1) :\n            count += i + countSum(N-2,L,i)\n    return count\n"}
{"task_id": "Open/136", "completion": "\n    arr.sort()\n    result = 1\n    for i in range(n) :\n        if arr[i] > result :\n            result += 1\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/137", "completion": "    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    return int(s)\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n        elif arr[i] < arr[i-1] :\n            arr[i] = arr[i-1]\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/139", "completion": "    \n    sum = 0\n    count = 0\n    \n    for c in s :\n        sum += ord(c)\n        count += 1\n    \n    return sum / count\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    while S >= A :\n        count += 1\n        S -= count\n    if S == 0 :\n        return -1\n    else :\n        return count\n\n"}
{"task_id": "Open/141", "completion": "    if x == 0 or y == 0 :\n        return 0\n    return x * y / math.gcd(x, y)\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n > 0 :\n        count += n % 2\n        n //= 2\n    return count\n"}
{"task_id": "Open/143", "completion": "    max_index = 0\n    max_sum = 0\n    for i in range(n) :\n        sum = 0\n        for j in range(n) :\n            sum = sum + arr[i] ^ arr[j]\n        if sum > max_sum :\n            max_sum = sum\n            max_index = i\n    return max_index\n\n"}
{"task_id": "Open/144", "completion": "    max_len = 0\n    curr_len = 1\n    for i in range( n ) :\n        if arr[i] < arr[i-1] :\n            curr_len += 1\n        else :\n            max_len = max( max_len, curr_len )\n            curr_len = 1\n    return max( max_len, curr_len )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/145", "completion": "    \n    # Step 1. Iterate through the array.\n    for i in range(n) :\n        if arr[i] == k :\n            return arr[i]\n    \n    # Step 2. Find the minimum element and the maximum element.\n    min = arr[0]\n    max = arr[n-1]\n    \n    # Step 3. Calculate the range between the minimum and maximum elements.\n    range = max - min\n    \n    # Step 4. Check if k is greater than or equal to the range.\n        # -If true, return the minimum element plus k.\n    if k > range :\n        return min + k\n    \n    # Step 5. Check if it is possible to make all elements of the array equal by adding or subtracting k from each element.\n        # -If true, return the minimum element plus k.\n    if k < range :\n        return min - k\n    \n    # Step 6. If it is not possible, return -1. \n    return -1\n"}
{"task_id": "Open/146", "completion": "    \n    length = 1\n    while K % 10!= 0 :\n        length += 1\n        K //= 10\n    \n    if K == 1 :\n        return length\n    else :\n        return -1\n"}
{"task_id": "Open/147", "completion": "    min_ops = 0\n    for i in range( n ) :\n        min_ops += abs( arr[i] - arr[i-1] )\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "    \n    sum = 3\n    for i in range ( 1, n ) :\n        sum = sum + 3\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    p = p / 100\n    q = q / 100\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    xor = 0\n    for i in range( len1 ) :\n        xor = xor ^ ord( str1[i] )\n    return xor\n"}
{"task_id": "Open/152", "completion": "    \n    # Step 1. Convert the integer to its binary representation.\n    binary = bin(n)\n    \n    # Step 2. Check if the binary representation contains consecutive 1's.\n    if binary.count('1') == binary.count('0') :\n        return False\n    else :\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/153", "completion": "    previous_vowel = s[0]\n    for i in range(1, len(s)) :\n        if s[i] == previous_vowel :\n            return False\n        else :\n            previous_vowel = s[i]\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    min_diff = math.inf\n    for i in range(1, n+1) :\n        diff = abs(i-math.pow(2, i))\n        if diff < min_diff :\n            min_diff = diff\n    return min_diff\n\n"}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    return (1 + (r**2)) * r / 4\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    \n    if len( ar ) == 1 :\n        return 1\n    \n    start = 0\n    end = size - 1\n    mid = (start + end) // 2\n    \n    if ar[0] == ar[1] :\n        return ar[0]\n    \n    if ar[mid] == ar[mid - 1] :\n        return ar[mid]\n    \n    if ar[mid] > ar[mid - 1] :\n        return search ( ar[mid + 1 : ], size )\n    \n    return search ( ar[:mid], size )\n\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range( len( str ) ) :\n        if str[i] == \"010\" :\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    d = {}\n    for i in arr :\n        if i not in d :\n            d[i] = 1\n        else :\n            d[i] += 1\n    for i in arr :\n        if d[i] % 2 == 1 :\n            return i\n    return None\n\n\n"}
{"task_id": "Open/161", "completion": "    \n    xorArr = 0\n    ans = 0\n    \n    for i in arr :\n        xorArr = xorArr ^ i\n        \n    for i in range( n ) :\n        ans = ans ^ arr[i]\n        \n        if ans > ans :\n            ans = ans\n            \n    return ans\n\n"}
{"task_id": "Open/162", "completion": "    visited = set()\n    queue = [(sx, sy)]\n    while queue :\n        x, y = queue.pop(0)\n        if (x, y) == (dx, dy) :\n            return True\n        if (x + y, y) in visited :\n            return False\n        visited.add((x + y, y))\n        queue.append((x, y + x))\n    return False\n\n"}
{"task_id": "Open/163", "completion": "    \n    if n % 2 == 0 :\n        return 0\n    \n    count = 0\n    for i in range ( 2, n + 1 ) :\n        if ( i % 4 == 0 ) :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/164", "completion": "    d = {}\n    for i in arr :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    return sum(d.values()) * n\n\n"}
{"task_id": "Open/165", "completion": "    count = 1\n    if height > 0 :\n        count += AVLnodes(height-1)\n        count += AVLnodes(height-2)\n    return count\n"}
{"task_id": "Open/166", "completion": "    if source == dest :\n        return 0\n    if source < dest :\n        return steps ( source, step, dest - 1 ) + 1\n    else :\n        return steps ( source, -step, dest + 1 ) + 1\n"}
{"task_id": "Open/167", "completion": "    \n    if n == 1 :\n        return \"1\"\n    \n    prev = \"1\"\n    count = 1\n    \n    for i in range(2, n+1) :\n        current = \"\"\n        count = 1\n        \n        for j in range(len(prev)) :\n            if prev[j]!= current[j] :\n                count += 1\n                current += str(count)\n                count = 1\n                \n            else :\n                count += 1\n                \n        prev = current\n        \n    return prev\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    for i in range(1,N+1) :\n        max_length = max(max_length, arr[i-1]*i)\n    return max_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/169", "completion": "    return (m * n) / math.sqrt((m * m) + (n * n))\n"}
{"task_id": "Open/170", "completion": "    counter = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            sum = arr[i] + arr[j]\n            if sum < k :\n                counter += 1\n    return counter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            for k in range(j+1,n) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/172", "completion": "    \n    count = 0\n    for i in range(l, r+1) :\n        if i % 2 == 0 or i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    mask = 1\n    for i in range( m ) :\n        mask = mask ^ n\n    return mask\n"}
{"task_id": "Open/174", "completion": "    \n    # Step 1. Calculate the total number of numbers between L and R.\n    total = L + R\n    div = total // 9\n    rem = total % 9\n    \n    # Step 2. Divide the total number by 9 to get the number of numbers divisible by 9.\n    count = 0\n    for i in range(R,R-rem) :\n        if rem == 0 :\n            count += 1\n        else :\n            rem = rem // 9\n    return count\n"}
{"task_id": "Open/175", "completion": "    product = n * math.log(n)\n    return str(product)[0:k]\n"}
{"task_id": "Open/176", "completion": "    for i in range(1,n-1) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/177", "completion": "    if a > b :\n        a, b = b, a\n    if a > c :\n        a, c = c, a\n    if b > c :\n        b, c = c, b\n    if a + b + c < 0 :\n        return 0\n    return a + b + c\n"}
