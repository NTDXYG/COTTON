{"task_id": "Open/0", "completion": "\n    \n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    \n    count = 0\n    for i in range(N):\n        count += arr[i] - sum\n    \n    return count\n"}
{"task_id": "Open/1", "completion": "\n    minValue = 2147483647\n    count = 0\n    for i in range(0,n) :\n        if arr[i] < minValue :\n            minValue = arr[i]\n        if arr[i] == minValue :\n            count += 1\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/2", "completion": "Convert n into its binary representation.\"\"\"\n        \n        if n == 0 :\n            return \"0\"\n        \n        binary = \"\"\n        while n > 0 :\n            binary = str(n % 2) + binary\n            n = n // 2\n        \n        return binary\n    \n    def checkBits ( binary, l, r ) :\n        \"\"\"Iterate through the binary representation of n from l to r (inclusive).\"\"\"\n        \n        for i in range ( l, r + 1 ) :\n            if binary[i] == \"0\" :\n                return \"No\"\n        \n        return \"Yes\"\n    \n    binary = convertToBinary ( n )\n    return checkBits ( binary, l, r )\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1, n) :\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(a)):\n        sum1 += a[i]\n        sum2 -= a[i]\n        if sum1 == sum2:\n            return True\n    return False\n"}
{"task_id": "Open/5", "completion": "\n    \n    binary = bin(x)\n    count = binary.count(\"1\")\n    \n    if count % 2 == 0 :\n        return 0\n    else :\n        return 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/6", "completion": "\n    missing_elements = []\n    for i in range(len(vec)):\n        vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            missing_elements.append(i + 1)\n    return missing_elements\n"}
{"task_id": "Open/7", "completion": "\n    \n    longestSubsequence = 1\n    \n    for i in range(n):\n        subsequence = set()\n        for j in range(i,n):\n            subsequence.add(str(arr[j]))\n            if len(subsequence) > longestSubsequence:\n                longestSubsequence = len(subsequence)\n    \n    return longestSubsequence\n"}
{"task_id": "Open/8", "completion": "Return True if n is prime and False otherwise.\"\"\"\n        if n == 1 :\n            return False\n        elif n == 2 :\n            return True\n        elif n % 2 == 0 :\n            return False\n        else :\n            for i in range(3, int(math.sqrt(n)) + 1, 2) :\n                if n % i == 0 :\n                    return False\n            return True\n    \n    counts = []\n    for i in a :\n        count = 0\n        for j in range(1, i + 1) :\n            if is_prime(j) and i % j == 0 :\n                count += 1\n        counts.append(count)\n    return counts\n"}
{"task_id": "Open/9", "completion": "\n    \n    kthLargest = arr[0]\n    sumOfDifferences = 0\n    \n    for i in range(1, k+1):\n        kthLargest = max(kthLargest, arr[i])\n    \n    for i in range(1, k+1):\n        sumOfDifferences += abs(kthLargest - arr[i])\n    \n    return sumOfDifferences\n"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A) > 0:\n        if A[0] == B[0]:\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else:\n            A.appendleft(A.pop())\n            B.appendleft(B.pop())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    \n    d = {}\n    count = 0\n    \n    for i in range ( len ( s ) ) :\n        if s[i] not in d :\n            d[s[i]] = 1\n        else :\n            d[s[i]] += 1\n        \n        if len ( d ) > k :\n            count = 0\n        \n        if d[s[i-1]] > 1 :\n            d[s[i-1]] -= 1\n        else :\n            del d[s[i-1]]\n        \n        if len ( d ) > k :\n            count = 0\n        \n        if s[i] == s[i-1] :\n            d[s[i]] -= 1\n        \n        if d[s[i]] > k :\n            count = 0\n        \n        count += 1\n    \n    return count\n"}
{"task_id": "Open/13", "completion": "\n    current_number = 2\n    while current_number <= n :\n        if n % current_number == 0 :\n            return False\n        current_number += 1\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    switch = {\n        0 : n,\n        1 : 1,\n        2 : n + 1,\n        3 : 0\n    }\n    return switch.get(n % 4, \"\")\n"}
{"task_id": "Open/15", "completion": "\n    for i in range(t) :\n        a = random.randint(2, n-1)\n        if ( a**((n-1)/2) % n )!= 1 and ( a**((n-1)/2) % n )!= n-1 :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "\n    \n    defeatCondition = False\n    \n    for i in range( n ) :\n        if s1[i] == '0' and s2[i] == '1' :\n            defeatCondition = True\n            break\n        elif s1[i] == '1' and s2[i] == '0' :\n            defeatCondition = True\n            break\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            defeatCondition = True\n            break\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            defeatCondition = True\n            break\n    \n    return defeatCondition\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(length):\n        if s[i] == '1' and s[i-1] == '0' or s[i] == '0' and s[i-1] == '1':\n            count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n+1) :\n        if i == 1 :\n            count += 1\n        else :\n            if i % math.log(i) == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if ( a[i] % 4 == 0 ) :\n            count0 += 1\n        elif ( a[i] % 4 == 1 ) :\n            count1 += 1\n        elif ( a[i] % 4 == 2 ) :\n            count2 += 1\n        elif ( a[i] % 4 == 3 ) :\n            count3 += 1\n    if ( count0 % 2 == 0 ) and ( count1 % 2 == 0 ) and ( count2 % 2 == 0 ) and ( count3 % 2 == 0 ) :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if i == 0:\n            current_length = 1\n        else:\n            if arr[i] > arr[i-1]:\n                current_length += 1\n            else:\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = 1\n    if current_length > max_length:\n        max_length = current_length\n    return max_length\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/23", "completion": "\n    if ( i == n ) :\n        if ( sum == 0 ) :\n            count += 1\n        return count\n    else :\n        return subsetSum ( arr, n, i + 1, sum - arr[i], count ) + subsetSum ( arr, n, i + 1, sum, count )\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nn = len(arr)\nsum = 0\ncount = 0"}
{"task_id": "Open/24", "completion": "\n    result = 0\n    current = 1\n    while n > 0 :\n        if n % 2 == 0 :\n            result = 0\n            current += 1\n        else :\n            result = current\n            current = 0\n        n = n // 2\n    return result\n"}
{"task_id": "Open/25", "completion": "\n    sum_squares = 0\n    sum_n = 0\n    total_sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum_n += i\n        sum_squares += i * i\n    total_sum = sum_n + sum_squares\n    return total_sum\n"}
{"task_id": "Open/26", "completion": "\n    \n    factors = []\n    sums = []\n    \n    for i in range ( 1, n + 1 ) :\n        if n % i == 0 :\n            factors.append( i )\n    \n    for i in factors :\n        sum = 1\n        for j in factors :\n            sum *= j\n        sums.append( sum )\n    \n    return max( sums )\n"}
{"task_id": "Open/27", "completion": "\n    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    \n    percent = ( b - a ) / a\n    return percent\n"}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        sum += i * i\n    return sum / n\n"}
{"task_id": "Open/31", "completion": "\n    \n    minHeap = []\n    for i in range(k):\n        heappush(minHeap, arr[i])\n    \n    for i in range(k, n):\n        if arr[i] < minHeap[0]:\n            heappop(minHeap)\n            heappush(minHeap, arr[i])\n    \n    return minHeap[0]\n\narr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nn = len(arr)\nk = 3"}
{"task_id": "Open/32", "completion": "\n    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "\n    \n    term = 1\n    for i in range(1, n+1) :\n        term = term * 2\n        term = term + (i - 1)\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    if len(a) == 0 :\n        return 0\n    \n    count = 0\n    product = 1\n    left = 0\n    right = 0\n    \n    while right < len(a) :\n        product *= a[right]\n        \n        while product >= k and left <= right :\n            product /= a[left]\n            left += 1\n        \n        count += right - left + 1\n        right += 1\n    \n    return count\n"}
{"task_id": "Open/35", "completion": "\n    counter = 0\n    for i in range(1, n+1) :\n        if str(i).find(str(d))!= -1 :\n            counter += 1\n    return counter\n"}
{"task_id": "Open/36", "completion": "\n    \n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    \n    missing = 1\n    while missing <= sum:\n        if missing not in arr:\n            return missing\n        else:\n            missing += 1\n    \n    return missing\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/37", "completion": "\n    ways = [1,1]\n    for i in range(2,n+1) :\n        ways.append(ways[i-1]+ways[i-2])\n    return ways[n]\n"}
{"task_id": "Open/38", "completion": "\n    areaSum = 0\n    for i in range(1, l + 1) :\n        for j in range(1, b + 1) :\n            areaSum += i * j\n    return areaSum\n"}
{"task_id": "Open/39", "completion": "\n    return sum(range(N+1))\n"}
{"task_id": "Open/40", "completion": "\n    \n    countOfZeros = 0\n    countOfOnes = 0\n    maxCount = 0\n    \n    for i in range(n) :\n        if arr[i] == 0 :\n            countOfZeros += 1\n        elif arr[i] == 1 :\n            countOfOnes += 1\n            maxCount = max(maxCount, countOfZeros)\n            countOfZeros = 0\n    \n    if countOfZeros > 0 :\n        maxCount = max(maxCount, countOfZeros)\n    \n    return maxCount\n\narr = [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_length += 1\n        elif current_length > max_length:\n            max_length = current_length\n        elif arr[i] > 0 and arr[i-1] == 0:\n            current_length += 1\n    return max_length\n\narr = [0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"task_id": "Open/42", "completion": "\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0], a[n-1])\n    else :\n        return max(a)\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            product = 1\n            for k in range(i,j):\n                product *= array[k]\n            if product <= k:\n                count += 1\n    return count\n\narray = [1,2,3,4,5]\nn = len(array)\nk = 10"}
{"task_id": "Open/44", "completion": "\n    \n    arr.sort()\n    \n    sum = 0\n    \n    for i in range(n) :\n        sum += abs(arr[i] - (i + 1))\n    \n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/45", "completion": "\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/46", "completion": "\n    min_element = array[0]\n    max_element = array[-1]\n    difference = 0\n    for i in range(len(array)):\n        if array[i] < min_element:\n            min_element = array[i]\n        if array[i] > max_element:\n            max_element = array[i]\n    difference = max_element - min_element\n    return difference\n"}
{"task_id": "Open/47", "completion": "\n    \n    m = (y2 - y1) / (x2 - x1)\n    c = y1 - m * x1\n    \n    if (m * x1 + c) * (m * x2 + c) < 0 :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/48", "completion": "\n    \n    count = 0\n    for i in range(0, a + 1) :\n        if (a & i) == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max_value = 0\n    for i in range(L, R+1) :\n        max_value = max_value & i\n    return max_value\n"}
{"task_id": "Open/50", "completion": "\n    smallest = -1\n    for i in range(n):\n        if a[i] > smallest:\n            smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "\n    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum ( n - 1 )\n"}
{"task_id": "Open/52", "completion": "\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if (i+1) * (j+1) > n:\n                break\n            if (i+1) * (j+1) == n:\n                result += arr[i][j]\n            else:\n                if (arr[i][j] * arr[i+1][j+1]) % 2 == 1:\n                    result += arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "\n    \n    count = 0\n    for i in range(N+1) :\n        if i ^ i == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    sum = 0\n    for i in range(n) :\n        sum = sum + a[i]\n    if sum + n - 1 == k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/55", "completion": "\n    \n    binary = bin(n)\n    \n    if binary[0] == '1' and binary[-1] == '1':\n        return True\n    else:\n        return False\n    "}
{"task_id": "Open/56", "completion": "\n    \n    maxPartitions = 1\n    \n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            maxPartitions += 1\n        else:\n            maxPartitions = 1\n    \n    return maxPartitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    for i in range(2, N+1):\n        var1 = arr[i-1]\n        var2 = arr[i-2]\n        result = result + var1 + var2\n        result = result + (var1 * var2) / 100\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/59", "completion": "\n    \n    if index < 0 or index >= len(arr) :\n        return None\n    \n    if reversals == 0 :\n        return arr[index]\n    \n    if reversals % 2 == 1 :\n        arr.reverse()\n    \n    for i in range(len(ranges)) :\n        if ranges[i][0] <= index and index <= ranges[i][1] :\n            arr[ranges[i][0]:ranges[i][1]+1] = arr[ranges[i][0]:ranges[i][1]+1][::-1]\n            index += len(arr[ranges[i][0]:ranges[i][1]+1]) - 1\n    \n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    if n <= 1:\n        return True\n    else:\n        a = int(n**0.5)\n        b = int((n-a**2)**0.5)\n        if a <= 1 and b <= 1:\n            return True\n        else:\n            return False\n"}
{"task_id": "Open/61", "completion": "\n    counter = 0\n    for i in range ( len ( b ) ) :\n        if b[i] == a[0] :\n            counter += 1\n        else :\n            if b[i] == a[0] * ( counter + 1 ) :\n                counter += 1\n    if counter < 1 :\n        return -1\n    return counter\n"}
{"task_id": "Open/62", "completion": "\n    \n    modifiedString = \"\"\n    \n    currentIndex = len - 2\n    \n    while currentIndex >= 0 :\n        \n        if str[currentIndex] > str[currentIndex + 1] :\n            \n            modifiedString += str[currentIndex] - 1\n            \n        else :\n            \n            modifiedString += str[currentIndex]\n            \n        currentIndex -= 1\n        \n    return modifiedString\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/63", "completion": "\n    min_value = arr[0]\n    sum = 0\n    for i in range(n):\n        sum += math.log(arr[i])\n    if sum < math.log(min_value) * n:\n        min_value = arr[i]\n    return min_value\n"}
{"task_id": "Open/64", "completion": "\n    \n    start = -1\n    end = -1\n    max_length = 0\n    \n    for i in range(len(s)):\n        if s[i]!= '1':\n            start = i\n        elif start!= -1:\n            end = i\n        max_length = max(max_length, end - start + 1)\n    \n    return max_length\n"}
{"task_id": "Open/65", "completion": "\n    \n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    \n    max_count = 0\n    for i in d:\n        if d[i] > max_count:\n            max_count = d[i]\n    \n    k -= max_count\n    \n    if k <= 0:\n        return n\n    \n    length = n\n    for i in d:\n        if d[i] > k:\n            d[i] -= 1\n            length -= 1\n    \n    return length\n"}
{"task_id": "Open/66", "completion": "\n    \n    size = n + k\n    arr.sort()\n    \n    if size % 2 == 0 :\n        median = (arr[size/2] + arr[(size/2) - 1]) / 2\n    else :\n        median = arr[size/2]\n    \n    return median\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 3"}
{"task_id": "Open/67", "completion": "\n    \n    stepCount = 0\n    \n    stepCount += abs(a[0])\n    \n    for i in range(1, n):\n        if a[i] < 0:\n            stepCount += abs(a[i])\n        elif a[i] > 0:\n            stepCount += abs(a[i] - 1)\n    \n    if a[0] == 0:\n        stepCount += 2\n    elif a[0] > 0:\n        stepCount += 1\n    \n    if a[0] < 0:\n        stepCount += 1\n    \n    return stepCount\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    n = bin(n)[2:]\n    n = n.zfill(32)\n    for i in range(1, len(n)):\n        if n[i] == n[i-1]:\n            return False\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    \n    closest = x\n    \n    if x > n :\n        return x\n    \n    while closest < n :\n        closest *= 2\n    \n    return closest\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range ( 0, n + 1 ) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        newSeries = 1\n        for j in range ( 1, i + 1 ) :\n            newSeries += 2\n        sum += newSeries\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    count_dict = {}\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n    max_val = -1\n    max_count = -1\n    for key in count_dict:\n        if count_dict[key] > max_count:\n            max_count = count_dict[key]\n            max_val = key\n    if max_count == max_val:\n        return max_val\n    else:\n        return -1\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if (a[i] > a[j] and a[i] & a[j] == 0):\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    return int( ''.join( [ str( 1 - int( i ) ) for i in bin( n )[ 2 : ] ] ), 2 )\n"}
{"task_id": "Open/76", "completion": "\n    total = 0\n    for i in range(n):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            A[i+1] = 0\n            total += 1\n    return total\n\nA = [0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"}
{"task_id": "Open/77", "completion": "\n    \n    degrees = radians * (180/pi)\n    return degrees\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range(1, n + 1) :\n        sum += a + (i - 1) * d\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    \n    if n % 2 == 0 :\n        return n\n    else :\n        return 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/81", "completion": "Return True if the new position is valid (within the bounds of the chessboard).  \n        \"\"\"\n        return ( row >= 0 and row < 8 and column >= 0 and column < 8 )\n    \n    def addValue ( row, column, value ) :\n        \"\"\"Add the value of the current position to the value of the new position.  \n        \"\"\"\n        if isValid ( row, column ) :\n            squares [ row ][ column ] += value\n    \n    squares = [ [ 0 for i in range ( 8 ) ] for j in range ( 8 ) ]\n    squares [ row ][ column ] = 1\n    \n    for move in moves :\n        if move == \"up\" :\n            addValue ( row - 1, column, 1 )\n        elif move == \"down\" :\n            addValue ( row + 1, column, 1 )\n        elif move == \"left\" :\n            addValue ( row, column - 1, 1 )\n        elif move == \"right\" :\n            addValue ( row, column + 1, 1 )\n    \n    "}
{"task_id": "Open/82", "completion": "\n    \n    result = 0\n    for i in range(1, n + 1):\n        result = result + i\n        \n    return result\n    "}
{"task_id": "Open/83", "completion": "\n    \n    last_occur = []\n    for i in range(len(s)) :\n        last_occur.append(s.rfind(s[i]))\n    \n    sorted_string = sorted(s)\n    \n    for i in range(len(s)) :\n        if last_occur[i]!= sorted_string.index(s[i]) :\n            s = s[:last_occur[i]] + s[last_occur[i]].replace(s[i],sorted_string[i]) + s[last_occur[i]+1:]\n    \n    return s\n"}
{"task_id": "Open/84", "completion": "\n    odd = []\n    even = []\n    for i in range(n):\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    odd.reverse()\n    even.extend(odd)\n    return sum(even[l-1:r])\n"}
{"task_id": "Open/85", "completion": "\n    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range(1, smaller+1) :\n        if x % i == 0 and y % i == 0 :\n            hcf = i\n    return hcf\n"}
{"task_id": "Open/86", "completion": "\n    \n    if N == 1 :\n        return A\n    elif N == 2 :\n        return B\n    elif N == 3 :\n        return A + B\n    else :\n        return findNthNumber(A + B, A, N - 1)\n"}
{"task_id": "Open/87", "completion": "\n    counter = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            counter += 1\n    return counter\n"}
{"task_id": "Open/88", "completion": "\n    \n    r = r / 100\n    t = t * 12\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i] * B[j] > B[j] * B[j]:\n                count += 1\n    for i in range(len(B)):\n        for j in range(len(C)):\n            if B[i] * C[j] > C[j] * C[j]:\n                count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    \n    # Initialize variables to store the longest arithmetic subsequence length and current subsequence length.\n    longest_ar_subseq_len = 0\n    current_ar_subseq_len = 0\n    \n    # Iterate through the list of integers.\n    for i in range( n ) :\n        \n        # Calculate the difference with the previous integer.\n        diff = arr[i] - arr[i-1]\n        \n        # If the difference is the same as the previous difference, update the current subsequence length.\n        if diff == current_ar_subseq_len :\n            current_ar_subseq_len += 1\n        \n        # If the current subsequence length is greater than the longest arithmetic subsequence length, update the longest arithmetic subsequence length.\n        elif current_ar_subseq_len > longest_ar_subseq_len :\n            longest_ar_subseq_len = current_ar_subseq_len\n        \n        # Update the current subsequence length.\n        else :\n            current_ar_subseq_len = 1\n    \n    # Return the longest arithmetic subsequ"}
{"task_id": "Open/92", "completion": "\n    max_len = -1\n    start_index = 0\n    for i in range(len(str)):\n        if str[i].isalnum():\n            start_index = i\n        else:\n            if max_len < i - start_index + 1:\n                max_len = i - start_index + 1\n            start_index = i - 1\n    return max_len\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n >= 1 :\n        n = n / 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    result = \"\"\n    for i in range(n-1, -1, -1):\n        result += 'a'\n        if k > 0:\n            if k >= 26:\n                result += 'z'\n                k -= 26\n            else:\n                result += chr(97 + k)\n                k -= k\n        else:\n            break\n    return result\n"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0:\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    total_sum = 0\n    one_third_sum = 0\n    for i in range(n):\n        total_sum += arr[i]\n    one_third_sum = total_sum / 3\n    split_exists = 0\n    for i in range(n-1):\n        if arr[i] + arr[i+1] == one_third_sum:\n            split_exists = 1\n            break\n    return split_exists\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    return word in sentence\n"}
{"task_id": "Open/98", "completion": "\n    \n    if ( type( n )!= int ) :\n        return 0\n    \n    return int( math.log10( n ) + 1 )\n"}
{"task_id": "Open/99", "completion": "\n    if a!= b and a!= c and b!= c:\n        return False\n    if a == b == c:\n        return True\n    if a == b or a == c or b == c:\n        return False\n    diff = max(a, b, c) - min(a, b, c)\n    if k >= diff:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/100", "completion": "\n    \n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    \n    if x == y:\n        return True\n    \n    while x < y:\n        x = x[1:] + \"0\"\n        if x == y:\n            return True\n    \n    return False\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s) - 1) :\n        if s[i] == s[i+1] :\n            count += 1\n        else :\n            count = 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in range(0, n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    \n    minRemovalCount = 0\n    currentRemovalCount = 0\n    \n    for i in range( n ) :\n        if i == 0 :\n            currentRemovalCount = abs( arr[i] - arr[i+1] )\n            minRemovalCount = currentRemovalCount\n        else :\n            currentRemovalCount = abs( arr[i] - arr[i-1] )\n            minRemovalCount = min( minRemovalCount, currentRemovalCount )\n    \n    return minRemovalCount\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/104", "completion": "\n    max_set_bits = 0\n    left_binary = bin(left)[2:]\n    right_binary = bin(right)[2:]\n    current_set_bits = 0\n    for i in range(len(left_binary)) :\n        if left_binary[i] == '0' :\n            current_set_bits += 1\n        else :\n            max_set_bits = max(max_set_bits, current_set_bits)\n            current_set_bits = 0\n    if current_set_bits > 0 :\n        max_set_bits = max(max_set_bits, current_set_bits)\n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "\n    \n    n = n & 0x5555555555555555\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return n\n"}
{"task_id": "Open/106", "completion": "\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum += i\n    if sum == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "\n    \n    century = N // 100\n    leap_century = N // 400\n    \n    leap_years = (century + leap_century) // 2\n    non_leap_years = N - leap_years * 2\n    \n    total_days = 365 * non_leap_years + leap_years * 366\n    \n    return total_days % 7\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/108", "completion": "\n    if a == 0 or a == 1 :\n        return a\n    if a < 0 :\n        return -1\n    p = (a - 1) * (a - 2) / 2\n    i = (a - 1) / 2\n    return p + i * i\n"}
{"task_id": "Open/109", "completion": "\n    \n    string = str(n)\n    frequency = 0\n    \n    for i in range(len(string)):\n        if string[i] == str(d):\n            frequency += 1\n    \n    return frequency\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/110", "completion": "\n    n = str(n)\n    for i in range(0, len(n)):\n        for j in range(i+1, len(n)):\n            if n[i] == n[j]:\n                return False\n    return True\n"}
{"task_id": "Open/111", "completion": "\n    \n    max_element = max(a)\n    for i in a:\n        if i % 5 == 0 and i % 3 == 0:\n            max_element = max(max_element, i)\n        elif i > max_element:\n            return False\n    return max_element == n\n"}
{"task_id": "Open/112", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 4\n    array[1] = 7\n    \n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 7\n        else:\n            array[i] = array[i//2] * 10 + 4\n    \n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    \n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 5\n        else:\n            array[i] = array[i//2] * 10 + 3\n    \n    return array[n]\n    "}
{"task_id": "Open/114", "completion": "\n    array = [0] * (n+1)\n    array[1] = 1\n    array[2] = 2\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 2\n        else:\n            array[i] = array[i//2] * 10 + 1\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    if ( a == [] ) :\n        return True\n    else :\n        if ( a[0] % 11 == 0 ) :\n            return isPossibleToZero ( a[1:], n )\n        else :\n            return False\n"}
{"task_id": "Open/116", "completion": "\n    \n    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "\n    \n    words = string.split()\n    capitalized_words = []\n    \n    for word in words:\n        capitalized_words.append(word[0].upper() + word[1:].lower())\n    \n    return \" \".join(capitalized_words)\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n"}
{"task_id": "Open/120", "completion": "\n    \n    distinctCode = set()\n    for i in range(len(string)-1):\n        if string[i:i+2] not in distinctCode:\n            distinctCode.add(string[i:i+2])\n    return len(distinctCode)\n    "}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    max_number = 0\n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            max_number = max_number * 10 + int(ss[i])\n        else :\n            if max_number > int(ss[i]) :\n                max_number = int(ss[i])\n    return max_number\n"}
{"task_id": "Open/123", "completion": "\n    start = -1\n    end = -1\n    longest = -1\n    for i in range(length):\n        if s[i].isdigit():\n            start = i\n        else:\n            if longest < i - start:\n                longest = i - start\n                end = i\n    return s[start:end+1]\n"}
{"task_id": "Open/124", "completion": "\n    remainingArea = 1\n    while K > 0 and N > 0 and M > 0:\n        if N > M:\n            N -= M\n        elif M > N:\n            M -= N\n        else:\n            N = 0\n            M = 0\n        remainingArea *= N\n        remainingArea *= M\n    return remainingArea\n"}
{"task_id": "Open/125", "completion": "\n    if len(string)!= length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    power = 0\n    while n > 0 :\n        n = n // 2\n        power += 1\n    return power\n"}
{"task_id": "Open/127", "completion": "\n    \n    A = str(A)\n    B = str(B)\n    \n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n    "}
{"task_id": "Open/128", "completion": "\n    \n    if ( type(x)!= int or type(y)!= int ) :\n        return False\n    \n    diff = abs(x - y)\n    \n    if ( diff!= 1 ) :\n        return True\n    \n    return False\n    \n    "}
{"task_id": "Open/129", "completion": "\n    Sn_1, Sn_2, Sn_3 = \"1\", \"12\", \"1213\"\n    for i in range(3, n+1):\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    \n    minSteps = [0] * n\n    minSteps[0] = abs(arr[0] - arr[1])\n    \n    for i in range(1, n):\n        minSteps[i] = min(minSteps[i-1] + abs(arr[i] - arr[i-1]), abs(arr[i] - arr[i-1]) + minSteps[i-1])\n    \n    return minSteps[n-1]\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    elif n % 4 == 1 or n % 4 == 2 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/132", "completion": "\n    m = N / a\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "\n    if arr[0]%2 == 0:\n        return False\n    if arr[n-1]%2 == 0:\n        return False\n    if n%2 == 0:\n        return False\n    return True\n"}
{"task_id": "Open/135", "completion": "\n    if N == 1 :\n        return R - L + 1\n    \n    count = 0\n    \n    for i in range(L, R) :\n        if i > L and i < R - 1 :\n            count += 1\n        if i == L :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/136", "completion": "\n    \n    min = 1\n    for i in range(n):\n        if arr[i] > min:\n            min = arr[i]\n        elif arr[i] == min:\n            min += 1\n    return min\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/137", "completion": "\n    sorted_string = sorted(s, reverse=True)\n    smallest_possible_number = 0\n    for i in range(len(sorted_string)):\n        if sorted_string[i] == '0':\n            if i == 0:\n                smallest_possible_number += 1\n            else:\n                if sorted_string[i-1] == '1':\n                    smallest_possible_number += 1\n        else:\n            if i == 0:\n                smallest_possible_number += int(sorted_string[i])\n            else:\n                if sorted_string[i-1] == '1':\n                    smallest_possible_number += int(sorted_string[i]) - int(sorted_string[i-1])\n                else:\n                    smallest_possible_number += int(sorted_string[i])\n    return smallest_possible_number\n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for i in s :\n        sum += ord(i)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "\n    count = 0\n    total_value = 0\n    remaining_value = S\n    if N == 0:\n        return -1\n    for i in range(N):\n        total_value += A\n        if total_value >= S:\n            count += 1\n            remaining_value -= A\n    if remaining_value <= 0:\n        return count\n    return -1\n"}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x, y)\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n > 0 :\n        n = n // 2\n        count += n\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    left_sum = 0\n    right_sum = 0\n    max_index = 0\n    for i in range(n):\n        left_sum = left_sum ^ arr[i]\n        right_sum = right_sum ^ arr[n - i - 1]\n        if left_sum > right_sum:\n            max_index = i\n        elif right_sum > left_sum:\n            max_index = n - i - 1\n    return max_index\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/144", "completion": "\n    \n    # Initialize variables to store the length of longest decreasing subsequence and current longest decreasing subsequence length.\n    longest_decreasing_subsequence_length = 1\n    current_longest_decreasing_subsequence_length = 1\n    \n    # Iterate through the array.\n    for i in range(1, n) :\n        \n        # Check if it is smaller than the previous element.\n        if arr[i] < arr[i-1] :\n            \n            # Update the current longest decreasing subsequence length.\n            current_longest_decreasing_subsequence_length += 1\n            \n        else :\n            \n            # Update the length of longest decreasing subsequence if the current longest decreasing subsequence length is greater.\n            if current_longest_decreasing_subsequence_length > longest_decreasing_subsequence_length :\n                longest_decreasing_subsequence_length = current_longest_decreasing_subsequence_length\n            \n            # Update the current longest decreasing subsequence length.\n            current_longest_decreasing_subsequence_length = 1"}
{"task_id": "Open/145", "completion": "\n    min_element = arr[0]\n    for i in range(1, n):\n        diff = arr[i] - min_element\n        if diff % k!= 0:\n            return -1\n        min_element = min(arr[i], min_element)\n    return min_element + k\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "Open/146", "completion": "\n    \n    if K == 1 :\n        return 1\n    \n    smallest_repeating_sequence_length = -1\n    \n    for i in range(2, K+1) :\n        if K % i == 0 :\n            if smallest_repeating_sequence_length == -1 :\n                smallest_repeating_sequence_length = i\n            elif i < smallest_repeating_sequence_length :\n                smallest_repeating_sequence_length = i\n    \n    return smallest_repeating_sequence_length\n"}
{"task_id": "Open/147", "completion": "\n    \n    max_element = max(arr)\n    min_element = min(arr)\n    \n    if max_element == min_element:\n        return 0\n    \n    if max_element - min_element == 1:\n        return 1\n    \n    return (max_element - min_element) // 2\n"}
{"task_id": "Open/148", "completion": "\n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        if i == 1 or i == 2 :\n            sum += i\n        elif i == 3 :\n            sum += 3\n        else :\n            sum += sum[i - 2]\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "\n    \n    binary = bin(n)\n    \n    for i in range(2, len(binary)):\n        if binary[i] == '1' and binary[i-1] == '1':\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/153", "completion": "\n    lastFoundVowel = None\n    for i in range(len(s)):\n        if s[i] in \"aeiouAEIOU\":\n            if lastFoundVowel == None:\n                lastFoundVowel = s[i]\n            elif s[i] < lastFoundVowel:\n                return False\n            else:\n                lastFoundVowel = s[i]\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low, high + 1):\n        if i % 10 >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    power = int(math.log(n, 2))\n    \n    return min(abs(n - 2 ** power), abs(n - 2 ** (power - 1)))\n"}
{"task_id": "Open/156", "completion": "\n    \n    if r < 0 :\n        return -1\n    else :\n        area = 3 * (1 / (4 * pi)) * (r**2) * (sin(60) - r * cos(60))\n        return area\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/157", "completion": "\n    \n    charList = list(s)\n    charList.sort()\n    newString = \"\".join(charList)\n    return newString\n"}
{"task_id": "Open/158", "completion": "\n    start = 0\n    end = size - 1\n    while start <= end :\n        mid = (start + end) // 2\n        if ar[mid] == mid :\n            return mid\n        elif ar[mid] < mid :\n            start = mid + 1\n        else :\n            end = mid - 1\n    return -1\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    \n    count = {}\n    \n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    for i in range(n):\n        if count[arr[i]] % 2!= 0:\n            return arr[i]\n    \n    return None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n        ans = max(ans, xorArr)\n    return ans\n\narr = [0, 1, 1, 0]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    if sx == dx and sy == dy :\n        return True\n    if sx == dx :\n        return (sy + dy) % 2 == 0\n    if sy == dy :\n        return (sx + dx) % 2 == 0\n    return False\n"}
{"task_id": "Open/163", "completion": "\n    if n == 0 or n == 4 :\n        return 1\n    if n % 2 == 1 :\n        return 0\n    ways = 0\n    for i in range(2, 4) :\n        if n-i == i or n-i == i+1 :\n            ways += 1\n    return ways\n"}
{"task_id": "Open/164", "completion": "\n    \n    count = {}\n    for i in range(n):\n        if arr[i] not in count:\n            count[arr[i]] = 1\n        else:\n            count[arr[i]] += 1\n    \n    count = 1\n    for i in range(n):\n        count *= count[arr[i]]\n    \n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nn = len(arr)"}
{"task_id": "Open/165", "completion": "\n    \n    if height == 0 :\n        return 0\n    else :\n        return AVLnodes(height - 1) + 1 + AVLnodes(height - 1)\n    "}
{"task_id": "Open/166", "completion": "\n    if source <= dest :\n        return 0\n    else :\n        min_steps = sys.maxsize\n        for step_value in range(1, max(source, dest) + 1) :\n            new_source = source + step_value * step\n            if new_source <= dest :\n                min_steps = min(min_steps, step_value)\n        return min_steps\n"}
{"task_id": "Open/167", "completion": "\n    \n    seq = []\n    seq.append(\"1\")\n    for i in range(2, n+1):\n        current = seq[i-1]\n        count = 0\n        temp = \"\"\n        for j in range(len(current)):\n            if current[j] == current[j-1]:\n                count += 1\n            else:\n                temp += str(count) + current[j-1]\n                count = 1\n        temp += str(count) + current[-1]\n        seq.append(temp)\n    return seq[n-1]\n"}
{"task_id": "Open/168", "completion": "\n    max_length = N\n    running_product = 1\n    for i in range(N):\n        running_product = running_product * arr[i]\n        if running_product < 0:\n            max_length = i + 1\n            break\n        elif running_product == 0:\n            max_length = i + 1\n            break\n    return max_length\n\narr = [1,2,3,4,5,6,7,8,9,10]\nN = 10"}
{"task_id": "Open/169", "completion": "\n    \n    return ( math.sqrt( math.pow(m,2) + math.pow(n,2)) ) / math.sqrt( math.pow(m,2) + math.pow(n,2))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/170", "completion": "\n    \n    count = 0\n    window_sum = 0\n    \n    for i in range(n):\n        window_sum += arr[i]\n        \n        if window_sum < k:\n            count += 1\n        \n        elif window_sum == k:\n            count = 0\n        \n        else:\n            window_sum -= arr[i]\n            count -= 1\n    \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/171", "completion": "\n    \n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2):\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[k] - arr[i] <= L:\n                count += k - j\n                k -= 1\n            else:\n                j += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l, r+1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    return n ^ ( (1 << m) - 1 )\n"}
{"task_id": "Open/174", "completion": "\n    if K == 9 :\n        K = 0\n    total = R - L + 1\n    divisible = total / 9\n    remainder = total % 9\n    count = 0\n    for i in range ( R, L - remainder, -1 ) :\n        if i % 9 == K :\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    \n    n = str(n)\n    k = int(k)\n    \n    firstkdigits = math.log10(n) * k\n    \n    return int(n[0:k]) * firstkdigits\n"}
{"task_id": "Open/176", "completion": "\n    result = -1\n    for i in range(n) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            result = A[i]\n    return result\n"}
{"task_id": "Open/177", "completion": "\n    \n    min_int = min(a, b, c)\n    max_int = max(a, b, c)\n    sum_int = a + b\n    \n    return max_int - min_int + sum_int\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
