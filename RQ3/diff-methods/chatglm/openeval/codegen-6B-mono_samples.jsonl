{"task_id": "Open/0", "completion": "    \n    # Step 1: Calculate the sum of all elements in the array.\n    total = 0\n    for i in range(N):\n        total += arr[i]\n    \n    # Step 2: Iterate through the array.\n    count = 0\n    for i in range(N):\n        # For each element, calculate the count of elements greater than the sum of all other elements when increased by K.\n        if (total - arr[i] + K) > total:\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/1", "completion": "    minValue = max(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < minValue:\n            minValue = arr[i]\n        count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    \n    # Convert n into its binary representation.\n    binary_rep = bin(n)\n    \n    # Iterate through the binary representation of n from l to r (inclusive).\n    for i in range(l, r + 1) :\n        \n        # If the current bit is 0, return \"No\".\n        if binary_rep[i] == '0' :\n            return 'No'\n    \n    # Return \"Yes\".\n    return 'Yes'\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    sum1 = 0\n    sum2 = 0\n    for i in a:\n        sum1 += i\n    for i in a:\n        sum2 -= i\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/5", "completion": "    \n    # convert the input integer x to its binary representation\n    # and count the number of 1 bits in the binary representation\n    # if the count is odd, return 1. Otherwise, return 0\n    \n    # convert the input integer x to its binary representation\n    # and count the number of 1 bits in the binary representation\n    # if the count is odd, return 1. Otherwise, return 0\n    \n    # convert the input integer x to its binary representation\n    # and count the number of 1 bits in the binary representation\n    # if the count is odd, return 1. Otherwise, return 0\n    \n    # convert the input integer x to its binary representation\n    # and count the number of 1 bits in the binary representation\n    # if the count is odd, return 1. Otherwise, return 0\n    \n    # convert the input integer x to its binary representation\n    # and count the number of 1 bits in the binary representation\n    # if the count is odd, return 1. Otherwise, return 0\n    \n    # convert the input integer x to its binary representation\n    # and count the number of 1 bits in the binary representation\n    # if the count is odd,"}
{"task_id": "Open/6", "completion": "    \n    # Initialize an empty list to store missing elements.\n    missing_elements = []\n    \n    # Iterate through the input list.\n    for i in range(len(vec)) :\n        \n        # Calculate the index by taking the absolute value of the element and subtracting 1.\n        index = abs(vec[i]) - 1\n        \n        # Change the sign of the element at the calculated index.\n        vec[index] = -vec[index]\n    \n    # Iterate through the modified list.\n    for i in range(len(vec)) :\n        \n        # If the current element is positive, append its index plus one to the missing elements list.\n        if vec[i] > 0 :\n            missing_elements.append(i + 1)\n    \n    # Return the missing elements list.\n    return missing_elements\n"}
{"task_id": "Open/7", "completion": "    \n    longest = 1\n    for i in range(n):\n        current = set()\n        for j in range(i,n):\n            if set(str(arr[j])).issubset(current):\n                longest = max(longest, j-i+1)\n            else:\n                current = set()\n    return longest\n"}
{"task_id": "Open/8", "completion": "Return True if n is a prime number, False otherwise\"\"\"\n        if n == 1:\n            return False\n        elif n == 2:\n            return True\n        elif n > 2 and n % 2 == 0:\n            return False\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n        return True\n    \n    def prime_factors(n):\n        \"\"\"Return a list of the prime factors of n\"\"\"\n        if n == 1:\n            return []\n        elif n == 2:\n            return [2]\n        elif n > 2 and n % 2 == 0:\n            return [2]\n        else:\n            factors = []\n            for i in range(2, n):\n                if n % i == 0:\n                    factors.append(i)\n            return factors\n    \n    def count_distinct_prime_factors(n):\n        \"\"\"Return the number of distinct prime factors of n\"\"\"\n        factors = prime_factors(n)\n        count"}
{"task_id": "Open/9", "completion": "    \n    # Step 1. Initialize variables to store the kth largest element and the sum of differences.\n    kthLargest = arr[0]\n    sumOfDifferences = 0\n    \n    # Step 2. Sort the input array.\n    arr.sort()\n    \n    # Step 3. Calculate the difference between the kth largest element and the first element of the array.\n    sumOfDifferences += abs(arr[k-1] - arr[0])\n    \n    # Step 4. Iterate through the sorted array from index 1 to k.\n    for i in range(1, k):\n        # Calculate the difference between the kth largest element and the current element.\n        sumOfDifferences += abs(arr[i] - arr[i-1])\n    \n    # Step 5. Return the minimum value among the differences.\n    return sumOfDifferences\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            A.appendleft(A[0])\n            A.popleft()\n            B.append(B[0])\n            B.popleft()\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    \n    # Initialize a dictionary to store the count of characters in the current substring.\n    d = {}\n    \n    # Initialize a variable to store the number of substrings with at most k distinct characters.\n    n = 0\n    \n    # Iterate through the string.\n    for i in range(len(s)) :\n        \n        # For each character in the string, increment its count in the dictionary.\n        if s[i] not in d :\n            d[s[i]] = 1\n        else :\n            d[s[i]] += 1\n        \n        # If the count of characters in the dictionary is at most k, increment the variable.\n        if len(d) <= k :\n            n += 1\n        \n        # If the character is the same as the previous character, decrement its count in the dictionary.\n        if i > 0 and s[i] == s[i-1] :\n            d[s[i-1]] -= 1\n        \n        # If the count of characters in the dictionary becomes greater than k, reset the variable to 0.\n        if len(d) > k :"}
{"task_id": "Open/13", "completion": "    currentNumber = 2\n    while currentNumber <= n :\n        if n % currentNumber == 0 :\n            return False\n        currentNumber += 1\n    return True\n"}
{"task_id": "Open/14", "completion": "    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    \n    # Step 1\n    import random\n    \n    # Step 2\n    def lehmann(n, t):\n        # Step 3\n        a = random.randint(2, n-1)\n        # Step 4\n        b = pow(a, (n-1)/2, n)\n        # Step 5\n        if b == 1 or b == n-1:\n            # Step 6\n            return lehmann(n, t)\n        # Step 7\n        else:\n            # Step 8\n            return -1\n    \n    # Step 3\n    for i in range(t):\n        # Step 4\n        if lehmann(n, t) == -1:\n            # Step 5\n            return -1\n    # Step 7\n    return 1\n"}
{"task_id": "Open/16", "completion": "    defeatCondition = False\n    for i in range(n) :\n        if s1[i] == '0' and s2[i] == '1' :\n            defeatCondition = True\n            break\n        elif s1[i] == '1' and s2[i] == '0' :\n            defeatCondition = True\n            break\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            defeatCondition = True\n            break\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            defeatCondition = True\n            break\n    return defeatCondition\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(length) :\n        if i%2 == 0 :\n            if s[i] == '0' :\n                count += 1\n        else :\n            if s[i] == '1' :\n                count += 1\n    return min(count,length-count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1) :\n        if isPower(i) :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( 0, n ) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(n):\n        if arr[i] > arr[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n    \n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length\n"}
{"task_id": "Open/23", "completion": "    if ( i == len(arr) ) :\n        return count\n    else :\n        if ( sum == 0 ) :\n            count += 1\n        return subsetSum ( arr, n, i + 1, sum - arr[i], count ) + subsetSum ( arr, n, i + 1, sum, count )\n"}
{"task_id": "Open/24", "completion": "    result = 0\n    current = 0\n    while n > 0 :\n        if n % 2 == 0 :\n            result = 0\n            current += 1\n        else :\n            result = current\n            current = 0\n        n = n // 2\n    return result\n"}
{"task_id": "Open/25", "completion": "    # Initialize sum_squares and sum_n to 0.\n    sum_squares = 0\n    sum_n = 0\n    # Iterate from 1 to n.\n    for i in range(1, n+1) :\n        # Add the current number to sum_n.\n        sum_n += i\n        # Add the square of the current number to sum_squares.\n        sum_squares += i**2\n    # Add sum_squares and sum_n to total_sum.\n    total_sum = sum_squares + sum_n\n    # Return total_sum.\n    return total_sum\n"}
{"task_id": "Open/26", "completion": "    factors = []\n    sums = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    for i in factors:\n        sums.append(i)\n        for j in factors:\n            if i!= j:\n                sums.append(i*j)\n    return max(sums)\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    \n    # Write your code here.\n    return (b-a)/a\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        sum = sum + i * i\n    return sum / n\n"}
{"task_id": "Open/31", "completion": "    \n    # Initialize the min heap\n    minHeap = []\n    \n    # Insert the first k elements into the min heap\n    for i in range(k):\n        heapq.heappush(minHeap, arr[i])\n    \n    # Iterate through the remaining elements\n    for i in range(k, len(arr)):\n        if arr[i] < minHeap[0]:\n            heapq.heappop(minHeap)\n            heapq.heappush(minHeap, arr[i])\n    \n    # The kth smallest element is the top element of the min heap\n    return minHeap[0]\n"}
{"task_id": "Open/32", "completion": "    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "    \n    term = 1\n    for i in range(1, n+1) :\n        term = term * 2\n        term = term + (i - 1)\n    return term\n"}
{"task_id": "Open/34", "completion": "    \n    # Initialize a variable to store the count of subarrays with product less than k.\n    count = 0\n    \n    # Iterate through the list of integers.\n    for i in range(len(a)) :\n        \n        # Initialize a variable to store the current subarray product.\n        product = 1\n        \n        # Iterate through the current subarray.\n        for j in range(i, len(a)) :\n            \n            # Multiply the current element with the subarray product.\n            product *= a[j]\n            \n            # If the result is less than k, increment the count of subarrays with product less than k.\n            if product < k :\n                count += 1\n            \n            # Reset the subarray product to 1.\n            product = 1\n    \n    # Return the count of subarrays with product less than k.\n    return count\n"}
{"task_id": "Open/35", "completion": "    counter = 0\n    for i in range(1, n+1) :\n        if str(i).__contains__(str(d)) :\n            counter += 1\n    return counter\n"}
{"task_id": "Open/36", "completion": "    \n    # Initialize a variable to store the sum of the elements in the array.\n    sum = 0\n    \n    # Calculate the sum of the elements in the array.\n    for i in range ( n ) :\n        sum += arr[i]\n    \n    # Initialize a variable to store the missing positive integer.\n    missing = 1\n    \n    # Iterate through the range of positive integers.\n    for i in range ( 1, n + 1 ) :\n        \n        # Subtract the current positive integer from the sum of the elements in the array.\n        if ( sum - arr[i - 1] ) == 0 :\n            \n            # Update the missing positive integer variable with the current positive integer.\n            missing = arr[i - 1]\n    \n    # Return the missing positive integer.\n    return missing\n"}
{"task_id": "Open/37", "completion": "    # Initialize a list to store the number of ways to climb the staircase.\n    ways_list = [1, 1]\n    \n    # Base case: If n is 0 or 1, there is only one way to climb the staircase (by taking 0 or 1 steps), so add 1 to the list.\n    if n == 0 or n == 1:\n        return 1\n    \n    # Iterate through the range of n from 2 to 100 (or any desired maximum value).\n    for i in range(2, n+1):\n        # Calculate the number of ways to climb the staircase by adding the number of ways to climb from n-1 (by taking 1 step) and the number of ways to climb from n-2 (by taking 2 steps).\n        ways_list.append(ways_list[i-1] + ways_list[i-2])\n    \n    # Return the last element of the list.\n    return ways_list[n]\n"}
{"task_id": "Open/38", "completion": "    areaSum = 0\n    \n    for i in range(1, l + 1) :\n        for j in range(1, b + 1) :\n            areaSum += i * j\n    \n    return areaSum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N + 1))\n"}
{"task_id": "Open/40", "completion": "    \n    # Initialize variables to keep track of the count of zeros and ones.\n    count_zeros = 0\n    count_ones = 0\n    \n    # Iterate through the array.\n    for i in range(n):\n        if arr[i] == 0:\n            count_zeros += 1\n        elif arr[i] == 1:\n            count_ones += 1\n            \n    # Return the maximum count of consecutive zeros between two ones.\n    if count_zeros == 0:\n        return -1\n    else:\n        return max(count_zeros, count_ones)\n    \n    "}
{"task_id": "Open/41", "completion": "    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_length = 0\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            if arr[i] > 0 and arr[i-1] == 0:\n                current_length += 1\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    \n    # Initialize an empty list to store the minimum elements of each segment.\n    segmentMins = []\n    \n    # Iterate through the array, maintaining a variable to store the current minimum element of the segment.\n    for i in range(0, n, k) :\n        \n        # If the current element is less than the current minimum element, update the current minimum element.\n        if a[i] < a[i+k-1] :\n            segmentMins.append(a[i])\n        \n        # Append the current minimum element to the list of minimum elements of the segment.\n        else :\n            segmentMins.append(a[i+k-1])\n    \n    # Iterate through the list of minimum elements of each segment.\n    for i in range(0, len(segmentMins), 2) :\n        \n        # If the current segment has more than 2 elements, find the maximum element of the segment and update the current maximum value of the minimum elements.\n        if i+1 < len(segmentMins) :\n            segmentMins[i+1] = max"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        product = 1\n        for j in range(i,n):\n            product *= array[j]\n            if product <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    \n    arr.sort()\n    \n    sum = 0\n    \n    for i in range(n):\n        sum += abs(arr[i] - (i + 1))\n    \n    return sum\n"}
{"task_id": "Open/45", "completion": "    if ( arr == None or len( arr ) == 0 ) :\n        return 0\n    min_cost = arr[0]\n    for i in range( 1, len( arr ) ) :\n        if ( arr[i] < min_cost ) :\n            min_cost = arr[i]\n    return min_cost * ( n - 1 )\n"}
{"task_id": "Open/46", "completion": "    min_element = array[0]\n    max_element = array[-1]\n    \n    for i in range(len(array)):\n        if array[i] < min_element:\n            min_element = array[i]\n        if array[i] > max_element:\n            max_element = array[i]\n    \n    return max_element - min_element\n"}
{"task_id": "Open/47", "completion": "    # Your code here\n    \n    # Step 1. Calculate the slope m and y-intercept c of the line defined by the equation ax + by = c.\n    m = (y2 - y1) / (x2 - x1)\n    c = y1 - m * x1\n    \n    # Step 2. Determine the sign of m using the sign rule for slope-intercept form.\n    if m > 0 :\n        sign = 1\n    elif m < 0 :\n        sign = -1\n    else :\n        sign = 0\n    \n    # Step 3. Check if the points (x1, y1) and (x2, y2) have the same sign in the y-direction using the sign rule for slope-intercept form.\n    if sign == (y2 - c) / (y2 - m * x2) :\n        return True\n    else :\n        return False\n    \n    "}
{"task_id": "Open/48", "completion": "    \n    count = 0\n    \n    for i in range(0,a+1) :\n        if (a ^ i) == i :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/49", "completion": "    max_value = 0\n    for i in range(L, R+1):\n        max_value = max_value & i\n    return max_value\n"}
{"task_id": "Open/50", "completion": "    smallest = -1\n    for i in range(n):\n        if a[i] > smallest:\n            smallest = a[i]\n    for i in range(n):\n        if smallest % a[i]!= 0:\n            return -1\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "    \n    result = 0\n    \n    for i in range(n):\n        for j in range(n):\n            if (i+1) * (j+1) % 2 == 1:\n                result ^= arr[i][j]\n    \n    return result\n"}
{"task_id": "Open/53", "completion": "    \n    # Initialize a variable to store the count of numbers that meet the condition.\n    count = 0\n    \n    # Iterate through numbers from 0 to N (inclusive).\n    for i in range(N+1) :\n        # Calculate the bitwise XOR of the current number with its own bitwise OR.\n        xor = i ^ i\n        \n        # Check if the result is equal to the current number.\n        if xor == i :\n            # If yes, increment the count.\n            count += 1\n    \n    # Return the count.\n    return count\n"}
{"task_id": "Open/54", "completion": "    \n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    if sum + n - 1 == k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/55", "completion": "    \n    # Convert the input integer `n` to its binary representation.\n    binary = bin(n)\n    \n    # Check if only the first and last bits of the binary representation are set to 1.\n    if binary[2] == '0' and binary[-1] == '1' :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 1\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            max_partitions += 1\n        else:\n            max_partitions = 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    return N - (N % K) if N % K == 0 else N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = result + (var1 + var2)\n    result = result + (var1 * var2)\n    for i in range(2, N):\n        var1 = arr[i]\n        result = result + (var1 + var2)\n        result = result + (var1 * var2)\n    return result\n"}
{"task_id": "Open/59", "completion": "    \n    if index < 0 or index >= len(arr) :\n        return None\n    \n    if reversals == 0 :\n        return arr[index]\n    \n    if reversals % 2 == 1 :\n        arr.reverse()\n    \n    for i in range(len(ranges)) :\n        if ranges[i][0] <= index and index <= ranges[i][1] :\n            arr[ranges[i][0]:ranges[i][1]+1] = arr[ranges[i][0]:ranges[i][1]+1][::-1]\n            index = ranges[i][1] + 1\n    \n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "    if n <= 1:\n        return True\n    else:\n        a = int(n**0.5)\n        b = int(n**0.5)\n        if a**2 + b**2 == n:\n            return True\n        else:\n            return False\n"}
{"task_id": "Open/61", "completion": "    \n    # Initialize a counter variable to store the number of times `a` can be repeated to form `b`.\n    count = 0\n    \n    # Iterate through `b`.\n    for i in range(len(b)) :\n        \n        # If the current character in `b` is equal to the first character in `a`, increment the counter.\n        if b[i] == a[0] :\n            count += 1\n            \n        # Else, check if the current character in `b` can be formed by repeating the first character in `a`.\n        else :\n            if b[i] == a[0] * (count + 1) :\n                count += 1\n    \n    # Return the counter.\n    return count\n"}
{"task_id": "Open/62", "completion": "    # Initialize an empty string to store the modified string.\n    modifiedString = \"\"\n    # Initialize a variable to store the current index.\n    currentIndex = len - 1\n    # Iterate through the input string from the second-to-last character to the first character.\n    for i in range(len - 1, -1, -1) :\n        # Check if the current character is greater than the next character.\n        if str[i] > str[i + 1] :\n            # If yes, subtract 1 from the current character.\n            modifiedString += str[i] - 1\n            # Set all subsequent characters to 9.\n            for j in range(i, len) :\n                modifiedString += \"9\"\n        else :\n            # Append the current character to the modified string.\n            modifiedString += str[i]\n    # Return the modified string.\n    return modifiedString\n"}
{"task_id": "Open/63", "completion": "    min_value = arr[0]\n    sum = 0\n    for i in range(n):\n        sum += math.log(arr[i])\n    if sum < math.log(min_value) * n:\n        min_value = arr[i]\n    return min_value\n"}
{"task_id": "Open/64", "completion": "    \n    # Initialize variables\n    start = -1\n    end = -1\n    max_length = 0\n    \n    # Iterate through the string\n    for i in range(len(s)) :\n        if s[i]!= '1' :\n            start = i\n        elif start!= -1 :\n            end = i\n        max_length = max(max_length, end - start + 1)\n    \n    # Return -1 if the string is empty or consists only of '1' characters\n    if max_length == 0 :\n        return -1\n    \n    return max_length\n"}
{"task_id": "Open/65", "completion": "    \n    # Initialize a dictionary to store the count of each element in the array.\n    count = {}\n    for i in range(n) :\n        if a[i] in count :\n            count[a[i]] += 1\n        else :\n            count[a[i]] = 1\n    \n    # Iterate through the array and update the count in the dictionary.\n    for i in range(n) :\n        if a[i] in count :\n            count[a[i]] -= 1\n            if count[a[i]] == 0 :\n                del count[a[i]]\n    \n    # Find the maximum count greater than or equal to k and subtract it from k.\n    max_count = 0\n    for i in count :\n        if count[i] >= k :\n            max_count = max(max_count, count[i])\n    k -= max_count\n    \n    # Initialize a variable to store the length of the modified array.\n    length = 0\n    for i in count :\n        if count[i] >= k :\n            length += 1\n    \n    # Iter"}
{"task_id": "Open/66", "completion": "    \n    # Step 1. Calculate the size of the array after adding k elements.\n    size = n + k\n    \n    # Step 2. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 3. Check if the size is even, if yes, calculate the median by taking the average of the two middle elements.\n    if ( size % 2 == 0 ) :\n        median = ( arr[size/2] + arr[(size/2) - 1] ) / 2.0\n    else :\n        median = arr[size/2]\n    \n    # Step 4. Return the maximum median.\n    return median\n"}
{"task_id": "Open/67", "completion": "    \n    # Initialize variables to store positive, negative, and zero elements count as well as step count.\n    pos = 0\n    neg = 0\n    zero = 0\n    step = 0\n    \n    # Iterate through the array.\n    for i in range(n):\n        if a[i] > 0:\n            pos += 1\n        elif a[i] < 0:\n            neg += 1\n        else:\n            zero += 1\n    \n    # Calculate final step count based on the count of negative and zero elements.\n    if neg % 2 == 0:\n        step += zero\n    else:\n        if zero > 0:\n            step += zero\n        else:\n            step += 2\n    \n    return step\n"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v) - 1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "    n = abs ( n )\n    while n :\n        if n & 1 :\n            return False\n        n >>= 1\n    return True\n"}
{"task_id": "Open/70", "completion": "    \n    closest = x\n    \n    if x > n :\n        return x\n    \n    while closest < n :\n        closest = closest * 2\n        \n    return closest\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(0, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    \n    # Initialize the sum variable to store the sum of the series.\n    sum = 0\n    \n    # Iterate through numbers from 1 to n.\n    for i in range(1, n+1):\n        \n        # Initialize a new series with the first term as 1.\n        series = [1]\n        \n        # Iterate through the series, adding 2 to the previous term and updating the sum variable.\n        for j in range(1, i):\n            series.append(series[j-1] + 2)\n            \n        # Add the sum of the current series to the overall sum.\n        sum += sum(series)\n        \n    # Return the overall sum.\n    return sum\n"}
{"task_id": "Open/73", "completion": "    count_dict = {}\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n    max_val = -1\n    max_count = 0\n    for key in count_dict:\n        if count_dict[key] > max_count:\n            max_count = count_dict[key]\n            max_val = key\n    if max_count == max_val:\n        return max_val\n    else:\n        return -1\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j] and a[i] & (a[j] - 1) == 0:\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    return int( ''.join( [ str( 1 - int( x ) ) for x in bin( n )[ 2 : ] ] ), 2 )\n"}
{"task_id": "Open/76", "completion": "    \n    changes = 0\n    \n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            A[i+1] = 0\n            changes += 1\n    \n    return changes\n"}
{"task_id": "Open/77", "completion": "    return radians * (180/pi)\n"}
{"task_id": "Open/78", "completion": "    return n // 2\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1, n + 1) :\n        sum += (a + (i - 1) * d)\n    return sum\n"}
{"task_id": "Open/80", "completion": "    \n    if n == 1 :\n        return 1\n    \n    if n % 2 == 0 :\n        return makeOdd(n/2)\n    \n    return 1\n"}
{"task_id": "Open/81", "completion": "    \n    # Initialize a 2D list to store the number of squares reachable from each position on the 8x8 chessboard.\n    chessboard = [ [0 for i in range(8)] for j in range(8) ]\n    \n    # Set the value of the starting position (row, column) to 1.\n    chessboard[row][column] = 1\n    \n    # Iterate through the moves.\n    for move in moves :\n        # For each move, check if the new position is valid (within the bounds of the chessboard).\n        if ( row + move ) >= 0 and ( row + move ) <= 7 and ( column + move ) >= 0 and ( column + move ) <= 7 :\n            chessboard[row + move][column + move] += chessboard[row][column]\n        if ( row - move ) >= 0 and ( row - move ) <= 7 and ( column - move ) >= 0 and ( column - move ) <= 7 :\n            chessboard[row - move][column - move] += chessboard[row][column]\n    \n    # Return the sum of the values in the 2D list"}
{"task_id": "Open/82", "completion": "    \n    # Initialize the first number in the sequence as 0.\n    current_number = 0\n    \n    # Initialize a variable to store the current number in the sequence.\n    current_index = 1\n    \n    # Iterate through the range of numbers from 1 to n.\n    for i in range(1, n+1) :\n        # Add the current index to the current number in the sequence.\n        current_number += current_index\n        # Assign the result to the current number in the sequence.\n        current_index = current_number\n    \n    # Return the current number in the sequence.\n    return current_number\n"}
{"task_id": "Open/83", "completion": "    \n    # Initialize an empty list to store the last occurrences of each character in the input string.\n    last_occurrences = []\n    \n    # Iterate through the input string and store the index of each character in the list.\n    for i in range(len(s)) :\n        last_occurrences.append(i)\n    \n    # Sort the input string.\n    sorted_string = sorted(s)\n    \n    # Iterate through the sorted string and compare each character with its corresponding character in the original string.\n    # -If a character is not in the correct position, swap it with the character at its last occurrence.\n    for i in range(len(s)) :\n        if s[i]!= sorted_string[i] :\n            temp = last_occurrences[i]\n            last_occurrences[i] = last_occurrences[temp]\n            last_occurrences[temp] = temp\n    \n    # Return the modified string.\n    return \"\".join(sorted_string)\n"}
{"task_id": "Open/84", "completion": "    arr = [ i for i in range(1, n+1) if i%2 == 1 ]\n    arr += [ i for i in range(1, n+1) if i%2 == 0 ]\n    return sum(arr[l-1:r])\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range ( smaller, 1, -1 ) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    if A == B :\n        return A\n    \n    if N == 1 :\n        return A\n    \n    if N == 2 :\n        return B\n    \n    if N == 3 :\n        return A + B\n    \n    if N > 3 :\n        return findNthNumber(A, B, N - 2) + findNthNumber(A, B, N - 1)\n    \n    return -1\n"}
{"task_id": "Open/87", "completion": "    # Initialize a counter variable to keep track of the number of occurrences.\n    count = 0\n    # Iterate through the string `str` using a loop.\n    for i in range(len(str)):\n        # Check if the current substring `substr` is present in the current position of the loop.\n        if str[i:i+len(substr)] == substr:\n            # If present, increment the counter variable.\n            count += 1\n    # Return the counter variable.\n    return count\n"}
{"task_id": "Open/88", "completion": "    \n    # Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n    r = r / 100 / 12\n    \n    # Convert the loan tenure from years to months by multiplying it by 12.\n    t = t * 12\n    \n    # Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    \n    # Return the calculated EMI.\n    return emi\n    \n    "}
{"task_id": "Open/89", "completion": "    \n    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i] * B[j] > B[j] * B[j]:\n                count += 1\n    for i in range(len(B)):\n        for j in range(len(C)):\n            if B[i] * C[j] > C[j] * C[j]:\n                count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    return sum(1 for i in range(l, r+1) if i % 10 == 2 or i % 10 == 3 or i % 10 == 9)\n"}
{"task_id": "Open/91", "completion": "    \n    # Initialize variables to store the longest arithmetic subsequence length and current subsequence length.\n    longest_ar_subseq_len = 0\n    current_subseq_len = 0\n    \n    # Iterate through the list of integers.\n    for i in range(0, n):\n        # Calculate the difference with the previous integer.\n        diff = arr[i] - arr[i - 1]\n        \n        # If the difference is the same as the previous difference, update the current subsequence length.\n        if diff == 0:\n            current_subseq_len += 1\n        \n        # If the current subsequence length is greater than the longest arithmetic subsequence length, update the longest arithmetic subsequence length.\n        elif current_subseq_len > longest_ar_subseq_len:\n            longest_ar_subseq_len = current_subseq_len\n        \n        # Update the current subsequence length.\n        else:\n            current_subseq_len = 1\n    \n    # Return the longest arithmetic subsequence length.\n    return longest_ar_subseq_len\n"}
{"task_id": "Open/92", "completion": "    max_len = -1\n    start_index = 0\n    for i in range(len(str)):\n        if str[i].isalnum():\n            start_index = i\n        else:\n            if max_len < i - start_index:\n                max_len = i - start_index\n            start_index = i - 1\n    return max_len\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n >= 1 :\n        n = n / 2\n        count = count + 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    \n    # Step 1. Initialize an empty string to store the modified string.\n    modified_string = \"\"\n    \n    # Step 2. Iterate through the input string in reverse order.\n    for i in range(n-1, -1, -1) :\n        \n        # Step 2.1. Append 'a' to the modified string.\n        modified_string += \"a\"\n        \n        # Step 2.2. Subtract the current index from k.\n        k -= 1\n        \n        # Step 2.3. If k is greater than or equal to 0, check if k is greater than or equal to 26.\n        if k >= 0 :\n            \n            # Step 2.3.1. If it is, append 'z' to the modified string and subtract 26 from k.\n            if k >= 26 :\n                modified_string += \"z\"\n                k -= 26\n            \n            # Step 2.3.2. Else, calculate the ASCII value of the character to be replaced by adding k to 97 and subtracting 1.\n            else :\n                modified_string += chr(97 + k)\n                "}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0:\n        totalDistance += fuel/n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    total_sum = sum(arr)\n    one_third_sum = total_sum / 3\n    split_exists = 0\n    for i in range(0, n-1) :\n        if arr[i] == one_third_sum :\n            split_exists = 1\n            break\n    return split_exists\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    if type(n)!= int :\n        return 0\n    else :\n        return len(str(n))\n"}
{"task_id": "Open/99", "completion": "    if a!= b and a!= c and b!= c:\n        return False\n    if a == b and a == c:\n        return True\n    if a!= b and a!= c:\n        return False\n    if b!= a and b!= c:\n        return False\n    if c!= a and c!= b:\n        return False\n    if a == b and b == c:\n        return True\n    if a == c and c == b:\n        return True\n    if b == c and c == a:\n        return True\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if a > b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n    if a == b and b == c:\n        return True\n    if a == c and c == b:\n        return True\n    if b == c and c == a:\n        return True\n    if a - k >= 0"}
{"task_id": "Open/100", "completion": "    \n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    \n    if x == y :\n        return True\n    \n    while x < y :\n        x = x[1:] + \"0\"\n        \n    return x == y\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            count = 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    \n    minRemovalCount = n\n    currentRemovalCount = 0\n    \n    for i in range(n) :\n        if i == 0 :\n            currentRemovalCount = abs(arr[i] - arr[i+1])\n        else :\n            currentRemovalCount = min(currentRemovalCount, abs(arr[i] - arr[i-1]))\n        minRemovalCount = min(minRemovalCount, currentRemovalCount)\n    \n    return minRemovalCount\n"}
{"task_id": "Open/104", "completion": "    max_set_bits = 0\n    left_binary = bin(left)\n    right_binary = bin(right)\n    left_binary = left_binary[2:]\n    right_binary = right_binary[2:]\n    current_set_bits = 0\n    for i in range(len(left_binary)) :\n        if left_binary[i] == '0' :\n            current_set_bits += 1\n        else :\n            max_set_bits = max(max_set_bits, current_set_bits)\n            current_set_bits = 0\n    if current_set_bits > 0 :\n        max_set_bits = max(max_set_bits, current_set_bits)\n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "    if n == 0:\n        return 1\n    else:\n        return setBitNumber(n>>1)<<1\n"}
{"task_id": "Open/106", "completion": "    if n < 0 :\n        return False\n    if n == 0 :\n        return False\n    if n == 1 :\n        return True\n    divisors = []\n    for i in range ( 1, n ) :\n        if n % i == 0 :\n            divisors.append ( i )\n    return sum ( divisors ) == n\n"}
{"task_id": "Open/107", "completion": "    \n    centuries = N // 100\n    leap_centuries = centuries // 4\n    non_leap_centuries = centuries % 4\n    \n    leap_years = N // 400\n    non_leap_years = N % 400\n    \n    total_days = non_leap_years + leap_years * 2\n    \n    odd_days = total_days % 7\n    \n    return odd_days\n    "}
{"task_id": "Open/108", "completion": "    if a == 0 or a == 1 :\n        return a\n    elif a < 0 :\n        return -1\n    else :\n        p = (a - 1) * (a - 2) / 2\n        i = (a - 1) / 2\n        return p + i * i\n"}
{"task_id": "Open/109", "completion": "    \n    # Convert the number n into a string.\n    n = str(n)\n    \n    # Initialize a variable to store the frequency of the digit d.\n    frequency = 0\n    \n    # Iterate through the string representation of n.\n    for i in range(len(n)) :\n        \n        # If the current character is equal to d, increment the frequency variable.\n        if n[i] == str(d) :\n            frequency += 1\n    \n    # Return the frequency variable.\n    return frequency\n"}
{"task_id": "Open/110", "completion": "    \n    last_seen_digit = None\n    \n    def is_valid_number ( n ) :\n        \n        # Convert the input number to a string.\n        n_str = str(n)\n        \n        # Iterate through the string.\n        for i in range(len(n_str)) :\n            \n            # If the current digit is equal to the last seen digit, return False.\n            if n_str[i] == last_seen_digit :\n                return False\n            \n            # Update the last seen digit to the current digit.\n            last_seen_digit = n_str[i]\n        \n        # Return True.\n        return True\n    \n    return is_valid_number(n)\n"}
{"task_id": "Open/111", "completion": "    \n    maximum = max(a)\n    for i in a:\n        if i % 5 == 0 and i % 3 == 0:\n            maximum = i\n        elif i > maximum:\n            return False\n    return maximum == n\n"}
{"task_id": "Open/112", "completion": "    \n    array = [0] * (n+1)\n    array[0] = 4\n    array[1] = 7\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 7\n        else:\n            array[i] = array[i//2] * 10 + 4\n    \n    return array[n]\n"}
{"task_id": "Open/113", "completion": "    \n    # Initialize an array of length n+1 with all elements set to 0.\n    arr = [0] * (n+1)\n    \n    # Set the first element of the array to 3 and the second element to 5.\n    arr[0] = 3\n    arr[1] = 5\n    \n    # Iterate through the array from index 3 to n+1.\n    for i in range(3, n+1):\n        # If the index is odd, set the current element to the product of the element at index (index//2) multiplied by 10 and added with 3.\n        if i % 2 == 1:\n            arr[i] = arr[i//2] * 10 + 3\n        # If the index is even, set the current element to the product of the element at index ((index//2)-1) multiplied by 10 and added with 5.\n        else:\n            arr[i] = arr[(i//2) - 1] * 10 + 5\n    \n    # Return the element at index n.\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "    \n    # Initialize an array of length n+1 with all elements set to 0.\n    array = [0] * (n+1)\n    \n    # Set the first element of the array to 1 and the second element to 2.\n    array[0] = 1\n    array[1] = 2\n    \n    # Iterate through the array from the third element to the nth element.\n    for i in range(2, n+1):\n        # If the current index is odd, calculate the element by multiplying the element at index i//2 by 10 and adding 1.\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 1\n        # If the current index is even, calculate the element by multiplying the element at index (i//2)-1 by 10 and adding 2.\n        else:\n            array[i] = array[i//2 - 1] * 10 + 2\n    \n    # Return the element at index n.\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "    if a == [] :\n        return True\n    if len(a) == 1 :\n        return a[0] % 11 == 0\n    if a[0] % 11 == 0 :\n        return isPossibleToZero(a[1:], len(a))\n    else :\n        return False\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    \n    # Split the string into words.\n    words = string.split()\n    \n    # Initialize an empty list to store the capitalized words.\n    capitalized_words = []\n    \n    # Iterate through the words.\n    for word in words:\n        # Capitalize the first and last letter of each word.\n        capitalized_words.append(word[0].upper() + word[1:].lower())\n        \n    # Join the list of words into a single string and return it.\n    return \" \".join(capitalized_words)\n"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True\n"}
{"task_id": "Open/120", "completion": "    \n    # Initialize a set to store distinct two-character codes.\n    distinct_codes = set()\n    \n    # Iterate through the string.\n    for i in range(len(string)-1) :\n        \n        # Check if the pair of characters is in the set.\n        if (string[i]+string[i+1]) not in distinct_codes :\n            \n            # If the pair is not in the set, add it to the set.\n            distinct_codes.add(string[i]+string[i+1])\n            \n    # Return the count of elements in the set.\n    return len(distinct_codes)\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    max_number = 0\n    for c in ss:\n        if c.isdigit():\n            max_number = max_number * 10 + int(c)\n        else:\n            if max_number > max_number:\n                max_number = max_number\n            else:\n                max_number = max_number\n    return max_number\n"}
{"task_id": "Open/123", "completion": "    \n    start = -1\n    end = -1\n    \n    for i in range(length) :\n        if s[i].isdigit() :\n            start = i\n        else :\n            if end - start > 0 :\n                end = i\n    \n    return s[start:end+1]\n"}
{"task_id": "Open/124", "completion": "    \n    remainingArea = 1\n    \n    while K > 0 and N > 0 and M > 0:\n        if N > M:\n            N -= M\n        elif M > N:\n            M -= N\n        else:\n            N = 0\n            M = 0\n        remainingArea = remainingArea * (N + M)\n        K -= 1\n    \n    return remainingArea\n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length :\n        return False\n    for i in range(len(string)-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    power = 0\n    while n > 0:\n        n = n // 2\n        power += 1\n    return power\n"}
{"task_id": "Open/127", "completion": "    \n    return len(str(A)) == len(str(B))\n"}
{"task_id": "Open/128", "completion": "    if not isinstance ( x, int ) or not isinstance ( y, int ) :\n        return False\n    return abs ( x - y )!= 1\n"}
{"task_id": "Open/129", "completion": "    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    for i in range(3, n+1):\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    # Initialize a variable to store the minimum number of steps required to reach each element in the array.\n    minSteps = [0] * n\n    # Iterate through the array.\n    for i in range(1, n):\n        # Calculate the absolute difference between the current element and the previous element.\n        diff = abs(arr[i] - arr[i-1])\n        # Add the calculated difference to the minimum number of steps variable.\n        minSteps[i] = minSteps[i-1] + diff\n    # Return the minimum number of steps variable.\n    return minSteps\n"}
{"task_id": "Open/131", "completion": "    return 0 if ( n % 4 == 0 or n % 4 == 3 ) else 1\n"}
{"task_id": "Open/132", "completion": "    m = (N - 1) // a\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if arr[0] % 2 == 0 :\n        return False\n    if arr[-1] % 2 == 0 :\n        return False\n    if len(arr) % 2 == 0 :\n        return False\n    return True\n"}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return R - L + 1\n    elif N > 1 :\n        count = 0\n        for i in range(L, R) :\n            if i % (N-1) == 0 :\n                count += 1\n        return count + 1\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "    \n    # Initialize a variable to store the smallest positive integer that is not present in the array.\n    min = 1\n    \n    # Initialize a variable to store the current minimum positive integer that is not present in the array.\n    currentMin = 1\n    \n    # Iterate through the array.\n    for i in range(n):\n        \n        # If the current element is greater than the current minimum positive integer, update the minimum positive integer.\n        if arr[i] > currentMin:\n            currentMin = arr[i]\n            \n        # Else if the current element is equal to the current minimum positive integer, update the minimum positive integer to the next greater positive integer.\n        elif arr[i] == currentMin:\n            currentMin = currentMin + 1\n            \n    # Return the smallest positive integer that is not present in the array.\n    return currentMin\n"}
{"task_id": "Open/137", "completion": "    \n    sorted_string = sorted(s, reverse=True)\n    smallest_poss = 0\n    \n    for i in range(len(sorted_string)):\n        if sorted_string[i] == '0':\n            if i == 0:\n                smallest_poss = 1\n            else:\n                if sorted_string[i-1] == '1':\n                    smallest_poss = smallest_poss - 1\n        else:\n            if i == 0:\n                smallest_poss = smallest_poss + 1\n            else:\n                if sorted_string[i-1] == '0':\n                    smallest_poss = smallest_poss + int(sorted_string[i]) - 1\n                else:\n                    smallest_poss = smallest_poss + int(sorted_string[i])\n    \n    return smallest_poss\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for i in s:\n        sum += ord(i)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "    if N == 0 :\n        return -1\n    count = 0\n    total_value = 0\n    remaining_value = S\n    while remaining_value >= 0 :\n        total_value = total_value + A\n        if total_value >= S :\n            count = count + 1\n            remaining_value = remaining_value - A\n        else :\n            remaining_value = remaining_value - B\n    return count\n"}
{"task_id": "Open/141", "completion": "    return x * y // math.gcd(x, y)\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while (n > 0) :\n        n = n // 2\n        count += n\n    return count\n"}
{"task_id": "Open/143", "completion": "    left_sum = 0\n    right_sum = 0\n    max_index = 0\n    for i in range(n):\n        left_sum = left_sum ^ arr[i]\n        right_sum = right_sum ^ arr[n-1-i]\n        if left_sum > right_sum:\n            max_index = i\n        elif left_sum < right_sum:\n            max_index = n-1-i\n    return max_index\n"}
{"task_id": "Open/144", "completion": "    \n    # Step 1. Initialize variables to store the length of longest decreasing subsequence and current longest decreasing subsequence length.\n    longest_decreasing_subsequence_length = 1\n    current_longest_decreasing_subsequence_length = 1\n    \n    # Step 2. Iterate through the array.\n    for i in range( 1, n ) :\n        \n        # For each element, check if it is smaller than the previous element.\n        if arr[ i ] < arr[ i - 1 ] :\n            \n            # If it is, update the current longest decreasing subsequence length.\n            current_longest_decreasing_subsequence_length = 1\n            \n        else :\n            \n            # Else, update the length of longest decreasing subsequence if the current longest decreasing subsequence length is greater.\n            current_longest_decreasing_subsequence_length = max( current_longest_decreasing_subsequence_length, current_longest_decreasing_subsequence_length )\n            \n        # Update the length of longest decreasing subsequence.\n        longest_decreasing_sub"}
{"task_id": "Open/145", "completion": "    if k == 0 :\n        return min(arr)\n    elif k < 0 :\n        return -1\n    else :\n        return min(arr) + k\n"}
{"task_id": "Open/146", "completion": "    \n    if K == 1 :\n        return 1\n    \n    smallest_len = -1\n    \n    for i in range(2, K+1) :\n        if K % i == 0 :\n            smallest_len = i\n    \n    return smallest_len\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/147", "completion": "    \n    # Step 1\n    max_element = max(arr)\n    min_element = min(arr)\n    \n    # Step 2\n    if max_element - min_element == 0:\n        return 0\n    \n    # Step 3\n    min_operations = 0\n    \n    # Step 4\n    for i in range(n):\n        if arr[i] == (max_element - min_element) // 2:\n            min_operations += 0\n        else:\n            if arr[i] > (max_element - min_element) // 2:\n                arr[i] -= 1\n            else:\n                arr[i] += 1\n            min_operations += 1\n    \n    return min_operations\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        if i == 1 or i == 2 :\n            sum += i\n        elif i == 3 :\n            sum += 3\n        else :\n            sum += sum[i-2]\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    # Initialize result\n    result = 0\n    # Iterate through the string\n    for i in range(len1) :\n        # XOR the ASCII value of the current character with result\n        result = result ^ ord(str1[i])\n    # Return result\n    return result\n"}
{"task_id": "Open/152", "completion": "    \n    # Initialize a variable to store the binary representation of the input number.\n    binary = str(bin(n))\n    \n    # Convert the input number to binary and store it in the variable.\n    binary = str(bin(n))\n    \n    # Iterate through the binary representation.\n    for i in range(2, len(binary)) :\n        \n        # If the current digit is 1 and the previous digit is also 1, return False.\n        if binary[i] == '1' and binary[i-1] == '1' :\n            return False\n    \n    # If the loop completes without finding consecutive 1's, return True.\n    return True\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)-1) :\n        if s[i] in vowels and s[i+1] in vowels :\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1) :\n        lastDigit = i % 10\n        if lastDigit >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    \n    # Step 1. Calculate the nearest lower power of 2.\n    power = 1\n    while ( power < n ) :\n        power *= 2\n    \n    # Step 2. Calculate the absolute difference between the input number and the nearest lower power of 2.\n    diff = abs( n - power )\n    \n    # Step 3. Return the absolute difference.\n    return diff\n"}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        area = 3 * (1 / (4 * math.pi)) * (r**2) * (math.sin(60) - r * math.cos(60))\n        return area\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    start = 0\n    end = size - 1\n    while start <= end :\n        mid = (start + end) // 2\n        if ar[mid] == mid :\n            return mid\n        elif ar[mid] < mid :\n            start = mid + 1\n        else :\n            end = mid - 1\n    return -1\n"}
{"task_id": "Open/159", "completion": "    return str.count(\"010\")\n"}
{"task_id": "Open/160", "completion": "    \n    # Initialize a dictionary to store the count of each element in the array.\n    count = {}\n    \n    # Iterate through the array.\n    for i in range(n):\n        \n        # Update the count of each element in the dictionary.\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    # Return the first element that appears an odd number of times.\n    for i in range(n):\n        if count[arr[i]] % 2 == 1:\n            return arr[i]\n    \n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n        ans = max(ans, xorArr)\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if sx == dx and sy == dy:\n        return True\n    elif sx == dx or sy == dy:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/163", "completion": "    if n == 0 or n == 4 :\n        return 1\n    if n % 2 == 1 :\n        return 0\n    ways = 0\n    for i in range ( 2, 4 ) :\n        if n - i % 2 == 0 :\n            ways += 1\n    return ways\n"}
{"task_id": "Open/164", "completion": "    # Initialize the dictionary\n    d = {}\n    for i in range(n):\n        d[arr[i]] = d.get(arr[i],0) + 1\n    # Calculate the count\n    count = 1\n    for i in d:\n        count *= d[i]\n    return count\n"}
{"task_id": "Open/165", "completion": "    \n    if height == 0 :\n        return 0\n    else :\n        return AVLnodes(height - 1) + 1 + AVLnodes(height - 1)\n"}
{"task_id": "Open/166", "completion": "    if source <= dest :\n        return 0\n    else :\n        steps = sys.maxsize\n        for i in range(1, steps + 1) :\n            new_source = source + step * i\n            if new_source <= dest :\n                steps = i\n        return steps\n"}
{"task_id": "Open/167", "completion": "    \n    # Initialize an empty list to store the sequence.\n    seq = []\n    \n    # Append the first term \\\"1\\\" to the list.\n    seq.append(\"1\")\n    \n    # Iterate from 2 to n.\n    for i in range(2, n+1):\n        \n        # Initialize a variable to store the current term.\n        term = \"\"\n        \n        # Iterate through the previous term.\n        for j in range(0, len(seq[i-1])):\n            \n            # Count the number of consecutive digits.\n            count = 1\n            \n            # Append the count to the current term.\n            term += str(count)\n            \n            # Check if the next digit is the same as the previous digit.\n            if j < len(seq[i-1]) - 1 and seq[i-1][j] == seq[i-1][j+1]:\n                \n                # Increment the count.\n                count += 1\n            \n            # Append the count to the current term.\n            term += str(count)\n        \n        # Append the"}
{"task_id": "Open/168", "completion": "    \n    max_length = N\n    running_product = 1\n    \n    for i in range(N):\n        running_product *= arr[i]\n        if running_product < 0:\n            max_length = i\n            running_product = 1\n        elif running_product == 0:\n            max_length = i\n            running_product = 1\n    \n    return max_length\n"}
{"task_id": "Open/169", "completion": "    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n"}
{"task_id": "Open/170", "completion": "    \n    count = 0\n    \n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += arr[j]\n            if sum < k:\n                count += 1\n            elif sum == k:\n                count = 0\n            else:\n                count -= 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2) :\n        for j in range(i + 1, len(arr) - 1) :\n            k = j + 1\n            while k < len(arr) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n                k += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return n ^ ( ( 1 << m ) - 1 )\n"}
{"task_id": "Open/174", "completion": "    if K == 9 :\n        K = 0\n    total = R - L + 1\n    div9 = total / 9\n    rem = total % 9\n    count = 0\n    for i in range ( R, L - 1, -1 ) :\n        if rem == K :\n            count += 1\n        rem = rem % 9\n    return count\n"}
{"task_id": "Open/175", "completion": "    \n    n = str(n)\n    k = int(k)\n    \n    firstkdigits = \"\"\n    \n    for i in range(k) :\n        firstkdigits += n[i]\n    \n    return int(firstkdigits) * math.log(int(n),10)\n"}
{"task_id": "Open/176", "completion": "    result = -1\n    for i in range(n):\n        if A[i] > A[i-1] and A[i] < A[i+1]:\n            result = A[i]\n    return result\n"}
{"task_id": "Open/177", "completion": "    \n    # Step 1. Find the minimum of the three integers (a, b, c).\n    min_int = min(a, b, c)\n    \n    # Step 2. Calculate the sum of the two largest integers (a + b).\n    sum_int = a + b\n    \n    # Step 3. Subtract the minimum integer from the sum of the two largest integers.\n    diff = sum_int - min_int\n    \n    # Step 4. Return the result.\n    return diff\n"}
