{"task_id": "Open/0", "completion": "    # Step 1. Calculate the sum of all elements in the array.\n    sum = 0\n    for i in arr :\n        sum += i\n    \n    # Step 2. Iterate through the array.\n    count = 0\n    for i in arr :\n        if i + K > sum :\n            count += 1\n    \n    # Step 3. Return the count.\n    return count\n"}
{"task_id": "Open/1", "completion": "    min_val = arr[0]\n    count = 1\n    for i in range(1,n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            count = 1\n        elif arr[i] == min_val:\n            count += 1\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/2", "completion": "    binary = bin(n)[2:]\n    for i in range(l,r+1):\n        if binary[i-1] == '0':\n            return \"No\"\n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (A[i] + A[j]) % K == 0:\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    sum1 = sum2 = 0\n    for i in a :\n        sum1 += i\n        sum2 -= i\n        if sum1 == sum2 :\n            return True\n    return False\n"}
{"task_id": "Open/5", "completion": "    return x % 2\n"}
{"task_id": "Open/6", "completion": "    \n    missing = []\n    for i in vec :\n        index = abs(i) - 1\n        vec[index] = -vec[index]\n    for i in range(len(vec)) :\n        if vec[i] > 0 :\n            missing.append(i+1)\n    return missing\n"}
{"task_id": "Open/7", "completion": "    \n    longestSubsequence = 1\n    prevSubsequence = 1\n    \n    for i in range(1, n) :\n        currentSet = set(str(arr[i]))\n        if currentSet.issubset(set(str(arr[i-1]))) :\n            longestSubsequence = max(longestSubsequence, prevSubsequence+1)\n        else :\n            prevSubsequence = 1\n            \n    return longestSubsequence\n"}
{"task_id": "Open/8", "completion": "    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    distinct_prime_factors = []\n    for i in a:\n        prime_factors = []\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                prime_factors.append(j)\n        distinct_prime_factors.append(len(set(prime_factors)))\n    return distinct_prime_factors\n"}
{"task_id": "Open/9", "completion": "    arr.sort()\n    kthLargest = arr[n-k]\n    diff = kthLargest - arr[0]\n    for i in range(1,k):\n        diff = min(diff,kthLargest - arr[i])\n    return diff\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else:\n            B.appendleft(A[0])\n            A.pop()\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(0,size):\n        if array[i]%2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = {}\n    count[s[0]] = 1\n    count_sub = 0\n    for i in range(1,len(s)) :\n        if s[i] in count :\n            count[s[i]] += 1\n        else :\n            count[s[i]] = 1\n        if count[s[i]] <= k :\n            count_sub += 1\n        elif count[s[i]] > k :\n            count[s[i]] = 0\n    return count_sub\n"}
{"task_id": "Open/13", "completion": "    return n > 1 and not any( n % i == 0 for i in range( 2, n ) )\n"}
{"task_id": "Open/14", "completion": "    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    for i in range(t):\n        a = random.randint(2,n-1)\n        if (pow(a,(n-1)//2,n)!=1) and (pow(a,(n-1)//2,n)!=n-1):\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "    defeat = False\n    for i in range(n):\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            defeat = True\n            break\n    return defeat\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range( len( s ) ) :\n        if s[i] == '1' and s[i-1] == '0' or s[i] == '0' and s[i-1] == '1' :\n            count += 1\n    return min( count, len( s ) - count )\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1):\n        if math.log(i, 2) == math.floor(math.log(i, 2)):\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    \n    for i in range(n):\n        if a[i]%4 == 0:\n            count0 += 1\n        elif a[i]%4 == 1:\n            count1 += 1\n        elif a[i]%4 == 2:\n            count2 += 1\n        elif a[i]%4 == 3:\n            count3 += 1\n    \n    if count0%2 == 0 and count1%2 == 0 and count2%2 == 0 and count3%2 == 0:\n        return 1\n    else:\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_length = 0\n    current_length = 1\n    \n    for i in range( 1, n ) :\n        if arr[i] > arr[i-1] :\n            current_length += 1\n        else :\n            max_length = max( max_length, current_length )\n            current_length = 1\n            \n    max_length = max( max_length, current_length )\n    \n    return max_length\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        count = subsetSum( arr, n, i + 1, sum - arr[i], count )\n        count = subsetSum( arr, n, i + 1, sum, count )\n        return count\n\narr = [ 3, 34, 4, 12, 5, 2 ]\nn = len( arr )\nsum = 9\ncount = 0"}
{"task_id": "Open/24", "completion": "    pass"}
{"task_id": "Open/25", "completion": "    sum_squares = 0\n    sum_n = 0\n    total_sum = 0\n    for i in range(1,n+1):\n        sum_n += i\n        sum_squares += i**2\n    total_sum = sum_squares + sum_n + 1\n    return total_sum\n"}
{"task_id": "Open/26", "completion": "    factors = []\n    sums = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    for i in factors:\n        for j in factors:\n            if i!= j:\n                sums.append(i*j)\n    return max(sums)\n"}
{"task_id": "Open/27", "completion": "    return x <= y\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return ( ( b - a ) / a ) * 100\n"}
{"task_id": "Open/30", "completion": "    return sum( [ i**2 for i in range( 1, n+1 ) ] ) / n\n"}
{"task_id": "Open/31", "completion": "    heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n    for i in range(k,n):\n        if arr[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n    return heap[0]\n\narr = [12, 3, 5, 7, 4, 19, 26]\nk = 3"}
{"task_id": "Open/32", "completion": "    return 3 ** (n - 1)\n"}
{"task_id": "Open/33", "completion": "    # Step 1. Initialize the first term of the sequence as 1.\n    term = 1\n    \n    # Step 2. Use a loop to calculate the nth term of the sequence.\n    for i in range(1,n):\n        # Step 2a. Multiply the previous term by 2.\n        term = term * 2\n        \n        # Step 2b. Add the difference between the current index and 1.\n        term = term + (i - 1)\n    \n    # Step 3. Return the nth term.\n    return term\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    subarray_product = 1\n    \n    for i in range(len(a)):\n        subarray_product *= a[i]\n        if subarray_product < k:\n            count += 1\n        subarray_product = 1\n    \n    return count\n"}
{"task_id": "Open/35", "completion": "    counter = 0\n    for i in range(1,n+1):\n        if str(i).count(str(d)) > 0:\n            counter += 1\n    return counter\n"}
{"task_id": "Open/36", "completion": "    for i in range(n):\n        while arr[i] > 0 and arr[i] <= n and arr[arr[i]-1]!= arr[i] :\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n    for i in range(n):\n        if arr[i]!= i+1:\n            return i+1\n    return n+1\n"}
{"task_id": "Open/37", "completion": "    # Initialize a list to store the number of ways to climb the staircase.\n    ways_list = [1, 1]\n    # Iterate through the range of n from 2 to 100 (or any desired maximum value).\n    for n in range(2, 100):\n        # Calculate the number of ways to climb the staircase by adding the number of ways to climb from n-1 (by taking 1 step) and the number of ways to climb from n-2 (by taking 2 steps).\n        ways_list.append(ways_list[n-1] + ways_list[n-2])\n    # Return the last element of the list.\n    return ways_list[-1]\n"}
{"task_id": "Open/38", "completion": "    areaSum = 0\n    for i in range(1, min(l,b)+1):\n        areaSum += (l//i)*(b//i)\n    return areaSum\n"}
{"task_id": "Open/39", "completion": "    return N * (N + 1) / 2\n"}
{"task_id": "Open/40", "completion": "    count = 0\n    maxCount = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            count += 1\n        elif arr[i] == 1 :\n            count = 0\n        if count > maxCount :\n            maxCount = count\n    return maxCount\n\narr = [1, 1, 0, 1, 1, 1]\nn = len(arr)"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    current_length = 0\n    \n    for i in range( n ) :\n        if arr[i] == 0 :\n            current_length = 0\n        else :\n            current_length += 1\n        \n        if current_length > max_length :\n            max_length = current_length\n    \n    return max_length\n"}
{"task_id": "Open/42", "completion": "    # initialize an empty list to store the minimum elements of each segment\n    min_list = []\n    \n    # iterate through the array, maintaining a variable to store the current minimum element of the segment\n    cur_min = a[0]\n    for i in range(1,n):\n        if a[i] < cur_min:\n            cur_min = a[i]\n        min_list.append(cur_min)\n    \n    # iterate through the list of minimum elements of each segment\n    cur_max = min_list[0]\n    for i in range(1,len(min_list)):\n        if len(min_list) > 2:\n            if min_list[i] > cur_max:\n                cur_max = min_list[i]\n        else:\n            if min_list[i] > cur_max:\n                cur_max = min_list[i]\n    \n    return cur_max\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range ( n ) :\n        product = 1\n        for j in range ( i + 1 ) :\n            product *= array [ j ]\n            if product <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    arr.sort()\n    sum = 0\n    for i in range(len(arr)) :\n        sum += abs(arr[i] - i + 1)\n    return sum\n\narr = [1, 2, 3, 4, 5]\nn = 5"}
{"task_id": "Open/45", "completion": "    min_ele = min(arr)\n    return min_ele * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    min_element = array[0]\n    max_element = array[-1]\n    for i in array :\n        if i < min_element :\n            min_element = i\n        elif i > max_element :\n            max_element = i\n    return max_element - min_element\n"}
{"task_id": "Open/47", "completion": "    m = (y2 - y1) / (x2 - x1)\n    c = y1 - m * x1\n    if m >= 0:\n        if (y1 >= c and y2 >= c):\n            return True\n        else:\n            return False\n    else:\n        if (y1 <= c and y2 <= c):\n            return True\n        else:\n            return False\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a+1):\n        if a == (a ^ i):\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_value = 0\n    for i in range(L,R+1):\n        max_value = max(max_value,i&max_value)\n    return max_value\n"}
{"task_id": "Open/50", "completion": "    smallest = -1\n    for i in range(n) :\n        if a[i] % smallest == 0 :\n            smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += 1/math.pow(3,i)\n    return sum\n"}
{"task_id": "Open/52", "completion": "    result = 0\n    for i in range(n):\n        for j in range(n):\n            if (i+1)*(j+1) % 2 == 1:\n                result ^= arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "    \n    count = 0\n    \n    for i in range(N+1):\n        if (i ^ i | i) == i:\n            count += 1\n            \n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(n):\n        sum += a[i]\n    if sum + n - 1 == k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/55", "completion": "    return (n & 1) == 1\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 1\n    for i in range( len(s) ) :\n        if s[i] == s[i-1] :\n            max_partitions += 1\n        else :\n            max_partitions = 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    return N - ( N % K )\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = result + var1 + var2 + (var1 * var2)/100\n    for i in range(2,N):\n        result = result + arr[i] + (result * arr[i])/100\n    return result\n"}
{"task_id": "Open/59", "completion": "    # Step 1. Check if the index is within the given array's range.\n    if index < 0 or index >= len(arr) :\n        return None\n    # Step 2. If reversals is 0, return the value at the given index.\n    if reversals == 0 :\n        return arr[index]\n    # Step 3. If reversals is odd, reverse the entire array.\n    if reversals % 2 == 1 :\n        arr.reverse()\n    # Step 4. Find the current range of reversals.\n    # If the current range is within the given ranges, reverse the elements within the range.\n    # Update the index according to the reversed elements.\n    for i in range(len(ranges)) :\n        if ranges[i][0] <= reversals <= ranges[i][1] :\n            for j in range(ranges[i][0],ranges[i][1]+1) :\n                arr[j],arr[len(arr)-j+ranges[i][0]] = arr[len(arr)-j+ranges[i][0]],arr[j]\n            index = index - (ranges[i][1]-ranges["}
{"task_id": "Open/60", "completion": "    for i in range( int( n ** 0.5 ) + 1 ) :\n        if i ** 2 > n :\n            break\n        if ( n - i ** 2 ) ** 0.5 % 1 == 0 :\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    counter = 0\n    for i in range(len(b)):\n        if b[i] == a[0]:\n            counter += 1\n        elif b[i] == a[0] * counter:\n            counter += 1\n        else:\n            return -1\n    return counter\n"}
{"task_id": "Open/62", "completion": "    str = str.strip()\n    str = str[::-1]\n    for i in range(len):\n        if str[i] > str[i+1]:\n            str = str[:i] + '9'*(len-i) + str[i+1:]\n    return str[::-1]\n"}
{"task_id": "Open/63", "completion": "    min_value = arr[0]\n    sum_of_log = 0\n    for i in range(0,n):\n        sum_of_log += math.log(arr[i],2)\n    for i in range(0,n):\n        if (sum_of_log + math.log(min_value,2) * n) < math.log(arr[i],2):\n            min_value = arr[i]\n    return min_value\n\narr = [1,2,3,4,5,6,7,8,9,10]"}
{"task_id": "Open/64", "completion": "    start = -1\n    end = -1\n    max_length = 0\n    \n    for i in range(len(s)) :\n        if s[i] == '1' :\n            if start == -1 :\n                start = i\n            end = i\n        else :\n            if start!= -1 :\n                max_length = max(max_length, end - start + 1)\n                start = -1\n                end = -1\n    \n    if start!= -1 :\n        max_length = max(max_length, end - start + 1)\n    \n    if max_length == 0 :\n        return -1\n    else :\n        return max_length\n"}
{"task_id": "Open/65", "completion": "    \n    # Step 1. Initialize a dictionary to store the count of each element in the array.\n    count = {}\n    \n    # Step 2. Iterate through the array and update the count in the dictionary.\n    for i in range(n) :\n        if a[i] in count :\n            count[a[i]] += 1\n        else :\n            count[a[i]] = 1\n    \n    # Step 3. Find the maximum count greater than or equal to k and subtract it from k.\n    max_count = max(count.values())\n    k -= max_count\n    \n    # Step 4. Initialize a variable to store the length of the modified array.\n    length = 0\n    \n    # Step 5. Iterate through the dictionary and remove the element with the highest count from the array.\n    for key in count :\n        if count[key] == max_count :\n            a.remove(key)\n            count[key] -= 1\n            if k == 0 :\n                return length\n            length += 1\n    \n    # Step 6. Return the length of the modified array.\n    return length\n"}
{"task_id": "Open/66", "completion": "    arr.sort()\n    if len(arr) % 2 == 0 :\n        median = (arr[len(arr)//2] + arr[len(arr)//2 - 1])/2\n    else :\n        median = arr[len(arr)//2]\n    return median\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 5"}
{"task_id": "Open/67", "completion": "    # Initialize variables to store positive, negative, and zero elements count as well as step count.\n    positive = 0\n    negative = 0\n    zero = 0\n    step = 0\n    \n    # Iterate through the array.\n    for i in range(n):\n        if a[i] == 1:\n            positive += 1\n        elif a[i] == -1:\n            negative += 1\n        else:\n            zero += 1\n    \n    # Calculate final step count based on the count of negative and zero elements.\n    if negative % 2 == 0:\n        step += zero\n    else:\n        if zero!= 0:\n            step += zero\n        else:\n            step += 2\n    \n    # Return the total step count.\n    return step\n"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    else :\n        v = []\n        n -= 1\n        while n > 0 :\n            v.append( n % 5 )\n            n = n // 5\n        result = 0\n        for i in range( len( v ) - 1, -1, -1 ) :\n            result = result * 10 + v[ i ]\n        return 2 * result\n"}
{"task_id": "Open/69", "completion": "    \n    setBitsCounter = 0\n    for i in bin(n)[2:] :\n        if i == '1' :\n            setBitsCounter += 1\n        elif i == '0' and setBitsCounter!= 0 :\n            setBitsCounter -= 1\n        elif setBitsCounter > 0 :\n            return True\n    \n    return False\n"}
{"task_id": "Open/70", "completion": "    \n    closest = x\n    \n    while closest < n :\n        closest *= 2\n        if closest < n :\n            closest *= 2\n    \n    return closest\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(0,n+1):\n        sum = sum + 2*i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1):\n        series = [1]\n        for j in range(1, i):\n            series.append(series[j-1]+2)\n        sum += sum(series)\n    return sum\n"}
{"task_id": "Open/73", "completion": "    \n    count_dict = {}\n    max_val = -1\n    max_count = -1\n    \n    for i in range(n) :\n        if arr[i] in count_dict :\n            count_dict[arr[i]] += 1\n        else :\n            count_dict[arr[i]] = 1\n    \n    for key in count_dict :\n        if count_dict[key] > max_count :\n            max_val = key\n            max_count = count_dict[key]\n    \n    if max_count == count_dict[max_val] :\n        return max_val\n    else :\n        return -1\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range( len( a ) ) :\n        for j in range( i + 1, len( a ) ) :\n            if ( a[i] == 2 ** j ) or ( a[j] == 2 ** i ) :\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    pass\n"}
{"task_id": "Open/76", "completion": "    total_changes = 0\n    for i in range( 1, n - 1 ) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            A[i+1] = 0\n            total_changes += 1\n    return total_changes\n"}
{"task_id": "Open/77", "completion": "    degrees = radian * (180/math.pi)\n    return degrees\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1, n + 1):\n        sum += (a + (i - 1) * d)\n    return sum\n"}
{"task_id": "Open/80", "completion": "    while n%2 == 0:\n        n = n/2\n    if n%2 == 1:\n        return 1\n    else:\n        return 0\n"}
{"task_id": "Open/81", "completion": "    # Initialize a 2D list to store the number of squares reachable from each position on the 8x8 chessboard.\n    chessboard = [ [ 0 for i in range(8) ] for j in range(8) ]\n    # Set the value of the starting position (row, column) to 1.\n    chessboard[row][column] = 1\n    # Iterate through the moves.\n    for move in moves :\n        # For each move, check if the new position is valid (within the bounds of the chessboard).\n        if ( move[0] >= 0 and move[0] < 8 and move[1] >= 0 and move[1] < 8 ) :\n            # If the new position is valid, add the value of the current position to the value of the new position.\n            chessboard[move[0]][move[1]] += chessboard[row][column]\n    # Return the sum of the values in the 2D list, excluding the starting position.\n    return sum( sum( chessboard ) ) - chessboard[row][column]\n"}
{"task_id": "Open/82", "completion": "    return sum(range(1, n+1))\n"}
{"task_id": "Open/83", "completion": "    last_occurrences = []\n    for i in range(len(s)):\n        last_occurrences.append(s.rfind(s[i]))\n    sorted_string = sorted(s)\n    for i in range(len(sorted_string)):\n        if sorted_string[i]!= s[last_occurrences[i]]:\n            sorted_string[i], sorted_string[last_occurrences[i]] = sorted_string[last_occurrences[i]], sorted_string[i]\n    return ''.join(sorted_string)\n"}
{"task_id": "Open/84", "completion": "    odd_list = []\n    even_list = []\n    for i in range(n-1):\n        odd_list.append(2*i+1)\n        even_list.append(2*i+2)\n    odd_list.reverse()\n    even_list.extend(odd_list)\n    return sum(even_list[l-1:r])\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        x, y = y, x\n    if x % y == 0 :\n        return y\n    for i in range( int(x/2) + 1 ) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    if N == 1 :\n        return A\n    elif N == 2 :\n        return B\n    else :\n        return findNthNumber ( B, A + B, N - 1 )\n"}
{"task_id": "Open/87", "completion": "    counter = 0\n    for i in range(len(str)):\n        if substr in str[i:]:\n            counter += 1\n    return counter\n"}
{"task_id": "Open/88", "completion": "    r = r / 1200\n    t = t * 12\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n\nemi_calculator(10000, 10, 2)\n"}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range ( 1, A + 1 ) :\n        for j in range ( 1, B + 1 ) :\n            for k in range ( 1, C + 1 ) :\n                if i * k > j * j :\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1):\n        if i%10 == 2 or i%10 == 3 or i%10 == 9:\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    longest_ar = 0\n    current_ar = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] == arr[i-1] - arr[i-2]:\n            current_ar += 1\n        else:\n            current_ar = 1\n        longest_ar = max(longest_ar, current_ar)\n    return longest_ar\n"}
{"task_id": "Open/92", "completion": "    max_len = -1\n    start_index = 0\n    \n    for i in range(len(str)) :\n        if str[i].isalnum() :\n            start_index = i\n        elif str[i].isalnum() == False and (i - start_index + 1) % 2 == 0 and (i - start_index + 1) > max_len :\n            max_len = i - start_index + 1\n    \n    return max_len"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        n = n / 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    # Initialize an empty string to store the modified string.\n    modified_string = \"\"\n    # Iterate through the input string in reverse order.\n    for i in range(len(n)-1,-1,-1):\n        # Append 'a' to the modified string.\n        modified_string += \"a\"\n        # Subtract the current index from k.\n        k -= i\n        # If k is greater than or equal to 0, check if k is greater than or equal to 26.\n        if k >= 0:\n            # If it is, append 'z' to the modified string and subtract 26 from k.\n            if k >= 26:\n                modified_string += \"z\"\n                k -= 26\n            # Else, calculate the ASCII value of the character to be replaced by adding k to 97 and subtracting 1.\n            else:\n                ascii_value = ord(modified_string[i]) + k - 1\n                modified_string = modified_string[:i] + chr(ascii_value) + modified_string[i+1:]\n                k -= ascii_value - ord('a')\n        # If k is less than 0, exit the loop.\n        if"}
{"task_id": "Open/95", "completion": "    total_distance = 0\n    for i in range( n ) :\n        total_distance += fuel / n\n        fuel -= 1\n    return total_distance\n"}
{"task_id": "Open/96", "completion": "    total_sum = 0\n    one_third_sum = 0\n    split_exists = 0\n    \n    for i in range( n ) :\n        total_sum += arr[i]\n    \n    one_third_sum = total_sum / 3\n    \n    for i in range( n ) :\n        if total_sum - arr[i] == one_third_sum :\n            split_exists = 1\n            break\n    \n    if split_exists == 0 :\n        split_exists = 0\n    \n    return split_exists\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    count = 0\n    while n > 0 :\n        n = n // 10\n        count += 1\n    return count\n"}
{"task_id": "Open/99", "completion": "    if a == b == c :\n        return True\n    elif a!= b!= c!= a :\n        return False\n    else :\n        diff = max(a,b,c) - min(a,b,c)\n        if k >= diff :\n            return True\n        else :\n            return False\n"}
{"task_id": "Open/100", "completion": "    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    if x_bin == y_bin :\n        return True\n    else :\n        while x_bin > y_bin :\n            x_bin = x_bin[1:]\n            if x_bin == y_bin :\n                return True\n        return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            count = 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    \n    min_removal = 0\n    current_removal = 0\n    \n    for i in range(1,n) :\n        diff = abs(arr[i] - arr[i-1])\n        if diff > min_removal :\n            min_removal = diff\n        current_removal += 1\n    \n    return min_removal\n"}
{"task_id": "Open/104", "completion": "    max_set_bits = 0\n    current_set_bits = 0\n    left_binary = bin(left)[2:]\n    right_binary = bin(right)[2:]\n    for i in range(len(left_binary)):\n        if left_binary[i] == '0':\n            current_set_bits += 1\n        else:\n            max_set_bits = max(max_set_bits, current_set_bits)\n            current_set_bits = 0\n    if current_set_bits > 0:\n        max_set_bits = max(max_set_bits, current_set_bits)\n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "    while n & (n - 1) :\n        n = n << 1\n    return n\n"}
{"task_id": "Open/106", "completion": "    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum = sum + i\n    if sum == n:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/107", "completion": "    # Step 1\n    centuries = N // 100\n    leapCenturies = N // 400\n    \n    # Step 2\n    leapYears = (N >> 2) - leapCenturies\n    \n    # Step 3\n    nonLeapYears = N - leapYears - leapCenturies\n    \n    # Step 4\n    if centuries > 0:\n        nonLeapYears = nonLeapYears + (centuries * 2)\n        leapYears = leapYears + (centuries * 2) - 1\n    \n    # Step 5\n    totalDays = nonLeapYears + (2 * leapYears)\n    \n    # Step 6\n    oddDays = totalDays % 7\n    \n    # Step 7\n    return oddDays\n"}
{"task_id": "Open/108", "completion": "    if a == 0 or a == 1:\n        return a\n    elif a < 0:\n        return -1\n    else:\n        p = (a - 1) * (a - 2) / 2\n        i = (a - 1) / 2\n        return p + i * i\n"}
{"task_id": "Open/109", "completion": "    # Step 1. Convert the number n into a string.\n    n = str(n)\n    \n    # Step 2. Initialize a variable to store the frequency of the digit d.\n    frequency = 0\n    \n    # Step 3. Iterate through the string representation of n.\n    for digit in n:\n        # If the current character is equal to d, increment the frequency variable.\n        if digit == str(d):\n            frequency += 1\n    \n    # Step 4. Return the frequency variable.\n    return frequency\n"}
{"task_id": "Open/110", "completion": "    last_seen = None\n    for digit in str(n) :\n        if digit == last_seen :\n            return False\n        last_seen = digit\n    return True\n"}
{"task_id": "Open/111", "completion": "    \n    max_element = a[0]\n    for i in range(len(a)):\n        if a[i] % 5 == 0 and a[i] % 3 == 0:\n            max_element = max(max_element, a[i])\n        elif a[i] > max_element:\n            return False\n    return max_element == n\n"}
{"task_id": "Open/112", "completion": "    arr = [0] * (n+1)\n    arr[0] = 4\n    arr[1] = 7\n    for i in range(3, n+1):\n        if i % 2 == 1:\n            arr[i] = arr[i//2] * 10 + 4\n        else:\n            arr[i] = arr[i//2 - 1] * 10 + 7\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "    array = [0]*(n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(3,n+1):\n        if i%2 == 1:\n            array[i] = array[i//2]*10 + 3\n        else:\n            array[i] = array[i//2-1]*10 + 5\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    for i in range(2, n+1):\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 1\n        else:\n            array[i] = array[i//2-1] * 10 + 2\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "    currentNumber = 0\n    for i in range(n):\n        currentNumber = currentNumber + a[i]\n        if currentNumber % 11 == 0:\n            return True\n    return False\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    pass\n"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt( 8 * p + 1 ) / 2 ) - 1\n"}
{"task_id": "Open/119", "completion": "    return len(set(arr)) == len(arr)\n"}
{"task_id": "Open/120", "completion": "    distinct_code = set()\n    for i in range(len(string)):\n        if string[i:i+2] in distinct_code:\n            continue\n        else:\n            distinct_code.add(string[i:i+2])\n    return len(distinct_code)\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    elif lower + 1 == higher :\n        return ( lower + higher ) // 2\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    max_number = 0\n    for i in ss :\n        if i.isdigit() :\n            max_number = max_number * 10 + int(i)\n        else :\n            max_number = max(max_number, int(i))\n    return max_number\n"}
{"task_id": "Open/123", "completion": "    start = -1\n    end = -1\n    longest = \"\"\n    for i in range( length ) :\n        if s[i].isdigit() :\n            start = i\n        else :\n            if end - start + 1 > len( longest ) :\n                longest = s[start : end + 1]\n            end = i\n    return longest\n"}
{"task_id": "Open/124", "completion": "    remainingArea = 1\n    while K > 0 and N > 0 and M > 0:\n        if N > M:\n            N -= M\n        elif M > N:\n            M -= N\n        else:\n            N, M = 0, 0\n        remainingArea *= N\n        remainingArea *= M\n    return remainingArea\n"}
{"task_id": "Open/125", "completion": "    for i in range( len(string) - 1 ) :\n        if string[i] == string[i + 1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    power = 0\n    while n > 0:\n        n = n // 2\n        power += 1\n    return power\n"}
{"task_id": "Open/127", "completion": "    return len(str(A)) == len(str(B))\n"}
{"task_id": "Open/128", "completion": "    if type(x) is not int or type(y) is not int :\n        return False\n    elif x == y :\n        return False\n    elif x - y == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "    \n    # Initialize the Tribonacci words Sn_1, Sn_2, and Sn_3 as \"1\", \"12\", and \"1213\" respectively.\n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    \n    # Iterate from 3 to n.\n    for i in range(3, n+1) :\n        # Set Sn_1 = Sn_2.\n        Sn_1 = Sn_2\n        \n        # Set Sn_2 = Sn_3.\n        Sn_2 = Sn_3\n        \n        # Set Sn_3 = Sn_1 + Sn_2.\n        Sn_3 = Sn_1 + Sn_2\n    \n    # If the current iteration is n, return Sn_3.\n    if i == n :\n        return Sn_3\n    \n    # Return \"\".\n    return \"\"\n"}
{"task_id": "Open/130", "completion": "    # Initialize a variable to store the minimum number of steps required to reach each element in the array.\n    min_steps = [0] * n\n    \n    # Iterate through the array.\n    for i in range(1, n) :\n        min_steps[i] = min_steps[i-1] + abs(arr[i] - arr[i-1])\n    \n    # Return the minimum number of steps variable.\n    return min_steps\n"}
{"task_id": "Open/131", "completion": "    return 0 if n%4==0 or n%4==3 else 1\n"}
{"task_id": "Open/132", "completion": "    m = (N // a) * (N // a + 1) // 2\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if arr[0] % 2 == 1 and arr[n-1] % 2 == 1 and n % 2 == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/135", "completion": "    count = 0\n    if N == 1 :\n        count = R - L + 1\n    elif N > 1 :\n        for i in range( L, R ) :\n            if i % (N-2) == 0 :\n                count += 1\n        count += 1\n    return count\n"}
{"task_id": "Open/136", "completion": "    min = 1\n    for i in range(n):\n        if arr[i] > min:\n            min = arr[i] + 1\n    return min\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1. Sort the string in descending order.\n    s = sorted( s, reverse = True )\n    \n    # Step 2. Initialize a variable to store the smallest possible number.\n    smallest = 0\n    \n    # Step 3. Iterate through the sorted string.\n    for i in range( len( s ) ) :\n        \n        # If the current digit is 0, check if the previous digit can be made smaller by subtracting 1 from it.\n        if s[ i ] == '0' :\n            if i > 0 :\n                if int( s[ i - 1 ] ) - 1 >= 0 :\n                    smallest = smallest * 10 + int( s[ i - 1 ] ) - 1\n                else :\n                    smallest = smallest * 10 + 9\n                \n        # If the current digit is not 0, check if the previous digit can be made smaller by subtracting the current digit from it.\n        else :\n            if i > 0 :\n                if int( s[ i - 1 ] ) - int( s[ i ] ) >= 0 :\n                    smallest = smallest * 10 + int( s[ i - 1 ] ) - int( s["}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range( n ) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for i in s:\n        sum += ord(i)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    total_value = 0\n    remaining_value = S\n    for i in range(N):\n        total_value = total_value + B\n        if total_value >= S:\n            count = count + 1\n            remaining_value = remaining_value - A\n        elif total_value < S:\n            remaining_value = remaining_value - A\n    if remaining_value <= 0:\n        return count\n    else:\n        return -1\n"}
{"task_id": "Open/141", "completion": "    return x * y // math.gcd ( x, y )\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n % 2 == 0 :\n        count += 1\n        n /= 2\n    return count\n"}
{"task_id": "Open/143", "completion": "    \n    left_sum = 0\n    right_sum = 0\n    max_index = 0\n    \n    for i in range(n):\n        left_sum = left_sum ^ arr[i]\n        right_sum = right_sum ^ arr[n-i-1]\n        if left_sum > right_sum:\n            max_index = i\n    \n    return max_index\n"}
{"task_id": "Open/144", "completion": "    # Initialize variables\n    longest_decreasing_subsequence = 0\n    current_longest_decreasing_subsequence = 0\n    \n    # Iterate through the array\n    for i in range( n ) :\n        # Check if the current element is smaller than the previous element\n        if arr[ i ] < arr[ i - 1 ] :\n            # If it is, update the current longest decreasing subsequence length\n            current_longest_decreasing_subsequence += 1\n        # Else, update the length of longest decreasing subsequence if the current longest decreasing subsequence length is greater\n        else :\n            longest_decreasing_subsequence = max( longest_decreasing_subsequence, current_longest_decreasing_subsequence )\n            # Reset the current longest decreasing subsequence length\n            current_longest_decreasing_subsequence = 1\n            \n    # Update the length of longest decreasing subsequence if the current longest decreasing subsequence length is greater\n    longest_decreasing_subsequence = max( longest_decreasing_subsequence, current_longest_decreasing_subsequence )\n    \n    # Return the length of longest decreasing subsequence\n    return longest_decreasing_subsequence\n"}
{"task_id": "Open/145", "completion": "    min_element = arr[0]\n    for i in range(1,n):\n        if (arr[i] - min_element) % k!= 0:\n            return -1\n        min_element = min(min_element,arr[i])\n    return min_element + k\n"}
{"task_id": "Open/146", "completion": "    if K == 1 :\n        return 1\n    else :\n        smallest = -1\n        for i in range(2,K+1) :\n            if K % i == 0 :\n                smallest = i\n        return smallest\n"}
{"task_id": "Open/147", "completion": "    max = min = arr[0]\n    for i in range(1,n):\n        if arr[i] > max:\n            max = arr[i]\n        elif arr[i] < min:\n            min = arr[i]\n    if max == min:\n        return 0\n    else:\n        count = 0\n        for i in range(n):\n            if arr[i] == (max - min) // 2:\n                count += 1\n            elif arr[i] > (max - min) // 2:\n                arr[i] -= 1\n                count += 1\n            else:\n                arr[i] += 1\n                count += 1\n        return count\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(1,n+1):\n        if i == 1 or i == 2:\n            sum += i\n        elif i == 3:\n            sum += 3\n        else:\n            sum += sum - 2\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    return ( p ** 2 + q ** 2 ) / ( p + q ) / 100\n"}
{"task_id": "Open/151", "completion": "    xor = 0\n    for i in range( len1 ) :\n        xor ^= ord( str1[ i ] )\n    return xor\n"}
{"task_id": "Open/152", "completion": "    binary = bin(n)[2:]\n    for i in range(len(binary)-1) :\n        if binary[i] == '1' and binary[i+1] == '1' :\n            return False\n    return True\n"}
{"task_id": "Open/153", "completion": "    lastVowel = None\n    for char in s :\n        if char in \"aeiou\" :\n            if lastVowel is None :\n                lastVowel = char\n            elif char < lastVowel :\n                return False\n            else :\n                lastVowel = char\n    return True\n"}
{"task_id": "Open/154", "completion": "    counter = 0\n    for i in range(low, high+1):\n        if i % 10 >= k:\n            counter += 1\n    return counter\n"}
{"task_id": "Open/155", "completion": "    # Step 1. Calculate the nearest lower power of 2.\n    nearest_lower_power_of_2 = 2 ** math.floor( math.log( n, 2 ) )\n    \n    # Step 2. Calculate the absolute difference between the input number and the nearest lower power of 2.\n    abs_diff = abs( n - nearest_lower_power_of_2 )\n    \n    # Step 3. Return the absolute difference.\n    return abs_diff\n"}
{"task_id": "Open/156", "completion": "    if r < 0:\n        return -1\n    else:\n        return 3 * (1 / (4 * math.pi)) * (r**2) * (math.sin(60) - r * math.cos(60))\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    start = 0\n    end = size - 1\n    while start <= end :\n        mid = (start + end) // 2\n        if ar[mid] == mid :\n            return mid\n        elif ar[mid] > mid :\n            end = mid - 1\n        else :\n            start = mid + 1\n    return start\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    # Initialize a dictionary to store the count of each element in the array.\n    count = {}\n    for i in range(n) :\n        if arr[i] in count :\n            count[arr[i]] += 1\n        else :\n            count[arr[i]] = 1\n    \n    # Iterate through the array.\n    for i in range(n) :\n        if count[arr[i]] % 2!= 0 :\n            return arr[i]\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n        ans = max(ans, xorArr)\n    return ans\n"}
{"task_id": "Open/162", "completion": "    return ( sx == dx and sy < dy ) or ( sx < dx and sy == dy )\n"}
{"task_id": "Open/163", "completion": "    return 0\n"}
{"task_id": "Open/164", "completion": "    d = {}\n    for i in range ( n ) :\n        if arr [ i ] not in d :\n            d [ arr [ i ] ] = 1\n        else :\n            d [ arr [ i ] ] += 1\n    count = 1\n    for i in d :\n        count *= d [ i ]\n    return count\n\narr = [ 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 ]\nn = len ( arr )"}
{"task_id": "Open/165", "completion": "    pass\n"}
{"task_id": "Open/166", "completion": "    #Step 1. Initialize a variable to store the minimum number of steps needed to reach the destination.\n    min_steps = sys.maxsize\n    \n    #Step 2. Check if source is less than or equal to dest.\n    if source <= dest:\n        #If yes, return 0 as the minimum number of steps.\n        return 0\n    \n    #Step 3. Initialize a variable to store the current number of steps.\n    current_steps = 0\n    \n    #Step 4. Iterate through the range of steps from 1 to the maximum number of steps possible.\n    for step in range(1,abs(dest-source)+1):\n        #For each step, calculate the new source value by adding or subtracting step from the current source value.\n        new_source = source + step if source < dest else source - step\n        \n        #If the new source value is less than or equal to dest, update the minimum number of steps with the current step value.\n        if new_source <= dest:\n            min_steps = min(min_steps,current_steps+1)\n        \n        #Update the current number of steps.\n        current_steps += 1\n    \n    #Step 5. If the minimum number of steps is"}
{"task_id": "Open/167", "completion": "    sequence = [ '1' ]\n    for i in range( 2, n + 1 ) :\n        current = ''\n        for j in range( len( sequence[ i - 1 ] ) ) :\n            if j == 0 or sequence[ i - 1 ][ j ]!= sequence[ i - 1 ][ j - 1 ] :\n                current += str( sequence[ i - 1 ].count( sequence[ i - 1 ][ j ] ) ) + sequence[ i - 1 ][ j ]\n        sequence.append( current )\n    return sequence[ n ]\n"}
{"task_id": "Open/168", "completion": "    max_length = N\n    running_product = 1\n    for i in range( N ) :\n        running_product *= arr[ i ]\n        if running_product < 0 :\n            max_length = i + 1\n            running_product = 1\n        elif running_product == 0 :\n            max_length = i + 1\n    return max_length\n"}
{"task_id": "Open/169", "completion": "    return ( math.sqrt( m**2 + n**2 ) ) / ( m * n )\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    sum = 0\n    \n    for i in range( n ) :\n        sum += arr[i]\n        \n        if sum < k :\n            count += 1\n        elif sum == k :\n            count = 0\n        else :\n            count -= 1\n            \n    return count\n\narr = [1, 4, 2, 5, 3]\nn = len( arr )\nk = 7\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range( l, r + 1 ) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return n ^ ( 2 ** ( m - 1 ) - 1 )\n"}
{"task_id": "Open/174", "completion": "    if K == 9 :\n        K = 0\n    count = (R - L) // 9\n    rem = (R - L) % 9\n    count += (rem + 1) // K\n    return count"}
{"task_id": "Open/175", "completion": "    n = str(n)\n    k = int(k)\n    log = math.log10(n)\n    log = int(log)\n    if k > len(n) :\n        k = len(n)\n    if k > log :\n        k = log\n    return int(n[0:k]) * int(log)\n"}
{"task_id": "Open/176", "completion": "    result = -1\n    for i in range(n):\n        if A[i] > A[i-1] and A[i] < A[i+1]:\n            result = A[i]\n            break\n    return result\n"}
{"task_id": "Open/177", "completion": "    return max(a, b, c) - min(a, b, c)\n"}
