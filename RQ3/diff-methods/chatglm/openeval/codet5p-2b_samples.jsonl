{"task_id": "Open/0", "completion": "\n    sum = 0\n    for i in range(0,N):\n        sum += arr[i]\n    count = 0\n    for i in range(0,N):\n        count += (arr[i] - (sum - (arr[i] * K)))\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    minValue = max(arr)\n    count = 0\n    for i in arr:\n        if i < minValue:\n            minValue = i\n        count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "\n    \n    if (n & (1 << (r-l+1))) == 0 :\n        return \"No\"\n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    sum1 = 0\n    sum2 = 0\n    for i in a :\n        sum1 += i\n        sum2 -= i\n    return sum1 == sum2\n"}
{"task_id": "Open/5", "completion": "\n    if x % 2 == 0 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "\n    missing_elements = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            missing_elements.append(i + 1)\n    return missing_elements\n"}
{"task_id": "Open/7", "completion": "\n    longest = 1\n    for i in range(n) :\n        if arr[i] in arr[:i] :\n            longest = max(longest, 1)\n        else :\n            longest = max(longest, 0)\n    return longest\n"}
{"task_id": "Open/8", "completion": "\n    \n    def is_prime(n) :\n        if n == 1 :\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1) :\n            if n % i == 0 :\n                return False\n        return True\n    \n    counts = []\n    for i in a :\n        counts.append(Distinct_Prime_factors(list(set(a) - set(is_prime(i)))))\n    return counts\n"}
{"task_id": "Open/9", "completion": "\n    kth_largest = arr[n-1]\n    first_element = arr[0]\n    sum_diff = 0\n    for i in range(1,n):\n        diff = kth_largest - arr[i]\n        sum_diff += diff\n    return sum_diff\n"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A) > 0 and len(B) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            A.append(A.popleft())\n            B.append(B.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(0, size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    \n    count = {}\n    sub = 0\n    \n    for i in s:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n            \n        if count[i] <= k:\n            sub += 1\n            \n        if count[i] > k:\n            count[i] = 0\n            \n    return sub\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/13", "completion": "\n    current = 2\n    while n >= current :\n        if n % current == 0 :\n            return False\n        n = n - current\n        current = current + 1\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    \n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "\n    \n    a = random.randint(2, n-1)\n    b = pow(a, (n-1)/2, n)\n    if b == 1 or b == n-1 :\n        return 1\n    else :\n        return -1\n"}
{"task_id": "Open/16", "completion": "\n    defeat = False\n    for i in range(len(s1)):\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            defeat = True\n            break\n    return defeat\n"}
{"task_id": "Open/17", "completion": "\n    return ((x * (a + b) * (c - d)) / ((a * d) - (b * c)))\n"}
{"task_id": "Open/18", "completion": "\n    if length == 0 :\n        return 0\n    \n    count = 0\n    for i in range(length) :\n        if i % 2 == 0 :\n            if s[i] == '1' :\n                count += 1\n        else :\n            if s[i] == '0' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n+1) :\n        if math.log(i, 2) == int(math.log(i, 2)) :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return 0\n    else :\n        return x + product(x, y - 1)\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        elif i % 4 == 1 :\n            count1 += 1\n        elif i % 4 == 2 :\n            count2 += 1\n        elif i % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_length = 0\n    current_length = 1\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            current_length += 1\n        else :\n            current_length = 1\n        if current_length > max_length :\n            max_length = current_length\n    return max_length\n\narr = [10, 22, 9, 33, 21, 50, 41, 60]\nn = len(arr)"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    count = subsetSum( arr, n, i + 1, sum, count )\n    count = subsetSum( arr, n, i + 1, sum - arr[i], count )\n    return count\n"}
{"task_id": "Open/24", "completion": "\n    \n    result = 0\n    current = 0\n    \n    if n % 2 == 0 :\n        result = 0\n        current = 1\n    else :\n        result = current\n        current = 0\n        \n    current = current * 10 + n\n    \n    while current < n :\n        current = current * 10 + n\n        result = result + current\n        \n    return result\n"}
{"task_id": "Open/25", "completion": "\n    sum_squares = 0\n    sum_n = 0\n    total_sum = 0\n    for i in range(1,n+1) :\n        sum_n += i\n        sum_squares += i**2\n    total_sum = sum_n + sum_squares + 1\n    return total_sum\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    return x <= y\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return (b-a)/a * 100\n"}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        sum += i**2\n    return sum/n\n"}
{"task_id": "Open/31", "completion": "\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, arr[i])\n    for i in range(k, n):\n        if arr[i] < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arr[i])\n    return min_heap[0]\n"}
{"task_id": "Open/32", "completion": "\n    return 3**(n-1)\n"}
{"task_id": "Open/33", "completion": "\n    \n    term = 1\n    for i in range(n) :\n        term = term * 2 + (n - i)\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    count = 0\n    for i in range(len(a)):\n        product = 1\n        for j in range(i,len(a)):\n            product *= a[j]\n            if product < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    counter = 0\n    for i in range(1, n+1) :\n        if (i % 10 == d) :\n            counter += 1\n    return counter\n"}
{"task_id": "Open/36", "completion": "\n    arr.sort()\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n    return n+1\n"}
{"task_id": "Open/37", "completion": "\n    \n    ways = [1,1]\n    for i in range(2,n+1) :\n        ways.append(ways[i-1] + ways[i-2])\n    return ways[-1]\n"}
{"task_id": "Open/38", "completion": "\n    areaSum = 0\n    for i in range ( 1, l + 1 ) :\n        for j in range ( 1, b + 1 ) :\n            areaSum += i * j\n    return areaSum\n"}
{"task_id": "Open/39", "completion": "\n    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "\n    count_zeros = 0\n    count_ones = 0\n    max_count = 0\n    \n    for i in range(n) :\n        if arr[i] == 0 :\n            count_zeros += 1\n        elif arr[i] == 1 :\n            count_ones += 1\n            if count_zeros > max_count :\n                max_count = count_zeros\n            count_zeros = 0\n    \n    if count_ones > max_count :\n        max_count = count_ones\n    \n    return max_count\n"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_length = 0\n        else:\n            current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\n"}
{"task_id": "Open/42", "completion": "\n    \n    if k == 1 :\n        return min(a)\n    \n    min_list = []\n    \n    for i in range(0, n, k) :\n        min_list.append(min(a[i:i+k]))\n        \n    max_value = max(min_list)\n    \n    if k == 2 :\n        return max_value\n    \n    return max(min_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n) :\n        product = 1\n        for j in range(i,n) :\n            product *= array[j]\n            if product <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(n) :\n        sum += abs(arr[i] - i)\n    return sum\n"}
{"task_id": "Open/45", "completion": "\n    min_element = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "\n    if len(array) == 0 :\n        return 0\n    min_element = array[0]\n    max_element = array[0]\n    for i in range(1,len(array)):\n        if array[i] < min_element :\n            min_element = array[i]\n        if array[i] > max_element :\n            max_element = array[i]\n    return max_element - min_element\n"}
{"task_id": "Open/47", "completion": "\n    m = (y1 - y2) / (x1 - x2)\n    c = y1 - m * x1\n    if (m == 0) :\n        return True\n    elif (m > 0) :\n        if (x1 == x2) :\n            return True\n        elif (x1 > x2) :\n            return (y1 > c)\n        else :\n            return (y1 < c)\n    else :\n        if (x1 == x2) :\n            return True\n        elif (x1 < x2) :\n            return (y1 < c)\n        else :\n            return (y1 > c)\n"}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(0,a+1) :\n        if (a ^ i) == a :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max_value = 0\n    for i in range(L,R+1):\n        max_value = max(max_value,i&R)\n    return max_value\n"}
{"task_id": "Open/50", "completion": "\n    smallest = -1\n    for i in range(n) :\n        if a[i] % smallest == 0 :\n            smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "\n    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "\n    result = 0\n    for i in range(n) :\n        for j in range(n) :\n            if (arr[i][j] & arr[i][j+1]) == 0 and (arr[i][j] & arr[i+1][j]) == 0 :\n                result ^= arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(0, N+1) :\n        if (xorEqualsOrCount(i) == i) :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum + n - 1 == k\n"}
{"task_id": "Open/55", "completion": "\n    return ( n & (n-1) == 0 )\n"}
{"task_id": "Open/56", "completion": "\n    maxPartitions = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            maxPartitions += 1\n        else:\n            maxPartitions = 1\n    return maxPartitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    for i in range(2,N+1):\n        var1 = arr[i-1]\n        var2 = arr[i-2]\n        result = result + var1 + var2\n        result = result / 100\n    return result\n\narr = [1,2,3,4,5,6,7,8,9,10]\nN = len(arr)"}
{"task_id": "Open/59", "completion": "\n    \n    if index < 0 or index >= len(arr) :\n        return -1\n    \n    if reversals == 0 :\n        return arr[index]\n    \n    if reversals % 2 == 0 :\n        return answer(arr, ranges, reversals // 2, index)\n    \n    for i in range(index, len(arr)) :\n        if i in ranges :\n            arr[i], arr[index] = arr[index], arr[i]\n            break\n    \n    return answer(arr, ranges, reversals - 1, index + 1)\n"}
{"task_id": "Open/60", "completion": "\n    if n <= 1 :\n        return True\n    a = 0\n    b = 0\n    while a <= n :\n        a = a + 1\n        b = b + 1\n        if a * a > n :\n            break\n    if a * a == n :\n        return True\n    if b * b == n :\n        return True\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    counter = 0\n    for i in range(len(b)):\n        if b[i] == a[0]:\n            counter += 1\n        else:\n            if b[i] in a:\n                counter += 1\n    if counter < 1:\n        return -1\n    return counter\n"}
{"task_id": "Open/62", "completion": "\n    \n    modifiedString = \"\"\n    currentIndex = len(str) - 2\n    \n    while currentIndex >= 0 :\n        if str[currentIndex] > str[currentIndex + 1] :\n            str[currentIndex] = str[currentIndex] - 1\n            str[currentIndex + 1] = 9\n        modifiedString = modifiedString + str[currentIndex]\n        currentIndex -= 1\n    \n    return modifiedString\n"}
{"task_id": "Open/63", "completion": "\n    min_value = arr[0]\n    for i in range(1, n) :\n        sum = 0\n        for j in range(i) :\n            sum += math.log(arr[j])\n        if sum < math.log(min_value) * n :\n            min_value = arr[i]\n    return min_value\n"}
{"task_id": "Open/64", "completion": "\n    start = 0\n    end = 0\n    max_length = 0\n    \n    for i in range(len(s)):\n        if s[i]!= '1':\n            start = i\n        else:\n            end = i\n            if end == -1:\n                return -1\n        if max_length < end - start + 1:\n            max_length = end - start + 1\n    return max_length\n"}
{"task_id": "Open/65", "completion": "\n    d = {}\n    for i in a :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    k = k - 1\n    max_count = max(d.values())\n    if k >= max_count :\n        return len(a)\n    else :\n        for i in d :\n            if d[i] >= max_count :\n                d[i] -= 1\n        return len(a) - max_count\n"}
{"task_id": "Open/66", "completion": "\n    size = n + k\n    arr.sort()\n    if size % 2 == 0 :\n        return (arr[size//2-1] + arr[size//2])/2\n    else :\n        return arr[size//2]\n"}
{"task_id": "Open/67", "completion": "\n    \n    pos = 0\n    neg = 0\n    zero = 0\n    step = 0\n    \n    for i in range(n) :\n        if a[i] == 1 :\n            pos += 1\n        elif a[i] == -1 :\n            neg += 1\n        elif a[i] == 0 :\n            zero += 1\n    \n    if pos % 2 == 0 :\n        step += zero\n    else :\n        step += pos\n    \n    if neg % 2 == 0 :\n        step += zero\n    else :\n        step += neg\n    \n    return step\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    while n > 1 :\n        v.append(n % 5)\n        n = n // 5\n    v.append(n)\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return result\n"}
{"task_id": "Open/69", "completion": "\n    setBits = 0\n    while n > 0 :\n        if n & 1 :\n            setBits += 1\n        n = n >> 1\n    return setBits > 0\n"}
{"task_id": "Open/70", "completion": "\n    closest_multiple = x\n    if x > n :\n        return x\n    elif x < n :\n        while x*2 < n :\n            x = x*2\n            if x*2 > n :\n                return x*2\n        return x*2\n    else :\n        return x\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(n+1) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        sum += i\n        i += 2\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    count_dict = {}\n    max_val = -1\n    max_count = -1\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    for key, value in count_dict.items():\n        if value > max_count:\n            max_count = value\n            max_val = key\n    if max_count == -1:\n        return -1\n    else:\n        return max_val\n\narr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n) :\n        if a[i] > 0 :\n            if a[i] & 1 == 1 :\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    return int( bin(n)[2:].replace(\"0\",\"1\").replace(\"1\",\"0\"),2)\n"}
{"task_id": "Open/76", "completion": "\n    \n    totalChanges = 0\n    \n    for i in range(n) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            A[i+1] = 0\n            totalChanges += 1\n    \n    return totalChanges\n"}
{"task_id": "Open/77", "completion": "\n    radian = float(input(\"Enter the radian value: \"))\n    degrees = radian * (180/pi)\n    print(degrees)\n    return degrees\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range(1, n + 1):\n        sum += a + (i - 1) * d\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    while n % 2 == 0 :\n        n = n // 2\n    return 1 if n == 1 else makeOdd(n)\n"}
{"task_id": "Open/81", "completion": "\n    \n    squares = [[0 for i in range(8)] for j in range(8)]\n    squares[row][column] = 1\n    \n    for move in moves :\n        new_row = row + move[0]\n        new_column = column + move[1]\n        \n        if ( new_row >= 0 and new_row < 8 and new_column >= 0 and new_column < 8 ) :\n            squares[new_row][new_column] += squares[row][column]\n    \n    return sum(squares[row])\n"}
{"task_id": "Open/82", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    return n + findNumber(n-1)\n"}
{"task_id": "Open/83", "completion": "\n    s = list(s)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if s[i] > s[j]:\n                s[i],s[j] = s[j],s[i]\n    return \"\".join(s)\n"}
{"task_id": "Open/84", "completion": "\n    odd = []\n    even = []\n    for i in range(n-1) :\n        if i%2 == 0 :\n            even.append(i+1)\n        else :\n            odd.append(i+1)\n    odd.reverse()\n    even.reverse()\n    sum = 0\n    for i in range(l-1, r) :\n        sum += odd[i]\n        sum += even[i]\n    return sum\n"}
{"task_id": "Open/85", "completion": "\n    if x > y :\n        smaller = y\n    else :\n        smaller = x\n    for i in range(1, smaller+1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "\n    if A == B :\n        return -1\n    \n    if A > B :\n        return -1\n    \n    if N == 0 :\n        return -1\n    \n    if N == 1 :\n        return A\n    \n    if N == 2 :\n        return A + B\n    \n    if N > 2 :\n        return findNthNumber ( A + B, B, N - 2 ) + findNthNumber ( A, B, N - 1 )\n    \n    return -1\n"}
{"task_id": "Open/87", "completion": "\n    counter = 0\n    for i in range(len(str)):\n        if substr in str[i:i+len(substr)]:\n            counter += 1\n    return counter\n"}
{"task_id": "Open/88", "completion": "\n    emi = ( p * r * (1 + r)**t ) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i] * B[j] > C[0] * C[1]:\n                count += 1\n    for i in range(len(B)):\n        for j in range(len(C)):\n            if B[i] * C[j] > A[0] * A[1]:\n                count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range(l,r+1):\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9:\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    longest = 0\n    current = 0\n    \n    for i in range(n) :\n        current = max(current, 1 + longestAr(i, arr))\n        longest = max(longest, current)\n    \n    return longest\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/92", "completion": "\n    max_len = -1\n    start_index = 0\n    for i in range(len( str )):\n        if str[i].isalnum():\n            start_index = i\n        else:\n            if i - start_index > max_len:\n                max_len = i - start_index\n            start_index = i\n    return max_len\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n >= 1 :\n        n = n // 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    modified_string = \"\"\n    \n    for i in reversed(range(n)):\n        modified_string += 'a'\n        \n        if k > 0:\n            if k > 26:\n                modified_string += 'z'\n                k -= 26\n            else:\n                modified_string += chr(97 + k)\n                k -= 1\n        \n        k += 1\n    \n    return modified_string[::-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel/n\n        fuel -= fuel/n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    total_sum = sum(arr)\n    one_third_sum = total_sum/3\n    split_exists = 0\n    for i in range(0,n-1):\n        sum_before = sum(arr[:i+1])\n        sum_after = sum(arr[i+1:])\n        if sum_before == one_third_sum and sum_after == 2*one_third_sum:\n            split_exists = 1\n            break\n    return split_exists\n"}
{"task_id": "Open/97", "completion": "\n    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "\n    count = 0\n    while n > 0 :\n        count += 1\n        n = math.floor(n / 10)\n    return count\n"}
{"task_id": "Open/99", "completion": "\n    if a!= b and a!= c and b!= c :\n        return False\n    if a == b or a == c or b == c :\n        return False\n    if k > (max(a, b, c) - min(a, b, c)) :\n        return False\n    return True\n"}
{"task_id": "Open/100", "completion": "\n    if x == y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            count = 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    min_removal = 0\n    current_removal = 0\n    \n    for i in range(1, n) :\n        current_removal = abs(arr[i] - arr[i-1])\n        if current_removal > min_removal :\n            min_removal = current_removal\n    \n    return min_removal\n"}
{"task_id": "Open/104", "completion": "\n    max_set_bits = 0\n    current_set_bits = 0\n    \n    while left > 0 or right > 0:\n        if left % 2 == 0:\n            current_set_bits += 1\n            left = left >> 1\n        else:\n            current_set_bits = 0\n            left = left >> 1\n        if right % 2 == 0:\n            current_set_bits += 1\n            right = right >> 1\n        else:\n            current_set_bits = 0\n            right = right >> 1\n        max_set_bits = max(max_set_bits, current_set_bits)\n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "\n    while n!= 1 :\n        n = n >> 1\n    return n\n"}
{"task_id": "Open/106", "completion": "\n    if n < 1 :\n        return False\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum += i\n    return sum == n\n"}
{"task_id": "Open/107", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/108", "completion": "\n    p = 0\n    i = 0\n    if a == 0 or a == 1 :\n        return a\n    elif a < 0 :\n        return -1\n    else :\n        p = (a - 1) * (a - 2) / 2\n        i = (a - 1) / 2\n        return p + i * i\n    "}
{"task_id": "Open/109", "completion": "\n    count = 0\n    while n > 0 :\n        if n % 10 == d :\n            count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/110", "completion": "\n    last_seen = None\n    for digit in str( n ) :\n        if last_seen == digit :\n            return False\n        last_seen = digit\n    return True\n"}
{"task_id": "Open/111", "completion": "\n    max_element = 0\n    for i in a :\n        if i % 5 == 0 and i % 3 == 0 :\n            max_element = i\n            break\n    if max_element == 0 :\n        return True\n    for i in a :\n        if i > max_element :\n            return False\n    return True\n"}
{"task_id": "Open/112", "completion": "\n    array = [0] * (n+1)\n    array[0] = 4\n    array[1] = 7\n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] + 4\n        else :\n            array[i] = array[i//2] + 7\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    \n    array = [0]*(n+1)\n    array[0] = 3\n    array[1] = 5\n    \n    for i in range(2, n+1) :\n        if i%2 == 0 :\n            array[i] = array[i//2]*10 + 3\n        else :\n            array[i] = array[i//2]*10 + 5\n    \n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    \n    array = [0]*(n+1)\n    array[0] = 1\n    array[1] = 2\n    \n    for i in range(2,n+1) :\n        if i%2 == 0 :\n            array[i] = array[i//2]*10 + 1\n        else :\n            array[i] = array[i//2]*10 + 2\n    \n    return array[n]\n    "}
{"task_id": "Open/115", "completion": "\n    \n    if a[0] == 0 :\n        return False\n    \n    current_number = 0\n    for i in range(len(a)) :\n        current_number += a[i]\n        if current_number % 11 == 0 :\n            return True\n    return False\n"}
{"task_id": "Open/116", "completion": "\n    if l > 0 and b > 0 and h > 0 :\n        return l*b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "\n    \n    list_of_words = string.split()\n    \n    new_list = []\n    \n    for word in list_of_words :\n        \n        first_letter = word[0].upper()\n        last_letter = word[-1].upper()\n        \n        new_word = first_letter + last_letter\n        \n        new_list.append(new_word)\n        \n    return \" \".join(new_list)\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil(math.sqrt(8 * p + 1) - 1) // 2\n"}
{"task_id": "Open/119", "completion": "\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/120", "completion": "\n    \n    set = set()\n    \n    for i in string :\n        if (i in set) :\n            set.remove(i)\n        else :\n            set.add(i)\n    \n    return len(set)\n"}
{"task_id": "Open/121", "completion": "\n    \n    if lower == higher :\n        return lower\n    elif lower!= higher :\n        if abs(lower - higher) == 1 :\n            return lower\n        else :\n            return 2\n"}
{"task_id": "Open/122", "completion": "\n    max_number = 0\n    for i in ss :\n        if i.isdigit() :\n            max_number = max_number * 10 + int(i)\n        else :\n            if max_number > int(ss[0]) :\n                max_number = int(ss[0])\n    return max_number\n"}
{"task_id": "Open/123", "completion": "\n    start = -1\n    end = -1\n    longest = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            start = i\n        else:\n            if start!= -1 and len(s[start:i+1]) > longest:\n                longest = len(s[start:i+1])\n                end = i\n    return s[start:end+1]\n    "}
{"task_id": "Open/124", "completion": "\n    remaining_area = 1\n    while K > 0 and (N > 0 or M > 0):\n        if N > M:\n            N -= M\n        else:\n            M -= N\n        remaining_area *= N\n        K -= 1\n    return remaining_area\n"}
{"task_id": "Open/125", "completion": "\n    previous = None\n    for i in string :\n        if previous == i :\n            return False\n        previous = i\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    power = 0\n    while n >= 1 :\n        n = n // 2\n        power += 1\n    return power\n"}
{"task_id": "Open/127", "completion": "\n    \n    A = str(A)\n    B = str(B)\n    \n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n    "}
{"task_id": "Open/128", "completion": "\n    if (type(x) is not int) or (type(y) is not int) :\n        return False\n    if (x == y) :\n        return False\n    diff = abs(x-y)\n    if (diff == 1) :\n        return True\n    return False\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    \n    for i in range(3, n+1) :\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2\n    \n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    steps = 0\n    for i in range(1,n):\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 :\n        return 0\n    elif n % 4 == 3 :\n        return 1\n    elif n % 4 == 1 or n % 4 == 2 :\n        return -1\n    else :\n        return -1\n"}
{"task_id": "Open/132", "completion": "\n    m = 0\n    for i in range(1, N + 1) :\n        if i % a == 0 :\n            m += i\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "\n    if arr[0] % 2!= 0 :\n        return False\n    if arr[-1] % 2!= 0 :\n        return False\n    if n % 2!= 0 :\n        return False\n    return True\n"}
{"task_id": "Open/135", "completion": "\n    count = 0\n    if N == 1 :\n        return countSum ( N, L, R )\n    elif N > 1 :\n        for i in range ( L, R ) :\n            if i + N - 2 >= L and i + N - 2 <= R :\n                count += 1\n            elif i + N - 2 < L :\n                count += countSum ( N, L, i + N - 2 )\n            elif i + N - 2 > R :\n                count += countSum ( N, i + N - 2, R )\n        return count\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "\n    min = arr[0]\n    for i in range(1,n) :\n        if arr[i] < min :\n            min = arr[i]\n        else :\n            if arr[i] > min + 1 :\n                min = arr[i]\n    return min + 1\n"}
{"task_id": "Open/137", "completion": "\n    s = sorted(s,reverse=True)\n    smallest = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            if smallest < int(s[i-1]) - 1:\n                smallest = int(s[i-1]) - 1\n        else:\n            if smallest < int(s[i]) - 1:\n                smallest = int(s[i]) - 1\n    return smallest\n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for i in s :\n        sum += ord(i)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "\n    count = -1\n    total_value = 0\n    remaining_value = S\n    \n    if N == 0:\n        return -1\n    \n    while N > 0:\n        if remaining_value >= B:\n            total_value += B\n            remaining_value -= B\n            count += 1\n        else:\n            remaining_value = remaining_value - B\n            count += 1\n        N -= 1\n    \n    return count\n\nA = 5\nB = 3\nS = 7\nN = 2"}
{"task_id": "Open/141", "completion": "\n    if x == 0 or y == 0 :\n        return (x or y)\n    else :\n        while x or y :\n            if x > y :\n                x = x - y\n            else :\n                y = y - x\n        return x * y\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n!= 0 :\n        n = n // 2\n        count += 1\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    max_index = -1\n    left_sum = 0\n    right_sum = 0\n    for i in range(n):\n        left_sum = left_sum ^ arr[i]\n        right_sum = right_sum ^ arr[n-i-1]\n        if left_sum > right_sum:\n            max_index = i\n    return max_index\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/144", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    longest_decreasing_subsequence = 1\n    current_longest_decreasing_subsequence = 1\n    \n    for i in range(1, n) :\n        if arr[i] < arr[i-1] :\n            current_longest_decreasing_subsequence = 1\n        else :\n            current_longest_decreasing_subsequence += 1\n        \n        if current_longest_decreasing_subsequence > longest_decreasing_subsequence :\n            longest_decreasing_subsequence = current_longest_decreasing_subsequence\n            \n    return longest_decreasing_subsequence\n"}
{"task_id": "Open/145", "completion": "\n    min_element = arr[0]\n    for i in range(1,n) :\n        if (arr[i] - min_element) % k!= 0 :\n            return -1\n        min_element = min(min_element, arr[i])\n    return min_element + k\n"}
{"task_id": "Open/146", "completion": "\n    smallest_repeating_sequence_length = -1\n    if K == 1 :\n        return 1\n    for i in range(2, K+1) :\n        if K % i == 0 :\n            smallest_repeating_sequence_length = i\n    return smallest_repeating_sequence_length\n"}
{"task_id": "Open/147", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    min_operations = sys.maxsize\n    max_element = sys.maxsize\n    min_element = sys.maxsize\n    \n    for i in range(n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n        if arr[i] > max_element :\n            max_element = arr[i]\n    \n    if max_element - min_element == 0 :\n        return 0\n    \n    min_operations = (max_element - min_element) // 2\n    \n    for i in range(n) :\n        if arr[i] == min_element :\n            min_operations += 1\n        elif arr[i] == max_element :\n            min_operations -= 1\n        else :\n            min_operations += 1\n            max_element -= 1\n    \n    return min_operations\n"}
{"task_id": "Open/148", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        if i == 1 or i == 2 :\n            sum += i\n        elif i == 3 :\n            sum += 3\n        else :\n            sum += sum + 2\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    XOR_result = 0\n    for i in range(len1) :\n        XOR_result = XOR_result ^ ord(str1[i])\n    return XOR_result\n"}
{"task_id": "Open/152", "completion": "\n    \n    binary = str(bin(n))\n    \n    for i in range(len(binary)):\n        if binary[i] == '1' and binary[i-1] == '1':\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/153", "completion": "\n    last_vowel = None\n    for c in s :\n        if c in 'aeiou' :\n            if last_vowel is None :\n                last_vowel = c\n            elif c < last_vowel :\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    counter = 0\n    for i in range(low,high+1):\n        last_digit = int(str(i)[-1])\n        if last_digit >= k:\n            counter += 1\n    return counter\n"}
{"task_id": "Open/155", "completion": "\n    \n    # Step 1. Calculate the nearest lower power of 2.\n    powerOfTwo = math.ceil(math.log(n,2))\n    \n    # Step 2. Calculate the absolute difference between the input number and the nearest lower power of 2.\n    absDiff = abs(n - 2**powerOfTwo)\n    \n    return absDiff\n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else :\n        area = 3 * (1 / (4 * pi)) * (r**2) * (sin(60) - r * cos(60))\n        return area\n"}
{"task_id": "Open/157", "completion": "\n    s = s.lower()\n    s = sorted(s)\n    s = ''.join(s)\n    return s\n"}
{"task_id": "Open/158", "completion": "\n    if size == 0 :\n        return -1\n    if size == 1 :\n        return 0 if ar[0] == target else -1\n    \n    start = 0\n    end = size - 1\n    while start <= end :\n        mid = (start + end) // 2\n        if ar[mid] == target :\n            return mid\n        elif ar[mid] < target :\n            start = mid + 1\n        else :\n            end = mid - 1\n    return -1\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    for i in range(len(arr)):\n        if d[arr[i]] % 2 == 1:\n            return arr[i]\n    return -1\n"}
{"task_id": "Open/161", "completion": "\n    ans = 0\n    xorArr = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n    for i in range(n) :\n        ans = ans ^ arr[i]\n        xorArr = xorArr ^ arr[i]\n        if ans > xorArr :\n            ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "\n    if sx == dx and sy == dy :\n        return True\n    if abs(dx - sx) == abs(dy - sy) :\n        return True\n    return False\n"}
{"task_id": "Open/163", "completion": "\n    ways = 0\n    if n == 0 or n == 4:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    else:\n        for i in range(2, n+1):\n            if n-i % 2 == 0:\n                ways += 1\n        return ways\n"}
{"task_id": "Open/164", "completion": "\n    count = {}\n    for i in arr :\n        if i not in count :\n            count[i] = 1\n        else :\n            count[i] += 1\n    return (len(arr) * count[arr[0]])\n"}
{"task_id": "Open/165", "completion": "Write a function that takes an integer height and returns the number of nodes in an AVL tree of that height.\n        \n        How to solve:  \n        Step 1. Initialize the number of nodes as 0.  \n        Step 2. Recursively call the function with height - 1.  \n        Step 3. Add the number of nodes in the left subtree to the result of step 2.  \n        Step 4. Add 1 to the result of step 3.  \n        Step 5. Recursively call the function with height - 1.  \n        Step 6. Add the number of nodes in the right subtree to the result of step 5.  \n        Step 7. Return the result of step 6.\n        \"\"\"\n        \n        def AVLnodes ( height ) :\n            \"\"\"Write a function that takes an integer height and returns the number of nodes in an AVL tree of that height.\n            \n            How to solve:  \n            Step 1. Initialize the number of nodes as 0.  \n            Step 2. Recursively call the function with height - 1.  \n            Step 3"}
{"task_id": "Open/166", "completion": "\n    min_steps = sys.maxsize\n    if source <= dest :\n        return 0\n    for i in range(1, dest+1) :\n        new_source = source + step\n        if new_source <= dest :\n            min_steps = min(min_steps, i)\n    if min_steps == sys.maxsize :\n        return sys.maxsize\n    return min_steps\n"}
{"task_id": "Open/167", "completion": "\n    sequence = []\n    sequence.append(1)\n    for i in range(2, n+1) :\n        current_term = \"\"\n        count = 0\n        for j in range(len(sequence[i-1])) :\n            if sequence[i-1][j] == sequence[i-1][j+1] :\n                count += 1\n            else :\n                current_term += str(count) + sequence[i-1][j]\n                count = 0\n        current_term += str(count) + sequence[i-1][j+1]\n        sequence.append(current_term)\n    return sequence[n]\n"}
{"task_id": "Open/168", "completion": "\n    max_length = N\n    running_product = 1\n    for i in range(N):\n        running_product *= arr[i]\n        if running_product < 0:\n            max_length = max(max_length, i)\n            running_product = 1\n    return max_length\n"}
{"task_id": "Open/169", "completion": "\n    magnitude = math.sqrt( m * m + n * n )\n    dot_product = m * n\n    return ( dot_product / magnitude )\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if i % 2 == 0 and i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    \n    return int(str(n)[:-m] + str(n)[-m:][::-1], 2) + n\n"}
{"task_id": "Open/174", "completion": "\n    count = 0\n    if K == 9 :\n        K = 0\n    for i in range(R, L-1, -1) :\n        if i % 9 == K :\n            count += 1\n        K = (K + 1) % 9\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    \n    n = str(n)\n    k = k % len(n)\n    \n    return int(n[:k]) * math.log(int(n), 10)\n    "}
{"task_id": "Open/176", "completion": "\n    result = -1\n    for i in range(n):\n        if A[i] > A[i-1] and A[i] < A[i+1]:\n            result = A[i]\n    return result\n\nA = [1,2,3,4,5,6,7,8,9]\nn = len(A)"}
{"task_id": "Open/177", "completion": "\n    a = min(a,b,c)\n    b = max(a,b,c)\n    c = sum(a,b)\n    c = c - a\n    return c\n"}
