{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "    # TODO: Write your code here\n    return []\n"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "    account_balance = 0\n    for operation in operations:\n        account_balance += operation\n        if account_balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "    # TODO: Implement this function.\n    return 0.0\n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    if len(numbers) >= 2:\n        result.append(numbers[0])\n        result.append(delimeter)\n        result.append(numbers[1])\n        for i in range(2, len(numbers)):\n            result.append(numbers[i])\n            result.append(delimeter)\n    else:\n        result.append(numbers[0])\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "    # Step 1. Initialize an empty list to store the result.\n    result = []\n    # Step 2. Initialize a stack to store the opening parentheses.\n    stack = []\n    # Step 3. Iterate through the input string.\n    for char in paren_string:\n        # If the current character is an opening parenthesis, push it onto the stack.\n        if char == \"(\":\n            stack.append(char)\n        # If the current character is a closing parenthesis, pop the top element from the stack and append it to the result list.\n        elif char == \")\":\n            result.append(len(stack))\n            stack.pop()\n        # If the stack is empty and the current character is not a closing parenthesis, append 0 to the result list.\n        else:\n            result.append(0)\n    # Step 4. Return the result list.\n    return result\n\n"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n\n"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    for number in numbers:\n        if number > max(rolling_max_list):\n            rolling_max_list.append(number)\n    return rolling_max_list\n\n"}
{"task_id": "HumanEval/10", "completion": " Test if given string is a palindrome \"\"\"\n        return string == string[::-1]\n    \n    # Step 2. Initialize two pointers, one at the beginning and one at the end of the input string.\n    left, right = 0, len(string) - 1\n    \n    # Step 3. Compare characters at the two pointers, if they are not equal, move the pointer that has the smaller character to the right until both pointers are at the same position.\n    while left < right and not is_palindrome(string[left:right + 1]):\n        if string[left] < string[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    # Step 4. Return True if the string is a palindrome, False otherwise.\n    if left >= right:\n        return True\n    else:\n        return False\n    \n    # Step 1. Define a helper function to find the longest palindromic suffix of the input string.\n    def find_longest_palindrome_suffix(string: str) -> str:\n        \"\"\""}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n\n"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_len = len(strings[0])\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > longest_len:\n            longest_len = len(s)\n            longest_str = s\n    return longest_str\n"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for character in string:\n        prefixes.append(character)\n        prefixes.append(\"\")\n    prefixes.sort()\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "    # Step 1\n    sequence = \"\"\n    \n    # Step 2\n    for i in range(n):\n        sequence += str(i) + \" \"\n    \n    # Step 3\n    sequence = sequence[:-1]\n    \n    # Step 4\n    return sequence\n"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "    # TODO: Implement me\n    pass\n"}
{"task_id": "HumanEval/18", "completion": "    # TODO: Write your code here\n    return 0\n"}
{"task_id": "HumanEval/19", "completion": "    numbers = list(map(int, numbers.split()))\n    numbers.sort(reverse=True)\n    return''.join(map(str, numbers))\n\n"}
{"task_id": "HumanEval/20", "completion": "    min_diff = 1e10\n    min_pair = None\n    for i in range(len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i - 1], numbers[i])\n    return min_pair\n\n"}
{"task_id": "HumanEval/21", "completion": "    # TODO: Implement\n    return numbers\n"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: isinstance(x, int), values))\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n"}
{"task_id": "HumanEval/25", "completion": "    if n < 2:\n        return []\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n            factors.append(2)\n        elif n % 2!= 0:\n            n = n - 1\n            factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "    # Step 1. Initialize an empty dictionary to store unique elements.\n    unique_elements = {}\n    # Step 2. Iterate through the input list.\n    for number in numbers:\n        # If the current element is not in the dictionary, add it with a value of 1.\n        if number not in unique_elements:\n            unique_elements[number] = 1\n        # If the current element is already in the dictionary and its value is less than or equal to 1, increment its value by 1.\n        else:\n            unique_elements[number] += 1\n    # Step 3. Initialize an empty list to store the unique elements in their original order.\n    output_list = []\n    # Step 4. Iterate through the dictionary.\n    for number, value in unique_elements.items():\n        # For each unique element, add it to the output list with a value of 1.\n        output_list.append(number)\n    # Step 5. Return the output list.\n    return output_list\n\n"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2!= 0:\n        return None\n    largest_coeff = max(xs)\n    if largest_coeff == 0:\n        return None\n    a = 0\n    b = 0\n    c = 0\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            a += 1\n            b += xs[i] * i\n            c += xs[i] * i * i\n    if a % 2 == 0:\n        return None\n    d = b * b - 4 * a * c\n    if d < 0:\n        return None\n    x1 = (-b + math.sqrt(d)) / (2 * a)\n    x2 = (-b - math.sqrt(d)) / (2 * a)\n    return min(x1, x2)\n\n"}
{"task_id": "HumanEval/33", "completion": "    # Step 1\n    new_list = []\n    # Step 2\n    i = 0\n    j = 0\n    # Step 3\n    while i < len(l):\n        if i % 3 == 0:\n            # Step 3.1\n            new_list.append(sorted(l[i:i+3]))\n            # Step 3.2\n            i += 2\n        else:\n            # Step 3.3\n            new_list.append(l[i])\n            # Step 3.4\n            i += 1\n    # Step 4\n    return new_list\n"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "    counter = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                counter += 1\n    return counter\n"}
{"task_id": "HumanEval/37", "completion": "    l' = [None] * len(l)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l'[i] = l[i]\n        else:\n            l'[i] = sorted(l[i])[0]\n    return l'\n"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0])[::-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "    fib_list = [0, 1]\n    is_prime = True\n\n    for i in range(2, n):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n        if not is_prime(fib_list[i]):\n            is_prime = False\n\n    if is_prime:\n        return fib_list[n-1]\n    else:\n        return None\n"}
{"task_id": "HumanEval/40", "completion": "    # Step 1. Create a set to store unique elements from the input list.\n    unique_elements = set(l)\n\n    # Step 2. Iterate through the set.\n    # For each element, calculate the complement (0 - element).\n    # Check if the complement is in the set.\n    # If both elements are in the set and their sum is 0, return True.\n    for element in unique_elements:\n        complement = 0 - element\n        if complement in unique_elements and element + complement == 0:\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "    # Step 1\n    cars = [0] * n\n\n    # Step 2\n    for i in range(n):\n        cars[i] = i + 1\n        for j in range(i):\n            cars[i] += cars[j]\n\n    # Step 3\n    return cars.count(cars[0])\n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "    # Step 1\n    d = {}\n    # Step 2\n    for i in l:\n        if i in d and d[i] > 1:\n            return True\n        d[i] = d.get(i, 0) + 1\n    # Step 3\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "    if base > 10:\n        raise ValueError(\"Base must be less than 10.\")\n    x = str(x)\n    counter = len(x) - 1\n    acc = 0\n    for digit in x[::-1]:\n        acc += int(digit) * (base ** counter)\n        counter -= 1\n    return str(acc)\n"}
{"task_id": "HumanEval/45", "completion": "    return a * h / 2\n"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "    return bin(n)[2:].zfill(p)[::-1].index(p)\n"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) - 5) % 26 + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "    # Step 1\n    count = 0\n    # Step 2\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        elif char == \">\":\n            count -= 1\n        else:\n            return False\n    # Step 3\n    return count == 0\n"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] >= l[j]:\n            i += 1\n        elif l[i] < l[j]:\n            j -= 1\n        else:\n            if l[i+1] == l[i]:\n                i += 1\n            else:\n                return False\n    return True\n"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "    largest_prime_factor = 1\n    while n % 2 == 0:\n        n //= 2\n        largest_prime_factor = 2\n    for i in range(3, n + 1, 2):\n        while n % i == 0:\n            n //= i\n            largest_prime_factor = i\n    return largest_prime_factor\n"}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n + 1))\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    # Step 1. Initialize the derivative list with the same length as xs.\n    derivative_list = [0] * len(xs)\n    # Step 2. Iterate through xs.\n    for index, x in enumerate(xs):\n        # If the current index is 0, add 1 to the corresponding element in the derivative list.\n        if index == 0:\n            derivative_list[index] = 1\n        # Else, add x^(index-1) to the corresponding element in the derivative list.\n        else:\n            derivative_list[index] = x ** (index - 1)\n    # Step 3. Return the derivative list.\n    return derivative_list\n"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "    # TODO: Write your code here\n    count = 0\n    for i in s:\n        if i in 'aeiouAEIOU':\n            count += 1\n        elif i == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "    return int(str(x)[shift:] + str(x)[:shift])\n"}
{"task_id": "HumanEval/66", "completion": "    # Step 1\n    sum = 0\n\n    # Step 2\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n\n    # Step 3\n    return sum\n\n"}
{"task_id": "HumanEval/67", "completion": "    mango_count = 0\n    if n == sum(map(int,s.split())):\n        return 0\n    for i in s:\n        if i == 'A':\n            apples_count += 1\n        elif i == 'O':\n            oranges_count += 1\n        elif i == 'M':\n            mango_count += 1\n    return mango_count\n"}
{"task_id": "HumanEval/68", "completion": "    smallest_value = None\n    smallest_index = None\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and smallest_value is None:\n            smallest_value = arr[i]\n            smallest_index = i\n        elif arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value = arr[i]\n            smallest_index = i\n    if smallest_value is None:\n        return []\n    return [smallest_value, smallest_index]\n\n"}
{"task_id": "HumanEval/69", "completion": "    greatest = -1\n    for i in lst:\n        if lst.count(i) >= i:\n            greatest = i\n    return greatest\n"}
{"task_id": "HumanEval/70", "completion": "    # Step 1. Initialize an empty list to store the sorted elements.\n    sorted_list = []\n    # Step 2. Find the minimum value in the input list and append it to the sorted list.\n    min_value = min(lst)\n    sorted_list.append(min_value)\n    # Step 3. Find the maximum value in the remaining integers and append it to the sorted list.\n    max_value = max(lst)\n    sorted_list.append(max_value)\n    # Step 4. Remove the minimum and maximum values from the input list.\n    lst.remove(min_value)\n    lst.remove(max_value)\n    # Step 5. Repeat steps 2-4 until the input list is empty.\n    while lst:\n        # Step 6. Return the sorted list.\n        return sorted_list\n"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1]:\n        return sum(q) <= w\n    else:\n        return False\n\nwill_it_fly([1, 2], 5)"}
{"task_id": "HumanEval/73", "completion": "    changes = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[::-1][i]:\n            changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "    # Step 1\n    total_char_count = 0\n\n    # Step 2\n    for i in lst1:\n        total_char_count += len(i)\n\n    for i in lst2:\n        total_char_count += len(i)\n\n    # Step 3\n    if total_char_count > 0:\n        if total_char_count < len(lst1):\n            return lst1\n        else:\n            return lst2\n    else:\n        return lst1\n\n"}
{"task_id": "HumanEval/75", "completion": "    if a < 100:\n        if a % 3 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/76", "completion": "    if x == 0 or x == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        return x == n**int(x)\n"}
{"task_id": "HumanEval/77", "completion": "    if a == 0 or a == 1:\n        return True\n    x = int(a**0.5)\n    if x**2 == a:\n        return True\n    return False\n"}
{"task_id": "HumanEval/78", "completion": "    if not num:\n        return 0\n    count = 0\n    digits = [int(i) for i in list(num)]\n    for digit in digits:\n        if digit in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    if decimal < 0:\n        binary += \"db\"\n        decimal = abs(decimal)\n    binary += bin(decimal)[2:]\n    binary = binary[::-1]\n    binary = \"db\" + binary + \"db\"\n    return binary\n"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    unique_chars = set()\n    for char in s:\n        if char in unique_chars:\n            unique_chars.remove(char)\n        else:\n            unique_chars.add(char)\n    if len(unique_chars) == 0:\n        return True\n    return False\n"}
{"task_id": "HumanEval/81", "completion": "    # Step 1. Define a dictionary with GPA ranges and corresponding letter grades as keys and values.\n    grade_dict = {'A+': 4.0, 'A': 3.7, 'A-': 3.3, 'B+': 3.0, 'B': 2.7, 'B-': 2.3, 'C+': 2.0, 'C': 1.7, 'C-': 1.3, 'D+': 1.0, 'D': 0.7, 'D-': 0.0, 'E': 0.0}\n\n    # Step 2. Iterate through the list of GPAs.\n    # -Check if the GPA is in the dictionary.\n    # -If it is, return the corresponding letter grade.\n    # -If it's not, return \"E\".\n    return [grade_dict.get(grade, 'E') for grade in grades]\n"}
{"task_id": "HumanEval/82", "completion": "    if len(string) <= 1:\n        return False\n    elif len(string) == 2:\n        return True\n    else:\n        for i in range(3, len(string)+1, 2):\n            if string.count(str(i)) > 0:\n                return False\n        return True\n"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10, n+1):\n        if str(i)[0] == '1':\n            count += 1\n        if str(i)[-1] == '1':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "    # Step 1\n    binary_rep = bin(N)[2:]\n    # Step 2\n    sum = 0\n    # Step 3\n    for digit in binary_rep:\n        sum += int(digit)\n    # Step 4\n    return sum\n"}
{"task_id": "HumanEval/85", "completion": "    result = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            if lst[i] % 2 == 0:\n                result.append(lst[i])\n    return result\n\n"}
{"task_id": "HumanEval/86", "completion": "    # Step 1\n    d = {}\n    for i in s:\n        d[ord(i)] = i\n    # Step 2\n    s = \"\"\n    for i in s.split():\n        d[ord(i)] = i\n    # Step 3\n    s = \"\"\n    # Step 4\n    for i in d:\n        s += d[i]\n    # Step 5\n    return s\n"}
{"task_id": "HumanEval/87", "completion": "    # Step 1\n    coordinates = []\n    # Step 2\n    for row in lst:\n        if row[0] == x:\n            coordinates.append((lst.index(row), row.index(x)))\n    # Step 3\n    coordinates = sorted(coordinates, key=lambda x: x[0])\n    # Step 4\n    for i in range(len(coordinates)):\n        coordinates[i] = (coordinates[i][0], len(coordinates[i][1]) - 1)\n    # Step 5\n    return coordinates\n\n"}
{"task_id": "HumanEval/88", "completion": "    # Step 1. Create a copy of the input array and store it in a new variable.\n    new_array = array.copy()\n    # Step 2. Check if the sum of the first and last index values of the copied array is odd or even.\n    # If the sum is odd, sort the array in ascending order.\n    # If the sum is even, sort the array in descending order.\n    if sum(new_array[0], new_array[-1]) % 2 == 1:\n        new_array.sort()\n    else:\n        new_array.sort(reverse=True)\n    # Step 3. Return the sorted array.\n    return new_array\n"}
{"task_id": "HumanEval/89", "completion": "Rotate an alphabet by 2 positions.\"\"\"\n        return alphabet[1:] + alphabet[0]\n    \n    # Step 2\n    def find_rotated_position(letter, rotated_alphabet):\n        \"\"\"Find the index of the letter in the rotated alphabet.\"\"\"\n        return rotated_alphabet.find(letter)\n    \n    # Step 3\n    encrypted = \"\"\n    \n    # Step 4\n    for letter in s:\n        # Step 4.1\n        rotated_position = find_rotated_position(letter, rotate_alphabet(ALPHABET))\n        \n        # Step 4.2\n        encrypted += rotated_position\n    \n    # Step 5\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "    min1 = min2 = None\n    for i in lst:\n        if min1 is None or i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n    return min2 if min2 is not None else None\n"}
{"task_id": "HumanEval/91", "completion": "    # Step 1\n    boredom_count = 0\n    \n    # Step 2\n    words = S.split()\n    \n    # Step 3\n    for word in words:\n        if word.startswith(\"I\"):\n            boredom_count += 1\n    \n    # Step 4\n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "\n"}
{"task_id": "HumanEval/94", "completion": "    # Step 1\n    largest_prime = 0\n    sum_of_digits = 0\n\n    # Step 2\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n                sum_of_digits = 0\n            sum_of_digits += num\n\n    # Step 3\n    return sum_of_digits\n\n"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "    # Step 1\n    prime_numbers = []\n    \n    # Step 2\n    if n < 2:\n        return prime_numbers\n    \n    # Step 3\n    prime_numbers.append(2)\n    \n    # Step 4\n    for i in range(3, n + 1):\n        # Step 5\n        if i not in prime_numbers:\n            prime_numbers.append(i)\n    \n    return prime_numbers\n"}
{"task_id": "HumanEval/97", "completion": "    a = str(a)\n    b = str(b)\n    a_unit = a[-1]\n    b_unit = b[-1]\n    return int(a_unit) * int(b_unit)\n"}
{"task_id": "HumanEval/98", "completion": "    \n    # Initialize a variable to store the count of uppercase vowels in even indices.\n    count = 0\n    \n    # Iterate through the string.\n    for i in range(len(s)):\n        # Check if the current character is an uppercase vowel.\n        if s[i].isupper() and i % 2 == 0:\n            # If the current character is an uppercase vowel and its index is even, increment the count.\n            count += 1\n    \n    # Return the count of uppercase vowels in even indices.\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "    return int(abs(value) - 0.5)\n"}
{"task_id": "HumanEval/100", "completion": "    # Step 1\n    pile = []\n    # Step 2\n    if n % 2 == 1:\n        pile.append(n)\n    # Step 3\n    else:\n        pile.append(n-1)\n    # Step 4\n    for i in range(1, len(pile)):\n        # Step 4.1\n        if i % 2 == 1:\n            pile[i] += 2\n        # Step 4.2\n        else:\n            pile[i] += 1\n    # Step 5\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "    words = []\n    words = s.split(\",\")\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "    result = -1\n    if x % 2 == 0 and x >= y:\n        return x\n    elif y % 2 == 0 and y >= x:\n        return y\n    else:\n        x += 1\n        while x <= y:\n            if x % 2 == 0 and x >= y:\n                return x\n            elif y % 2 == 0 and y >= x:\n                return y\n            else:\n                x += 1\n    return result\n"}
{"task_id": "HumanEval/103", "completion": "    # Step 1. Initialize sum and count variables to 0.\n    sum = 0\n    count = 0\n    # Step 2. Iterate through range(n, m+1).\n    for i in range(n, m+1):\n        # Step 2.1. add value to sum.\n        sum += i\n        # Step 2.2. increment count.\n        count += 1\n    # Step 3. Calculate average by dividing sum by count.\n    avg = sum/count\n    # Step 4. Round average to the nearest integer and convert to binary.\n    rounded_avg = int(round(avg))\n    binary_avg = bin(rounded_avg)\n    # Step 5. If n is greater than m, return -1.\n    if n > m:\n        return -1\n    # Step 6. Return binary value.\n    return binary_avg[2:]\n"}
{"task_id": "HumanEval/104", "completion": "    # Step 1\n    unique_digits = []\n    \n    # Step 2\n    for i in x:\n        if not any(i%2==0 for i in str(i)):\n            unique_digits.append(i)\n    \n    # Step 3\n    unique_digits.sort()\n    \n    # Step 4\n    return unique_digits\n"}
{"task_id": "HumanEval/105", "completion": "    # Step 1. Create a list of integers between 1 and 9 inclusive.\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    # Step 2. Sort the list of integers.\n    digits.sort()\n\n    # Step 3. Reverse the sorted list of integers.\n    digits.reverse()\n\n    # Step 4. Create a dictionary with digits as keys and their corresponding names as values.\n    names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n\n    # Step 5. Iterate through the reversed sorted list of integers.\n    # Get the corresponding name of the digit from the dictionary.\n    # Replace the digit with its corresponding name.\n    # Join the modified list of integers to form the final string.\n    return [names[digit] for digit in digits]\n\n"}
{"task_id": "HumanEval/106", "completion": "\n"}
{"task_id": "HumanEval/107", "completion": "    # Write your code here\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            for digit in str(abs(num)):\n                sum += int(digit)\n                if sum > 0:\n                    count += 1\n        else:\n            sum += num\n            if sum > 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    max_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n    if max_element == 0:\n        return True\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == max_element:\n            return True\n        arr[i + 1] = arr[i]\n    arr[0] = max_element\n    return False\n\n"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) == 0:\n        return \"NO\"\n    odd_count = 0\n    for i in lst1:\n        if i % 2!= 0:\n            odd_count += 1\n        if odd_count > len(lst2):\n            return \"NO\"\n    for i in lst2:\n        if i in lst1:\n            odd_count -= 1\n    if odd_count == 0:\n        return \"YES\"\n    return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "    # TODO: Write your code here\n    pass\n"}
{"task_id": "HumanEval/112", "completion": "    # Step 1\n    result = \"\"\n    # Step 2\n    for i in s:\n        if i not in c:\n            result += i\n    # Step 3\n    result = result[::-1]\n    # Step 4\n    if result == s:\n        return result, True\n    else:\n        return result, False\n"}
{"task_id": "HumanEval/113", "completion": "    # Step 1\n    count = []\n    # Step 2\n    for i in lst:\n        # Step 3\n        count.append(len([j for j in i if j % 2!= 0]))\n    # Step 4\n    return count\n\n"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum -= min(nums)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "    # Step 1\n    n = len(grid)\n    m = len(grid[0])\n    max_fill = 0\n    num_fill = 0\n\n    # Step 2\n    for i in range(n):\n        min_height = math.inf\n        for j in range(m):\n            if grid[i][j] == 1:\n                min_height = min(min_height, j)\n        if min_height > capacity:\n            max_fill += 1\n        num_fill += min_height > capacity\n\n    # Step 3\n    return num_fill\n\n"}
{"task_id": "HumanEval/116", "completion": "    def count_ones(n):\n        return n.bit_count()\n    \n    def sort_by_count(arr):\n        arr.sort(key=lambda x: count_ones(x), reverse=True)\n        return arr\n    \n    def sort_by_decimal(arr):\n        arr.sort(key=lambda x: x)\n        return arr\n    \n    return sort_by_count(sort_by_decimal(arr))\n"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n    return result\n\n"}
{"task_id": "HumanEval/118", "completion": "    closest_vowel = ''\n    closest_vowel_index = 0\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if closest_vowel == '':\n                closest_vowel = word[i]\n                closest_vowel_index = i\n            else:\n                if word[i] < closest_vowel:\n                    closest_vowel = word[i]\n                    closest_vowel_index = i\n    return closest_vowel\n\n"}
{"task_id": "HumanEval/119", "completion": "    # Step 1. Initialize a stack to store the opening parentheses.\n    stack = []\n\n    # Step 2. Iterate through the first string.\n    for char in lst[0]:\n        # If the current character is an opening parenthesis, push it to the stack.\n        if char == \"(\":\n            stack.append(char)\n        # If the current character is a closing parenthesis, pop the top element from the stack and check if it's an opening parenthesis.\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return \"No\"\n\n    # Step 3. Initialize a variable to store the number of closing parentheses.\n    num_close = 0\n\n    # Step 4. Iterate through the second string.\n    for char in lst[1]:\n        # If the current character is an opening parenthesis, push it to the stack.\n        if char == \"(\":\n            stack.append(char)\n        # If the current character is a closing parenthesis, pop the top element from the stack and check if it's an opening parenthesis.\n        else:\n            if stack:\n                stack.pop()\n            else:\n                num_close += 1\n\n    # Step 5. Return 'Yes' if"}
{"task_id": "HumanEval/120", "completion": "    max_list = []\n    max_num = -1000000\n    for num in arr:\n        if num > max_num:\n            max_list.append(num)\n            max_num = num\n        elif num == max_num:\n            max_list.append(num)\n    if len(max_list) > k:\n        max_list = max_list[:k]\n    return max_list\n"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 1:\n                sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "HumanEval/123", "completion": "    # Step 1. Initialize an empty list to store the odd numbers in Collatz sequence.\n    odd_collatz = []\n    # Step 2. Define a helper function to generate the Collatz sequence for a given number.\n    def get_collatz(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            return get_collatz(n // 2)\n        else:\n            return get_collatz(3 * n + 1)\n    # Step 3. Call the helper function for the given number and append the result to the list.\n    for i in range(1, n + 1):\n        odd_collatz.append(get_collatz(i))\n    # Step 4. Iterate through the list and remove the even numbers.\n    for i in range(len(odd_collatz)):\n        if len(odd_collatz[i]) % 2 == 0:\n            del odd_collatz[i]\n    # Step 5. Sort the list in increasing order.\n    odd_collatz.sort()\n    # Step 6. Return the sorted list.\n    return odd_collatz\n\n"}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    else:\n        month, day, year = date.split('-')\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(day) < 1 or int(day) > 31:\n            if int(month) == 2:\n                return int(day) < 1 or int(day) > 29\n            else:\n                return int(day) < 1 or int(day) > 30\n        if int(year) < 1 or int(year) > 2050:\n            return False\n        return True\n"}
{"task_id": "HumanEval/125", "completion": "\n"}
{"task_id": "HumanEval/126", "completion": "    previous_element = lst[0]\n    for element in lst[1:]:\n        if element < previous_element:\n            return False\n        previous_element = element\n    if len(set(lst)) > 1:\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/127", "completion": "    # Step 1. Check if the given intervals intersect.\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    # Step 2. Calculate the length of the intersection.\n    length = interval1[1] - interval1[0]\n    # Step 3. Check if the length of the intersection is a prime number.\n    if is_prime(length):\n        return \"YES\"\n    return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n"}
{"task_id": "HumanEval/129", "completion": "\n    def pathExists(grid, i, j, k):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j]!= k:\n            return False\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return True\n        return pathExists(grid, i + 1, j, k) or pathExists(grid, i, j + 1, k)\n\n    def findMinPath(grid, i, j, k):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j]!= k:\n            return float('inf')\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return 0\n        return min(findMinPath(grid, i + 1, j,"}
{"task_id": "HumanEval/130", "completion": "    # Step 1\n    sequence = []\n    # Step 2\n    sequence.append(3)\n    sequence.append(1)\n    sequence.append(2)\n    # Step 3\n    for i in range(4, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + (i/2))\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    # Step 4\n    return sequence\n"}
{"task_id": "HumanEval/131", "completion": "    # Step 1\n    product = 1\n    # Step 2\n    n = str(n)\n    # Step 3\n    for digit in n:\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    # Step 4\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append(i)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return True\n    return False\n"}
{"task_id": "HumanEval/133", "completion": "    # Write your code here\n    sum = 0\n    for i in lst:\n        sum += int(round(i**2))\n    return sum\n"}
{"task_id": "HumanEval/134", "completion": "    last_char = txt[-1]\n    if last_char.isalpha() and not txt.split()[-1]:\n        return True\n    else:\n        return False\n\ncheck_if_last_char_is_a_letter(\"apple pie\")"}
{"task_id": "HumanEval/135", "completion": "    largest_index = -1\n    for current_index in range(len(arr)):\n        if current_index > largest_index and arr[current_index] <= arr[current_index - 1]:\n            largest_index = current_index\n    return largest_index\n\n"}
{"task_id": "HumanEval/136", "completion": "    # Step 1\n    largest_negative = None\n    smallest_positive = None\n    \n    # Step 2\n    for element in lst:\n        if element < 0 and largest_negative is None:\n            largest_negative = element\n        elif element > 0 and smallest_positive is None:\n            smallest_positive = element\n        elif element < 0 and element > largest_negative:\n            largest_negative = element\n        elif element > 0 and element < smallest_positive:\n            smallest_positive = element\n    \n    # Step 3\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n"}
{"task_id": "HumanEval/138", "completion": "    sum = 0\n    even_numbers = []\n    for i in range(2, n//2+1):\n        if i % 2 == 0:\n            sum += i\n            even_numbers.append(i)\n    if sum == n:\n        for i in even_numbers:\n            if i % 2!= 0 and i not in even_numbers:\n                return False\n        return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return 1\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "    # Step 1\n    result = \"\"\n    \n    # Step 2\n    if text.count(\" \") > 2:\n        result = text.replace(\" \", \"-\")\n    else:\n        result = text.replace(\" \", \"_\")\n    \n    # Step 3\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "    # TODO: Write your code here\n    return 'Yes' if len(file_name) <= 3 and file_name.count('.') == 1 and file_name[0].isalpha() and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n"}
{"task_id": "HumanEval/142", "completion": "    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))\n"}
{"task_id": "HumanEval/143", "completion": "    # Step 1\n    prime_words = []\n\n    # Step 2\n    words = sentence.split()\n\n    # Step 3\n    for word in words:\n        # Step 3.1\n        if is_prime(len(word)):\n            # Step 3.2\n            prime_words.append(word)\n\n    # Step 4\n    return \" \".join(prime_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "    # Step 1. Convert x and n from string representation to fractions.\n    x = Fraction(x)\n    n = Fraction(n)\n\n    # Step 2. Calculate the product of x and n.\n    product = x * n\n\n    # Step 3. Check if the product is a whole number.\n    if product.numerator == product.denominator:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "    result = []\n    for i in range(len(nums)):\n        sum_of_digits = sum(int(digit) for digit in str(nums[i]))\n        result.insert(sum_of_digits, nums[i])\n    return result\n\n"}
{"task_id": "HumanEval/146", "completion": "    # TODO: Write your code here\n    counter = 0\n    for num in nums:\n        if num > 10:\n            if (num % 10) % 2 == 1 and (num % 100) % 2 == 1:\n                counter += 1\n    return counter\n"}
{"task_id": "HumanEval/147", "completion": "    # Step 1\n    max_triples = []\n\n    # Step 2\n    for i in range(1, n+1):\n        a[i] = i * i - i + 1\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    max_triples.append((a[i], a[j], a[k]))\n\n    # Step 3\n    return len(max_triples)\n"}
{"task_id": "HumanEval/148", "completion": "\n"}
{"task_id": "HumanEval/149", "completion": "    # write your code here\n    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key=len)\n\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert sorted_list_sum([\"a\", \""}
{"task_id": "HumanEval/150", "completion": "\n"}
{"task_id": "HumanEval/151", "completion": "    sum = 0\n    for i in lst:\n        if i % 2 == 1 and isinstance(i, int):\n            sum += i ** 2\n    return sum\n"}
{"task_id": "HumanEval/152", "completion": "    # write your code here\n    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = \"\"\n    for extension in extensions:\n        strength = 0\n        for char in extension:\n            if char.isupper():\n                strength += 1\n        if strength > len(strongest_extension):\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n\n"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            if b[i:] in a:\n                return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "    # TODO: Write your code here.\n    pass\n"}
{"task_id": "HumanEval/156", "completion": "    # Step 1. Create a dictionary to store the roman numeral representation for each integer from 1 to 1000.\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000:'m'\n    }\n\n    # Step 2. Iterate through the dictionary and check if the number is present in it.\n    # If present, return the corresponding roman numeral as a lowercase string.\n    # If not present, return an error message or raise an exception.\n    for number, roman_numeral in roman_numerals.items():\n        if number <= number:\n            return roman_numeral\n    return \"Invalid input\"\n\n"}
{"task_id": "HumanEval/157", "completion": "    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    elif a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = 0\n    remaining_carrots = remaining\n    if remaining_carrots >= need:\n        total_eaten = number + need\n        remaining_carrots = remaining_carrots - need\n    return [total_eaten, remaining_carrots]\n"}
{"task_id": "HumanEval/160", "completion": "    if len(operator)!= len(operand) - 1:\n        return \"Error: The length of operator list is not equal to the length of operand list minus one.\"\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n        else:\n            return \"Error: The operator is not supported.\"\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "    # Step 1. Initialize an empty string to store the result.\n    result = \"\"\n    # Step 2. Iterate through the input string s.\n    for i in range(len(s)):\n        # If s[i] is a letter, swap its case from lower to upper or vice versa.\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        # If s[i] is not a letter, append the character to the result string.\n        else:\n            result += s[i]\n    # Step 3. Return the result string.\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "    # Step 1\n    even_digits = []\n\n    # Step 2\n    if a % 2 == 0:\n        even_digits.append(a)\n\n    # Step 3\n    for i in range(a + 1, b + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n\n    # Step 4\n    even_digits.sort()\n\n    # Step 5\n    return even_digits\n\n"}
