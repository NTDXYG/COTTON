{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n    \n    "}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    opening_paren_pointer = 0\n    closing_paren_pointer = 0\n    for char in paren_string:\n        if char == '(':\n            opening_paren_pointer += 1\n        elif char == ')':\n            closing_paren_pointer += 1\n        if opening_paren_pointer == 0 and closing_paren_pointer > 0:\n            result.append(paren_string[opening_paren_pointer:closing_paren_pointer])\n            opening_paren_pointer = 0\n            closing_paren_pointer = 0\n    return result\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n    pass\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = 0\n    for number in numbers:\n        absolute_differences += abs(number - mean)\n    return absolute_differences / len(numbers)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    if len(numbers) >= 2:\n        result.append(numbers[0])\n        result.append(delimeter)\n        result.append(numbers[1])\n        for i in range(2, len(numbers)):\n            result.append(numbers[i])\n            result.append(delimeter)\n    else:\n        result.append(numbers[0])\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    stack = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                result.append(0)\n            else:\n                stack.pop()\n\n    return result\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n    \n    "}
{"task_id": "HumanEval/8", "completion": "\n    sum, product = 0, 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n    \n    "}
{"task_id": "HumanEval/9", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(numbers[i], result[i - 1]))\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": " Find the longest palindromic suffix of the input string \"\"\"\n        \n        # Initialize two pointers, one at the beginning and one at the end of the input string.  \n        left, right = 0, len(string) - 1\n        \n        # Compare characters at the two pointers, if they are not equal, move the pointer that has the smaller character to the right until both pointers are at the same position.  \n        while left < right:\n            if string[left]!= string[right]:\n                if string[left] < string[right]:\n                    left += 1\n                else:\n                    right -= 1\n            else:\n                left += 1\n                right -= 1\n        \n        return string[left:right+1]\n    \n    # Step 1. Define a helper function to check if a given string is a palindrome.  \n    def is_palindrome(string: str) -> bool:\n        \"\"\" Test if given string is a palindrome \"\"\"\n        return string == string[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    return max(strings, key=len)\n    \n    "}
{"task_id": "HumanEval/13", "completion": "\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    prefixes.sort()\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "\n    return \" \".join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "\n    durations = []\n    for char in music_string:\n        if char == 'o':\n            durations.append(4)\n        elif char == 'o|':\n            durations.append(2)\n        elif char == '.|':\n            durations.append(1)\n    return durations\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    counter = 0\n    original_string_pointer = 0\n    substring_pointer = 0\n    while original_string_pointer < len(string):\n        if string[original_string_pointer] == substring[substring_pointer]:\n            counter += 1\n            original_string_pointer += 1\n            substring_pointer += 1\n        else:\n            original_string_pointer += 1\n    return counter\n"}
{"task_id": "HumanEval/19", "completion": "\n    numbers_list = [int(x) for x in numbers.split()]\n    numbers_list.sort(reverse=True)\n    return''.join([str(x) for x in numbers_list])\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_diff = 1e10\n    min_pair = None\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (numbers[i], numbers[j])\n\n    return min_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n    \n    "}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int) or isinstance(value, float)]\n    # return [value for value in values if isinstance(value, int) or isinstance(value, float)]\n    # return [value for value in values if isinstance(value, int) or isinstance(value, float) or isinstance(value, str)]\n    # return [value for value in values if isinstance(value, int) or isinstance(value, float) or isinstance(value, str)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    i = 3\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    unique_elements = {}\n    for number in numbers:\n        if number not in unique_elements:\n            unique_elements[number] = 1\n        else:\n            unique_elements[number] += 1\n    output_list = []\n    for number in unique_elements:\n        if unique_elements[number] <= 1:\n            output_list.append(number)\n    return output_list\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join([i.swapcase() if i.isupper() else i.swapcase() for i in string])\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2!= 0:\n        return None\n    \n    non_zero_coeff = max(filter(lambda x: x!= 0, xs))\n    \n    a = sum([coeff * coeff for coeff in xs])\n    b = sum([coeff * non_zero_coeff for coeff in xs])\n    c = sum([coeff * non_zero_coeff * non_zero_coeff for coeff in xs])\n    \n    delta = b * b - 4 * a * c\n    \n    if delta < 0:\n        return None\n    \n    return (-b + math.sqrt(delta)) / (2 * a)\n    \n    "}
{"task_id": "HumanEval/33", "completion": "\n    new_list = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(l[i])\n            new_list.append(l[i+1])\n            new_list.append(l[i+2])\n        else:\n            new_list.append(l[i])\n    return new_list\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n"}
{"task_id": "HumanEval/36", "completion": "\n    counter = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                counter += 1\n    return counter\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    l_new = [None] * len(l)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_new[i] = l[i]\n        else:\n            l_new[i] = l[i]\n            l_new[i].sort()\n    return l_new\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/38", "completion": "\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[::-1] if len(group) == 3 else group + group[-1]) for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    fib_seq = [1, 2]\n    prime = [2]\n    i = 0\n    while fib_seq[i] < n:\n        fib_seq.append(fib_seq[i] + fib_seq[i+1])\n        if fib_seq[i+1] % 2 == 0:\n            prime.append(fib_seq[i+1])\n        i += 1\n    if fib_seq[i] == n:\n        return fib_seq[i]\n    else:\n        return None\n    \n"}
{"task_id": "HumanEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    positions = []\n    for i in range(n):\n        positions.append(i)\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                positions[i] = positions[i] + 1\n                positions[j] = positions[j] - 1\n                if positions[i] == positions[j]:\n                    collisions += 1\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base <= 10:\n        if x < 0:\n            raise ValueError('Cannot convert a negative number to a base-10 number.')\n        elif x == 0:\n            return '0'\n        else:\n            return change_base(x, base)\n    else:\n        raise ValueError('Base must be less than or equal to 10.')\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    n_binary = bin(n)[2:]\n    p_binary = bin(p)[2:]\n    result = 0\n    for i in range(len(n_binary)):\n        result = (result * 2) + (1 if n_binary[i] == '1' else 0)\n        if result >= p:\n            result -= p\n    return result\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    result = ''\n    for char in text:\n        if char not in 'aeiouAEIOU':\n            result += char\n    return result\n"}
{"task_id": "HumanEval/52", "completion": "\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    s0_list = list(s0)\n    s1_list = list(s1)\n    s0_list.sort()\n    s1_list.sort()\n    if s0_list == s1_list:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    counter = 0\n    for char in brackets:\n        if char == \"<\":\n            counter += 1\n        elif char == \">\":\n            counter -= 1\n        if counter < 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 0\n    for char in s:\n        if char in 'aeiouy':\n            vowels += 1\n        elif char == 'y' and s[-1] == 'y':\n            vowels += 1\n    return vowels\n\n"}
{"task_id": "HumanEval/65", "completion": "\n    \n    x = str(x)\n    n = len(x)\n    if shift <= n:\n        return x[n-shift:] + x[:n-shift]\n    else:\n        return x[-shift:] + x[:-shift]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    apples_count = 0\n    oranges_count = 0\n    mango_count = 0\n    for i in range(len(s)):\n        if s[i] == 'A':\n            apples_count += 1\n        elif s[i] == 'O':\n            oranges_count += 1\n        elif s[i] == 'M':\n            mango_count += 1\n    if apples_count + oranges_count == n:\n        return 0\n    return mango_count\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    \n    evens = [node for node in arr if node % 2 == 0]\n    if not evens:\n        return []\n    \n    evens.sort(key=lambda x: x)\n    return [evens[0], arr.index(evens[0])]\n"}
{"task_id": "HumanEval/69", "completion": "\n    greatest = -1\n    for i in lst:\n        if lst.count(i) >= i:\n            greatest = i\n    return greatest\n"}
{"task_id": "HumanEval/70", "completion": "\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        max_val = max(lst)\n        sorted_list.append(max_val)\n        lst.remove(max_val)\n    return sorted_list\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = round(s * (s - a) * (s - b) * (s - c), 2)\n        return area\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\n    changes = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[-i-1]:\n            changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    lst1_len = len(lst1)\n    lst2_len = len(lst2)\n    if lst1_len > lst2_len:\n        return lst1\n    elif lst1_len < lst2_len:\n        return lst2\n    else:\n        return lst1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/75", "completion": "\n    if a < 100:\n        return a % 3 == 0 and a % 5 == 0\n    else:\n        return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 0 or x == 1:\n        return True\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if x == n:\n        return True\n    return False\n"}
{"task_id": "HumanEval/77", "completion": "\n    if a == 0 or a == 1:\n        return True\n    x = a ** (1/3)\n    if x == int(x):\n        return True\n    return False\n"}
{"task_id": "HumanEval/78", "completion": "\n    if num == \"\":\n        return 0\n    \n    count = 0\n    \n    hex_list = list(num)\n    \n    for digit in hex_list:\n        if digit in \"23456789ABCDEF\":\n            if is_prime(int(digit)):\n                count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary_string = \"\"\n    if decimal < 0:\n        binary_string += \"db\"\n        decimal *= -1\n    while decimal > 0:\n        binary_string += str(decimal % 2)\n        decimal = decimal // 2\n    binary_string = binary_string[::-1]\n    binary_string = \"db\" + binary_string + \"db\"\n    return binary_string\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    \n    s_set = set()\n    for i in range(len(s)):\n        if s[i] in s_set:\n            s_set.remove(s[i])\n        else:\n            s_set.add(s[i])\n    \n    return len(s_set) == 0\n"}
{"task_id": "HumanEval/81", "completion": "\n    grade_equation = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n    }\n    return [grade_equation[gpa] for gpa in grades]\n"}
{"task_id": "HumanEval/82", "completion": "\n    if len(string) <= 1:\n        return False\n    elif len(string) == 2:\n        return True\n    else:\n        for i in range(3, len(string), 2):\n            if len(string) % i == 0:\n                return False\n        return True\n"}
{"task_id": "HumanEval/83", "completion": "\n    count = 0\n    for i in range(10, n+1):\n        if i < 10:\n            count += 1\n        else:\n            if i % 10 == 1:\n                count += 1\n            if i % 10 == 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\n    \n    return str(bin(N).count('1'))\n"}
{"task_id": "HumanEval/85", "completion": "\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n    return result\n"}
{"task_id": "HumanEval/86", "completion": "\n    d = {}\n    for i in range(97, 123):\n        d[chr(i)] = chr(i)\n    for i in s:\n        if i in d:\n            d[i] = d[i]\n    return ''.join(d.values())\n"}
{"task_id": "HumanEval/87", "completion": "\n    coordinates = []\n    for row in range(len(lst)):\n        for column in range(len(lst[row])):\n            if lst[row][column] == x:\n                coordinates.append((row, column))\n    coordinates.sort()\n    coordinates.sort(key=lambda x: x[1], reverse=True)\n    coordinates.sort(key=lambda x: x[0], reverse=True)\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "\n    \n    sorted_array = array[:]\n    \n    if sum(sorted_array[0:1]) % 2 == 0:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    \n    return sorted_array\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/89", "completion": "\n    rotated_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated"}
{"task_id": "HumanEval/90", "completion": "\n    min1 = min2 = None\n    for i in lst:\n        if min1 is None or i < min1:\n            min2 = min1\n            min1 = i\n        elif min2 is None or i < min2:\n            min2 = i\n    return min2\n"}
{"task_id": "HumanEval/91", "completion": "\n    count = 0\n    words = S.split(\".\")\n    for word in words:\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    \n    if type(x) == int and type(y) == int and type(z) == int:\n        return x == y + z or x == z + y\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/93", "completion": "\n    def swap_case(letter):\n        if letter.isupper():\n            return letter.lower()\n        else:\n            return letter.upper()\n    \n    def replace_vowels(letter):\n        if letter in 'AEIOU':\n            return chr(ord(letter) + 2)\n        else:\n            return letter\n    \n    encoded_message = ''\n    for letter in message:\n        encoded_message += swap_case(letter)\n    \n    for letter in message:\n        encoded_message += replace_vowels(letter)\n    \n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    \n    largest_prime = 0\n    sum_of_digits = 0\n    \n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n                sum_of_digits = sum(map(int, str(num)))\n    \n    return sum_of_digits\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() or key.isupper():\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    if n < 2:\n        return []\n    primes = []\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    \n    a = str(a)\n    b = str(b)\n    \n    a_unit_digits = a[-1]\n    b_unit_digits = b[-1]\n    \n    return int(a_unit_digits) * int(b_unit_digits)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    value = int(value)\n    abs_value = abs(value)\n    if abs_value == 0:\n        return 0\n    elif abs_value == 1:\n        return 1\n    elif abs_value == 2:\n        return 2\n    elif abs_value == 3:\n        return 3\n    elif abs_value == 4:\n        return 4\n    elif abs_value == 5:\n        return 5\n    elif abs_value == 6:\n        return 6\n    elif abs_value == 7:\n        return 7\n    elif abs_value == 8:\n        return 8\n    elif abs_value == 9:\n        return 9\n    elif abs_value == 10:\n        return 10\n    elif abs_value == 11:\n        return 11\n    elif abs_value == 12:\n        return 12\n    elif abs_value == 13:\n        return 13\n    elif abs_value == 14:\n        return 14\n    elif abs_value == 15:\n        return 15\n    elif abs_value == 16:\n        return 16\n    "}
{"task_id": "HumanEval/100", "completion": "\n    \n    list_of_stones = []\n    \n    if n % 2 == 0:\n        list_of_stones.append(n)\n        list_of_stones.append(n-1)\n        for i in range(2, n, 2):\n            list_of_stones.append(i)\n    else:\n        list_of_stones.append(n)\n        list_of_stones.append(n-1)\n        for i in range(2, n, 2):\n            list_of_stones.append(i)\n        list_of_stones.append(n)\n    \n    return list_of_stones\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split(',')\n"}
{"task_id": "HumanEval/102", "completion": "\n    result = -1\n    while x <= y:\n        if x % 2 == 0:\n            if x >= y:\n                return x\n            else:\n                x += 1\n        else:\n            if y >= x:\n                return y\n            else:\n                y += 1\n    return result\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    sum = 0\n    count = 0\n    for i in range(n, m+1):\n        sum += i\n        count += 1\n    return bin(round(sum/count))[2:]\n"}
{"task_id": "HumanEval/104", "completion": "\n    \n    unique_digits = []\n    \n    for i in x:\n        if i % 2 == 0:\n            continue\n        else:\n            unique_digits.append(i)\n    \n    unique_digits.sort()\n    \n    return unique_digits\n"}
{"task_id": "HumanEval/105", "completion": "\n    \n    if not arr:\n        return []\n    \n    if len(arr) == 1:\n        return [str(arr[0])]\n    \n    arr = sorted(arr)\n    arr.reverse()\n    \n    d = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    result = []\n    for i in arr:\n        result.append(d[i])\n    \n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(f(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if num < 0:\n            sum = 0\n            for digit in str(num):\n                sum += int(digit)\n            if sum > 0:\n                count += 1\n        else:\n            sum = 0\n            for digit in str(num):\n                sum += int(digit)\n            if sum > 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    max_element = max(arr)\n    for i in range(len(arr)):\n        if arr[i] == max_element:\n            if i == 0:\n                return True\n            else:\n                arr[i] = arr[i-1]\n                arr[i-1] = max_element\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    if lst1 == []:\n        return \"NO\"\n    odd_count = 0\n    for i in lst1:\n        if i % 2 == 1:\n            odd_count += 1\n    if odd_count > len(lst2):\n        return \"NO\"\n    for i in lst2:\n        if i in lst1:\n            lst1.remove(i)\n    if odd_count == 0:\n        return \"YES\"\n    return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    \n    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    \n    max_count = max(hist.values())\n    \n    if hist.values().count(max_count) == 1:\n        return {hist.keys()[hist.values().index(max_count)]: max_count}\n    else:\n        return {k: v for k, v in hist.items() if v == max_count}\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/112", "completion": "\n    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n"}
{"task_id": "HumanEval/113", "completion": "\n    \n    output = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                count += 1\n        output.append(\"the number of odd elements \" + str(count) + \"n the str4ng \" + str(string) + \" of the \" + str(len(string)) + \"nput.\")\n    return output\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum -= min(current_sum, num)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    import math\n    \n    fillings = 0\n    max_fillings = 0\n    \n    for row in grid:\n        min_height = min(row)\n        if min_height > capacity:\n            max_fillings = max(max_fillings, fillings)\n            fillings = 0\n        else:\n            fillings += row.count(1)\n    \n    return max(max_fillings, fillings)\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    result = []\n    words = s.split(\" \")\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in \"aeiou\":\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    \n    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    closest_vowel_index = 0\n    \n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            closest_vowel = word[i]\n            closest_vowel_index = i\n            break\n    \n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            if closest_vowel_index > i:\n                closest_vowel_index = i\n            continue\n        if word[i] in vowels and closest_vowel_index > i:\n            closest_vowel_index = i\n            closest_vowel = word[i]\n    \n    return closest_vowel or \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    \n    if len(arr) == 0:\n        return []\n    \n    max_list = []\n    max_num = arr[0]\n    for i in range(k):\n        if max_num < arr[i]:\n            max_list.append(max_num)\n            max_num = arr[i]\n        else:\n            max_list.append(arr[i])\n    \n    return max_list\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0])\n"}
{"task_id": "HumanEval/122", "completion": "\n    sum = 0\n    for i in range(k):\n        if arr[i] >= 10 and arr[i] <= 99:\n            sum += arr[i]\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    odd_collatz = []\n    def helper(n):\n        if n == 1:\n            return [1]\n        if n % 2 == 0:\n            return [n/2]\n        else:\n            return [3*n+1]\n    for i in range(1, n+1):\n        odd_collatz += helper(i)\n    odd_collatz.sort()\n    return odd_collatz\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if int(month) < 1 or int(month) > 12:\n        return False\n    \n    if int(day) < 1 or int(day) > 31:\n        return False\n    \n    if int(month) in [4, 6, 9, 11] and int(day) > 30:\n        return False\n    \n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) > 31:\n        return False\n    \n    if int(month) == 2 and int(day) > 29:\n        return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/125", "completion": "\n    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n            if i.isalpha() and ord(i) % 2 == 1:\n                count += 1\n        return count\n"}
{"task_id": "HumanEval/126", "completion": "\n    prev = lst[0]\n    for i in lst[1:]:\n        if i < prev:\n            return False\n        prev = i\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    \n    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    \n    if interval1[0] < interval1[1] and interval2[0] < interval2[1]:\n        return \"NO\"\n    \n    if interval1[0] == interval1[1] and interval2[0] == interval2[1]:\n        return \"NO\"\n    \n    if interval1[0] == interval1[1] and interval2[0]!= interval2[1]:\n        return \"NO\"\n    \n    if interval1[0]!= interval1[1] and interval2[0] == interval2[1]:\n        return \"NO\"\n    \n    if interval1[0]!= interval1[1] and interval2[0]!= interval2[1]:\n        return \"NO\"\n    \n    if interval1[0] == interval1[1] and interval2[0] == interval2[1]:\n        return \"YES\"\n    \n    if interval1[0]!= interval1[1] and interval2"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    sum_of_magnitudes = 0\n    product_of_signs = 1\n    for elem in arr:\n        sum_of_magnitudes += abs(elem)\n        if elem == 0:\n            product_of_signs = 1\n        elif elem > 0:\n            product_of_signs = 1\n        elif elem < 0:\n            product_of_signs = -1\n    return sum_of_magnitudes * product_of_signs\n"}
{"task_id": "HumanEval/129", "completion": "\n    def checkPath(cell1, cell2):\n        \"\"\"\n        Check if a path exists between two cells.\n        \"\"\"\n        i, j = cell1\n        k, l = cell2\n        if i == k and j == l:\n            return True\n        if i > k or j > l:\n            return False\n        if grid[i][j] == grid[k][l]:\n            return True\n        return False\n\n    def findPath(cell1, cell2):\n        \"\"\"\n        Find the minimum path between two cells.\n        \"\"\"\n        i, j = cell1\n        k, l = cell2\n        if i == k and j == l:\n            return [grid[i][j]]\n        if i > k or j > l:\n            return []\n        if grid[i][j] == grid[k][l]:\n            return [grid[i][j]] + findPath(cell1, cell2)\n        return []\n\n    def minPath(cell1, cell2):\n        \"\"\"\n        "}
{"task_id": "HumanEval/130", "completion": "\n    \n    trib = [3, 1, 2]\n    for i in range(4, n+1):\n        if i % 2 == 0:\n            trib.append(1 + (i / 2))\n        else:\n            trib.append(trib[i-1] + trib[i-2] + trib[i-3])\n    return trib\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    n = str(n)\n    for i in range(len(n)):\n        if int(n[i]) % 2 == 1:\n            product *= int(n[i])\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for i, char in enumerate(string):\n        if char == '[' or char == '{' or char == '(':\n            stack.append(i)\n        elif char == ']' or char == '}' or char == ')':\n            if len(stack) == 0:\n                return False\n            if char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    sum = 0\n    for i in lst:\n        sum += i**2\n    return round(sum)\n"}
{"task_id": "HumanEval/134", "completion": "\n    last_char = txt[-1]\n    if last_char.isalpha() and not txt.split()[-1]:\n        return True\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    largest_index = -1\n    for i in range(len(arr)):\n        if arr[i] > arr[i - 1] and arr[i] <= arr[i + 1]:\n            largest_index = i\n    return largest_index\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n    for element in lst:\n        if element < 0 and largest_negative is None:\n            largest_negative = element\n        elif element > 0 and smallest_positive is None:\n            smallest_positive = element\n        elif element < 0 and element > largest_negative:\n            largest_negative = element\n        elif element > 0 and element < smallest_positive:\n            smallest_positive = element\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        try:\n            a = float(a)\n            b = float(b)\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        except:\n            try:\n                a = str(a)\n                b = str(b)\n                if a > b:\n                    return a\n                elif a < b:\n                    return b\n                else:\n                    return None\n            except:\n                return None\n"}
{"task_id": "HumanEval/138", "completion": "\n    sum = 0\n    list_of_even_numbers = []\n    for i in range(2, n/2):\n        if i % 2 == 0:\n            sum += i\n            if sum == n:\n                if i % 2 == 0 and i not in list_of_even_numbers:\n                    list_of_even_numbers.append(i)\n                else:\n                    return False\n    if sum!= n:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n <= 0:\n        return 1\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n        n -= 1\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = \"\"\n    if len(text) > 2:\n        for i in range(len(text)):\n            if text[i] == \" \" and text[i+1] == \" \":\n                result += \"_\"\n            else:\n                result += text[i]\n    else:\n        result = text\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "\n    \n    if len(file_name) <= 3:\n        return 'No'\n    \n    if file_name.count('.')!= 1:\n        return 'No'\n    \n    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'No'\n    \n    if file_name[-4:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/142", "completion": "\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))\n\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    words = []\n    for word in sentence.split():\n        if len(word) == len(set(word)):\n            words.append(word)\n    return \" \".join(sorted(words))\n"}
{"task_id": "HumanEval/144", "completion": "\n    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x = int(x[0])\n    n = int(n[0])\n    product = x * n\n    if product % 1 == 0:\n        return True\n    else:\n        return False\n    "}
{"task_id": "HumanEval/145", "completion": "\n    result = []\n    for num in nums:\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        result.insert(sum_of_digits, num)\n    return result\n"}
{"task_id": "HumanEval/146", "completion": "\n    counter = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            counter += 1\n    return counter\n"}
{"task_id": "HumanEval/147", "completion": "\n    max_triples = []\n    for i in range(n):\n        a = i * i - i + 1\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a + a + a == 3 * (a + j + k):\n                    max_triples.append((a, j, k))\n    return len(max_triples)\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    planet_orbit_indices = range(planet1_index, planet2_index + 1)\n    planet_orbit_indices.append(planet2_index)\n    planet_orbit_indices.sort(key=lambda i: planets[i])\n    return tuple(planets[i] for i in planet_orbit_indices)\n"}
{"task_id": "HumanEval/149", "completion": "\n    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_list.append(word)\n    sorted_list.sort(key=len)\n    return sorted_list\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n < 2:\n        return y\n    else:\n        prime = True\n        for i in range(2, int(n**(1/2))+1):\n            if n % i == 0:\n                prime = False\n                break\n        if prime:\n            return x\n        else:\n            return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    if lst == []:\n        return 0\n    \n    sum = 0\n    for num in lst:\n        if num % 2 == 1 and type(num) == int:\n            sum += num * num\n    return sum\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(guess[i]-game[i]) for i in range(len(game))]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = ''\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength -= 1\n        if strength > len(strongest_extension):\n            strongest_extension = extension\n    return '{}.{}'.format(class_name, strongest_extension)\n"}
{"task_id": "HumanEval/154", "completion": "\n    if b in a:\n        return True\n    for i in range(1, len(b)):\n        if b[i:] in a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    num_str = str(num)\n    for char in num_str:\n        if int(char) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    \n    d = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X', 20: 'XX', 30: 'XXX', 40: 'XL', 50: 'L', 60: 'LX', 70: 'LXX', 80: 'LXXX', 90: 'XC', 100: 'C', 200: 'CC', 300: 'CCC', 400: 'CD', 500: 'D', 600: 'DC', 700: 'DCC', 800: 'DCCC', 900: 'CM', 1000: 'M'}\n    \n    if number > 1000 or number < 1:\n        return \"Error: number must be between 1 and 1000\"\n    \n    if number in d:\n        return d[number]\n    \n    for key, value in d.items():\n        if number < key:\n            return value + int_to_mini_roman(number - key)\n    \n    return \"Error: number must be between 1 and 1000\"\n"}
{"task_id": "HumanEval/157", "completion": "\n    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2)\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    total_eaten = need\n    remaining_carrots = remaining - need\n    \n    if remaining_carrots >= 0:\n        total_eaten += number\n    \n    return [total_eaten, remaining_carrots]\n"}
{"task_id": "HumanEval/160", "completion": "\n    if len(operator)!= len(operand) - 1:\n        return 'Error: Operator list length is not equal to the length of operand list minus one.'\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n        else:\n            return 'Error: Operator'+ operator[i] +'is not supported.'\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].swapcase()\n        else:\n            result += s[i]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    if text == '':\n        return None\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    even_digits = []\n    if a % 2 == 0:\n        even_digits.append(a)\n    for i in range(a+1, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return sorted(even_digits)\n"}
