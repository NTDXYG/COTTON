{"task_id": "Open/0", "completion": "\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    count = 0\n    for i in range(N):\n        if sum + K < arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    freq = {}\n    for i in range(n) :\n        if arr[i] in freq :\n            freq[arr[i]] += 1\n        else :\n            freq[arr[i]] = 1\n    min_val = min(freq.keys())\n    return freq[min_val]\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/2", "completion": "\n    \n    return \"Yes\" if ( ( n & (1 << l) ) == (1 << l) ) and ( ( n & (1 << r) ) == (1 << r) ) else \"No\"\n    "}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    \n    if ( n % 2 == 0 ) :\n        return False\n    \n    sum = 0\n    for i in range ( 0, len( a ) ) :\n        sum += a[i]\n    \n    if ( sum % 2 == 0 ) :\n        return True\n    \n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/5", "completion": "\n    x = bin(x)\n    x = x[2:]\n    x = x[::-1]\n    x = x.count('1')\n    if x % 2 == 0 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/6", "completion": "Write a function that takes a list of integers and returns a list of missing elements.\n        The function first iterates through the input list and modifies the elements by changing the sign of the element at the index equal to the absolute value of the current element minus one.\n        Then, it iterates through the modified list and appends the indices of the positive elements plus one to the output list.\n        Finally, it returns the output list.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def missing_elements ( vec ) :\n        \"\"\"Write a function that takes a list of integers and returns a list of missing elements.\n        The function first iterates through the input list and modifies the elements by changing the sign of the element at the index equal to the absolute value of the current element minus one.\n        Then, it iterates through the modified list and appends the indices of the positive elements plus one to the output list.\n        Finally, it returns the output list.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def missing_elements ( vec ) :\n        \"\"\"Write a function that"}
{"task_id": "Open/7", "completion": "Write a function that takes an array of integers and its length as input and returns the length of the longest subsequence in the array such that each element in the subsequence has at least one digit in common with every other element in the subsequence.\n        \"\"\"\n    \"\"\"\n    :\n    def findSubsequence ( arr, n ) :\n        \"\"\"Write a function that takes an array of integers and its length as input and returns the length of the longest subsequence in the array such that each element in the subsequence has at least one digit in common with every other element in the subsequence.\n        \"\"\"\n    \"\"\"\n    :\n    def findSubsequence ( arr, n ) :\n        \"\"\"Write a function that takes an array of integers and its length as input and returns the length of the longest subsequence in the array such that each element in the subsequence has at least one digit in common with every other element in the subsequence.\n        \"\"\"\n    \"\"\"\n    :\n    def findSubsequence ( arr, n ) :\n        \"\"\"Write a function that takes an array of integers and its length as input and returns the"}
{"task_id": "Open/8", "completion": "\n    \n    def is_prime ( a ) :\n        \"\"\"Write a function that takes a number and returns True if the number is prime and False if the number is not prime.\n        \"\"\"\n    \"\"\"\n    \n    \"\"\"\n    \n    def prime_factors ( a ) :\n        \"\"\"Write a function that takes a number and returns a list of the prime factors of the number.\n        \"\"\"\n    \"\"\"\n    \n    \"\"\"\n    \n    def distinct_prime_factors ( a ) :\n        \"\"\"Write a function that takes a list of integers and returns the number of distinct prime factors for each integer in the list.\n        \"\"\"\n    \"\"\"\n    \n    \"\"\"\n    \n    def distinct_prime_factors_list ( a ) :\n        \"\"\"Write a function that takes a list of integers and returns a list of the distinct prime factors for each integer in the list.\n        \"\"\"\n    \"\"\"\n    \n    \"\"\"\n    \n    def distinct_prime_factors_dict ( a ) :\n        \"\"\"Write a function that takes a list of integers and returns a dictionary of the distinct prime factors for each integer in the list.\n        "}
{"task_id": "Open/9", "completion": "\n    sum_of_differences = 0\n    sum_of_differences_of_kth_largest_element = 0\n    for i in range(n):\n        sum_of_differences_of_kth_largest_element += arr[i] - arr[i-1]\n    for i in range(k):\n        sum_of_differences += arr[i] - arr[i-1]\n    return min(sum_of_differences, sum_of_differences_of_kth_largest_element)\n"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.appendleft(B.pop())\n            A.append(A.pop())\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    \n    substrings = []\n    for i in range(len(s)) :\n        for j in range(i, len(s)) :\n            substrings.append(s[i:j+1])\n    counter = 0\n    for substring in substrings :\n        if len(substring) <= k :\n            counter += 1\n    return counter\n    "}
{"task_id": "Open/13", "completion": "\n    if n == 1 :\n        return True\n    elif n == 2 :\n        return True\n    elif n == 3 :\n        return False\n    else :\n        if n % 2 == 0 :\n            return False\n        elif n % 3 == 0 :\n            return False\n        elif n % 4 == 0 :\n            return False\n        else :\n            return True\n"}
{"task_id": "Open/14", "completion": "\n    \n    switch = {\n        0 : n,\n        1 : 1,\n        2 : n + 1,\n        3 : 0\n    }\n    \n    return switch.get(n % 4, \"\")\n"}
{"task_id": "Open/15", "completion": "\n    for i in range(t):\n        a = random.randint(2, n-1)\n        if ( pow(a, (n-1)/2, n)!= 1 ) or ( pow(a, (n-1)/2, n)!= n-1 ):\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "\n    result = False\n    for i in range( n ) :\n        if s1[i] == '0' and s2[i] == '1' :\n            result = True\n        elif s1[i] == '1' and s2[i] == '0' :\n            result = True\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            result = True\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            result = True\n    return result\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    alphabet = [0,1,0,1]\n    bias = 2\n    result = 0\n    for i in range(length):\n        if s[i] == alphabet[bias]:\n            result += 1\n        bias = (bias + 1) % 4\n    return min(result, length - result)\n"}
{"task_id": "Open/19", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 2\n    \n    if n == 3 :\n        return 4\n    \n    if n == 4 :\n        return 7\n    \n    if n == 5 :\n        return 13\n    \n    if n == 6 :\n        return 24\n    \n    if n == 7 :\n        return 44\n    \n    if n == 8 :\n        return 81\n    \n    if n == 9 :\n        return 149\n    \n    if n == 10 :\n        return 274\n    \n    if n == 11 :\n        return 574\n    \n    if n == 12 :\n        return 1393\n    \n    if n == 13 :\n        return 2468\n    \n    if n == 14 :\n        return 4771\n    \n    if n == 15 :\n        return 7234\n    \n    if n == 16 :\n        return 14572\n    \n    if n == 17 :\n        return 28657\n    \n    if n == 18 :\n        return 54598\n"}
{"task_id": "Open/20", "completion": "\n    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n):\n        if a[i] % 4 == 0:\n            count0 += 1\n        elif a[i] % 4 == 1:\n            count1 += 1\n        elif a[i] % 4 == 2:\n            count2 += 1\n        elif a[i] % 4 == 3:\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n:\n        return 1\n    else:\n        return 2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/22", "completion": "\n    \n    if n == 0:\n        return 0\n    \n    max_len = 1\n    \n    for i in range(n):\n        curr_len = 1\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                curr_len += 1\n            else:\n                break\n        max_len = max(max_len, curr_len)\n    \n    return max_len\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/23", "completion": "\n        Create a function that takes an array of integers, the length of the array, the current index, a target sum, and a count.\n        The function recursively calculates the number of subsets of the array that sum up to the target sum.\n        The base case is when the current index is equal to the length of the array.\n        If the sum is equal to 0, the count is incremented.\n        The function then calls itself twice, once subtracting the current element from the sum and once without subtracting.\n        Finally, the function returns the count.\n        \"\"\"\n    \n    ### Example:\n    def subsetSum ( arr, n, i, sum, count ) :\n        \"\"\"\n        Create a function that takes an array of integers, the length of the array, the current index, a target sum, and a count.\n        The function recursively calculates the number of subsets of the array that sum up to the target sum.\n        The base case is when the current index is equal to the length of the array.\n        If the"}
{"task_id": "Open/24", "completion": "\n    \n    return (n * (3 * n - 1)) / 2\n    \n    "}
{"task_id": "Open/25", "completion": "Write a function that takes an integer n and returns the sum of the squares of the first n natural numbers, the sum of the first n natural numbers, and adds 1 to the total sum.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def seriesFunc ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the sum of the squares of the first n natural numbers, the sum of the first n natural numbers, and adds 1 to the total sum.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def seriesFunc ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the sum of the squares of the first n natural numbers, the sum of the first n natural numbers, and adds 1 to the total sum.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def seriesFunc ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the sum of the squares of the first n natural numbers, the sum of the first n natural numbers, and adds 1 to the total sum.\n        \"\"\"\n    \"\"\"\n    \n    :"}
{"task_id": "Open/26", "completion": "\n    \n    maxSum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            maxSum += i\n    return maxSum\n"}
{"task_id": "Open/27", "completion": "\n    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return (b - a) / a * 100\n"}
{"task_id": "Open/30", "completion": "Write a function that takes an integer n and returns the average of the squares of the first n natural numbers.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def AvgofSquareN ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the average of the squares of the first n natural numbers.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def AvgofSquareN ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the average of the squares of the first n natural numbers.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def AvgofSquareN ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the average of the squares of the first n natural numbers.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def AvgofSquareN ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the average of the squares of the first n natural numbers.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def AvgofSquareN ( n ) :\n        \"\"\"Write a function"}
{"task_id": "Open/31", "completion": "\n    \n    if k > n :\n        return -1\n    \n    if k == 1 :\n        return min(arr)\n    \n    if k == n :\n        return max(arr)\n    \n    arr.sort()\n    return arr[k-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/32", "completion": "\n    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "\n    result = 1\n    for i in range ( 1, n ) :\n        result = result * 2 + 1\n    return result\n"}
{"task_id": "Open/34", "completion": "\n    \n    count = 0\n    \n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if (a[i] * a[j] < k):\n                count += 1\n    \n    return count\n    "}
{"task_id": "Open/35", "completion": "Write a function that takes two integers, n and d, and returns the number of times the digit d occurs in the numbers from 1 to n (inclusive).\n        \"\"\"\n    \n    #### Output:\n    \n    ### Example:\n    def getOccurence ( n, d ) :\n        \"\"\"Write a function that takes two integers, n and d, and returns the number of times the digit d occurs in the numbers from 1 to n (inclusive).\n        \"\"\"\n    \n    #### Output:\n    \n    ### Example:\n    def getOccurence ( n, d ) :\n        \"\"\"Write a function that takes two integers, n and d, and returns the number of times the digit d occurs in the numbers from 1 to n (inclusive).\n        \"\"\"\n    \n    #### Output:\n    \n    ### Example:\n    def getOccurence ( n, d ) :\n        \"\"\"Write a function that takes two integers, n and d, and returns the number of times the digit d occurs in the numbers from 1 to n (inclusive).\n        \"\"\""}
{"task_id": "Open/36", "completion": "\n    \n    arr = [i for i in range(1,n+1)]\n    \n    for i in arr:\n        if i not in arr:\n            return i\n    \n    return arr[-1] + 1\n    \n    "}
{"task_id": "Open/37", "completion": "\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    else :\n        return ways(n-1) + ways(n-2)\n"}
{"task_id": "Open/38", "completion": "\n    \n    area = l * b\n    \n    if l == 1 and b == 1 :\n        return area\n    \n    elif l == 1 and b > 1 :\n        return area + calculateAreaSum ( b - 1, b )\n    \n    elif l > 1 and b == 1 :\n        return area + calculateAreaSum ( l - 1, l )\n    \n    elif l > 1 and b > 1 :\n        return area + calculateAreaSum ( l - 1, l ) + calculateAreaSum ( l, b - 1 )\n    \n    else :\n        return area\n    \n    "}
{"task_id": "Open/39", "completion": "\n    if N == 1 :\n        return 1\n    else :\n        return N + count(N-1)\n"}
{"task_id": "Open/40", "completion": "\n    \n    count = 0\n    for i in range(n) :\n        if arr[i] == 1 :\n            count = 0\n        else :\n            count += 1\n    return count\n\narr = [0,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"}
{"task_id": "Open/41", "completion": "\n    if arr == []:\n        return 0\n    \n    max_len = 0\n    curr_len = 0\n    \n    for i in range(n):\n        if arr[i] == 0:\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 0\n    \n    if curr_len > max_len:\n        max_len = curr_len\n    \n    return max_len\n"}
{"task_id": "Open/42", "completion": "\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0],a[n-1])\n    else :\n        return max(a)\n"}
{"task_id": "Open/43", "completion": "\n    \n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (array[i] * array[j]) <= k:\n                result += 1\n    return result\n"}
{"task_id": "Open/44", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(n) :\n        sum += abs(arr[i] - (i + 1))\n    return sum\n"}
{"task_id": "Open/45", "completion": "\n    min_cost = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_cost :\n            min_cost = arr[i]\n    return min_cost * (n - 1)\n"}
{"task_id": "Open/46", "completion": "\n    \n    max_diff = 0\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if i!= j:\n                if abs(array[i] - array[j]) > max_diff:\n                    max_diff = abs(array[i] - array[j])\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "\n    \n    return ( (a * x1 + b * y1) - c ) * (a * x2 + b * y2) > 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/48", "completion": "\n    solutions = 0\n    for i in range(0, a + 1) :\n        for j in range(0, a + 1) :\n            if i + (a ^ i) == j :\n                solutions += 1\n    return solutions\n"}
{"task_id": "Open/49", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/50", "completion": "\n    \n    smallest = -1\n    \n    for i in range(n) :\n        if a[i] % n == 0 :\n            smallest = a[i]\n            break\n    \n    return smallest\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/51", "completion": "\n    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "\n    result = []\n    for i in range(n):\n        for j in range(n):\n            result.append(arr[i][j] ^ arr[i][j+1] ^ arr[i+1][j] ^ arr[i+1][j+1])\n    return result\n"}
{"task_id": "Open/53", "completion": "\n    \n    count = 0\n    for i in range(N+1):\n        if i & i == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    sum = 0\n    length = 0\n    k_sum = 0\n    for i in range(n):\n        sum += a[i]\n    length = n\n    k_sum = sum + length - 1\n    return k_sum == k\n"}
{"task_id": "Open/55", "completion": "\n    \n    return (n & (n-1) == 0)\n"}
{"task_id": "Open/56", "completion": "Write a function that takes a string as input and returns the maximum number of partitions that can be made such that each partition consists of consecutive identical characters.\n        \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "Write a function that takes an array and an integer N as input and returns the result of a successive change calculation.\n        The function initializes a variable \"result\" to 0.\n        It then assigns the first element of the array to a variable \"var1\" and the second element to a variable \"var2\".\n        The \"result\" variable is updated by adding \"var1\" and \"var2\" and adding the product of \"var1\" and \"var2\" divided by 100.\n        \n    \n    The function then enters a loop that iterates from 2 to N.\n        In each iteration, the \"result\" variable is updated by adding the current element of the array and adding the product of \"result\" and the current element divided by 100.\n        \n    \n    Finally, the function returns the final value of the \"result\" variable.\n        \"\"\"\n    \n    ### Example:\n    def successiveChange ( arr, N ) :\n        \"\"\"Write a function that takes an array and an integer N as input and returns the result of a successive change calculation.\n        The function initial"}
{"task_id": "Open/59", "completion": "Write a function that takes in four parameters: an array, a list of ranges, the number of reversals, and an index.\n        The function returns the value at the given index after performing the specified number of reversals on the array.\n        Each reversal involves swapping the elements within a given range.\n        \"\"\"\n    \"\"\"\n    :\n    def answer ( arr, ranges, reversals, index ) :\n        \"\"\"Write a function that takes in four parameters: an array, a list of ranges, the number of reversals, and an index.\n        The function returns the value at the given index after performing the specified number of reversals on the array.\n        Each reversal involves swapping the elements within a given range.\n        \"\"\"\n    \"\"\"\n    :\n    def answer ( arr, ranges, reversals, index ) :\n        \"\"\"Write a function that takes in four parameters: an array, a list of ranges, the number of reversals, and an index.\n        The function returns the value at the given index after performing the specified number of reversals on the array.\n        Each reversal involves swapping"}
{"task_id": "Open/60", "completion": "\n    \n    if n == 0 :\n        return True\n    \n    for i in range(1, n) :\n        if i*i > n :\n            break\n        \n        if (n - i*i) % (i+1) == 0 :\n            return True\n    \n    return False\n"}
{"task_id": "Open/61", "completion": "\n    \n    if len(a) < len(b) :\n        return -1\n    \n    count = 0\n    \n    for i in range(len(b)) :\n        if a[i] == b[i] :\n            count += 1\n        else :\n            break\n    \n    return count\n    "}
{"task_id": "Open/62", "completion": "\n    alphabet = \"0123456789\"\n    bias = 2\n    \n    result = \"\"\n    for i in range( len - 1, -1, -1 ) :\n        if str[i] > str[i+1] :\n            result += \"9\"\n        else :\n            result += str[i]\n    return result\n"}
{"task_id": "Open/63", "completion": "\n    if n == 0 :\n        return 0\n    \n    minValue = arr[0]\n    for i in range(1,n) :\n        if arr[i] < minValue :\n            minValue = arr[i]\n    \n    return minValue\n"}
{"task_id": "Open/64", "completion": "\n    \n    if len(s) == 0:\n        return \"-1\"\n    \n    if s == \"1\":\n        return \"-1\"\n    \n    result = \"\"\n    \n    for i in range(len(s)):\n        if s[i] == \"1\":\n            break\n        else:\n            result = s[i]\n    \n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/65", "completion": "Write a function that takes an array 'a', its length 'n', and an integer 'k' as input.\n        The function removes the minimum number of elements from the array such that the count of each element is at most 'k'.\n        The function returns the length of the modified array.\n        \"\"\"\n    \"\"\"\n    :\n    def MinRemove ( a, n, k ) :\n        \"\"\"Write a function that takes an array 'a', its length 'n', and an integer 'k' as input.\n        The function removes the minimum number of elements from the array such that the count of each element is at most 'k'.\n        The function returns the length of the modified array.\n        \"\"\"\n    \"\"\"\n    :\n    def MinRemove ( a, n, k ) :\n        \"\"\"Write a function that takes an array 'a', its length 'n', and an integer 'k' as input.\n        The function removes the minimum number of elements from the array such that the count of each element is at most 'k'.\n        The function returns the length of the modified array.\n        "}
{"task_id": "Open/66", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/67", "completion": "\n    def MinStep ( a, n ) :\n        \"\"\"Write a function that takes an array of integers and its length as input and returns the minimum number of steps required to make all the elements of the array equal to either 1 or -1.\n        The function calculates the number of positive, negative, and zero elements in the array.\n        For each negative element, the function adds the absolute difference between the element and -1 to the step count.\n        For each positive element, the function adds the absolute difference between the element and 1 to the step count.\n        If the number of negative elements is even, the function adds the number of zero elements to the step count.\n        If the number of negative elements is odd, the function checks if there are any zero elements.\n        If there are zero elements, it adds the number of zero elements to the step count.\n        If there are no zero elements, it adds 2 to the step count.\n        Finally, the function returns the total step count.\n        \n        :\n        The function returns the total step count.\n        \"\"\"\n        def encrypt(s):\n            \"\"\"\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    while n > 0 :\n        v.append(n%5)\n        n = n//5\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result*10 + v[i]\n    return result*2\n"}
{"task_id": "Open/69", "completion": "\n    n = bin(n)[2:]\n    if n[0] == '1' :\n        return False\n    for i in range(1, len(n)) :\n        if n[i] == '0' :\n            return False\n        if n[i] > n[i-1] :\n            return False\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    if x > n :\n        return x\n    else :\n        return n * x // x\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(0, n + 1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n + 1):\n        result = 0\n        j = 1\n        while j <= i:\n            result += j\n            j += 1\n        sum += result\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    \n    max_value = 0\n    for i in range(n) :\n        if arr.count(arr[i]) == arr[i] :\n            if arr[i] > max_value :\n                max_value = arr[i]\n    return max_value\n"}
{"task_id": "Open/74", "completion": "Write a function that takes a list of integers and the length of the list as input.\n        The function counts the number of pairs of integers in the list where one integer is the power of 2 greater than the other integer.\n        The function returns the count of such pairs.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def countPairs ( a, n ) :\n        \"\"\"Write a function that takes a list of integers and the length of the list as input.\n        The function counts the number of pairs of integers in the list where one integer is the power of 2 greater than the other integer.\n        The function returns the count of such pairs.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def countPairs ( a, n ) :\n        \"\"\"Write a function that takes a list of integers and the length of the list as input.\n        The function counts the number of pairs of integers in the list where one integer is the power of 2 greater than the other integer.\n        The function returns the count of such pairs.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def"}
{"task_id": "Open/75", "completion": "\n    \n    return int(bin(n)[2:].replace('1', '0').replace('0', '1'), 2)\n"}
{"task_id": "Open/76", "completion": "\n    \n    result = 0\n    for i in range(n):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            A[i+1] = 0\n            result += 1\n    return result\n"}
{"task_id": "Open/77", "completion": "\n    \n    return (radian * 180) / 3.14\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range(1, n + 1):\n        sum += a + i * d\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 0 :\n        return n\n    else :\n        return 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/81", "completion": "\n    \n    if moves == 0 :\n        return 1\n    \n    if row == 0 or row == 7 :\n        return Square( row, column + 1, moves - 1 )\n    \n    if column == 0 or column == 7 :\n        return Square( row + 1, column, moves - 1 )\n    \n    return Square( row, column + 1, moves - 1 ) + Square( row, column - 1, moves - 1 ) + Square( row + 1, column, moves - 1 ) + Square( row - 1, column, moves - 1 )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/82", "completion": "\n    \n    numbers = list(range(n+1))\n    for i in range(1, n+1) :\n        numbers[i] = numbers[i-1] + i\n    return numbers[-1]\n"}
{"task_id": "Open/83", "completion": "Write a function that takes a string as input and returns the string with the smallest lexicographically possible permutation.\n        The function first finds the last occurrence of each character in the string and stores it in a list.\n        Then, it sorts the string and compares each character with its corresponding character in the sorted string.\n        If a character is not in the correct position, the function swaps it with the character at its last occurrence.\n        Finally, the function returns the modified string.\n        \"\"\"\n    \"\"\"\n    :\n    def findSmallest ( s ) :\n        \"\"\"Write a function that takes a string as input and returns the string with the smallest lexicographically possible permutation.\n        The function first finds the last occurrence of each character in the string and stores it in a list.\n        Then, it sorts the string and compares each character with its corresponding character in the sorted string.\n        If a character is not in the correct position, the function swaps it with the character at its last occurrence.\n        Finally, the function returns the modified string.\n        \"\"\"\n    \"\"\"\n    :\n    def findSmallest ( s"}
{"task_id": "Open/84", "completion": "\n        Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n        \"\"\"\n    \"\"\"\n    :\n    def encrypt(s):\n        \"\"\"\n        Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n        \"\"\"\n    \"\"\"\n    :\n    def encrypt(s):\n        \"\"\"\n        Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n        \"\"\"\n    \"\"\"\n    :\n    def encrypt(s):\n        \"\"\"\n        Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated in a manner such that the letters shift down by two"}
{"task_id": "Open/85", "completion": "\n    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range(1, smaller + 1) :\n        if x % i == 0 and y % i == 0 :\n            hcf = i\n    return hcf\n"}
{"task_id": "Open/86", "completion": "\n    \n    result = A + B\n    \n    for i in range(N-2):\n        result = result + A\n    \n    return result\n    "}
{"task_id": "Open/87", "completion": "\n    \n    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            if str[i:i+len(substr)] == substr:\n                count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    return ( p * r * (1 + r)**t ) / ((1 + r)**t - 1)\n"}
{"task_id": "Open/89", "completion": "\n    \n    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[k] > B[j] * B[j]:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "Write a function that takes an integer n and a list of integers arr.\n        The function should find the length of the longest arithmetic subsequence in arr.\n        An arithmetic subsequence is a sequence of numbers in which the difference between any two consecutive numbers is the same.\n        The function should return the length of the longest arithmetic subsequence.\n        \"\"\"\n    \"\"\"\n    :\n    def longestAr ( n, arr ) :\n        \"\"\"Write a function that takes an integer n and a list of integers arr.\n        The function should find the length of the longest arithmetic subsequence in arr.\n        An arithmetic subsequence is a sequence of numbers in which the difference between any two consecutive numbers is the same.\n        The function should return the length of the longest arithmetic subsequence.\n        \"\"\"\n    \"\"\"\n    :\n    def longestAr ( n, arr ) :\n        \"\"\"Write a function that takes an integer n and a list of integers arr.\n        The function should find the length of the longest arithmetic subsequence in arr.\n        An arithmetic subsequence is a sequence of numbers in which the difference between any two consecutive numbers"}
{"task_id": "Open/92", "completion": "\n    \n    maxLen = -1\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1].isalnum():\n                if len(str[i:j+1]) % 2 == 0:\n                    if maxLen < len(str[i:j+1]):\n                        maxLen = len(str[i:j+1])\n    return maxLen\n"}
{"task_id": "Open/93", "completion": "\n    \n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return 1 + count(n/2)\n"}
{"task_id": "Open/94", "completion": "\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    numStops = 0\n    fuel = fuel\n    while numStops < n:\n        totalDistance += fuel / n\n        fuel -= fuel / n\n        numStops += 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 1 if arr[0] == arr[1] else 0\n    \n    if arr[0] == arr[1] :\n        return 0\n    \n    if arr[0] + arr[1] == n :\n        return 1\n    \n    if arr[0] + arr[1] == n/3 :\n        return 1\n    \n    if arr[0] + arr[1] == n/2 :\n        return 1\n    \n    if arr[0] + arr[1] == n/3*2 :\n        return 1\n    \n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/97", "completion": "\n    return word in sentence\n"}
{"task_id": "Open/98", "completion": "\n    if n < 10 :\n        return 1\n    else :\n        return 1 + countDigit( math.floor(n/10) )\n"}
{"task_id": "Open/99", "completion": "\n    \n    if a == b == c :\n        return True\n    \n    if a == b :\n        if k == 0 :\n            return True\n        else :\n            return False\n    \n    if a == c :\n        if k == 0 :\n            return True\n        else :\n            return False\n    \n    if b == c :\n        if k == 0 :\n            return True\n        else :\n            return False\n    \n    if a + k == b :\n        return True\n    \n    if a + k == c :\n        return True\n    \n    if b + k == c :\n        return True\n    \n    if a - k == b :\n        return True\n    \n    if a - k == c :\n        return True\n    \n    if b - k == c :\n        return True\n    \n    return False\n    "}
{"task_id": "Open/100", "completion": "Write a function that takes two integers, x and y, and returns True if y is a rotation of x or False otherwise.\n        A rotation of x is defined as shifting the binary representation of x to the left by 32 bits and performing a bitwise OR operation with the original x.\n        The function checks if the resulting value is equal to y and returns True if it is, otherwise it continues shifting the value to the right by 1 bit until it is less than y.\n        If the value becomes less than y without being equal to it, the function returns False.\n        \"\"\"\n    \"\"\"\n    :\n    def isRotation ( x, y ) :\n        \"\"\"Write a function that takes two integers, x and y, and returns True if y is a rotation of x or False otherwise.\n        A rotation of x is defined as shifting the binary representation of x to the left by 32 bits and performing a bitwise OR operation with the original x.\n        The function checks if the resulting value is equal to y and returns True if it is, otherwise it continues shifting the value to the right by 1 bit until it is less than y"}
{"task_id": "Open/101", "completion": "Write a function that takes a string as input and counts the number of consecutive characters that are not the same.\n        The function should return the count.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def countConsecutive ( s ) :\n        \"\"\"Write a function that takes a string as input and counts the number of consecutive characters that are not the same.\n        The function should return the count.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def countConsecutive ( s ) :\n        \"\"\"Write a function that takes a string as input and counts the number of consecutive characters that are not the same.\n        The function should return the count.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def countConsecutive ( s ) :\n        \"\"\"Write a function that takes a string as input and counts the number of consecutive characters that are not the same.\n        The function should return the count.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def countConsecutive ( s ) :\n        \"\"\"Write a function that takes a string as input and counts the number of"}
{"task_id": "Open/102", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/103", "completion": "\n    if n == 1 :\n        return 0\n    else :\n        arr.sort()\n        min_removal = arr[n-1] - arr[0]\n        for i in range(n-1) :\n            if arr[i+1] - arr[i] < min_removal :\n                min_removal = arr[i+1] - arr[i]\n        return min_removal\n"}
{"task_id": "Open/104", "completion": "Write a function that takes two integers, `left` and `right`, and returns the maximum number that can be formed by setting the maximum number of consecutive bits in the binary representation of `left` to 1, without exceeding `right`.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def countMaxSetBits ( left, right ) :\n        \"\"\"Write a function that takes two integers, `left` and `right`, and returns the maximum number that can be formed by setting the maximum number of consecutive bits in the binary representation of `left` to 1, without exceeding `right`.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def countMaxSetBits ( left, right ) :\n        \"\"\"Write a function that takes two integers, `left` and `right`, and returns the maximum number that can be formed by setting the maximum number of consecutive bits in the binary representation of `left` to 1, without exceeding `right`.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def countMaxSetBits ( left, right ) :\n        \"\"\"Write a function that takes two integers"}
{"task_id": "Open/105", "completion": "\n    \n    if n == 0 :\n        return 1\n    \n    return 2 ** (n - 1).bit_length()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/106", "completion": "\n    sum = 0\n    for i in range ( 1, n ) :\n        if ( n % i == 0 ) :\n            sum += i\n    if ( sum == n ) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "\n        Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated\n    \"\"\"\n    \n    ### Example:\n    def encrypt(s):\n        \"\"\"\n        Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated\n    \"\"\"\n    \n    ### Example:\n    def encrypt(s):\n        \"\"\"\n        Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated\n    \"\"\"\n    \n    ### Example:\n    def encrypt(s):\n        \"\"\"\n        Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated\n    \"\"\"\n    \n    ### Example:\n    def encrypt(s):\n        \"\"\"\n        Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated"}
{"task_id": "Open/108", "completion": "\n    \n    if a < 0 :\n        return -1\n    \n    else :\n        return int(a * (3 * a - 1) / 2)\n    \n    "}
{"task_id": "Open/109", "completion": "\n    \n    return n.count(d)\n"}
{"task_id": "Open/110", "completion": "Write a function that takes an integer and checks if it is a valid number.\n        A valid number is one that does not contain any repeated digits.\n        The function should return True if the number is valid and False otherwise.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def validate ( n ) :\n        \"\"\"Write a function that takes an integer and checks if it is a valid number.\n        A valid number is one that does not contain any repeated digits.\n        The function should return True if the number is valid and False otherwise.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def validate ( n ) :\n        \"\"\"Write a function that takes an integer and checks if it is a valid number.\n        A valid number is one that does not contain any repeated digits.\n        The function should return True if the number is valid and False otherwise.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def validate ( n ) :\n        \"\"\"Write a function that takes an integer and checks if it is a valid number.\n        A valid number is one that does not contain any repeated digits.\n        The"}
{"task_id": "Open/111", "completion": "\n    \n    for i in range(len(a)):\n        if a[i]%5!= 0 and a[i]%3!= 0:\n            return False\n    return True\n"}
{"task_id": "Open/112", "completion": "\n    array = [0] * (n+1)\n    array[1] = 4\n    array[2] = 7\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 7\n        else:\n            array[i] = array[i//2] * 10 + 4\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    result = []\n    for i in range(n+1) :\n        if i % 2 == 0 :\n            result.append(5)\n        else :\n            result.append(3)\n            \n    return result[n]\n"}
{"task_id": "Open/114", "completion": "\n    if n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    else :\n        if n%2 == 0 :\n            return printNthElement(n//2) * 10 + 2\n        else :\n            return printNthElement(n//2) * 10 + 1\n"}
{"task_id": "Open/115", "completion": "\n    \n    if len(a) == 0 :\n        return True\n    \n    if len(a) == 1 :\n        return a[0] % 11 == 0\n    \n    if a[0] % 11 == 0 :\n        return isPossibleToZero(a[1:], len(a))\n    \n    return False\n"}
{"task_id": "Open/116", "completion": "\n    \n    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n    "}
{"task_id": "Open/117", "completion": "\n    \n    return string.title()\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "\n    return len(arr) == len(set(arr))\n"}
{"task_id": "Open/120", "completion": "\n    \n    count = 0\n    for i in range(len(string)-1) :\n        if string[i]!= string[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/123", "completion": "\n    \n    result = \"\"\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i] == '0' and s[j] == '0':\n                continue\n            elif s[i] == '0' or s[j] == '0':\n                break\n            else:\n                result = max(result, s[i:j+1], key=len)\n    return result\n"}
{"task_id": "Open/124", "completion": "\n    \n    if N > M :\n        return N * M\n    else :\n        return 0\n"}
{"task_id": "Open/125", "completion": "\n    if len(string)!= length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    \n    power = 1\n    \n    while power <= n :\n        power *= 2\n    \n    return power / 2\n    \n    "}
{"task_id": "Open/127", "completion": "\n    \n    if len(str(A)) == len(str(B)):\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/128", "completion": "\n    return x!= y and x!= y + 1 and x!= y - 1\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    for i in range(3, n+1):\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2 + Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    \"\"\"\n    arr = [1,2,3,4,5,6,7"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/132", "completion": "\n    m = (N - 1) // a\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "\n    if arr[0]%2==1 and arr[n-1]%2==1 and len(arr)%2==1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/135", "completion": "\n    \n    countSumResult = 0\n    \n    if N == 1 :\n        countSumResult = R - L + 1\n    elif N == 2 :\n        countSumResult = R - L + 2\n    else :\n        countSumResult = R - L + 3\n    \n    return countSumResult\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/136", "completion": "\n    \n    bias = [0] * (n + 2)\n    for i in range(n):\n        bias[arr[i] + 1] += 1\n    for i in range(1, n + 1):\n        if bias[i] == 0:\n            return i\n    return n + 1\n\narr = [1,2,3,4,5]"}
{"task_id": "Open/137", "completion": "\n    \n    s = list(s)\n    \n    for i in range(len(s)):\n        if s[i] == 'b' or s[i] == 'c' or s[i] == 'd' or s[i] == 'e' or s[i] == 'f':\n            s[i] = '1'\n        elif s[i] == 'g' or s[i] == 'h' or s[i] == 'i' or s[i] == 'j' or s[i] == 'k':\n            s[i] = '2'\n        elif s[i] == 'l' or s[i] =='m' or s[i] == 'n' or s[i] == 'o' or s[i] == 'p':\n            s[i] = '3'\n        elif s[i] == 'q' or s[i] == 'r' or s[i] =='s' or s[i] == 't' or s[i] == 'u':\n            s[i] = '4'\n        "}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1, n) :\n        if arr[i] <= arr[i - 1] :\n            arr[i] = arr[i - 1]\n    for i in range(n) :\n        if arr[i] > arr[i - 1] :\n            count += arr[i] - arr[i - 1] - 1\n            arr[i] = arr[i - 1] + 1\n    return count\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    \n    sum = 0\n    for i in s :\n        sum += ord(i)\n    return sum / len(s)\n"}
{"task_id": "Open/140", "completion": "\n    banknotes = 0\n    banknote_value = A\n    amount = S\n    banknote_count = 0\n    while banknote_value <= amount:\n        banknote_count += 1\n        banknote_value = banknote_value * B\n        amount = amount - banknote_value\n    return banknote_count\n"}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "\n    \n    count = 0\n    \n    while n > 0 :\n        n = n // 2\n        count += n\n    \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/143", "completion": "\n    \n    result = 0\n    \n    for i in range(n) :\n        result = result ^ arr[i]\n    \n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/144", "completion": "Write a function that takes an array and its length as input and returns the length of the longest decreasing subsequence in the array.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def lds ( arr, n ) :\n        \"\"\"Write a function that takes an array and its length as input and returns the length of the longest decreasing subsequence in the array.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def lds ( arr, n ) :\n        \"\"\"Write a function that takes an array and its length as input and returns the length of the longest decreasing subsequence in the array.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def lds ( arr, n ) :\n        \"\"\"Write a function that takes an array and its length as input and returns the length of the longest decreasing subsequence in the array.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def lds ( arr, n ) :\n        \"\"\"Write a function that takes an array and its length as input and returns the length of the longest decreasing subsequence in the array.\n        \"\"\"\n    \"\"\"\n    "}
{"task_id": "Open/145", "completion": "\n    \n    min_val = 0\n    for i in range(n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    \n    for i in range(n):\n        if arr[i] - min_val < k:\n            arr[i] = arr[i] - k\n        elif arr[i] - min_val > k:\n            arr[i] = arr[i] + k\n    \n    return arr\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/146", "completion": "\n    \n    if K == 1 :\n        return -1\n    \n    else :\n        count = 0\n        num = 1\n        \n        while num % K!= 0 :\n            num = num * 10 + 1\n            count += 1\n        \n        return count\n    \n    "}
{"task_id": "Open/147", "completion": "\n    \n    if n == 1 :\n        return 0\n    \n    if n == 2 :\n        return 1\n    \n    if n == 3 :\n        return 2\n    \n    if n == 4 :\n        return 2\n    \n    if n == 5 :\n        return 3\n    \n    if n == 6 :\n        return 3\n    \n    if n == 7 :\n        return 4\n    \n    if n == 8 :\n        return 4\n    \n    if n == 9 :\n        return 5\n    \n    if n == 10 :\n        return 5\n    \n    if n == 11 :\n        return 6\n    \n    if n == 12 :\n        return 6\n    \n    if n == 13 :\n        return 7\n    \n    if n == 14 :\n        return 7\n    \n    if n == 15 :\n        return 8\n    \n    if n == 16 :\n        return 8\n    \n    if n == 17 :\n        return 9\n    \n    if n == 18 :\n        return 9\n    \n    if n == 19 :\n        return 10\n    \n    if n == 20 :\n"}
{"task_id": "Open/148", "completion": "\n    \n    if n == 1 :\n        return 3\n    else :\n        return calSum(n-1) + 3\n    "}
{"task_id": "Open/149", "completion": "\n    return s**0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p ** 2 + q ** 2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    \n    return ''.join( [ chr(ord(c)^len1) for c in str1 ] )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/152", "completion": "\n    \n    binary = bin(n)\n    \n    for i in range(1, len(binary) ) :\n        if binary[i]!= binary[i-1] :\n            return True\n    \n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/153", "completion": "Write a function that takes a string as input and returns True if the vowels in the string are in alphabetical order, and False otherwise.\n        \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/154", "completion": "\n    \n    count = 0\n    for i in range (low, high + 1) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    \n    return minAbsDiffHelper(n, 0)\n"}
{"task_id": "Open/156", "completion": "\n    \n    if r < 0 :\n        return -1\n    else :\n        return 3 * r * r\n    \n    "}
{"task_id": "Open/157", "completion": "\n    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "\n    \n    left = 0\n    right = size - 1\n    \n    while left <= right :\n        mid = (left + right) // 2\n        \n        if ar[mid] == mid :\n            left = mid + 1\n        else :\n            right = mid - 1\n    \n    return left\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/159", "completion": "\n    \n    count = 0\n    \n    for i in range(len(str) - 2) :\n        if str[i] == '0' and str[i + 1] == '0' and str[i + 2] == '0' :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/160", "completion": "\n    \n    for i in range(n) :\n        if arr[i] % 2 == 0 :\n            return arr[i]\n    return -1\n"}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "\n    if dx == sx and dy == sy :\n        return True\n    if dx == sx and dy!= sy :\n        return False\n    if dx!= sx and dy == sy :\n        return False\n    if dx!= sx and dy!= sy :\n        return True\n    \n    "}
{"task_id": "Open/163", "completion": "\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return cntWays( n - 1 ) + cntWays( n - 2 )\n"}
{"task_id": "Open/164", "completion": "\n    \n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    result = 1\n    for i in d:\n        result *= d[i]\n    \n    return result\n"}
{"task_id": "Open/165", "completion": "Write a function that takes an integer height and returns the number of nodes in an AVL tree of that height.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def AVLnodes ( height ) :\n        \"\"\"Write a function that takes an integer height and returns the number of nodes in an AVL tree of that height.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def AVLnodes ( height ) :\n        \"\"\"Write a function that takes an integer height and returns the number of nodes in an AVL tree of that height.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def AVLnodes ( height ) :\n        \"\"\"Write a function that takes an integer height and returns the number of nodes in an AVL tree of that height.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def AVLnodes ( height ) :\n        \"\"\"Write a function that takes an integer height and returns the number of nodes in an AVL tree of that height.\n        \"\"\"\n    \"\"\"\n    \n    :\n    def AVLnodes ( height ) :\n"}
{"task_id": "Open/166", "completion": "\n    if source == dest :\n        return 0\n    if source < dest :\n        return sys.maxsize\n    if source > dest :\n        return -sys.maxsize\n    if source > dest :\n        return sys.maxsize\n    if source < dest :\n        return -sys.maxsize\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n    if source == dest :\n        return 0\n"}
{"task_id": "Open/167", "completion": "\n    result = \"1\"\n    for i in range(1, n) :\n        result = countnndSayHelper(result)\n    return result\n"}
{"task_id": "Open/168", "completion": "\n    \n    max_len = 0\n    \n    for i in range(N):\n        for j in range(i,N):\n            product = 1\n            for k in range(i,j+1):\n                product *= arr[k]\n            if product >= 0:\n                max_len = max(max_len, j-i+1)\n    \n    return max_len\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/169", "completion": "\n    \n    return math.sqrt((m * m) + (n * n)) / math.sqrt((m * m) + (n * n))\n"}
{"task_id": "Open/170", "completion": "\n    \n    count = 0\n    for i in range(n):\n        if arr[i] <= k:\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/171", "completion": "\n    \n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            k = j + 1\n            while k < len(arr):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n                k += 1\n    return count\n\nn = int(input())\nL = int(input())\narr = [int(x) for x in input().split()]"}
{"task_id": "Open/172", "completion": "\n    \n    lst = []\n    d = {}\n    \n    for i in range(l, r+1) :\n        if i % 2 == 0 and i % 3 == 0 :\n            lst.append(i)\n            d[i] = 0\n    \n    for i in lst :\n        for j in lst :\n            if i!= j :\n                if i * j == 2 * 3 * i * j :\n                    d[i] += 1\n    \n    return d\n"}
{"task_id": "Open/173", "completion": "\n    return n ^ ( (1 << m) - 1 )\n"}
{"task_id": "Open/174", "completion": "\n    \n    count = 0\n    for i in range(L, R + 1) :\n        if i % 9 == K or i % 9 == 0 :\n            count += 1\n    for i in range(R, R - rem + 1, -1) :\n        if i % 9 == K or i % 9 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/176", "completion": "\n    \n    for i in range(n):\n        if A[i] > A[i+1] and A[i] > A[i-1]:\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "\n    \n    if a < b :\n        if a < c :\n            return b - a\n        elif b < c :\n            return c - b\n        else :\n            return c - a\n    elif b < a :\n        if b < c :\n            return a - b\n        elif c < a :\n            return c - a\n        else :\n            return a - b\n    else :\n        return 0\n"}
