{"task_id": "Open/0", "completion": "    sum = 0\n    for i in arr :\n        sum += i\n    count = 0\n    for i in arr :\n        if i + K > sum :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/1", "completion": "    min_val = arr[0]\n    max_len = 1\n    for i in range(1,n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n            max_len = 1\n        elif arr[i] == min_val :\n            max_len += 1\n    return max_len\n", "result": "passed", "passed": true}
{"task_id": "Open/2", "completion": "    # Your code here\n    return \"Yes\" if ( n >> l ) & ( 1 << r ) == 0 else \"No\"\n", "result": "failed: ", "passed": false}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/4", "completion": "    \n    if sum(a) == n :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/5", "completion": "    return x % 2\n", "result": "failed: ", "passed": false}
{"task_id": "Open/6", "completion": "    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/7", "completion": "    \n    # Create a dictionary, key is the number, value is the number of digits.\n    d = {}\n    \n    # Loop the input, find the number of digits.\n    for i in range( n ) :\n        if arr[i] in d :\n            d[arr[i]] += 1\n        else :\n            d[arr[i]] = 1\n    \n    # Return result.\n    return max( d.values() )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/8", "completion": "    prime_factors = []\n    for i in a :\n        if i == 1 :\n            continue\n        elif i == 2 :\n            prime_factors.append(2)\n            continue\n        elif i == 3 :\n            prime_factors.append(3)\n            continue\n        elif i == 4 :\n            prime_factors.append(2)\n            prime_factors.append(2)\n            continue\n        elif i == 5 :\n            prime_factors.append(5)\n            continue\n        elif i == 6 :\n            prime_factors.append(2)\n            prime_factors.append(3)\n            continue\n        elif i == 7 :\n            prime_factors.append(7)\n            continue\n        elif i == 8 :\n            prime_factors.append(2)\n            prime_factors.append(2)\n            prime_factors.append(2)\n            continue\n        elif i == 9 :\n            prime_factors.append(3)\n            prime_factors.append(3)\n            continue\n        elif i == 10 :\n            prime_factors.append(2)\n            prime_factors.append(5)\n            continue\n        elif i == 11 :\n            prime_factors.append(11)", "result": "failed: ", "passed": false}
{"task_id": "Open/9", "completion": "    arr.sort()\n    return min( arr[k-1] - arr[0], sum( arr[k-1] - arr[i] for i in range(1,k) ) )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/10", "completion": "    total_time = 0\n    queue = deque()\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            total_time += 1\n        else:\n            total_time += 2\n            queue.append(A[i])\n            queue.append(B[i])\n    while queue:\n        total_time += 1\n        queue.popleft()\n    return total_time\n", "result": "failed: ", "passed": false}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/12", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/13", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/14", "completion": "    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n", "result": "passed", "passed": true}
{"task_id": "Open/15", "completion": "    # 1. Create a list, which contains all the numbers from 2 to n-1.\n    numbers = [i for i in range(2,n)]\n    # 2. Create a random number, a, between 2 and n-1.\n    a = random.choice(numbers)\n    # 3. Calculate the value of a raised to the power of (n-1)/2 modulo n.\n    result = pow(a,(n-1)/2,n)\n    # 4. Check if the result is equal to 1 or n-1.\n    if result == 1 or result == n-1:\n        # 5. If it is, return 1.\n        return 1\n    else:\n        # 6. If not, return -1.\n        return -1\n    # 7. If all t iterations pass the test, return 1.\n", "result": "failed: pow() 3rd argument not allowed unless all arguments are integers", "passed": false}
{"task_id": "Open/16", "completion": "    defeat = False\n    for i in range(n) :\n        if ( s1[i] == '0' and s2[i] == '1' ) or ( s1[i] == '1' and s2[i] == '0' ) or ( s1[i] == '0' and s2[i] == 'Z' ) or ( s1[i] == 'Z' and s2[i] == '0' ) :\n            defeat = True\n    return defeat\n", "result": "failed: ", "passed": false}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n", "result": "passed", "passed": true}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(0, length, 2):\n        if s[i] == '1':\n            count += 1\n    for i in range(1, length, 2):\n        if s[i] == '0':\n            count += 1\n    return min(count, length - count)\n", "result": "passed", "passed": true}
{"task_id": "Open/19", "completion": "    powerNumbers = []\n    for i in range(1, n+1):\n        if math.log(i, 2) == int(math.log(i, 2)):\n            powerNumbers.append(i)\n    return len(powerNumbers)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 1\n    else :\n        return x + product(x, y-1)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n) :\n        if a[i]%4 == 0 :\n            count0 += 1\n        elif a[i]%4 == 1 :\n            count1 += 1\n        elif a[i]%4 == 2 :\n            count2 += 1\n        elif a[i]%4 == 3 :\n            count3 += 1\n    if count0%2 == 0 and count1%2 == 0 and count2%2 == 0 and count3%2 == 0 :\n        return 1\n    else :\n        return 2\n", "result": "failed: ", "passed": false}
{"task_id": "Open/22", "completion": "    dp = [1] * n\n    for i in range( 1, n ) :\n        for j in range( i ) :\n            if arr[i] > arr[j] :\n                dp[i] = max( dp[i], dp[j] + 1 )\n    return max( dp )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    return subsetSum( arr, n, i + 1, sum - arr[i], count ) + subsetSum( arr, n, i + 1, sum, count )\n\narr = [ 3, 5, 1, 6, 2 ]\nn = len( arr )\nsum = 9\ncount = 0", "result": "passed", "passed": true}
{"task_id": "Open/24", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/25", "completion": "    return n * ( n + 1 ) * ( 2 * n + 1 ) / 6\n", "result": "failed: ", "passed": false}
{"task_id": "Open/26", "completion": "    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return max(factors)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n", "result": "passed", "passed": true}
{"task_id": "Open/29", "completion": "    return ( ( b - a ) / a ) * 100\n", "result": "failed: ", "passed": false}
{"task_id": "Open/30", "completion": "    return sum(i**2 for i in range(1,n+1)) / n\n", "result": "passed", "passed": true}
{"task_id": "Open/31", "completion": "    # Your code here\n    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/32", "completion": "    return 3** ( n - 1 )\n", "result": "passed", "passed": true}
{"task_id": "Open/33", "completion": "    list = []\n    for i in range(1,n+1):\n        list.append(i)\n    return list\n", "result": "failed: ", "passed": false}
{"task_id": "Open/34", "completion": "    counter = 0\n    for i in range( len( a ) ) :\n        product = 1\n        for j in range( i, len( a ) ) :\n            product *= a[ j ]\n            if product < k :\n                counter += 1\n    return counter\n", "result": "passed", "passed": true}
{"task_id": "Open/35", "completion": "    return math.floor(n/d)", "result": "failed: ", "passed": false}
{"task_id": "Open/36", "completion": "    \n    # Create a dictionary.\n    dic = {}\n    \n    # Loop the input, find the key in dictionary.\n    for i in range( n ) :\n        if arr[i] in dic :\n            dic[ arr[i] ] += 1\n        else :\n            dic[ arr[i] ] = 1\n    \n    # Return result.\n    for i in range( 1, n + 1 ) :\n        if i not in dic :\n            return i", "result": "failed: ", "passed": false}
{"task_id": "Open/37", "completion": "    result = [1]\n    for i in range(1, n) :\n        result.append(result[i-1] + result[i-2])\n    return result[-1]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/38", "completion": "    # Create a list, store the length and breadth.\n    l_b = [l, b]\n    # Create a variable, store the length and breadth.\n    length = l_b[0]\n    # Create a variable, store the length and breadth.\n    breadth = l_b[1]\n    # Create a variable, store the length and breadth.\n    area = length * breadth\n    # Create a variable, store the length and breadth.\n    area_sum = area\n    # Create a variable, store the length and breadth.\n    max_area = length * breadth\n    # Create a variable, store the length and breadth.\n    max_area_sum = area_sum\n    # Create a variable, store the length and breadth.\n    while length <= breadth :\n        # Create a variable, store the length and breadth.\n        length += 1\n        # Create a variable, store the length and breadth.\n        area = length * breadth\n        # Create a variable, store the length and breadth.\n        area_sum += area\n        # Create a variable, store the length and b", "result": "failed: ", "passed": false}
{"task_id": "Open/39", "completion": "    return N * (N + 1) / 2\n", "result": "passed", "passed": true}
{"task_id": "Open/40", "completion": "    \n    max_zeros = 0\n    current_zeros = 0\n    \n    for i in range(n):\n        if arr[i] == 0:\n            current_zeros += 1\n        else:\n            current_zeros = 0\n        if current_zeros > max_zeros:\n            max_zeros = current_zeros\n    \n    return max_zeros\n", "result": "failed: ", "passed": false}
{"task_id": "Open/41", "completion": "    result = 0\n    start = 0\n    end = 0\n    current_max = 0\n    for i in range ( n ) :\n        if arr [ i ] == 0 :\n            start = i\n            end = i\n        else :\n            current_max = max ( current_max, end - start + 1 )\n        result = max ( result, current_max )\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/42", "completion": "    # Write your code here.\n    min_array = []\n    for i in range(n):\n        min_array.append(min(a[i:i+k]))\n    return max(min_array)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/43", "completion": "    result = 0\n    product = 1\n    \n    for i in range( n ) :\n        product *= array[ i ]\n        if product <= k :\n            result += 1\n        else :\n            product = array[ i ]\n    \n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/44", "completion": "    arr.sort()\n    return sum(abs(i-j) for i,j in zip(arr,range(1,n+1)))\n", "result": "passed", "passed": true}
{"task_id": "Open/45", "completion": "    min_ele = min(arr)\n    return min_ele * (n - 1)\n", "result": "passed", "passed": true}
{"task_id": "Open/46", "completion": "    max_distance = 0\n    for i in range(len(array)):\n        diff = abs(i - array[i])\n        if diff > max_distance:\n            max_distance = diff\n    return max_distance\n", "result": "failed: ", "passed": false}
{"task_id": "Open/47", "completion": "    return ( a * x1 + b * y1 + c ) * ( a * x2 + b * y2 + c ) <= 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/48", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/49", "completion": "    result = 0\n    for i in range(L,R+1):\n        result = max(result,i)\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/50", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/51", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/52", "completion": "    # Write your code here.\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/53", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/54", "completion": "    \n    sum = 0\n    length = 0\n    \n    for i in range(n):\n        sum += a[i]\n        length += 1\n    \n    if sum + length - 1 == k:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/55", "completion": "    return (n & 1) == 1\n", "result": "passed", "passed": true}
{"task_id": "Open/56", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/57", "completion": "    return N if N % K == 0 else N - N % K\n", "result": "passed", "passed": true}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = result + var1 + var2 + (var1 * var2) / 100\n    for i in range(2,N):\n        result = result + arr[i] + (result * arr[i]) / 100\n    return result\n", "result": "passed", "passed": true}
{"task_id": "Open/59", "completion": "    \n    # Create a new array.\n    new_arr = []\n    \n    # Loop the input array.\n    for i in arr :\n        \n        # If the index is in the range, swap the element.\n        if index in ranges :\n            new_arr.append( arr[ index ] )\n        else :\n            new_arr.append( i )\n    \n    # Return result.\n    return new_arr[ -1 ]", "result": "failed: ", "passed": false}
{"task_id": "Open/60", "completion": "    if n < 0 :\n        return False\n    for i in range ( 0, int ( n ** 0.5 ) + 1 ) :\n        if i ** 2 > n :\n            break\n        if i ** 2 + ( n - i ** 2 ) ** 2 == n :\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in b :\n        if i in a :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/62", "completion": "    return str\n", "result": "failed: ", "passed": false}
{"task_id": "Open/63", "completion": "    # Your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/64", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/65", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/66", "completion": "    # Write your code here.\n    arr.sort()\n    size = len(arr) + k\n    if size % 2 == 0 :\n        return (arr[size//2] + arr[size//2 - 1])/2\n    else :\n        return arr[size//2]\n", "result": "passed", "passed": true}
{"task_id": "Open/67", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    else :\n        v = []\n        n -= 1\n        while n > 0 :\n            v.append( n % 5 )\n            n = n // 5\n        result = 0\n        for i in range( len( v ) - 1, -1, -1 ) :\n            result = result * 10 + v[ i ]\n        return 2 * result\n", "result": "passed", "passed": true}
{"task_id": "Open/69", "completion": "    result = True\n    for i in range(1, n) :\n        if (bin(i).count('1') > bin(i-1).count('1')) :\n            result = False\n            break\n    return result\n", "result": "passed", "passed": true}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    elif x < n :\n        return n\n    else :\n        return n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/71", "completion": "    result = 0\n    for i in range(0, n+1):\n        result += i * 2\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/72", "completion": "    series = 1\n    for i in range(1, n+1):\n        series += 2\n    return series\n", "result": "failed: ", "passed": false}
{"task_id": "Open/73", "completion": "    # Your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/74", "completion": "    counter = 0\n    for i in range(len(a)) :\n        for j in range(i+1, len(a)) :\n            if (a[i] & (a[i] - 1)) == 0 and (a[j] & (a[j] - 1)) == 0 and a[i] > a[j] :\n                counter += 1\n    return counter\n", "result": "failed: ", "passed": false}
{"task_id": "Open/75", "completion": "    return bin(n)[2:].replace('1', '0').replace('0', '1')\n", "result": "failed: ", "passed": false}
{"task_id": "Open/76", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/77", "completion": "    degree = radian * 180 / math.pi\n    return degree\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n", "result": "passed", "passed": true}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range( n ) :\n        sum += a + i * d\n    return sum\n", "result": "passed", "passed": true}
{"task_id": "Open/80", "completion": "    powers = [2**i for i in range(100)]\n    for i in powers:\n        if n%i == 0:\n            return i\n    return 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/81", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/82", "completion": "    return n + (n-1)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/83", "completion": "    # 1. Create a list to store the last occurrence of each character in the string.\n    last_occurrence = [0] * 26\n    for i in range( len(s) ) :\n        last_occurrence[ord(s[i]) - ord('a')] = i\n    \n    # 2. Sort the string.\n    s = sorted(s)\n    \n    # 3. Loop the string and compare each character with its corresponding character in the sorted string.\n    for i in range( len(s) ) :\n        if ord(s[i]) - ord('a')!= i :\n            # 4. If a character is not in the correct position, swap it with the character at its last occurrence.\n            s[i], s[last_occurrence[ord(s[i]) - ord('a')]] = s[last_occurrence[ord(s[i]) - ord('a')]], s[i]\n    \n    # 5. Return result.\n    return s\n", "result": "failed: ", "passed": false}
{"task_id": "Open/84", "completion": "    # Your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/85", "completion": "    if x < y :\n        x, y = y, x\n    while x % y!= 0 :\n        x = x // 2\n        if x % y == 0 :\n            return y\n    return x\n", "result": "failed: ", "passed": false}
{"task_id": "Open/86", "completion": "    # Write your code here.\n", "result": "failed: ", "passed": false}
{"task_id": "Open/87", "completion": "    dict = {}\n    for i in str :\n        if i in dict :\n            dict[i] += 1\n        else :\n            dict[i] = 1\n    for i in substr :\n        if i in dict :\n            dict[i] -= 1\n        else :\n            dict[i] = 0\n    return sum(dict.values())\n", "result": "failed: ", "passed": false}
{"task_id": "Open/88", "completion": "    # 1. Create a function that takes three parameters: the principal amount (p), the annual interest rate (r), and the loan tenure in years (t).\n    def emi_calculator ( p, r, t ) :\n        # 2. Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n        r = r / 1200\n        # 3. Convert the loan tenure from years to months by multiplying it by 12.\n        t = t * 12\n        # 4. Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n        emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n        # 5. Return the calculated EMI.\n        return emi\n    # 6. Call the function and print the result.\n    print(emi_calculator(p, r, t))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/89", "completion": "    result = 0\n    for i in range ( len ( A ) ) :\n        for j in range ( len ( B ) ) :\n            for k in range ( len ( C ) ) :\n                if A [ i ] * C [ k ] > B [ j ] * B [ j ] :\n                    result += 1\n    return result\n", "result": "failed: object of type 'int' has no len()", "passed": false}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1):\n        if i%10 == 2 or i%10 == 3 or i%10 == 9:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/91", "completion": "    \n    longest = []\n    current = []\n    \n    for i in range( len( arr ) ) :\n        if i == 0 :\n            current.append( arr[ i ] )\n        else :\n            if arr[ i ] - arr[ i - 1 ] == arr[ i - 1 ] - arr[ i - 2 ] :\n                current.append( arr[ i ] )\n            else :\n                longest.append( current )\n                current = [ arr[ i ] ]\n    \n    longest.append( current )\n    \n    return max( [ len( i ) for i in longest ] )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/92", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/93", "completion": "    counter = 0\n    while n > 1 :\n        counter += 1\n        n = n // 2\n    return counter\n", "result": "failed: ", "passed": false}
{"task_id": "Open/94", "completion": "\n        s = \"\"\n        for i in range ( n ) :\n            s += \"a\"\n        for i in range ( n - 1, -1, -1 ) :\n            k -= i\n            if k >= 0 :\n                if k >= 26 :\n                    s = s[:i] + \"z\" + s[i + 1:]\n                    k -= 26\n                else :\n                    s = s[:i] + chr ( ord ( s[i] ) + k - 97 ) + s[i + 1:]\n                    k -= ord ( s[i] ) - 97\n            if k < 0 :\n                break\n            k += i\n        return s\n    \"\"\"\n    def lexo_small ( n, k ) :\n        \"\"\"Write a function that takes two integers, n and k, and returns a string.\n        The function creates a string of length n, consisting of all 'a' characters.\n        It then modifies the string by replacing some of the 'a' characters with other lowercase letters.\n        The number of replacements is determined by the value of", "result": "failed: unexpected indent (<string>, line 23)", "passed": false}
{"task_id": "Open/95", "completion": "    total_distance = 0\n    number_of_stops = n\n    fuel = fuel\n    distance_covered = 0\n    fuel_consumed = 0\n    distance_covered = fuel / number_of_stops\n    fuel_consumed = distance_covered * 2\n    total_distance = total_distance + distance_covered\n    number_of_stops = number_of_stops - 1\n    fuel = fuel - fuel_consumed\n    distance_covered = 0\n    fuel_consumed = 0\n    distance_covered = fuel / number_of_stops\n    fuel_consumed = distance_covered * 2\n    total_distance = total_distance + distance_covered\n    number_of_stops = number_of_stops - 1\n    fuel = fuel - fuel_consumed\n    distance_covered = 0\n    fuel_consumed = 0\n    distance_covered = fuel / number_of_stops\n    fuel_consumed = distance_covered * 2\n    total_distance = total_distance + distance_covered\n    number_of_stops = number_of_stops - 1\n    fuel = fuel - fuel_consumed\n    distance_covered = 0\n    fuel_consumed = 0\n    distance_covered = fuel /", "result": "failed: invalid syntax (<string>, line 33)", "passed": false}
{"task_id": "Open/96", "completion": "    sum_of_all_elements = 0\n    sum_of_elements_before_split_point = 0\n    sum_of_elements_after_split_point = 0\n    for i in range(n):\n        sum_of_all_elements += arr[i]\n    for i in range(n):\n        sum_of_elements_before_split_point += arr[i]\n        sum_of_elements_after_split_point += arr[i]\n        if sum_of_elements_before_split_point == sum_of_all_elements/3 and sum_of_elements_after_split_point == sum_of_all_elements/3:\n            return 1\n    return 0\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)", "result": "passed", "passed": true}
{"task_id": "Open/97", "completion": "    words = sentence.split()\n    if word in words :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/98", "completion": "    return math.floor(math.log10(n))+1\n", "result": "passed", "passed": true}
{"task_id": "Open/99", "completion": "    pass", "result": "failed: ", "passed": false}
{"task_id": "Open/100", "completion": "    return x == ( x << 32 ) | y\n", "result": "failed: ", "passed": false}
{"task_id": "Open/101", "completion": "    counter = 0\n    prev = s[0]\n    for letter in s :\n        if letter == prev :\n            counter += 1\n        else :\n            return counter\n        prev = letter\n    return counter\n", "result": "failed: ", "passed": false}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/103", "completion": "    result = 0\n    minimum = float(\"inf\")\n    absolute_difference = 0\n    \n    for i in range(n-1) :\n        absolute_difference = abs(arr[i] - arr[i+1])\n        if absolute_difference < minimum :\n            minimum = absolute_difference\n    \n    return minimum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/104", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/105", "completion": "    \n    # Your code here\n    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/106", "completion": "    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum = sum + i\n    if sum == n:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/107", "completion": "    century = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    leapCentury = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,", "result": "failed: invalid syntax (<string>, line 14)", "passed": false}
{"task_id": "Open/108", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/109", "completion": "    frequency = {}\n    for digit in str(n) :\n        if digit in frequency :\n            frequency[digit] += 1\n        else :\n            frequency[digit] = 1\n    return frequency[str(d)]\n", "result": "failed: '9'", "passed": false}
{"task_id": "Open/110", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/111", "completion": "    # Create a list of integers.\n    list_a = []\n    # Loop the list, divide each element by 5 and 3.\n    for i in a :\n        if i % 5 == 0 and i % 3 == 0 :\n            list_a.append(i)\n        else :\n            return False\n    # If the list length is equal to the input n, return True.\n    if len(list_a) == n :\n        return True\n    # Otherwise, return False.\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/112", "completion": "    arr = [0] * (n+1)\n    arr[0] = 4\n    arr[1] = 7\n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            arr[i] = arr[i//2] * 10 + 7\n        else :\n            arr[i] = arr[i//2] * 10 + 4\n    return arr[n]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/113", "completion": "    array = [0]*(n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(2,n+1):\n        if i%2 == 0:\n            array[i] = array[i//2-1]*10 + 5\n        else:\n            array[i] = array[i//2]*10 + 3\n    return array[n]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/114", "completion": "    # Your code here.\n", "result": "failed: ", "passed": false}
{"task_id": "Open/115", "completion": "    pass", "result": "failed: ", "passed": false}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b * h\n    else :\n        return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/117", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt( 8 * p + 1 ) / 2 ) - 1\n", "result": "passed", "passed": true}
{"task_id": "Open/119", "completion": "    return len(set(arr)) == len(arr)\n", "result": "passed", "passed": true}
{"task_id": "Open/120", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/121", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/122", "completion": "    max = 0\n    for s in ss :\n        if s.isdigit() :\n            max = max * 10 + int(s)\n        else :\n            max = max if max > int(s) else int(s)\n    return max\n", "result": "failed: invalid literal for int() with base 10: 'a'", "passed": false}
{"task_id": "Open/123", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/124", "completion": "    if N > M :\n        N, M = M, N\n    while K > 0 :\n        if N == 0 or M == 0 :\n            return 0\n        elif N > M :\n            N -= M\n        else :\n            M -= N\n        K -= 1\n    return N * M\n", "result": "passed", "passed": true}
{"task_id": "Open/125", "completion": "    for i in range(len(string)-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/126", "completion": "    \n    powers_of_2 = [2**i for i in range(32)]\n    for i in range(len(powers_of_2)):\n        if powers_of_2[i] > n:\n            return i\n    return len(powers_of_2) - 1", "result": "failed: ", "passed": false}
{"task_id": "Open/127", "completion": "    if len(A) == len(B) :\n        return True\n    else :\n        return False\n", "result": "failed: object of type 'int' has no len()", "passed": false}
{"task_id": "Open/128", "completion": "    if x == y :\n        return False\n    elif abs(x - y) == 1 :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/129", "completion": "    pass", "result": "failed: ", "passed": false}
{"task_id": "Open/130", "completion": "    # Write your code here.\n    return findMinSteps(arr, n)\n", "result": "failed: name 'findMinSteps' is not defined", "passed": false}
{"task_id": "Open/131", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/132", "completion": "    m = (N // a) * (N // a + 1) // 2\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n", "result": "failed: ", "passed": false}
{"task_id": "Open/133", "completion": "    if N <= 2:\n        return N\n    elif N <= 4:\n        return N + 3\n    elif (N - 4) % 4 == 0:\n        return N + 1\n    elif (N - 4) % 4 <= 2:\n        return N + 2\n    else:\n        return N - 1\n", "result": "passed", "passed": true}
{"task_id": "Open/134", "completion": "    if arr[0] % 2 == 1 and arr[n-1] % 2 == 1 and n % 2 == 1 :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/135", "completion": "    count = 0\n    if N == 1 :\n        for i in range(L,R+1) :\n            count += 1\n    elif N > 1 :\n        for i in range(L,R+1) :\n            if i % (N-1) == 0 :\n                count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/136", "completion": "    \n    hash_table = {}\n    \n    for i in range( n ) :\n        if arr[i] not in hash_table :\n            return arr[i]\n        else :\n            hash_table[arr[i]] = 1", "result": "failed: ", "passed": false}
{"task_id": "Open/137", "completion": "    pass", "result": "failed: ", "passed": false}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range ( n ) :\n        if arr [ i ] > arr [ i - 1 ] :\n            count += arr [ i ] - arr [ i - 1 ]\n            arr [ i ] = arr [ i - 1 ]\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/139", "completion": "    ascii_values = []\n    for char in s:\n        ascii_values.append(ord(char))\n    return sum(ascii_values)/len(ascii_values)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/140", "completion": "    banknotes = []\n    for i in range(N) :\n        banknotes.append(B)\n    for i in range(len(banknotes)) :\n        if banknotes[i] > S :\n            return i\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/141", "completion": "    return x * y // math.gcd(x,y)\n", "result": "passed", "passed": true}
{"task_id": "Open/142", "completion": "    count = 0\n    while n % 2 == 0:\n        count += 1\n        n /= 2\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/143", "completion": "    \n    # Create a list of all possible sums.\n    sums = []\n    \n    # Loop the list, find the maximum.\n    for i in range( n ) :\n        for j in range( i+1, n ) :\n            sums.append( arr[i] ^ arr[j] )\n    \n    # Return result.\n    return sums.index( max( sums ) )\n", "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "Open/144", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/145", "completion": "    min_val = arr[0]\n    for i in range(1,n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n    return min_val + k\n", "result": "passed", "passed": true}
{"task_id": "Open/146", "completion": "    num = []\n    for i in range(K):\n        if i in num:\n            return num.index(i) + 1\n        else:\n            num.append(i)\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/147", "completion": "    # Write your code here.\n    min_operations = sys.maxsize\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = 1\n        else:\n            arr[i] = 0\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = 1\n        else:\n            arr[i] = 0\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = 1\n        else:\n            arr[i] = 0\n    return min_operations\n", "result": "failed: ", "passed": false}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n", "result": "passed", "passed": true}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/151", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/152", "completion": "    binary = bin(n)[2:]\n    for i in range(len(binary)-1) :\n        if binary[i] == '1' and binary[i+1] == '1' :\n            return False\n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == 0:\n                continue\n            elif s[i] < s[i-1]:\n                return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1):\n        if i % 10 >= k:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/155", "completion": "    return int(math.pow(2, math.ceil(math.log(n, 2)))) - n\n", "result": "passed", "passed": true}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        return 3.14 * r * r\n", "result": "failed: ", "passed": false}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n", "result": "passed", "passed": true}
{"task_id": "Open/158", "completion": "    left = 0\n    right = size - 1\n    while left <= right :\n        mid = (left + right) // 2\n        if ar[mid] == mid :\n            left = mid + 1\n        elif ar[mid] == mid + 1 :\n            right = mid - 1\n        else :\n            return mid\n    return left\n", "result": "failed: ", "passed": false}
{"task_id": "Open/159", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/160", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n        ans = max(ans, xorArr)\n    return ans\n", "result": "failed: ", "passed": false}
{"task_id": "Open/162", "completion": "    # Create a list of possible directions.\n    directions = [ ( 1, 0 ), ( 0, 1 ) ]\n    \n    # Loop the list, find the destination point.\n    for direction in directions :\n        if ( sx + direction[ 0 ] == dx ) and ( sy + direction[ 1 ] == dy ) :\n            return True\n    \n    # Return result.\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/163", "completion": "    if n % 2 == 1 :\n        return 0\n    else :\n        return ( n // 2 ) * ( ( n // 2 ) + 1 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/164", "completion": "    count = {}\n    for i in range( n ) :\n        count[ arr[ i ] ] = count.get( arr[ i ] ) + 1\n    ans = 1\n    for i in range( 1, n + 1 ) :\n        ans *= count.get( i, 0 )\n    return ans\n\n", "result": "failed: unsupported operand type(s) for +: 'NoneType' and 'int'", "passed": false}
{"task_id": "Open/165", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/166", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/167", "completion": "    if n == 1 :\n        return \"1\"\n    else :\n        result = \"\"\n        for i in range(1, n+1) :\n            result = result + str(len(countnndSay(i-1))) + countnndSay(i-1)[-1]\n        return result\n", "result": "failed: string index out of range", "passed": false}
{"task_id": "Open/168", "completion": "    if N == 0 :\n        return 0\n    max_len = 1\n    for i in range(1,N):\n        if arr[i] < 0 :\n            max_len = 1\n        else :\n            max_len += 1\n    return max_len\n\narr = [1,2,3,4,5]\nN = 10", "result": "failed: ", "passed": false}
{"task_id": "Open/169", "completion": "    return math.sqrt( abs(m) * abs(m) + abs(n) * abs(n) )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range ( n ) :\n        sum = 0\n        for j in range ( i, n ) :\n            sum += arr [ j ]\n            if sum < k :\n                count += 1\n    return count\n\n\narr = [ 1, 4, 45, 6, 0, 19 ]\nn = len ( arr )\nk = 50", "result": "passed", "passed": true}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range( len( arr ) - 2 ) :\n        for j in range( i + 1, len( arr ) - 1 ) :\n            for k in range( j + 1, len( arr ) ) :\n                if arr[ k ] - arr[ i ] <= L :\n                    count += 1\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "Open/172", "completion": "    \n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/173", "completion": "    mask = 1 << m - 1\n    return n & mask\n", "result": "failed: ", "passed": false}
{"task_id": "Open/174", "completion": "    count = 0\n    for i in range ( R - K + 1, R + 1 ) :\n        if i % 9 == K :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/175", "completion": "    result = ''\n    for i in range(k):\n        result += str(math.log10(n))[-1]\n        n *= math.log10(n)\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/176", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/177", "completion": "    return max( a, b, c ) - min( a, b, c )\n", "result": "failed: ", "passed": false}
