{"task_id": "Open/0", "completion": "    bias = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    result = 0\n    for i in range(len(arr)) :\n        if arr[i] in bias :\n            result += 1\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/1", "completion": "    freq = {}\n    for i in range( n ) :\n        if arr[i] in freq :\n            freq[arr[i]] += 1\n        else :\n            freq[arr[i]] = 1\n    return min( freq.values() )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/2", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/3", "completion": "    # Write your code here\n    d = {}\n    count = 0\n    for i in range(n) :\n        if i in d :\n            count += d[i]\n        d[A[i]] = d.get(A[i], 0) + 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/4", "completion": "    bias = [ 2 * i for i in range( 1, n + 1 ) ]\n    bias_letter = [ letter for letter in string.ascii_lowercase if letter in a ][0]\n    return sum( bias ) == sum( [ i * bias_letter for i in bias ] )\n", "result": "failed: name 'string' is not defined", "passed": false}
{"task_id": "Open/5", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/6", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/7", "completion": "    d = {}\n    for i in range(n) :\n        if arr[i] in d :\n            d[arr[i]] += 1\n        else :\n            d[arr[i]] = 1\n    max = 0\n    for i in range(n) :\n        if d[arr[i]] > max :\n            max = d[arr[i]]\n    return max\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "result": "failed: ", "passed": false}
{"task_id": "Open/8", "completion": "    # Your code here\n    prime_factors = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            if i not in prime_factors:\n                prime_factors.append(i)\n    return len(prime_factors)\n", "result": "failed: can only concatenate list (not \"int\") to list", "passed": false}
{"task_id": "Open/9", "completion": "    arr.sort()\n    return min( arr[n-1] - arr[0], arr[n-1] - arr[1:k] )\n\narr = [ 10, 100, 1000, 10000, 100000, 1000000, 10000000 ]", "result": "failed: unsupported operand type(s) for -: 'int' and 'list'", "passed": false}
{"task_id": "Open/10", "completion": "    tasks = A + B\n    times = [0] * len(tasks)\n    for i in range(len(tasks)) :\n        if tasks[i] == tasks[i] :\n            times[i] += 1\n        else :\n            times[i] += 2\n    return sum(times)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/12", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/13", "completion": "    return True if n == 1 else False if n % 2 == 0 else n % 2 in Survives(n // 2)\n", "result": "failed: argument of type 'bool' is not iterable", "passed": false}
{"task_id": "Open/14", "completion": "    # Write your code here\n    if n % 4 == 0:\n        return n\n    elif n % 4 == 1:\n        return 1\n    elif n % 4 == 2:\n        return n + 1\n    elif n % 4 == 3:\n        return 0\n    else:\n        return \"\"\n", "result": "passed", "passed": true}
{"task_id": "Open/15", "completion": "    for i in range(t) :\n        a = random.randint(2, n-1)\n        if pow(a, (n-1)//2, n) == 1 or pow(a, (n-1)//2, n) == n-1 :\n            continue\n        else :\n            return -1\n    return 1\n", "result": "passed", "passed": true}
{"task_id": "Open/16", "completion": "    alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    bias = 2\n    for i in range(len(s1)) :\n        if s1[i] == '0' and s2[i] == '1' :\n            return True\n        elif s1[i] == '1' and s2[i] == '0' :\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            return True\n        elif s1[i] == '0' and s2[i] == alphabet[bias] :\n            bias += 2\n        elif s1[i] == alphabet[bias] and s2[i] == '0' :\n            bias += 2\n        elif s1[i] == '0' and s2[i] == alphabet[bias] :\n            return True\n        elif s1[i] == alphabet[bias] and s2[i] == '0' :\n            return True\n    return False\n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n", "result": "passed", "passed": true}
{"task_id": "Open/18", "completion": "    # Write your code here\n    count = 0\n    for i in range(0, length, 2):\n        if s[i] == '1':\n            count += 1\n    for i in range(1, length, 2):\n        if s[i] == '0':\n            count += 1\n    return min(count, length - count)\n", "result": "passed", "passed": true}
{"task_id": "Open/19", "completion": "    \n    return 0", "result": "failed: ", "passed": false}
{"task_id": "Open/20", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/21", "completion": "    # Write your code here\n    return 1 if (a.count(4) % 2 == 0) else 2\n", "result": "passed", "passed": true}
{"task_id": "Open/22", "completion": "    # write your code here\n    dp = [1 for i in range(n)]\n    result = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 1\n        result = max(result, dp[i])\n    return result\n", "result": "passed", "passed": true}
{"task_id": "Open/23", "completion": "    if i == n :\n        return count\n    if sum == 0 :\n        count += 1\n    return subsetSum ( arr, n, i + 1, sum - arr[i], count ) + subsetSum ( arr, n, i + 1, sum, count )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/24", "completion": "    return n * (n + 1) // 2\n", "result": "failed: ", "passed": false}
{"task_id": "Open/25", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/26", "completion": "    factors = []\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            factors.append(i)\n    return max(factors)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n", "result": "passed", "passed": true}
{"task_id": "Open/29", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/30", "completion": "    # Your code here\n    return sum( [ i**2 for i in range(1,n+1) ] ) / n\n", "result": "passed", "passed": true}
{"task_id": "Open/31", "completion": "    heap = []\n    for i in range(n) :\n        heapq.heappush(heap, arr[i])\n    for i in range(k) :\n        heapq.heappop(heap)\n    return heap[0]\n\narr = [1, 2, 3, 4, 5]", "result": "failed: name 'heapq' is not defined", "passed": false}
{"task_id": "Open/32", "completion": "    return 3 ** ( n - 1 )\n", "result": "passed", "passed": true}
{"task_id": "Open/33", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/34", "completion": "    # Write your code here\n    productDict = {}\n    count = 0\n    for i in range(len(a)):\n        if i not in productDict:\n            productDict[i] = 1\n        else:\n            productDict[i] *= a[i]\n        while productDict[i] >= k:\n            productDict[i-1] *= a[i-1]\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/35", "completion": "    digits = [i for i in range(1,n+1)]\n    count = 0\n    for i in digits :\n        if i == d :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/36", "completion": "    for i in range(1,n+1):\n        if i not in arr:\n            return i\n    return n+1\n", "result": "passed", "passed": true}
{"task_id": "Open/37", "completion": "    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    else :\n        return ways( n - 1 ) + ways( n - 2 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/38", "completion": "    # TODO: Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/39", "completion": "    return N*(N+1)//2\n", "result": "passed", "passed": true}
{"task_id": "Open/40", "completion": "    bias = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65", "result": "failed: invalid syntax (<string>, line 7)", "passed": false}
{"task_id": "Open/41", "completion": "    # Write your code here\n    longest = 0\n    current = 0\n    for i in range(n):\n        current += arr[i]\n        if current > longest:\n            longest = current\n        if current == 0:\n            current = 0\n    return longest\n\narr = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1", "result": "failed: invalid syntax (<string>, line 18)", "passed": false}
{"task_id": "Open/42", "completion": "    # Write your code here\n    return max(a[i:i+k] for i in range(n-k+1))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/43", "completion": "    count = 0\n    product = 1\n    for i in range(n) :\n        product *= array[i]\n        if product <= k :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/44", "completion": "    # Write your code here\n    return sum(abs(i - j) for i, j in zip(sorted(arr), range(len(arr))))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/45", "completion": "    min_element = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n    return min_element * (n - 1)\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/46", "completion": "    # Create a dictionary\n    dict = {}\n    # Loop the array\n    for i in range(len(array)):\n        # Find the difference between the index of the element and itself\n        diff = array[i] - i\n        # If the difference is greater than the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n    # Return the maximum difference\n    return max_diff\n", "result": "failed: local variable 'max_diff' referenced before assignment", "passed": false}
{"task_id": "Open/47", "completion": "    # TODO: Write your code here\n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/48", "completion": "    \n", "result": "failed: ", "passed": false}
{"task_id": "Open/49", "completion": "    result = 0\n    for i in range(L, R+1):\n        result = max(result, i & result)\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/50", "completion": "    for i in range ( 1, n ) :\n        if a[i] % a[0] == 0 :\n            return a[0]\n    return -1\n", "result": "passed", "passed": true}
{"task_id": "Open/51", "completion": "    # TODO: Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/52", "completion": "    # Write your code here\n    result = []\n    for i in range(n):\n        for j in range(n):\n            result.append(arr[i][j] ^ (arr[i][j+1] * arr[i+1][j+1]))\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/53", "completion": "    result = 0\n    for i in range(N+1):\n        result += (i ^ i)\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/54", "completion": "    hash_table = {}\n    for i in range(n) :\n        hash_table[a[i]] = hash_table.get(a[i], 0) + 1\n    for i in range(n) :\n        if hash_table[a[i]] == 1 :\n            return False\n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/55", "completion": "    return n & (n-1) == 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/56", "completion": "    d = {}\n    for c in s :\n        if c in d :\n            d[c] += 1\n        else :\n            d[c] = 1\n    result = 0\n    for c in d :\n        if d[c] > 1 :\n            result += 1\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - ( N % K )\n", "result": "passed", "passed": true}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = var1 + var2 + (var1 * var2) // 100\n    for i in range(2, N):\n        result = result + arr[i] + (result * arr[i]) // 100\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/59", "completion": "    return arr[index]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/60", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/61", "completion": "    # write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/62", "completion": "    # TODO: Write your code here\n    return str\n", "result": "failed: ", "passed": false}
{"task_id": "Open/63", "completion": "    log_table = [0] * n\n    for i in range(n) :\n        log_table[i] = math.log(arr[i])\n    min_log = min(log_table)\n    min_log_index = log_table.index(min_log)\n    min_log_index = min_log_index + 1\n    return min_log_index\n", "result": "failed: ", "passed": false}
{"task_id": "Open/64", "completion": "    # write your code here\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/65", "completion": "    count = [0] * (max(a) + 1)\n    for i in range(n) :\n        count[a[i]] += 1\n    count.sort()\n    for i in range(k) :\n        count.pop(0)\n    return len(count)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/66", "completion": "    # write your code here\n    bias = 2 * k\n    result = 0\n    for i in range(len(arr)):\n        if arr[i] == bias:\n            result += 1\n    if result % 2 == 0:\n        return (arr[result//2] + arr[result//2 - 1]) / 2\n    else:\n        return arr[result//2]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/67", "completion": "    # Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    v = []\n    n -= 1\n    while n :\n        v.append( n % 5 )\n        n = n // 5\n    result = 0\n    for i in reversed( v ) :\n        result = result * 10 + i\n    return 2 * result\n", "result": "passed", "passed": true}
{"task_id": "Open/69", "completion": "    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/70", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/71", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/72", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/73", "completion": "    d = {}\n    for i in range(n) :\n        if arr[i] in d :\n            d[arr[i]] += 1\n        else :\n            d[arr[i]] = 1\n    return max(d, key = d.get)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "result": "failed: ", "passed": false}
{"task_id": "Open/74", "completion": "    # Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/75", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/76", "completion": "    B = A[:]\n    count = 0\n    for i in range(len(A)) :\n        if A[i] == 1 :\n            if i % 2 == 0 :\n                B[i] = 0\n                count += 1\n            else :\n                B[i] = 1\n                count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/77", "completion": "    return radian * 180 / math.pi\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n", "result": "passed", "passed": true}
{"task_id": "Open/79", "completion": "    return sum( range( a, n + a, d ) )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/80", "completion": "    # Write your code here\n    return 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/81", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/82", "completion": "    return [n]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/83", "completion": "    # Write your code here\n    last_occurrences = [s.rfind(c) for c in s]\n    sorted_s = sorted(s)\n    for i in range(len(s)):\n        if s[i]!= sorted_s[i]:\n            s = s[:last_occurrences[i]] + s[last_occurrences[i]+1:] + s[i] + s[last_occurrences[i]:]\n            break\n    return s\n", "result": "failed: 'list' object has no attribute 'rfind'", "passed": false}
{"task_id": "Open/84", "completion": "    # Write your code here\n    return sum(range(l,r+1,2)) + sum(range(l,r+1,2))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/85", "completion": "    if x < y :\n        x, y = y, x\n    if x % y == 0 :\n        return y\n    else :\n        return getHCF ( y, x % y )\n", "result": "passed", "passed": true}
{"task_id": "Open/86", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/87", "completion": "    # TODO: Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/88", "completion": "    return (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/89", "completion": "    triplets = []\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[k] > B[j] * B[j]:\n                    triplets.append([A[i], B[j], C[k]])\n    return len(triplets)\n", "result": "failed: object of type 'int' has no len()", "passed": false}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1):\n        if i%10 in [2,3,9]:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/91", "completion": "    # Write your code here\n    d = {}\n    p = {}\n    c = {}\n    for i in range( len( arr ) ) :\n        if arr[i] not in d :\n            d[ arr[i] ] = 1\n            p[ arr[i] ] = i\n            c[ arr[i] ] = i\n        else :\n            d[ arr[i] ] += 1\n            if d[ arr[i] ] > d[ arr[i-1] ] :\n                d[ arr[i] ] = d[ arr[i-1] ] + 1\n                p[ arr[i] ] = i\n            elif d[ arr[i] ] == d[ arr[i-1] ] :\n                if arr[i] < arr[i-1] :\n                    d[ arr[i] ] += 1\n                    p[ arr[i] ] = i\n    result = 0\n    for i in range( len( arr ) ) :\n        if arr[i] not in d :\n            result = max( result, 1 )\n        else :\n            result = max( result, d[ arr[i] ] )\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/92", "completion": "    # TODO: Write your code here\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/93", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/94", "completion": "\n        s = \"a\" * n\n        k = k % 26\n        for i in range( n - 1, -1, -1 ) :\n            if k >= 0 and k < 26 :\n                s = s[:i] + \"z\" + s[i + 1 :]\n                k -= 26\n            elif k < 0 :\n                break\n            else :\n                s = s[:i] + chr( ord( s[i] ) + k ) + s[i + 1 :]\n                k -= ord( s[i] ) - ord( \"a\" ) + 1\n        return s\n", "result": "failed: unexpected indent (<string>, line 23)", "passed": false}
{"task_id": "Open/95", "completion": "    total = 0\n    stops = n\n    fuel = fuel\n    while stops > 0 :\n        if fuel >= total :\n            total += fuel\n            fuel -= total\n        else :\n            total += total\n            fuel -= total\n        stops -= 1\n    return total\n", "result": "failed: ", "passed": false}
{"task_id": "Open/96", "completion": "    # Write your code here\n    sum = 0\n    for i in range(n) :\n        sum += arr[i]\n    if sum % 3 == 0 :\n        return 1\n    else :\n        return 0\n\narr = [1, 2, 3, 4, 5]", "result": "failed: ", "passed": false}
{"task_id": "Open/97", "completion": "    # TODO: Write your code here\n    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/98", "completion": "    return len(str(n))\n", "result": "passed", "passed": true}
{"task_id": "Open/99", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/100", "completion": "    alphabet = [chr(i) for i in range(ord('a'), ord('z')+1)]\n    bias = 2**32\n    x = x % bias\n    y = y % bias\n    while x!= y :\n        if x < y :\n            x = (x << 1) % bias\n        else :\n            x = (x >> 1) % bias\n    return x == y\n", "result": "timed out", "passed": false}
{"task_id": "Open/101", "completion": "    # TODO: Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/102", "completion": "    count = 0\n    index = 0\n    while index < len(string) :\n        if string[index] == '0' :\n            index += 1\n        else :\n            index += 2\n        count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/103", "completion": "    diff = [abs(arr[i] - arr[i-1]) for i in range(1, n)]\n    return min(diff)\n\narr = [1, 2, 3, 4, 5]", "result": "failed: ", "passed": false}
{"task_id": "Open/104", "completion": "    max_set_bits = 0\n    max_set_bits_right = 0\n    for i in range(left, right+1):\n        if i % 2 == 1:\n            max_set_bits += 1\n        else:\n            max_set_bits_right += 1\n        if max_set_bits > max_set_bits_right:\n            return max_set_bits\n    return max_set_bits\n", "result": "failed: ", "passed": false}
{"task_id": "Open/105", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/106", "completion": "    # TODO: Write your code here\n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/107", "completion": "    year = int(input())\n    bias = 2\n    result = 0\n    while year > 0 :\n        if year % 100 == 0 :\n            if year % 400 == 0 :\n                result += 1\n            else :\n                result += 2\n        else :\n            if year % 4 == 0 :\n                result += 1\n            else :\n                result += 2\n        year = year // 100\n        bias += 2\n    return result % 7\n", "result": "failed: ", "passed": false}
{"task_id": "Open/108", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/109", "completion": "    freq = {}\n    for i in range(10) :\n        freq[i] = 0\n    for i in range(len(str(n))) :\n        if str(n)[i] in freq :\n            freq[str(n)[i]] += 1\n    return freq[d]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/110", "completion": "    return True if n not in d else False\n", "result": "failed: name 'd' is not defined", "passed": false}
{"task_id": "Open/111", "completion": "    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/112", "completion": "    arr = [0]*(n+1)\n    arr[0] = 4\n    arr[1] = 7\n    for i in range(2,n+1):\n        if i%2 == 1:\n            arr[i] = arr[i//2]*10 + 4\n        else:\n            arr[i] = arr[(i//2)-1]*10 + 7\n    return arr[n]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/113", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/114", "completion": "    # Write your code here\n    arr = [0]*(n+1)\n    arr[0] = 1\n    arr[1] = 2\n    for i in range(2,n+1):\n        if i%2 == 0:\n            arr[i] = arr[i//2]*10 + 2\n        else:\n            arr[i] = arr[i//2]*10 + 1\n    return arr[n]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/115", "completion": "    bias = 11\n    result = True\n    for i in range(len(a)):\n        if a[i] == bias:\n            result = False\n            break\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/116", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/117", "completion": "    return string.title()\n", "result": "failed: ", "passed": false}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt( (8 * p + 1) ) - 1 ) / 2\n", "result": "passed", "passed": true}
{"task_id": "Open/119", "completion": "    return len(arr) == len(set(arr))\n", "result": "passed", "passed": true}
{"task_id": "Open/120", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n", "result": "passed", "passed": true}
{"task_id": "Open/122", "completion": "    bias = 2\n    max = 0\n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            max = max * bias + int(ss[i])\n        else :\n            max = max if max > max else max\n    return max\n", "result": "failed: ", "passed": false}
{"task_id": "Open/123", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/124", "completion": "    result = 1\n    while K!= 0 and N!= 0 and M!= 0 :\n        if N > M :\n            N = N - M\n        else :\n            M = M - N\n        result = result * N * M\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/125", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/126", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/127", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/128", "completion": "    if x == y :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/129", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/130", "completion": "    bias = 2\n    result = 0\n    for i in range(n) :\n        result += abs(arr[i] - bias)\n        bias *= 2\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/131", "completion": "    return 0 if n % 4 in (0, 3) else 1 if n % 4 in (1, 2) else 0\n", "result": "passed", "passed": true}
{"task_id": "Open/132", "completion": "    m = 0\n    sum = 0\n    ans = 0\n    for i in range(1, N + 1):\n        if i % a == 0:\n            m += 1\n            sum += i\n    ans = a * sum\n    return ans\n", "result": "failed: ", "passed": false}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/134", "completion": "    if arr[0] % 2 == 1 and arr[n-1] % 2 == 1 and n % 2 == 1 :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/135", "completion": "\n    if N == 1 :\n        return R - L + 1\n    elif N > 1 :\n        return countSum( N - 2, L, R ) + 1\n    else :\n        return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/136", "completion": "    # Write your code here\n    set = set(arr)\n    for i in range(n) :\n        if i not in set :\n            return i\n", "result": "failed: local variable 'set' referenced before assignment", "passed": false}
{"task_id": "Open/137", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/139", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/140", "completion": "    banknotes = [A] * N\n    for i in range(N) :\n        if banknotes[i] >= S :\n            return i\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/141", "completion": "    return math.gcd(x,y) * (x//math.gcd(x,y)) * (y//math.gcd(x,y))\n", "result": "passed", "passed": true}
{"task_id": "Open/142", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/143", "completion": "    xor_arr = [0] * n\n    for i in range(n) :\n        xor_arr[i] = arr[i] ^ arr[i+1]\n    max_xor = 0\n    max_idx = 0\n    for i in range(n) :\n        xor_sum = xor_arr[i] + xor_arr[i+1]\n        if xor_sum > max_xor :\n            max_xor = xor_sum\n            max_idx = i\n    return max_idx\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/144", "completion": "    dp = [1] * n\n    max_len = 1\n    for i in range(1, n) :\n        dp[i] = 1\n        for j in range(i) :\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1 :\n                dp[i] = dp[j] + 1\n        max_len = max(max_len, dp[i])\n    return max_len\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "result": "failed: ", "passed": false}
{"task_id": "Open/145", "completion": "    bias = [0, 0]\n    for i in range(n) :\n        if arr[i] in bias :\n            bias[bias.index(arr[i])] += 1\n        else :\n            bias.append(arr[i])\n    for i in range(2) :\n        if bias[i] % 2!= 0 :\n            return -1\n    return bias[0] + k\n", "result": "failed: ", "passed": false}
{"task_id": "Open/146", "completion": "    # TODO: Write your code here\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/147", "completion": "    # Write your code here\n    return 0\n", "result": "passed", "passed": true}
{"task_id": "Open/148", "completion": "    # Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/149", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/150", "completion": "    p = p / 100\n    q = q / 100\n    bias = 2\n    result = 0\n    for i in range(len(p)) :\n        if p[i] == q[i] :\n            result += bias ** i\n    return result\n", "result": "failed: object of type 'float' has no len()", "passed": false}
{"task_id": "Open/151", "completion": "    alphabet = '0123456789ABCDEF'\n    bias = 2\n    result = 0\n    for i in range(len1) :\n        result ^= ord(str1[i]) * bias\n        bias *= 2\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/152", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/153", "completion": "    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/154", "completion": "    \n    # TODO: Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/155", "completion": "    return 2 ** math.ceil( math.log( n, 2 ) ) - n\n", "result": "passed", "passed": true}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    elif r == 0 :\n        return 0\n    elif r == 1 :\n        return 1\n    elif r == 2 :\n        return 2\n    elif r == 3 :\n        return 4\n    elif r == 4 :\n        return 8\n    elif r == 5 :\n        return 16\n    elif r == 6 :\n        return 32\n    elif r == 7 :\n        return 64\n    elif r == 8 :\n        return 128\n    elif r == 9 :\n        return 256\n    elif r == 10 :\n        return 512\n    elif r == 11 :\n        return 1024\n    elif r == 12 :\n        return 2048\n    elif r == 13 :\n        return 4096\n    elif r == 14 :\n        return 8192\n    elif r == 15 :\n        return 16384\n    elif r == 16 :\n        return 32768\n    elif r == 17 :\n        return 65536\n    elif r == 1", "result": "failed: invalid syntax (<string>, line 43)", "passed": false}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n", "result": "passed", "passed": true}
{"task_id": "Open/158", "completion": "    # Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/159", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/160", "completion": "    # Write your code here.\n    counter = [0]*n\n    for i in range(n):\n        counter[i] = arr[i]%2\n    for i in range(n):\n        if counter[i] == 1:\n            return arr[i]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n    for i in range(n) :\n        ans = max(ans, xorArr ^ arr[i])\n    return ans\n\narr = [1, 3, 4, 8]\nn = len(arr)", "result": "passed", "passed": true}
{"task_id": "Open/162", "completion": "    if ( sx == dx and sy == dy ) :\n        return True\n    elif ( sx == dx or sy == dy ) :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/163", "completion": "    if n % 2 == 1 :\n        return 0\n    elif n % 2 == 0 :\n        return 1\n    elif n % 4 == 0 :\n        return 1\n    else :\n        return 2\n", "result": "failed: ", "passed": false}
{"task_id": "Open/164", "completion": "    # Write your code here\n    count = 0\n    d = {}\n    for i in range(n):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    for i in range(n):\n        if arr[i] in d:\n            count += d[arr[i]]\n    return count\n\narr = ['a','b','c','d','e']\nn = len(arr)", "result": "failed: ", "passed": false}
{"task_id": "Open/165", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/166", "completion": "    if source == dest :\n        return 0\n    if source < 0 or dest < 0 :\n        return sys.maxsize\n    if source > dest :\n        return steps(dest, -step, source)\n    return steps(source+step, step, dest)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/167", "completion": "    if n == 1 :\n        return 1\n    else :\n        counter = 1\n        times = 0\n        result = {}\n        while counter!= n :\n            if counter not in result :\n                result[counter] = 1\n            else :\n                result[counter] += 1\n            counter += 1\n            times += 1\n        return times\n", "result": "failed: ", "passed": false}
{"task_id": "Open/168", "completion": "    # write your code here\n    bias = 2\n    result = 0\n    for i in range(len(arr)):\n        if arr[i] in bias:\n            bias *= 2\n        else:\n            result = max(result, bias)\n    return result\n", "result": "failed: argument of type 'int' is not iterable", "passed": false}
{"task_id": "Open/169", "completion": "    return math.sqrt( (m * m) + (n * n) )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/170", "completion": "    sumArr = [0] * (n + 1)\n    for i in range(n) :\n        sumArr[i + 1] = sumArr[i] + arr[i]\n    count = 0\n    for i in range(n) :\n        if sumArr[i + 1] < k :\n            count += 1\n    return count\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nk = 10", "result": "failed: ", "passed": false}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(len(arr)-2):\n        if arr[i] + arr[i+1] + arr[i+2] <= L:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/172", "completion": "    factors = {2,3}\n    count = 0\n    for i in range(l,r+1):\n        if factors.issubset(set(str(i))):\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/173", "completion": "    mask = 0\n    for i in range( m ) :\n        mask += 2 ** i\n    return n ^ mask\n", "result": "passed", "passed": true}
{"task_id": "Open/174", "completion": "    # Write your code here\n    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/175", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/176", "completion": "    # Write your code here\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/177", "completion": "    return 0\n", "result": "failed: ", "passed": false}
