{"task_id": "Open/0", "completion": "    count = 0\n    for i in range(N):\n        if arr[i] + K > sum(arr):\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/1", "completion": "    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    freq = arr[0]\n    for i in range(1, n):\n        if arr[i] < freq:\n            freq = arr[i]\n    return freq\n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/2", "completion": "    return \"Yes\"\n", "result": "failed: ", "passed": false}
{"task_id": "Open/3", "completion": "    count = 0\n    for a in A :\n        for b in A :\n            if a + b == K :\n                count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/4", "completion": "    if n == 0:\n        return True\n    if n == 1:\n        return False\n    for i in range(len(a)):\n        if a[i] + a[i+1] == n:\n            return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/5", "completion": "    return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/6", "completion": "    missing = []\n    for i in range( len(vec) ) :\n        if vec[i] < 0 :\n            vec[i] = -vec[i]\n        if vec[i] not in vec :\n            missing.append(i+1)\n    return missing\n", "result": "failed: ", "passed": false}
{"task_id": "Open/7", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/8", "completion": "    n = [0]*len(a)\n    for i in range(len(a)):\n        if a[i] == 2:\n            n[i] = 1\n        else:\n            for j in range(2,int(math.sqrt(a[i]))+1):\n                if a[i] % j == 0:\n                    n[i] += 1\n                    break\n    return n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/9", "completion": "    # Write your code here\n    return findSum(arr, n, k)\n", "result": "failed: maximum recursion depth exceeded", "passed": false}
{"task_id": "Open/10", "completion": "    total_time = 0\n    for i in range ( len(A) ) :\n        for j in range ( len(B) ) :\n            if A[i] == B[j] :\n                total_time += 1\n                B.pop(j)\n                A.pop(i)\n                break\n            elif A[i]!= B[j] :\n                B.insert(0, A[i])\n                A.pop(i)\n                break\n    return total_time\n", "result": "failed: deque.pop() takes no arguments (1 given)", "passed": false}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range ( 0, size ) :\n        if ( array[ i ] % 2 ) == 0 :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/12", "completion": "    count = 0\n    for ch in s :\n        if ch in s :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/13", "completion": "    if n % 2 == 0:\n        return True\n    else:\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/14", "completion": "    xor = 0\n    for i in range(4):\n        xor = xor ^ (n % 4)\n    return xor\n", "result": "failed: ", "passed": false}
{"task_id": "Open/15", "completion": "    if n < 2:\n        return -1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n % 2 == 0:\n        return 0\n    if n % 3 == 0:\n        return 0\n    if n % 5 == 0:\n        return 0\n    if n % 7 == 0:\n        return 0\n    if n % 11 == 0:\n        return 0\n    if n % 13 == 0:\n        return 0\n    if n % 17 == 0:\n        return 0\n    if n % 19 == 0:\n        return 0\n    if n % 23 == 0:\n        return 0\n    if n % 29 == 0:\n        return 0\n    if n % 31 == 0:\n        return 0\n    if n % 37 == 0:\n        return 0\n    if n % 41 == 0:\n        return 0\n    if n % 43 == 0:\n        return 0\n    if n % 47 == 0:\n        return 0\n    if", "result": "failed: invalid syntax (<string>, line 47)", "passed": false}
{"task_id": "Open/16", "completion": "    def isDefeat ( s1, s2, n ) :\n        for i in range ( n ) :\n            if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n                return True\n        return False\n    return isDefeat ( s1, s2, n )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n", "result": "passed", "passed": true}
{"task_id": "Open/18", "completion": "    count = {}\n    for ch in s :\n        if ch in count :\n            count[ch] += 1\n        else :\n            count[ch] -= 1\n    return length - count[s[0]]\n", "result": "failed: '0'", "passed": false}
{"task_id": "Open/19", "completion": "    powerNumbers = []\n    for i in range(1,n+1) :\n        if i <= n :\n            powerNumbers.append(i)\n    return powerNumbers\n", "result": "failed: ", "passed": false}
{"task_id": "Open/20", "completion": "    if x == 0:\n        return 0\n    else:\n        return x * product(x-1, y)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        if i % 4 == 1 and i % 10 == 0 :\n            count1 += 1\n        if i % 4 == 1 and i % 100 == 0 :\n            count2 += 1\n        if i % 4 == 1 and i % 1000 == 0 :\n            count3 += 1\n    if count0 == 4 and count1 == 4 and count2 == 4 and count3 == 4 :\n        return 1\n    else :\n        return 2\n", "result": "passed", "passed": true}
{"task_id": "Open/22", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/23", "completion": "    if i == n :\n        return 0\n    else :\n        if sum == 0 :\n            count = count + 1\n            return count\n        else :\n            count = subsetSum( arr, n, i + 1, sum - arr[i], count )\n            count = subsetSum( arr, n, i + 1, sum, count )\n            return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/24", "completion": "    if n % 2 == 0 :\n        return 1\n    else :\n        return 2\n", "result": "failed: ", "passed": false}
{"task_id": "Open/25", "completion": "    return seriesFunc(n)\n", "result": "failed: maximum recursion depth exceeded", "passed": false}
{"task_id": "Open/26", "completion": "    maxSum = 0\n    for i in range(2, n+1) :\n        if n % i == 0 :\n            maxSum = max(maxSum, i * f)\n    return maxSum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/27", "completion": "    return x <= y\n", "result": "passed", "passed": true}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n", "result": "passed", "passed": true}
{"task_id": "Open/29", "completion": "    return 100 if a > b else -100\n", "result": "failed: ", "passed": false}
{"task_id": "Open/30", "completion": "    return ( (n * (n + 1)) / 2 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/32", "completion": "    return pow(3,n-1)\n", "result": "passed", "passed": true}
{"task_id": "Open/33", "completion": "    return 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in a:\n        for j in a:\n            for k in a:\n                if j * k < k:\n                    count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/35", "completion": "    occurence = 0\n    for i in range(1, n+1) :\n        if d in str(i) :\n            occurence += 1\n    return occurence\n", "result": "failed: 'in <string>' requires string as left operand, not int", "passed": false}
{"task_id": "Open/36", "completion": "    missing = 0\n    for i in arr:\n        if i < 0:\n            missing += n\n    return missing\n", "result": "failed: ", "passed": false}
{"task_id": "Open/37", "completion": "    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    elif n == 3 :\n        return 6\n    elif n == 4 :\n        return 24\n    elif n == 5 :\n        return 120\n    elif n == 6 :\n        return 720\n    elif n == 7 :\n        return 5040\n    elif n == 8 :\n        return 40320\n    elif n == 9 :\n        return 362880\n    elif n == 10 :\n        return 3628800\n    elif n == 11 :\n        return 36288000\n    elif n == 12 :\n        return 39916800\n    elif n == 13 :\n        return 479001600\n    elif n == 14 :\n        return 6227020800\n    elif n == 15 :\n        return 87178291200\n    elif n == 16 :\n        return", "result": "failed: ", "passed": false}
{"task_id": "Open/38", "completion": "    area = 0\n    for i in range(1, l + 1):\n        for j in range(1, b + 1):\n            area = area + i * j\n    return area\n", "result": "failed: ", "passed": false}
{"task_id": "Open/39", "completion": "    return sum ( range ( 1, N + 1 ) )\n", "result": "passed", "passed": true}
{"task_id": "Open/40", "completion": "    max_consecutive_zeros = 0\n    for i in range(n):\n        if arr[i] == 0:\n            max_consecutive_zeros = max(max_consecutive_zeros, 0)\n        elif arr[i] == 1:\n            max_consecutive_zeros += 1\n    return max_consecutive_zeros\n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/41", "completion": "    l = 0\n    for i in range(n):\n        if arr[i] == 0:\n            l = i + 1\n            break\n    return l\n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/42", "completion": "    max = a[0]\n    for i in range(1, n):\n        for j in range(i, n):\n            if a[i] < a[j]:\n                max = max(max, a[i])\n    return max\n", "result": "failed: 'int' object is not callable", "passed": false}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        if array[i] * k <= k:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/44", "completion": "    sum = 0\n    for i in range(n) :\n        sum += abs(arr[i] - i + 1)\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/45", "completion": "    min_val = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n    return min_val * (n - 1)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/46", "completion": "    max = 0\n    for i in range( len( array ) ) :\n        if array[ i ] > array[ i - 1 ] :\n            max = max + 1\n        else :\n            max = max - 1\n    return max\n", "result": "failed: ", "passed": false}
{"task_id": "Open/47", "completion": "    if a + b == c :\n        if x1 < x2 :\n            return True\n        else :\n            return False\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a) :\n        if a ^ i == 0 :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/49", "completion": "    return max(L,R)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/50", "completion": "    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/51", "completion": "    sum = 1\n    for i in range(1, n + 1):\n        sum = sum + ( 1 / ( 3 ** i ) )\n    return sum\n", "result": "passed", "passed": true}
{"task_id": "Open/52", "completion": "    xor = 0\n    for i in range(n):\n        for j in range(n):\n            xor ^= arr[i][j]\n    return xor\n", "result": "failed: ", "passed": false}
{"task_id": "Open/53", "completion": "    count = 0\n    for n in range(N):\n        if n ^ n == n:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/54", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/55", "completion": "    return n & (n - 1) == 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    for ch in s :\n        if ch in s :\n            max_partitions += 1\n    return max_partitions\n", "result": "failed: ", "passed": false}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - ( N % K )\n", "result": "passed", "passed": true}
{"task_id": "Open/58", "completion": "    result = 0\n    for i in range(N):\n        if arr[i] in arr:\n            return arr[i]\n        else:\n            result += arr[i]\n    return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/59", "completion": "    pass", "result": "failed: ", "passed": false}
{"task_id": "Open/60", "completion": "    if n % 2 == 0:\n        return True\n    else:\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/61", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/62", "completion": "    str = str[::-1]\n    for i in range(len-1, -1, -1):\n        if str[i] > str[i+1]:\n            str[i] -= 1\n        elif str[i] > 9:\n            str[i] = 9\n        elif str[i] < 0:\n            str[i] = 0\n    return str[::-1]\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/63", "completion": "    minValue = arr[0]\n    for i in range(1, n) :\n        minValue = min(minValue, arr[i])\n    return minValue\n", "result": "failed: ", "passed": false}
{"task_id": "Open/64", "completion": "    return \"\"\n", "result": "failed: ", "passed": false}
{"task_id": "Open/65", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/66", "completion": "    if n % 2 == 0 :\n        return (arr[n/2] + arr[n/2-1])/2\n    else :\n        return arr[n/2]\n", "result": "failed: list indices must be integers or slices, not float", "passed": false}
{"task_id": "Open/67", "completion": "    # Write your code here\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 1\n    if len(a) == 2:\n        if a[0] == 1 and a[1] == -1:\n            return 2\n        else:\n            return 1\n    if len(a) == 3:\n        if a[0] == 1 and a[1] == -1 and a[2] == 0:\n            return 3\n        else:\n            return 2\n    if len(a) == 4:\n        if a[0] == 1 and a[1] == -1 and a[2] == 0 and a[3] == -1:\n            return 4\n        else:\n            return 3\n    if len(a) == 5:\n        if a[0] == 1 and a[1] == -1 and a[2] == 0 and a[3] == -1 and a[4] == 0:\n            return 5\n        else:\n            return 4\n    if len(a) == 6:\n        if a[0] == ", "result": "failed: invalid syntax (<string>, line 38)", "passed": false}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0:\n        v.append(n % 5)\n        n = int(n / 5)\n    result = 0\n    for i in v[::-1]:\n        result = result * 10 + i\n    return 2 * result\n", "result": "passed", "passed": true}
{"task_id": "Open/69", "completion": "    if n == 0 :\n        return True\n    else :\n        return areSetBitsIncreasing ( n >> 1 ) and ( n & 1 )\n", "result": "passed", "passed": true}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        return closestMultiple(n/x, x)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/71", "completion": "    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 2\n    else :\n        return sumOfTheSeries( n - 1 ) + 2\n", "result": "failed: ", "passed": false}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        sum += 2\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/73", "completion": "    maxm = None\n    for i in range(n):\n        if arr[i] == arr[i]:\n            if maxm is None:\n                maxm = arr[i]\n            else:\n                if arr[i] > maxm:\n                    maxm = arr[i]\n    return maxm\n", "result": "failed: ", "passed": false}
{"task_id": "Open/74", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/75", "completion": "    return n >> 1 if n & 1 else ( n >> 1 ) | ( n << 31 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range(len(A)):\n        if A[i] == 1:\n            changes += 1\n        elif A[i] == 0:\n            changes += 1\n        else:\n            changes += 1\n    return changes\n", "result": "failed: ", "passed": false}
{"task_id": "Open/77", "completion": "    return radian * 180 / 3.14\n", "result": "failed: ", "passed": false}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n", "result": "passed", "passed": true}
{"task_id": "Open/79", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    elif n == 2:\n        return a + d\n    elif n == 3:\n        return a + d + sumOfAP(a, d, n-1)\n    elif n == 4:\n        return a + d + sumOfAP(a, d, n-2)\n    elif n == 5:\n        return a + d + sumOfAP(a, d, n-3)\n    elif n == 6:\n        return a + d + sumOfAP(a, d, n-4)\n    elif n == 7:\n        return a + d + sumOfAP(a, d, n-5)\n    elif n == 8:\n        return a + d + sumOfAP(a, d, n-6)\n    elif n == 9:\n        return a + d + sumOfAP(a, d, n-7)\n    elif n == 10:\n        return a + d + sumOfAP(a, d, n-8)\n    elif n == 11:\n        return a + d + sumOfAP(a, d,", "result": "failed: invalid syntax (<string>, line 35)", "passed": false}
{"task_id": "Open/80", "completion": "    if n % 2 == 0 :\n        return 1\n    else :\n        return 2 * makeOdd ( n / 2 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/81", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/82", "completion": "    if n % 2 == 0 :\n        next = n + 1\n    else :\n        next = n - 1\n    return next\n", "result": "failed: ", "passed": false}
{"task_id": "Open/83", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/84", "completion": "    sum = 0\n    for i in range(l,r+1):\n        sum = sum + i\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/85", "completion": "    if x < y :\n        return getHCF ( y, x )\n    else :\n        if x % y == 0 :\n            return y\n        else :\n            return getHCF ( x / 2, y / 2 )\n", "result": "passed", "passed": true}
{"task_id": "Open/86", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/87", "completion": "    count = 0\n    for ch in str :\n        if ch in substr :\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/88", "completion": "    p = float(p)\n    r = float(r)\n    t = int(t)\n    r = r / 12\n    t = t * 12\n    EMI = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    print(EMI)\n\nemi_calculator(100000, 10, 12)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range(A):\n        for j in range(B):\n            for k in range(C):\n                if i * k > j * j:\n                    count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1) :\n        if (i % 10) == 2 or (i % 10) == 3 or (i % 10) == 9 :\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/91", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n", "result": "failed: invalid syntax (<string>, line 49)", "passed": false}
{"task_id": "Open/92", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/93", "completion": "    if n % 2 == 0 :\n        return 1\n    else :\n        return 1 + count(n/2)\n", "result": "failed: maximum recursion depth exceeded in comparison", "passed": false}
{"task_id": "Open/94", "completion": "    if n <= 0 or k <= 0:\n        return None\n    if n == 1:\n        return 'a'\n    if k == 1:\n        return 'a'\n    if k == 26:\n        return 'z'\n    if k < 0:\n        return None\n    if k > 0:\n        return str(ord('a') + k)\n    if k > 26:\n        return None\n    if k < 26:\n        return str(ord('a') + k)\n    return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/95", "completion": "    if n == 0 :\n        return 0\n    else :\n        return max( maxDistance( n - 1, fuel ) + n * fuel, maxDistance( n - 1, fuel ) )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/96", "completion": "    # Write your code here\n    if n == 1 :\n        return 0\n    if n == 2 :\n        return 1\n    if n == 3 :\n        return 1\n    if n == 4 :\n        return 1\n    if n == 5 :\n        return 1\n    if n == 6 :\n        return 1\n    if n == 7 :\n        return 1\n    if n == 8 :\n        return 1\n    if n == 9 :\n        return 1\n    if n == 10 :\n        return 1\n    if n == 11 :\n        return 1\n    if n == 12 :\n        return 1\n    if n == 13 :\n        return 1\n    if n == 14 :\n        return 1\n    if n == 15 :\n        return 1\n    if n == 16 :\n        return 1\n    if n == 17 :\n        return 1\n    if n == 18 :\n        return 1\n    if n == 19 :\n        return 1\n    if n == 20 :\n        return 1\n    if n == 21 :\n        return 1\n    if n == 22", "result": "failed: invalid syntax (<string>, line 48)", "passed": false}
{"task_id": "Open/97", "completion": "    return word in sentence\n", "result": "passed", "passed": true}
{"task_id": "Open/98", "completion": "    return int(math.log10(n))+1\n", "result": "passed", "passed": true}
{"task_id": "Open/99", "completion": "    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/100", "completion": "    return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range( len( s ) ) :\n        if s[ i ]!= s[ i + 1 ] :\n            count += 1\n    return count\n", "result": "failed: string index out of range", "passed": false}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/103", "completion": "    min_removal = n\n    for i in range( n - 1 ):\n        for j in range( i + 1, n ):\n            if abs( arr[i] - arr[j] ) < abs( arr[i] - arr[j - 1] ):\n                min_removal = min( min_removal, j - i )\n    return min_removal\n", "result": "failed: ", "passed": false}
{"task_id": "Open/104", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/105", "completion": "    if n == 0:\n        return 1\n    else:\n        return 2 * setBitNumber ( n >> 1 )\n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/106", "completion": "    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                return False\n        return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/107", "completion": "    return N % 7\n", "result": "failed: ", "passed": false}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    elif a == 0 :\n        return 0\n    elif a % 2 == 0 :\n        return 1\n    elif a % 2 == 1 :\n        return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/109", "completion": "    return 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/110", "completion": "    valid = True\n    for i in range ( 1, n + 1 ) :\n        if ( n % i ) == 0 :\n            valid = False\n            break\n    return valid\n", "result": "failed: ", "passed": false}
{"task_id": "Open/111", "completion": "    for i in range ( len ( a ) ) :\n        if ( a [ i ] % 5 == 0 ) or ( a [ i ] % 3 == 0 ) :\n            return False\n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/112", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/113", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        element = printNthElement( n - 1 )\n        if n % 2 == 0:\n            return element * 10 + 5\n        else:\n            return element * 10 + 3\n", "result": "failed: ", "passed": false}
{"task_id": "Open/114", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/115", "completion": "    if a[0] % 11 == 0 :\n        return False\n    for i in range(1, n) :\n        if a[i] % 11!= 0 :\n            return False\n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/116", "completion": "    if l >= 0 and b >= 0 and h >= 0 :\n        return l * b * h\n    else :\n        return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/117", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/118", "completion": "    bucketNo = int(math.ceil(math.sqrt(8 * p + 1) / 2))\n    return bucketNo\n", "result": "failed: ", "passed": false}
{"task_id": "Open/119", "completion": "    return len( set( arr ) ) == len( arr )\n", "result": "passed", "passed": true}
{"task_id": "Open/120", "completion": "    count = 0\n    for ch in string:\n        if ch in string:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n", "result": "passed", "passed": true}
{"task_id": "Open/122", "completion": "    max = 0\n    for ch in ss :\n        if ch.isdigit() :\n            max = max * 10 + int(ch)\n        else :\n            if max < int(ch) :\n                max = int(ch)\n    return max\n", "result": "failed: invalid literal for int() with base 10: 'a'", "passed": false}
{"task_id": "Open/123", "completion": "    # Write your code here\n    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/124", "completion": "    if N > M :\n        return N * M\n    else:\n        return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/125", "completion": "    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/126", "completion": "    if n % 2 == 0 :\n        p = 2\n    else :\n        p = 2 * p + 1\n    return p\n", "result": "failed: ", "passed": false}
{"task_id": "Open/127", "completion": "    return len( str( A ) ) == len( str( B ) )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/128", "completion": "    return x!= y\n", "result": "failed: ", "passed": false}
{"task_id": "Open/129", "completion": "    if n == 1 :\n        return \"1\"\n    elif n == 2 :\n        return \"12\"\n    elif n == 3 :\n        return \"1213\"\n    else :\n        Sn_1 = \"1\"\n        Sn_2 = \"12\"\n        Sn_3 = \"1213\"\n        for i in range( 2, n ) :\n            Sn_1 = Sn_2\n            Sn_2 = Sn_3\n            Sn_3 = Sn_1 + Sn_2\n        return Sn_3\n", "result": "failed: ", "passed": false}
{"task_id": "Open/130", "completion": "    steps = 0\n    for i in range(1, n) :\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n", "result": "failed: ", "passed": false}
{"task_id": "Open/131", "completion": "    return 0 if n % 4 == 0 else 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/132", "completion": "    m = N // 2\n    sum = 0\n    for i in range(1, m + 1):\n        sum += a * i\n    ans = sum * (sum + 1) / 2\n    return ans\n", "result": "failed: ", "passed": false}
{"task_id": "Open/133", "completion": "    if N <= 2:\n        return N\n    elif N <= 4:\n        return N + 3\n    elif (N - 4) % 4 == 0:\n        return N + 1\n    elif (N - 4) % 4 == 2:\n        return N + 2\n    else:\n        return N - 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/134", "completion": "    if arr[0] % 2 == 1 or arr[-1] % 2 == 1 or n % 2 == 1:\n        return False\n    else:\n        return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return countSum(1, L, R)\n    elif N > 1 :\n        return countSum(N-2, L, R) + 1\n    else :\n        return 0\n", "result": "failed: maximum recursion depth exceeded in comparison", "passed": false}
{"task_id": "Open/136", "completion": "    if n == 0:\n        return None\n    min = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min:\n            min = arr[i]\n    return min\n", "result": "failed: ", "passed": false}
{"task_id": "Open/137", "completion": "    smallest = 0\n    for i in range(n):\n        smallest = smallest * 10 + int(s[i])\n    return smallest\n", "result": "failed: ", "passed": false}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/139", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/140", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/141", "completion": "    return x * y // math.gcd( x, y )\n", "result": "passed", "passed": true}
{"task_id": "Open/142", "completion": "    count = 0\n    while ( n!= 0 ) :\n        n = n >> 1\n        count += 1\n    return count\n", "result": "timed out", "passed": false}
{"task_id": "Open/143", "completion": "    pass", "result": "failed: ", "passed": false}
{"task_id": "Open/144", "completion": "    lds = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                lds = j-i\n                break\n    return lds\n", "result": "failed: ", "passed": false}
{"task_id": "Open/145", "completion": "    if k == 0 :\n        return 0\n    elif k < 0 :\n        return -1\n    else :\n        return min( arr + k, arr - k )\n", "result": "failed: can only concatenate list (not \"int\") to list", "passed": false}
{"task_id": "Open/146", "completion": "    if K == 0 :\n        return -1\n    elif K == 1 :\n        return 1\n    elif K == 2 :\n        return 2\n    elif K == 3 :\n        return 3\n    elif K == 4 :\n        return 4\n    elif K == 5 :\n        return 5\n    elif K == 6 :\n        return 6\n    elif K == 7 :\n        return 7\n    elif K == 8 :\n        return 8\n    elif K == 9 :\n        return 9\n    elif K == 10 :\n        return 10\n    elif K == 11 :\n        return 11\n    elif K == 12 :\n        return 12\n    elif K == 13 :\n        return 13\n    elif K == 14 :\n        return 14\n    elif K == 15 :\n        return 15\n    elif K == 16 :\n        return 16\n    elif K == 17 :\n        return 17\n    elif K == 18 :\n        return 18\n    elif K == 19 :\n        return 19\n    elif K == 20 :\n        return 20\n    elif K", "result": "failed: invalid syntax (<string>, line 47)", "passed": false}
{"task_id": "Open/147", "completion": "    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if arr[0]!= arr[1]:\n        return changeTheArray ( arr[1:], n - 1 )\n    else:\n        return changeTheArray ( arr[1:], n - 2 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/148", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "Open/149", "completion": "    if s % 2 == 0 :\n        return ( s / 2 )\n    else :\n        return ( ( s + ( s ** 0.5 ) ) / 2 )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/151", "completion": "    xor = 0\n    for i in range(len1) :\n        xor = xor ^ ord(str1[i])\n    return xor\n", "result": "passed", "passed": true}
{"task_id": "Open/152", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/153", "completion": "    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high + 1):\n        if i % 10 >= k:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/155", "completion": "    if n % 2 == 0 :\n        return 2\n    else :\n        return 2**math.ceil(math.log2(n))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/156", "completion": "    if r < 0:\n        return -1\n    area = 0\n    for i in range(1, r + 1):\n        area += i\n    return area\n", "result": "failed: ", "passed": false}
{"task_id": "Open/157", "completion": "    new_str = ''\n    for ch in s:\n        if ch not in new_str:\n            new_str += ch\n    return new_str\n", "result": "failed: ", "passed": false}
{"task_id": "Open/158", "completion": "    if size == 1 :\n        return 1\n    else :\n        mid = ( size - 1 ) // 2\n        if ar [ mid ] > ar [ mid + 1 ] :\n            return search ( ar, mid + 1 )\n        else :\n            return search ( ar, size )\n", "result": "failed: ", "passed": false}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)) :\n        if str[i] == \"0\" and str[i+1] == \"1\" :\n            count += 1\n    return count\n", "result": "failed: string index out of range", "passed": false}
{"task_id": "Open/160", "completion": "    for i in range( n ) :\n        if arr[i] % 2 == 0 :\n            return arr[i]\n    return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/161", "completion": "    xorArr = []\n    ans = 0\n    for i in range(n):\n        xorArr.append( arr[i] ^ i )\n    for i in range(n):\n        ans = ans ^ xorArr[i]\n    return ans\n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/162", "completion": "    if dx == 0 and dy == 0 :\n        return True\n    elif dx == 0 :\n        return False\n    elif dy == 0 :\n        return False\n    elif dx == 0 and dy == 0 :\n        return False\n    elif dx == 0 :\n        return True\n    elif dy == 0 :\n        return False\n    elif dx == 0 and dy == 0 :\n        return True\n    elif dx == 0 :\n        return False\n    elif dy == 0 :\n        return True\n    elif dx == 0 and dy == 0 :\n        return False\n    else :\n        return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/163", "completion": "    if n % 2 == 1 :\n        return 0\n    cnt = 1\n    for i in range(2, n) :\n        cnt *= 2\n    return cnt\n", "result": "failed: ", "passed": false}
{"task_id": "Open/164", "completion": "    count = {}\n    for i in range( n ) :\n        if arr[i] in count :\n            count[arr[i]] += 1\n        else :\n            count[arr[i]] = 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/165", "completion": "    pass\n", "result": "failed: ", "passed": false}
{"task_id": "Open/166", "completion": "    if source == dest :\n        return 0\n    elif source < dest :\n        return sys.maxsize\n    elif source > dest :\n        return 0\n    elif source == dest :\n        return 0\n    elif source < dest :\n        return 1\n    elif source > dest :\n        return 1\n    elif source == dest :\n        return 1\n    elif source < dest :\n        return 2\n    elif source > dest :\n        return 2\n    elif source == dest :\n        return 2\n    elif source < dest :\n        return 3\n    elif source > dest :\n        return 3\n    elif source == dest :\n        return 3\n    elif source < dest :\n        return 4\n    elif source > dest :\n        return 4\n    elif source == dest :\n        return 4\n    elif source < dest :\n        return 5\n    elif source > dest :\n        return 5\n    elif source == dest :\n        return 5\n    elif source < dest :\n        return 6\n    elif source > dest :\n        return 6\n    elif source == dest :\n        return 6\n    elif source < dest :\n        return 7\n    elif source > dest :\n        return 7\n    elif source == dest :\n        return 7\n    elif source <", "result": "failed: invalid syntax (<string>, line 59)", "passed": false}
{"task_id": "Open/167", "completion": "    return \"1\"\n", "result": "failed: ", "passed": false}
{"task_id": "Open/168", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/169", "completion": "    if m * n > 0 :\n        return m * n\n    else :\n        return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range( n ):\n        for j in range( i + 1, n + 1 ):\n            if arr[i] + arr[j] < k:\n                count += 1\n    return count\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/171", "completion": "    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r + 1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/173", "completion": "    return n ^ (0xFFFFFFFF >> (m-1))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/174", "completion": "    count = 0\n    for n in range(L, R + 1):\n        if n % 9 == 0 or n % 9 == 0 and n % K == 0:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/175", "completion": "    if k > n :\n        return None\n    if k == 0 :\n        return 0\n    if k == 1 :\n        return 1\n    if k == 2 :\n        return 1\n    if k == 3 :\n        return 1\n    if k == 4 :\n        return 1\n    if k == 5 :\n        return 1\n    if k == 6 :\n        return 1\n    if k == 7 :\n        return 1\n    if k == 8 :\n        return 1\n    if k == 9 :\n        return 1\n    if k == 10 :\n        return 1\n    if k == 11 :\n        return 1\n    if k == 12 :\n        return 1\n    if k == 13 :\n        return 1\n    if k == 14 :\n        return 1\n    if k == 15 :\n        return 1\n    if k == 16 :\n        return 1\n    if k == 17 :\n        return 1\n    if k == 18 :\n        return 1\n    if k == 19 :\n        return 1\n    if k == 20 :\n        return 1\n    if k == ", "result": "failed: invalid syntax (<string>, line 50)", "passed": false}
{"task_id": "Open/176", "completion": "\n", "result": "failed: ", "passed": false}
{"task_id": "Open/177", "completion": "    if a > b :\n        if a > c :\n            return a - b\n        else :\n            return c - a\n    else :\n        if b > c :\n            return b - a\n        else :\n            return c - b\n", "result": "failed: ", "passed": false}
