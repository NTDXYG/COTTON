{"task_id": "Open/0", "completion": "\n    \n    count = 0\n    for i in arr:\n        if i + K > sum(arr):\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "result": "failed: ", "passed": false}
{"task_id": "Open/1", "completion": "\n    \n    freq = {}\n    for i in range(n) :\n        if arr[i] in freq :\n            freq[arr[i]] += 1\n        else :\n            freq[arr[i]] = 1\n    \n    min_val = min(freq.keys())\n    return freq[min_val]\n", "result": "passed", "passed": true}
{"task_id": "Open/2", "completion": "\n    \n    return \"Yes\" if bin(n)[2:].count(\"1\") >= l and bin(n)[2:].count(\"1\") <= r else \"No\"\n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/4", "completion": "\n    \n    if n == 0 :\n        return True\n    \n    if len(a) == 0 :\n        return False\n    \n    if len(a) == 1 :\n        return False\n    \n    if sum(a) % 2!= 0 :\n        return False\n    \n    if sum(a) == 0 :\n        return True\n    \n    if sum(a) == n :\n        return True\n    \n    if sum(a) > n :\n        return False\n    \n    if sum(a) < n :\n        return isSpiltPossible(n - sum(a), a)\n    \n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "result": "failed: ", "passed": false}
{"task_id": "Open/5", "completion": "\n    \n    if x == 0 :\n        return 0\n    \n    if x & 1 == 1 :\n        return 1\n    \n    return 0\n    \n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/6", "completion": "\n    output = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            vec[i] = -vec[i]\n        if vec[i] not in output:\n            output.append(vec[i])\n    for i in range(len(output)):\n        output[i] = output[i] + 1\n    return output\n", "result": "failed: ", "passed": false}
{"task_id": "Open/7", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "result": "failed: ", "passed": false}
{"task_id": "Open/8", "completion": "\n    \n    return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/9", "completion": "\n    sum = 0\n    for i in range(k):\n        sum += arr[i] - arr[0]\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/10", "completion": "\n    \n    total_time = 0\n    \n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.appendleft(B.pop())\n            A.append(A.pop())\n    \n    return total_time\n", "result": "failed: ", "passed": false}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i] == 0 or array[i] == 2 :\n            continue\n        else :\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/12", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if len(s[i:]) <= k:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/13", "completion": "\n    \n    if n == 1 :\n        return True\n    \n    if n == 2 :\n        return True\n    \n    if n == 3 :\n        return False\n    \n    if n == 4 :\n        return True\n    \n    if n == 5 :\n        return False\n    \n    if n == 6 :\n        return True\n    \n    if n == 7 :\n        return False\n    \n    if n == 8 :\n        return True\n    \n    if n == 9 :\n        return False\n    \n    if n == 10 :\n        return True\n    \n    if n == 11 :\n        return False\n    \n    if n == 12 :\n        return True\n    \n    if n == 13 :\n        return False\n    \n    if n == 14 :\n        return True\n    \n    if n == 15 :\n        return False\n    \n    if n == 16 :\n        return True\n    \n    if n == 17 :\n        return False\n    \n    if n == 18 :\n        return True\n    \n    if n == 19 :\n        return False\n    \n    if n == 20 :\n", "result": "failed: expected an indented block (<string>, line 70)", "passed": false}
{"task_id": "Open/14", "completion": "\n    switch = {\n        0 : n,\n        1 : 1,\n        2 : n + 1,\n        3 : 0\n    }\n    return switch.get(n % 4, \"\")\n", "result": "passed", "passed": true}
{"task_id": "Open/15", "completion": "\n    for i in range(t):\n        a = random.randint(2, n-1)\n        if pow(a, (n-1)/2, n) == 1 or pow(a, (n-1)/2, n) == n-1:\n            return 1\n        else:\n            return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "result": "failed: pow() 3rd argument not allowed unless all arguments are integers", "passed": false}
{"task_id": "Open/16", "completion": "\n    \n    for i in range ( n ) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n", "result": "passed", "passed": true}
{"task_id": "Open/18", "completion": "\n    Input: s: \"011110\"\n    Output: 1\n    \"\"\"\n    \n    ### Example:\n    #\n    \"\"\"\n    Input: s: \"011110\"\n    Output: 2\n    \"\"\"\n    \n    ### Example:\n    #\n    \"\"\"\n    Input: s: \"011110\"\n    Output: 2\n    \"\"\"\n    \n    ### Example:\n    #\n    \"\"\"\n    Input: s: \"011110\"\n    Output: 2\n    \"\"\"\n    \n    ### Example:\n    #\n    \"\"\"\n    Input: s: \"011110\"\n    Output: 2\n    \"\"\"\n    \n    ### Example:\n    #\n    \"\"\"\n    Input: s: \"011110\"\n    Output: 2\n    \"\"\"\n    \n    ### Example:\n    #\n    \"\"\"\n    Input: s: \"011110\"\n    Output: 2\n    \"\"\"\n    \n    ### Example:\n    #\n    \"\"\"\n    Input: s: \"011110\"\n    Output: 2\n    \"\"\"\n", "result": "failed: invalid syntax (<string>, line 7)", "passed": false}
{"task_id": "Open/19", "completion": "\n    \n    if n == 0:\n        return 1\n    \n    powerNumbers = 0\n    \n    for i in range(1, n+1):\n        if math.pow(i, i) <= n:\n            powerNumbers += 1\n    \n    return powerNumbers\n", "result": "failed: ", "passed": false}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n", "result": "passed", "passed": true}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n", "result": "passed", "passed": true}
{"task_id": "Open/22", "completion": "\n    \n    if n == 0:\n        return 0\n    \n    max_len = 1\n    \n    for i in range( n ):\n        curr_len = 1\n        \n        for j in range( i + 1, n ):\n            if arr[j] > arr[i]:\n                curr_len += 1\n            else:\n                break\n        \n        max_len = max( max_len, curr_len )\n    \n    return max_len\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "result": "failed: ", "passed": false}
{"task_id": "Open/23", "completion": "\n    \n    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    \n    if subsetSum(arr, n, i+1, sum, count) == True :\n        count += 1\n    \n    if subsetSum(arr, n, i+1, sum-arr[i], count) == True :\n        count += 1\n    \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/24", "completion": "\n    if n < 1 :\n        return None\n    else :\n        return n*(3*n-1)/2\n", "result": "failed: ", "passed": false}
{"task_id": "Open/25", "completion": "\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/26", "completion": "\n    maxSum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            maxSum = max(maxSum, i)\n    return maxSum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/27", "completion": "\n    if x <= y :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n", "result": "passed", "passed": true}
{"task_id": "Open/29", "completion": "\n    if a > b :\n        percent = (a - b) / a\n    else:\n        percent = (b - a) / b\n    return percent\n", "result": "failed: ", "passed": false}
{"task_id": "Open/30", "completion": "\n    avg = 0\n    for i in range(n):\n        avg += i*i\n    return avg/n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/31", "completion": "\n    \n    arr.sort()\n    return arr[k-1]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/32", "completion": "\n    return 3 ** (n-1)\n", "result": "passed", "passed": true}
{"task_id": "Open/33", "completion": "\n    term = 1\n    for i in range(n):\n        term = term * 2 + i - 1\n    return term\n", "result": "failed: ", "passed": false}
{"task_id": "Open/34", "completion": "\n    if len(a) == 0 :\n        return 0\n    \n    count = 0\n    product = 1\n    left = 0\n    right = 0\n    \n    while right < len(a) :\n        product *= a[right]\n        \n        while product >= k and left <= right :\n            product /= a[left]\n            left += 1\n        \n        count += right - left + 1\n        right += 1\n    \n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/35", "completion": "\n    occurence = 0\n    for i in range(1, n+1):\n        occurence += str(i).count(d)\n    return occurence\n", "result": "failed: must be str, not int", "passed": false}
{"task_id": "Open/36", "completion": "\n    i = 0\n    while i < n :\n        if arr[i] > 0 and arr[i] - 1 < n and arr[i]!= arr[arr[i] - 1] :\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n        else :\n            i += 1\n    for i in range ( n ) :\n        if arr[i]!= i + 1 :\n            return i + 1\n    return n + 1\n\narr = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\nn = len ( arr )", "result": "passed", "passed": true}
{"task_id": "Open/37", "completion": "\n    if n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    else :\n        return ways(n-1) + ways(n-2)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/38", "completion": "\n    \n    if l*b <= 0:\n        return None\n    elif l == 1 and b == 1:\n        return 1\n    else:\n        return calculateAreaSum(l-1, b) + calculateAreaSum(l, b-1)\n", "result": "failed: unsupported operand type(s) for +: 'NoneType' and 'int'", "passed": false}
{"task_id": "Open/39", "completion": "\n    if N == 0 :\n        return 0\n    else :\n        return N + count ( N - 1 )\n", "result": "passed", "passed": true}
{"task_id": "Open/40", "completion": "\n    max_consecutive_zeros = -1\n    for i in range(n):\n        if arr[i] == 1:\n            max_consecutive_zeros = max(max_consecutive_zeros, count_consecutive_zeros(arr, i))\n    return max_consecutive_zeros\n", "result": "failed: name 'count_consecutive_zeros' is not defined", "passed": false}
{"task_id": "Open/41", "completion": "\n    \n    max_len = 0\n    curr_len = 0\n    \n    for i in range(n):\n        if arr[i] == 0:\n            curr_len += 1\n        else:\n            curr_len = 0\n        max_len = max(max_len, curr_len)\n    \n    return max_len\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/42", "completion": "\n    \n    if k == 1:\n        return min(a)\n    elif k == 2:\n        return max(a[0], a[-1])\n    else:\n        return max(a)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            if product(array[i:j+1]) <= k:\n                count += 1\n    return count\n", "result": "failed: name 'product' is not defined", "passed": false}
{"task_id": "Open/44", "completion": "\n    sorted_arr = sorted(arr)\n    sum = 0\n    for i in range(n) :\n        sum += abs(sorted_arr[i] - (i+1))\n    return sum\n", "result": "passed", "passed": true}
{"task_id": "Open/45", "completion": "\n    min_cost = arr[0] * (n - 1)\n    for i in range(1, n) :\n        min_cost = min(min_cost, arr[i] * (n - i))\n    return min_cost\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/46", "completion": "\n    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if abs(array[i] - array[j]) > max_diff:\n                max_diff = abs(array[i] - array[j])\n    return max_diff\n", "result": "failed: ", "passed": false}
{"task_id": "Open/47", "completion": "\n    \n    if ( ( a * x1 + b * y1 ) == c ) and ( ( a * x2 + b * y2 ) == c ) :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(0, a + 1) :\n        for j in range(0, a + 1) :\n            if i + (a ^ i) == j :\n                count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/49", "completion": "\n    max = L & R\n    return max\n", "result": "failed: ", "passed": false}
{"task_id": "Open/50", "completion": "\n    smallest = -1\n    for i in range(n):\n        if a[i] is a factor of all other numbers in a:\n            smallest = a[i]\n            break\n    return smallest\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "result": "failed: invalid syntax (<string>, line 8)", "passed": false}
{"task_id": "Open/51", "completion": "\n    sum = 0\n    for i in range ( 1, n+1 ):\n        sum += 1/3**i\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/52", "completion": "\n    \n    if n == 0 :\n        return arr\n    \n    if n == 1 :\n        return arr\n    \n    if n == 2 :\n        return arr\n    \n    if n == 3 :\n        return arr\n    \n    if n == 4 :\n        return arr\n    \n    if n == 5 :\n        return arr\n    \n    if n == 6 :\n        return arr\n    \n    if n == 7 :\n        return arr\n    \n    if n == 8 :\n        return arr\n    \n    if n == 9 :\n        return arr\n    \n    if n == 10 :\n        return arr\n    \n    if n == 11 :\n        return arr\n    \n    if n == 12 :\n        return arr\n    \n    if n == 13 :\n        return arr\n    \n    if n == 14 :\n        return arr\n    \n    if n == 15 :\n        return arr\n    \n    if n == 16 :\n        return arr\n    \n    if n == 17 :\n        return arr\n    \n    if n == 18 :\n        return arr\n    \n    if n == 19 :\n", "result": "failed: expected an indented block (<string>, line 67)", "passed": false}
{"task_id": "Open/53", "completion": "\n    \n    count = 0\n    for i in range(N+1):\n        count += xorEqualsOrCount(i)\n    return count\n", "result": "failed: maximum recursion depth exceeded in comparison", "passed": false}
{"task_id": "Open/54", "completion": "\n    \n    if ( sum(a) + n - 1 ) == k :\n        return True\n    else :\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "Open/55", "completion": "\n    \n    return (n & (n-1) == 0)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/56", "completion": "\n    \n    if len(s) == 0:\n        return 0\n    \n    maxPartition = [0]\n    for i in range(len(s)):\n        maxPartition.append(maxPartition[i] + 1)\n        if s[i] == s[i-1]:\n            maxPartition[i+1] = maxPartition[i]\n    return maxPartition[-1]\n", "result": "failed: ", "passed": false}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n", "result": "passed", "passed": true}
{"task_id": "Open/58", "completion": "\n        \n        result = 0\n        for i in range(2, N+1):\n            var1 = arr[i-2]\n            var2 = arr[i-1]\n            result = result + var1 + var2\n            result = result + (var1 * var2) / 100\n        return result\n    \n    return successiveChange(arr, N)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "result": "failed: unexpected indent (<string>, line 16)", "passed": false}
{"task_id": "Open/59", "completion": "\n    \n    for i in range ( reversals ) :\n        for j in range ( len ( ranges ) ) :\n            if ( index >= ranges [ j ][ 0 ] and index <= ranges [ j ][ 1 ] ) :\n                arr [ ranges [ j ][ 0 ] ], arr [ ranges [ j ][ 1 ] ] = arr [ ranges [ j ][ 1 ] ], arr [ ranges [ j ][ 0 ] ]\n                break\n    return arr [ index ]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/60", "completion": "\n    \n    for i in range(n+1) :\n        for j in range(n+1) :\n            if i*i + j*j == n :\n                return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "Open/61", "completion": "\n    \n    if len(a) > len(b) :\n        return -1\n    \n    count = 0\n    for i in range(len(b) - len(a)) :\n        if b[i:i+len(a)] == a :\n            count += 1\n    \n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/62", "completion": "\n    str = str[::-1]\n    for i in range(len-1,0,-1) :\n        if str[i] > str[i-1] :\n            str[i] = str[i] - 1\n            for j in range(i-1,-1,-1) :\n                str[j] = 9\n    return str[::-1]\n", "result": "passed", "passed": true}
{"task_id": "Open/63", "completion": "\n    \n    min_value = math.log(arr[0])\n    for i in range(1,n):\n        min_value = min(min_value, math.log(arr[i]))\n    return min_value\n", "result": "failed: ", "passed": false}
{"task_id": "Open/64", "completion": "\n    if s == \"\":\n        return \"-1\"\n    if s == \"1\":\n        return \"-1\"\n    \n    max_len = 0\n    max_str = \"\"\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            return max_str\n        else:\n            if len(s[i:]) > max_len:\n                max_len = len(s[i:])\n                max_str = s[i:]\n    return max_str\n", "result": "failed: ", "passed": false}
{"task_id": "Open/65", "completion": "\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if a[0] < a[1]:\n        return 1\n    \n    if a[n-1] < a[n-2]:\n        return n\n    \n    if a[0] > a[1]:\n        return 1\n    \n    if a[n-1] > a[n-2]:\n        return n\n    \n    if a[0] == a[1]:\n        return n\n    \n    if a[n-1] == a[n-2]:\n        return n\n    \n    if a[0] == a[n-1]:\n        return n\n    \n    if a[n-1] == a[n-2]:\n        return n\n    \n    if a[0] == a[n-2]:\n        return n\n    \n    if a[n-1] == a[n-2]:\n        return n\n    \n    if a[0] == a[n-1]:\n        return n\n    \n    if a[", "result": "failed: invalid syntax (<string>, line 49)", "passed": false}
{"task_id": "Open/66", "completion": "\n    size = n + k\n    arr.sort()\n    if size % 2 == 0 :\n        median = (arr[size//2] + arr[size//2 - 1]) / 2\n    else :\n        median = arr[size//2]\n    return median\n\narr = [1,2,3,4,5,6,7,8,9]", "result": "passed", "passed": true}
{"task_id": "Open/67", "completion": "\n    \n    steps = 0\n    \n    for element in a:\n        if element < 0:\n            steps += abs(element - -1)\n        elif element > 0:\n            steps += abs(element - 1)\n    \n    if len(a) % 2 == 0:\n        steps += len(a) / 2\n    else:\n        if a.count(0) > 0:\n            steps += a.count(0)\n    \n    return steps\n", "result": "failed: ", "passed": false}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n", "result": "passed", "passed": true}
{"task_id": "Open/69", "completion": "\n    \n    if n == 0 :\n        return True\n    \n    n = bin(n)[2:]\n    \n    for i in range( len(n) ) :\n        if n[i] == '0' :\n            return False\n        \n        if i == 0 :\n            continue\n        \n        if n[i] > n[i-1] :\n            return False\n    \n    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/70", "completion": "\n    if x > n :\n        return x\n    else :\n        return n - (n % x)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(n+1):\n        sum += 2\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/73", "completion": "\n    max = 0\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            count = count + 1\n        else:\n            count = 0\n        if count > max:\n            max = count\n    return max\n", "result": "failed: ", "passed": false}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (a[i] > a[j] and a[i] % 2 == 0 and a[j] % 2 == 1):\n                count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/75", "completion": "\n    result = 0\n    for i in range(0,32):\n        if n & (1 << i)!= 0:\n            result |= (1 << i)\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "Open/76", "completion": "\n    \n    changes = 0\n    for i in range(n):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            A[i+1] = 0\n            changes += 1\n    return changes\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/77", "completion": "\n    return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n", "result": "passed", "passed": true}
{"task_id": "Open/79", "completion": "\n    sum = a + (n-1) * d\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 0 :\n        return 2 ** (n - 1)\n    else :\n        return 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/81", "completion": "\n    total = 0\n    for move in moves:\n        if move == \"up\":\n            if row - 1 >= 0:\n                row -= 1\n        elif move == \"down\":\n            if row + 1 <= 7:\n                row += 1\n        elif move == \"left\":\n            if column - 1 >= 0:\n                column -= 1\n        elif move == \"right\":\n            if column + 1 <= 7:\n                column += 1\n        total += 1\n    return total\n", "result": "failed: 'int' object is not iterable", "passed": false}
{"task_id": "Open/82", "completion": "\n    i = 1\n    n = n + i\n    return n\n", "result": "failed: ", "passed": false}
{"task_id": "Open/83", "completion": "\n    \n    char_list = []\n    for char in s:\n        char_list.append(char)\n    \n    char_list.sort()\n    \n    new_char_list = []\n    for char in char_list:\n        new_char_list.append(char)\n    \n    for i in range(len(s)):\n        if char_list[i]!= new_char_list[i]:\n            char_list[i], char_list[new_char_list.index(char_list[i])] = char_list[new_char_list.index(char_list[i])], char_list[i]\n    \n    return \"\".join(char_list)\n", "result": "passed", "passed": true}
{"task_id": "Open/84", "completion": "\n    sum = 0\n    for i in range ( l - 1, r ) :\n        if i % 2 == 0 :\n            sum += i\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/85", "completion": "\n    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range(1, smaller + 1) :\n        if x % i == 0 and y % i == 0 :\n            hcf = i\n    return hcf\n", "result": "passed", "passed": true}
{"task_id": "Open/86", "completion": "\n    \n    if N == 1:\n        return A\n    elif N == 2:\n        return B\n    elif N == 3:\n        return A+B\n    elif N == 4:\n        return A+B+A\n    elif N == 5:\n        return A+B+B\n    elif N == 6:\n        return A+B+A+B\n    elif N == 7:\n        return A+B+A+B+A\n    elif N == 8:\n        return A+B+A+B+B\n    elif N == 9:\n        return A+B+A+B+A+B\n    elif N == 10:\n        return A+B+A+B+B+A\n    elif N == 11:\n        return A+B+A+B+A+B+A\n    elif N == 12:\n        return A+B+A+B+A+B+B\n    elif N == 13:\n        return A+B+A+B+A+B+A+B\n    elif N == 14:\n        ", "result": "failed: expected an indented block (<string>, line 36)", "passed": false}
{"task_id": "Open/87", "completion": "\n    \n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/88", "completion": "\n    r = r / 100\n    t = t * 12\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n", "result": "failed: ", "passed": false}
{"task_id": "Open/89", "completion": "\n    \n    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[k] > B[j] * B[j]:\n                    count += 1\n    return count\n", "result": "failed: object of type 'int' has no len()", "passed": false}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/91", "completion": "\n    >>> longestAr(3, [1, 2, 3])\n    2\n    >>> longestAr(3, [1, 2, 4])\n    0\n    >>> longestAr(3, [1, 2, 3, 4])\n    3\n    >>> longestAr(3, [1, 2, 3, 4, 5])\n    4\n    >>> longestAr(3, [1, 2, 3, 4, 5, 6])\n    4\n    >>> longestAr(3, [1, 2, 3, 4, 5, 6, 7])\n    4\n    >>> longestAr(3, [1, 2, 3, 4, 5, 6, 7, 8])\n    4\n    >>> longestAr(3, [1, 2, 3, 4, 5, 6, 7, 8, 9", "result": "failed: invalid syntax (<string>, line 8)", "passed": false}
{"task_id": "Open/92", "completion": "\n    maxLen = -1\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1]) % 2 == 0 and str[i:j+1].isalnum():\n                maxLen = max(maxLen, len(str[i:j+1]))\n    return maxLen\n", "result": "failed: ", "passed": false}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n >= 2 :\n        n = n / 2\n        count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/94", "completion": "\n    \n    Input: n, k: integers\n    Output: string: a string\n    1: for i in range(n):\n    2:     if i < n - 1:\n    3:         print 'a',\n    4:     else:\n    5:         print 'a'\n    6: return ''.join(['a' for i in range(n)])\n    \n    ### Example:\n    \n    #\n    \"\"\"\n    \n    ### Example:\n    \n    #\n    \"\"\"\n    \n    Input: n, k: integers\n    Output: string: a string\n    1: for i in range(n):\n    2:     if i < n - 1:\n    3:         print 'a',\n    4:     else:\n    5:         print 'a'\n    6: return ''.join(['a' for i in range(n)])\n    \n    ### Example:\n    \n    #\n    \"\"\"\n    \n    ### Example:\n    \n    #\n    \"\"\"\n    \n    Input: n,", "result": "failed: invalid syntax (<string>, line 24)", "passed": false}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n", "result": "passed", "passed": true}
{"task_id": "Open/96", "completion": "\n    \n    total = sum(arr)\n    if total == 0:\n        return 0\n    elif total == 1:\n        return 1\n    else:\n        total = total/3\n        sum1 = 0\n        sum2 = 0\n        for i in range(n):\n            sum1 += arr[i]\n            if sum1 == total:\n                return 1\n            sum2 += arr[n-i-1]\n            if sum2 == total:\n                return 1\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "result": "passed", "passed": true}
{"task_id": "Open/97", "completion": "\n    return word in sentence\n", "result": "passed", "passed": true}
{"task_id": "Open/98", "completion": "\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n // 10\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/99", "completion": "\n    \n    if a == b == c :\n        return True\n    elif a == b or a == c or b == c :\n        return True\n    elif a + k == b + k == c + k or a - k == b - k == c - k :\n        return True\n    else :\n        return False\n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/100", "completion": "\n    \n    if x == y:\n        return True\n    \n    if x > y:\n        return False\n    \n    while x < y:\n        x = x << 1\n        \n    if x == y:\n        return True\n    \n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i]!= s[i + 1]:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/102", "completion": "\n    count = 0\n    index = 0\n    for ch in string:\n        if ch == '0':\n            index += 1\n        else:\n            index += 2\n        count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/103", "completion": "\n    minRemoval = arr[1] - arr[0]\n    for i in range(1,n):\n        if abs(arr[i]-arr[i-1]) < minRemoval:\n            minRemoval = abs(arr[i]-arr[i-1])\n    return minRemoval\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)", "result": "failed: ", "passed": false}
{"task_id": "Open/104", "completion": "\n    \n    max = 0\n    for i in range(left, right + 1) :\n        count = 0\n        while i :\n            count += i & 1\n            i >>= 1\n        if count > max :\n            max = count\n    return max\n", "result": "failed: ", "passed": false}
{"task_id": "Open/105", "completion": "\n    \n    if n == 0 :\n        return 1\n    \n    return 1 << ( n - 1 ).bit_length()\n", "result": "failed: ", "passed": false}
{"task_id": "Open/106", "completion": "\n    sum = 0\n    for i in range ( 1, n ) :\n        if n % i == 0 :\n            sum += i\n    if sum == n :\n        return True\n    else :\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/107", "completion": "\n    \n    century = N // 100\n    leap_century = N // 400\n    \n    if N % 100 == 0:\n        N = N - 100\n    elif N % 400 == 0:\n        N = N - 400\n    \n    if N % 4 == 0:\n        N = N - 4\n    \n    if N % 100 == 0:\n        N = N - 100\n    elif N % 400 == 0:\n        N = N - 400\n    \n    if N % 4 == 0:\n        N = N - 4\n    \n    if N % 100 == 0:\n        N = N - 100\n    elif N % 400 == 0:\n        N = N - 400\n    \n    if N % 4 == 0:\n        N = N - 4\n    \n    odd_days = N % 7\n    \n    return odd_days\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/108", "completion": "\n    \n    if a < 0 :\n        return -1\n    \n    n = 1\n    while True :\n        if pentdiagonal(n) == a :\n            return n\n        n += 1\n        ", "result": "failed: maximum recursion depth exceeded in comparison", "passed": false}
{"task_id": "Open/109", "completion": "\n    \n    n = str(n)\n    d = str(d)\n    \n    return n.count(d)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "result": "passed", "passed": true}
{"task_id": "Open/110", "completion": "\n    \n    if n < 10 :\n        return True\n    \n    if n % 10 == n :\n        return False\n    \n    if n % 10 == 0 :\n        return False\n    \n    return validate(n // 10)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "result": "passed", "passed": true}
{"task_id": "Open/111", "completion": "\n    \n    if n == 0 :\n        return True\n    \n    if len(a) == 1 :\n        return a[0] == n\n    \n    if len(a) == 2 :\n        return a[0] == n or a[1] == n\n    \n    if len(a) == 3 :\n        return a[0] == n or a[1] == n or a[2] == n\n    \n    if len(a) == 4 :\n        return a[0] == n or a[1] == n or a[2] == n or a[3] == n\n    \n    if len(a) == 5 :\n        return a[0] == n or a[1] == n or a[2] == n or a[3] == n or a[4] == n\n    \n    if len(a) == 6 :\n        return a[0] == n or a[1] == n or a[2] == n or a[3] == n or a[4] == n or a[5] == n\n    \n    if len(a) == 7 :\n", "result": "failed: expected an indented block (<string>, line 33)", "passed": false}
{"task_id": "Open/112", "completion": "\n    \n    if n == 0:\n        return 4\n    elif n == 1:\n        return 7\n    else:\n        return 4*10 + 7 if n % 2 == 0 else 4*10 + 4\n    \n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/113", "completion": "\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 3\n    if n == 8:\n        return 5\n    if n == 9:\n        return 3\n    if n == 10:\n        return 5\n    if n == 11:\n        return 3\n    if n == 12:\n        return 5\n    if n == 13:\n        return 3\n    if n == 14:\n        return 5\n    if n == 15:\n        return 3\n    if n == 16:\n        return 5\n    if n == 17:\n        return 3\n    if n == 18:\n        return 5\n    if n == 19:\n        return 3\n    if n == 20:\n        return 5\n    if n == 21:\n        return 3\n    if n", "result": "failed: invalid syntax (<string>, line 56)", "passed": false}
{"task_id": "Open/114", "completion": "\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        if n % 2 == 0:\n            return 2*(n//2)-1\n        else:\n            return 2*(n//2)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/115", "completion": "\n    if len(a) == 0 :\n        return True\n    else :\n        if a[0] % 11 == 0 :\n            return isPossibleToZero( a[1:], n )\n        else :\n            return False\n", "result": "passed", "passed": true}
{"task_id": "Open/116", "completion": "\n    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return l * b\n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/117", "completion": "\n    string = string.split()\n    new_string = []\n    for word in string :\n        new_string.append(word[0].upper() + word[1:len(word)-1] + word[len(word)-1].upper())\n    return \" \".join(new_string)\n", "result": "passed", "passed": true}
{"task_id": "Open/118", "completion": "\n    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n", "result": "passed", "passed": true}
{"task_id": "Open/119", "completion": "\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/120", "completion": "\n    count = 0\n    for i in range(len(string)-1):\n        if string[i]!= string[i+1]:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n", "result": "passed", "passed": true}
{"task_id": "Open/122", "completion": "\n    max = 0\n    for ch in ss:\n        if ch.isdigit():\n            number = int(ch)\n            if number > max:\n                max = number\n    return max\n", "result": "failed: ", "passed": false}
{"task_id": "Open/123", "completion": "\n    if len(s) == 0:\n        return None\n    if len(s) == 1:\n        return 1\n    \n    max_length = 0\n    start = 0\n    end = 0\n    \n    while end < len(s):\n        if s[end].isdigit():\n            length = end - start + 1\n            if length > max_length:\n                max_length = length\n            \n            while end < len(s) and s[end].isdigit():\n                end += 1\n            start = end\n        end += 1\n    \n    if max_length == 0:\n        return None\n    return max_length\n", "result": "failed: ", "passed": false}
{"task_id": "Open/124", "completion": "\n    if N > M :\n        N, M = M, N\n    if N == 0 or M == 0 :\n        return 0\n    else :\n        while K > 0 :\n            if N > M :\n                N -= M\n                K -= 1\n            else :\n                M -= N\n                K -= 1\n        return N * M\n", "result": "passed", "passed": true}
{"task_id": "Open/125", "completion": "\n    if len(string)!= length :\n        return False\n    for i in range(0,len(string)-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "Open/126", "completion": "\n    if n == 0:\n        return None\n    else:\n        i = 0\n        while 2**i <= n:\n            i += 1\n        return 2**i\n", "result": "failed: ", "passed": false}
{"task_id": "Open/127", "completion": "\n    return len(str(A)) == len(str(B))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/128", "completion": "\n    return x!= y and abs(x - y)!= 1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/129", "completion": "\n    \n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    \n    for i in range(3, n+1) :\n        Sn_3 = Sn_1 + Sn_2 + Sn_3\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    \n    return Sn_3\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "result": "failed: ", "passed": false}
{"task_id": "Open/130", "completion": "\n    \n    steps = [0] * n\n    steps[0] = abs(arr[0] - arr[1])\n    steps[1] = abs(arr[1] - arr[2])\n    steps[2] = abs(arr[2] - arr[0])\n    \n    for i in range(3, n):\n        steps[i] = steps[i-1] + abs(arr[i] - arr[i-1])\n    \n    return steps\n", "result": "failed: ", "passed": false}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    elif n % 4 == 1 or n % 4 == 2 :\n        return 1\n    else :\n        return 2\n", "result": "passed", "passed": true}
{"task_id": "Open/132", "completion": "\n    m = N / a\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n", "result": "passed", "passed": true}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n    ", "result": "passed", "passed": true}
{"task_id": "Open/134", "completion": "\n    if ( arr[0] % 2 == 1 and arr[n-1] % 2 == 1 and n % 2 == 1 ):\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "Open/135", "completion": "\n    if N == 1:\n        return R - L + 1\n    elif N == 2:\n        return R - L + countSum(N-1, L+1, R) + countSum(N-1, L, R-1)\n    else:\n        return countSum(N-2, L+1, R) + countSum(N-2, L, R-1) + 1\n", "result": "failed: maximum recursion depth exceeded in comparison", "passed": false}
{"task_id": "Open/136", "completion": "\n    for i in range(1, n + 1):\n        if i not in arr:\n            return i\n    return None\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)", "result": "failed: ", "passed": false}
{"task_id": "Open/137", "completion": "\n    \n    if len(s) == 0 :\n        return 0\n    \n    s = list(s)\n    \n    s.sort()\n    \n    for i in range(len(s)) :\n        if s[i]!= i + 1 :\n            return 0\n    \n    return int(\"\".join(s))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range( n - 1 ) :\n        if arr[i] > arr[i + 1] :\n            count += arr[i] - arr[i + 1]\n            arr[i + 1] = arr[i]\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/139", "completion": "\n    avg = 0\n    for ch in s :\n        avg += ord(ch)\n    avg /= len(s)\n    return avg\n", "result": "failed: ", "passed": false}
{"task_id": "Open/140", "completion": "\n    min_banknotes = -1\n    for banknote in range(N):\n        if A * banknote + B * (N - banknote) == S:\n            min_banknotes = banknote\n    return min_banknotes\n", "result": "failed: ", "passed": false}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x,y)\n", "result": "passed", "passed": true}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n > 0 :\n        if n & 1 == 0 :\n            count += 1\n        else :\n            break\n        n = n >> 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/143", "completion": "\n    if n == 0:\n        return None\n    if n == 1:\n        return 0\n    \n    max_sum = 0\n    max_index = 0\n    for i in range(n):\n        if i == 0:\n            max_sum = arr[i]\n            max_index = i\n        elif max_sum < arr[i] ^ arr[i-1]:\n            max_sum = arr[i] ^ arr[i-1]\n            max_index = i\n    return max_index\n", "result": "failed: ", "passed": false}
{"task_id": "Open/144", "completion": "\n    \n    lds = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                lds = max(lds, i - j)\n    return lds\n", "result": "failed: ", "passed": false}
{"task_id": "Open/145", "completion": "\n    min_element = -1\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            min_element = arr[i]\n    if min_element == -1:\n        return -1\n    else:\n        return min_element + k\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nn = len(arr)\nk = 3", "result": "failed: list index out of range", "passed": false}
{"task_id": "Open/146", "completion": "\n    length = -1\n    for i in range(1, K):\n        if K % i == 0:\n            length = i\n            break\n    return length\n", "result": "failed: ", "passed": false}
{"task_id": "Open/147", "completion": "\n    \n    min_operations = 0\n    \n    for i in range(n):\n        if arr[i]!= i:\n            min_operations += 1\n    \n    return min_operations\n", "result": "failed: ", "passed": false}
{"task_id": "Open/148", "completion": "\n    sum = 3\n    for i in range ( 1, n ) :\n        sum += 3 * i\n    return sum\n", "result": "failed: ", "passed": false}
{"task_id": "Open/149", "completion": "\n    return s**0.5\n", "result": "passed", "passed": true}
{"task_id": "Open/150", "completion": "\n    \n    probability = ( p * p + q * q ) / ( p + q )\n    print ( p, q, probability )\n    \ngetProbability ( 10, 20 )\ngetProbability ( 20, 10 )\ngetProbability ( 10, 10 )\ngetProbability ( 0, 0 )\ngetProbability ( 100, 0 )\ngetProbability ( 0, 100 )\ngetProbability ( 100, 100 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\ngetProbability ( 0, 0 )\nget", "result": "failed: division by zero", "passed": false}
{"task_id": "Open/151", "completion": "\n    xor = 0\n    for ch in str1:\n        xor += ord(ch)\n    return xor\n", "result": "passed", "passed": true}
{"task_id": "Open/152", "completion": "\n    \n    binary = bin(n)\n    \n    for i in range(2, len(binary) ) :\n        if binary[i] == binary[i-1] :\n            return False\n    \n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "Open/153", "completion": "\n    \n    vowels = \"aeiou\"\n    \n    for i in range(len(s) - 1) :\n        if s[i] not in vowels :\n            return False\n        if s[i] > s[i + 1] :\n            return False\n    return True\n", "result": "failed: 'in <string>' requires string as left operand, not int", "passed": false}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low, high + 1):\n        if i % 10 >= k:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/155", "completion": "\n    \n    return abs(n - 2**math.floor(math.log(n, 2)))\n", "result": "failed: ", "passed": false}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else :\n        return 3.14 * r * r\n", "result": "failed: ", "passed": false}
{"task_id": "Open/157", "completion": "\n    return \"\".join(sorted(s))\n", "result": "passed", "passed": true}
{"task_id": "Open/158", "completion": "\n    \n    for i in range(size):\n        if ar[i]!= i+1:\n            return i+1\n    return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/160", "completion": "\n    for element in arr:\n        if arr.count(element) % 2!= 0:\n            return element\n    return None\n", "result": "failed: ", "passed": false}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n        ans = max(ans, xorArr)\n    return ans\n", "result": "failed: ", "passed": false}
{"task_id": "Open/162", "completion": "\n    \n    if (sx == dx and sy == dy) :\n        return True\n    \n    if (sx == dx and sy!= dy) :\n        return True\n    \n    if (sx!= dx and sy == dy) :\n        return True\n    \n    if (sx!= dx and sy!= dy) :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "result": "passed", "passed": true}
{"task_id": "Open/163", "completion": "\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return cntWays(n-1) + cntWays(n-2)\n", "result": "failed: ", "passed": false}
{"task_id": "Open/164", "completion": "\n    count = {}\n    for i in range(n) :\n        count[arr[i]] = count.get(arr[i],0) + 1\n    ans = 1\n    for i in count :\n        ans *= count[i]\n    return ans\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)", "result": "passed", "passed": true}
{"task_id": "Open/165", "completion": "\n    nodes = 0\n    for height in range(1, height+1):\n        nodes += AVLnodes(height)\n    return nodes\n", "result": "failed: ", "passed": false}
{"task_id": "Open/166", "completion": "\n    if source == dest :\n        return 0\n    if source > dest :\n        return sys.maxsize\n    if source < dest :\n        return steps ( source, -step, dest ) + 1\n", "result": "failed: maximum recursion depth exceeded in comparison", "passed": false}
{"task_id": "Open/167", "completion": "\n    \n    if n == 1 :\n        return \"1\"\n    \n    prev = countnndSay(n-1)\n    \n    result = \"\"\n    \n    i = 0\n    \n    while i < len(prev) :\n        count = 1\n        \n        while i + 1 < len(prev) and prev[i] == prev[i+1] :\n            i += 1\n            count += 1\n        \n        result += str(count) + prev[i]\n        i += 1\n    \n    return result\n    ", "result": "passed", "passed": true}
{"task_id": "Open/168", "completion": "\n    \n    if N < 1:\n        return 0\n    \n    maxLength = 0\n    \n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if productOfAllElements(arr[i:j+1]) >= 0:\n                maxLength = max(maxLength,j-i+1)\n            else:\n                break\n    \n    return maxLength\n", "result": "failed: name 'productOfAllElements' is not defined", "passed": false}
{"task_id": "Open/169", "completion": "\n    \n    N = (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n    return N\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "result": "passed", "passed": true}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n\narr = [1, 1, 2, 2, 3]\nn = len(arr)\nk = 3", "result": "passed", "passed": true}
{"task_id": "Open/171", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l, r+1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/173", "completion": "\n    return n ^ (2**m - 1)\n", "result": "passed", "passed": true}
{"task_id": "Open/174", "completion": "\n    count = 0\n    for i in range ( L, R + 1 ):\n        if i % 9 == K:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "Open/175", "completion": "\n    \n    return math.log(n,10) * k\n", "result": "failed: ", "passed": false}
{"task_id": "Open/176", "completion": "\n    if n == 0:\n        return -1\n    elif n == 1:\n        return A[0]\n    else:\n        for i in range(n):\n            if A[i] > A[0] and A[i] < A[n-1]:\n                return A[i]\n        return -1\n", "result": "failed: ", "passed": false}
{"task_id": "Open/177", "completion": "\n    \n    if a > b :\n        if b > c :\n            return a + b\n        elif c > a :\n            return a + c\n        else :\n            return a + b + c\n    elif b > c :\n        return b + c\n    else :\n        return c + a\n", "result": "failed: ", "passed": false}
