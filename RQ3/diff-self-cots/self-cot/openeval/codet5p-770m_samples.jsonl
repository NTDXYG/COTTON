{"task_id": "Open/0", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range(N) :\n        accountBalance += arr[i]\n        \n        if accountBalance < 0 :\n            return False\n        \n        if accountBalance > K :\n            return True\n    \n    return False\n"}
{"task_id": "Open/1", "completion": "    \n    balance = 0\n    for i in range(n) :\n        balance += arr[i]\n        if balance < 0 :\n            return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/2", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range( l, r + 1 ) :\n        accountBalance = accountBalance + i\n        \n        # Step 3. Return False.\n        if accountBalance < 0 :\n            return True\n        \n        # Step 4. Return \"Yes\" if all the bits in the binary representation of n within the range from l to r (inclusive) are set to 1.\n        if ( accountBalance & n ) == 0 :\n            return \"Yes\"\n    \n    # Step 5. Return \"No\".\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "\n    # Step 1. Initialize account balance as 0.\n    balance = 0\n\n    # Step 2. Iterate through operations.\n    for i in range(n) :\n        balance += A[i]\n\n        # Step 3. Return False.\n        if balance < 0 :\n            return False\n\n        # Step 4. Iterate through operations.\n        if balance % K == 0 :\n            return True\n\n    # Return False.\n    return False\n"}
{"task_id": "Open/4", "completion": "    if n < 2 :\n        return False\n    else :\n        balance = 0\n        for i in range(n) :\n            balance += a[i]\n            if balance < 0 :\n                return False\n        return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/5", "completion": "    \n    accountBalance = 0\n    \n    while accountBalance < 0 :\n        accountBalance += x\n        \n    if accountBalance % 2 == 0 :\n        return 1\n    else :\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/6", "completion": "    balance = 0\n    output = []\n    for i in vec :\n        if i < 0 :\n            balance += i\n            output.append(i)\n        elif i > 0 :\n            balance -= i\n            output.append(i)\n        elif i == 0 :\n            output.append(i)\n    return output\n"}
{"task_id": "Open/7", "completion": "    balance = 0\n    subsequence = []\n    for i in range(n) :\n        if arr[i] not in subsequence :\n            subsequence.append(arr[i])\n            balance += arr[i]\n        else :\n            balance -= arr[i]\n    if balance == 0 :\n        return False\n    else :\n        return len(subsequence)\n\n"}
{"task_id": "Open/8", "completion": "    balance = 0\n    distinct_prime_factors = []\n    for i in a :\n        balance += i\n        distinct_prime_factors.append(int(math.sqrt(balance)))\n    return distinct_prime_factors\n"}
{"task_id": "Open/9", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range( n ) :\n        accountBalance += arr[i]\n        if accountBalance < 0 :\n            return False\n    \n    # Step 3. Return False.\n    return True\n"}
{"task_id": "Open/10", "completion": " You're given a list of deposit and withdrawal operations on a bank account that starts with\n        zero balance. Your task is to detect if at any point the balance of account falls above zero, and\n        at that point function should return True. Otherwise it should return False.\n    \"\"\"\n        balance = 0\n        for operation in operations:\n            balance -= operation\n            if balance < 0:\n                return True\n        return False\n    \n    def equal(operations: List[int]) -> bool:\n        \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n        zero balance. Your task is to detect if at any point the balance of account falls equal, and\n        at that point function should return True. Otherwise it should return False.\n    \"\"\"\n        balance = 0\n        for operation in operations:\n            balance = balance + operation\n            if balance == 0:\n                return"}
{"task_id": "Open/11", "completion": "    balance = 0\n    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 :\n            balance += array[i]\n            count += 1\n    return count\n\n"}
{"task_id": "Open/12", "completion": "    account_balance = 0\n    count = 0\n    for i in range( len( s ) ) :\n        account_balance += s[i]\n        if account_balance > k :\n            account_balance -= s[i - k]\n            count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    balance = 0\n    \n    # Step 2. Iterate through operations.\n    while n > 1 :\n        balance += n\n        n = n // 2\n        \n    # Step 3. Return False.\n    return balance < 0\n"}
{"task_id": "Open/14", "completion": "    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    balance = 0\n    for i in range(t) :\n        a = random.randint(2,n-1)\n        balance += a**(n-1)/2 % n\n        if balance < 0 :\n            return False\n    return True\n\n"}
{"task_id": "Open/16", "completion": "    balance = 0\n    for i in range(len(s1)) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n            balance += 1\n    return balance >= n\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    accountBalance = 0\n    count = 0\n    for i in range( length ) :\n        if s[i] == '1' :\n            accountBalance += 1\n        else :\n            accountBalance -= 1\n        count += 1\n    if accountBalance < 0 :\n        return True\n    else :\n        return min( count, length - count )\n"}
{"task_id": "Open/19", "completion": "    balance = 0\n    count = 0\n    while balance < n :\n        balance += 1\n        count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if x == 0 :\n        return y\n    else :\n        return x * product( x - 1, y )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        elif i % 4 == 1 :\n            count1 += 1\n        elif i % 4 == 2 :\n            count2 += 1\n        elif i % 4 == 3 :\n            count3 += 1\n    if count0 == 4 and count1 == 4 and count2 == 4 and count3 == 4 :\n        return 1\n    else :\n        return 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/22", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range( n ) :\n        accountBalance += arr[i]\n        if accountBalance < 0 :\n            return True\n        elif accountBalance > 0 :\n            return False\n    \n    # Step 3. Return False.\n    return False\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        return count\n    if sum == 0 :\n        count += 1\n    return subsetSum ( arr, n, i + 1, sum, count ) + subsetSum ( arr, n, i + 1, sum - arr[i], count )\n\n"}
{"task_id": "Open/24", "completion": "    account_balance = 0\n    for i in range ( 1, n + 1 ) :\n        account_balance += i\n        if account_balance < 0 :\n            return False\n    return True\n"}
{"task_id": "Open/25", "completion": "    accountBalance = 0\n    sumOfSquares = 0\n    sumOfNumbers = 0\n    totalSum = 0\n    \n    for i in range ( n ) :\n        accountBalance = accountBalance + i\n        sumOfSquares = sumOfSquares + i**2\n        sumOfNumbers = sumOfNumbers + i\n        totalSum = totalSum + i\n        \n    return ( sumOfSquares, sumOfNumbers, totalSum )\n"}
{"task_id": "Open/26", "completion": "    balance = 0\n    for i in range ( 1, n + 1 ) :\n        if balance < 0 :\n            return False\n        if n % i == 0 :\n            balance += i\n    return balance\n"}
{"task_id": "Open/27", "completion": "    balance = 0\n    while balance < 0 :\n        balance = balance + x\n        if balance < 0 :\n            return False\n    return True\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    if a > b :\n        return True\n    else :\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/30", "completion": "    balance = 0\n    for i in range ( n ) :\n        balance += i ** 2\n    return balance / n\n"}
{"task_id": "Open/31", "completion": "    balance = 0\n    for i in range(n) :\n        balance += arr[i]\n        if balance < 0 :\n            return False\n    return arr[k]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/32", "completion": "    balance = 0\n    chicks = 0\n    while balance < 0 :\n        balance = balance + 3\n        chicks = chicks + 1\n    return chicks\n"}
{"task_id": "Open/33", "completion": "    balance = 0\n    for i in range ( n ) :\n        balance = balance + 2\n        if balance < 0 :\n            return False\n    return balance\n"}
{"task_id": "Open/34", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range( len( a ) ) :\n        accountBalance += a[i]\n        \n        if accountBalance < k :\n            return True\n        \n    return False\n\n"}
{"task_id": "Open/35", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range(1,n+1) :\n        accountBalance += int(i)\n        \n        # If account balance < 0, return True.\n        if accountBalance < 0 :\n            return True\n        \n        # If account balance is 0, return False.\n        if accountBalance == 0 :\n            return False\n        \n        # If account balance is greater than 0, return False.\n        if accountBalance > 0 :\n            return False\n        \n    # Step 3. Return False.\n    return False\n"}
{"task_id": "Open/36", "completion": "    balance = 0\n    for i in range( n ) :\n        balance += arr[i]\n        if balance < 0 :\n            return True\n    for i in range( n ) :\n        if arr[i] <= 0 :\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/37", "completion": "    if n == 1 or n == 2 :\n        return 1\n    elif n == 3 :\n        return 2\n    else :\n        return ways( n-1 ) + ways( n-2 )\n"}
{"task_id": "Open/38", "completion": "    accountBalance = 0\n    areaSum = 0\n    while accountBalance < l :\n        accountBalance += b\n        areaSum += b * b\n    return areaSum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "    balance = 0\n    count = 0\n    for i in range( n ) :\n        if arr[i] == 0 :\n            balance += 1\n        else :\n            count += balance\n            balance = 0\n    return count\n\n"}
{"task_id": "Open/41", "completion": "    \n    balance = 0\n    max_len = 0\n    max_len_index = 0\n    \n    for i in range( n ) :\n        if arr[i] == 0 :\n            balance += 1\n        else :\n            balance = 0\n            \n        if balance < 0 :\n            return False\n        \n        if balance == 0 :\n            max_len = i - max_len_index\n            max_len_index = i\n    \n    return max_len\n\n"}
{"task_id": "Open/42", "completion": "    accountBalance = 0\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0], a[-1])\n    else :\n        return max(a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/43", "completion": "    balance = 0\n    count = 0\n    for i in range(n) :\n        balance += array[i]\n        if balance >= k :\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/44", "completion": "    balance = 0\n    for i in range( len( arr ) ) :\n        balance += abs( arr[i] - n )\n    return balance < 0\n\n"}
{"task_id": "Open/45", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    balance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in arr :\n        balance += i\n        \n        # If account balance < 0, return True.\n        if balance < 0 :\n            return True\n        \n        # Step 3. Return False.\n        else :\n            return False\n    \n    # Step 4. Iterate through the array.\n    for i in arr :\n        if i > balance :\n            return i * (n - 1)\n        elif i < balance :\n            return False\n    \n    return False\n"}
{"task_id": "Open/46", "completion": "    balance = 0\n    max_diff = 0\n    for i in range( len( array ) ) :\n        balance += array[ i ]\n        if balance < 0 :\n            return False\n        max_diff = max( max_diff, i - array[ i ] )\n    return max_diff\n\n"}
{"task_id": "Open/47", "completion": "    accountBalance = 0\n    for i in range( len( x1 ) ) :\n        accountBalance += a * x1[i] + b * y1[i] + c\n        if accountBalance < 0 :\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/48", "completion": "    \n    #### Input:\n    #### Output:\n    ####\n    ####\n    \n    #### Solution:\n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n    ####\n    \n    ####\n   "}
{"task_id": "Open/49", "completion": "    balance = 0\n    while balance < 0 :\n        balance = balance + L\n        balance = balance + R\n    return balance\n"}
{"task_id": "Open/50", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    balance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range(n) :\n        balance += a[i]\n        \n        if balance < 0 :\n            return True\n        \n    # Step 3. Return False.\n    return False\n    "}
{"task_id": "Open/51", "completion": "\n    \n    \n    def sum ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the sum of the series 1/3^n for n terms.\n        \"\"\"\n    \n    \n    def sum ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the sum of the series 1/3^n for n terms.\n        \"\"\"\n    \n    \n    def sum ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the sum of the series 1/3^n for n terms.\n        \"\"\"\n    \n    \n    def sum ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the sum of the series 1/3^n for n terms.\n        \"\"\"\n    \n    \n    def sum ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the sum of the series 1/3^n for n terms.\n        \"\"\"\n    \n    \n    def sum ( n ) :\n        \"\"\"Write a function that takes an integer n and returns the sum of the series 1/3^n for"}
{"task_id": "Open/52", "completion": "    \n    accountBalance = 0\n    for i in range( n ) :\n        for j in range( n ) :\n            if ( arr[i][j] % 2 ) :\n                accountBalance += arr[i][j]\n    return accountBalance\n"}
{"task_id": "Open/53", "completion": "    balance = 0\n    count = 0\n    for i in range ( N ) :\n        balance = balance ^ i\n        if balance < 0 :\n            return True\n        count = count + 1\n    return False\n"}
{"task_id": "Open/54", "completion": "    balance = 0\n    for i in range(n) :\n        balance += a[i]\n        if balance < k :\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/55", "completion": "    balance = 0\n    while balance < n :\n        balance += 1\n    return balance == n\n"}
{"task_id": "Open/56", "completion": "    \n    balance = 0\n    count = 0\n    \n    for i in range( len( s ) ) :\n        if s[i] == s[i-1] :\n            balance += 1\n        else :\n            count += 1\n            balance = 0\n            \n    return count\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/58", "completion": "    \n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    \n    for i in range(2, N) :\n        result = result + var1 * var2\n        var1 = var2\n        var2 = result\n        \n    return result\n\n"}
{"task_id": "Open/59", "completion": "    \n    balance = 0\n    for i in range( len( arr ) ) :\n        if i in ranges :\n            balance += arr[ i ]\n        if balance < 0 :\n            return False\n    return arr[ index ]\n\n"}
{"task_id": "Open/60", "completion": "    \n    # Your code here\n    if n == 0 :\n        return False\n    if n == 1 :\n        return True\n    if n % 2 == 0 :\n        return judgeSquareSum( n // 2 )\n    else :\n        return False\n"}
{"task_id": "Open/61", "completion": "    balance = 0\n    count = 0\n    for i in range( len( a ) ) :\n        if a[ i ] == b[ i ] :\n            balance += 1\n        else :\n            return -1\n        if balance < 0 :\n            return True\n    return count\n\n"}
{"task_id": "Open/62", "completion": "    if len( str ) < 2 :\n        return str\n    if str[1] > str[2] :\n        str = str[0] + str[1] + str[2]\n        return str\n    else :\n        str = str[0] + str[1] + str[2] + str[3]\n        return str\n\n"}
{"task_id": "Open/63", "completion": "    balance = 0\n    for i in range(n) :\n        balance += arr[i]\n        if balance < 0 :\n            return False\n    return balance\n\n"}
{"task_id": "Open/64", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range ( len ( s ) ) :\n        if s[i] == '1' :\n            accountBalance += 1\n        else :\n            if accountBalance < 0 :\n                return False\n            else :\n                return -1\n    \n    # Step 3. Return False.\n    return False\n"}
{"task_id": "Open/65", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    account_balance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range(n) :\n        account_balance += a[i]\n        \n        if account_balance < 0 :\n            return True\n        \n        if account_balance == k :\n            return True\n        \n        account_balance -= a[i]\n        \n    return False\n"}
{"task_id": "Open/66", "completion": "\n    \n    \n    def getMaxMedian ( arr, n, k ) :\n        \"\"\"Write a function that takes an array, its size, and an integer k as input and returns the maximum median of the array after adding k elements to it.\n        The function first calculates the size of the array after adding k elements.\n        It then sorts the array in ascending order.\n        If the size is even, the function calculates the median by taking the average of the two middle elements.\n        If the size is odd, the function simply returns the middle element as the median.\n        \"\"\"\n    \n    \n    def getMaxMedian ( arr, n, k ) :\n    \"\"\"\n    \"\"\"\n    \n    \n    def getMaxMedian ( arr, n, k ) :\n    \"\"\"\n    \"\"\"\n    \n    \n    def getMaxMedian ( arr, n, k ) :\n    \"\"\"\n    \"\"\"\n    \n    \n    def getMaxMedian ( arr, n, k ) :\n    \"\"\"\n    \"\"\"\n    \n    \n    def getMaxMedian ( arr, n, k ) :\n    \"\"\"\n    \"\"\"\n    \n    \n    def getMax"}
{"task_id": "Open/67", "completion": "    \n    #### Solution:\n    account_balance = 0\n    step_count = 0\n    for i in range(n):\n        if a[i] < 0:\n            account_balance += a[i]\n            step_count += abs(a[i])\n        else:\n            if a[i] == 0:\n                step_count += 1\n            else:\n                step_count += a[i]\n    if account_balance < 0:\n        return True\n    else:\n        return False\n    \n    #### Testing:\n    #assert below_zero([-1, 0, 1, 2, -3, 4]) == True\n    #assert below_zero([-1, 0, 1, 2, -3, 4]) == False\n    #assert below_zero([-1, 0, 1, 2, -3, 4]) == True\n    #assert below_zero([-1, 0, 1, 2, -3, 4]) == False\n    #assert below_zero([-1, 0, 1, 2, -3, 4]) == True\n    #assert below_zero(["}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    else :\n        v = []\n        n -= 1\n        while n > 0 :\n            v.append(n % 5)\n            n = n // 5\n        result = 0\n        for i in reversed(v) :\n            result *= 10\n            result += i\n        return result * 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/69", "completion": "    balance = 0\n    for i in range(32) :\n        balance += int(n & 1)\n        if balance < 0 :\n            return False\n    return True\n"}
{"task_id": "Open/70", "completion": "    \n    return closestMultiple ( n, x )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/71", "completion": "    accountBalance = 0\n    sum = 0\n    for i in range( n ) :\n        sum += 2\n        accountBalance += 2\n        if accountBalance < 0 :\n            return False\n    return sum\n"}
{"task_id": "Open/72", "completion": "    \n    accountBalance = 0\n    sum = 0\n    \n    for i in range ( 1, n + 1 ) :\n        accountBalance = accountBalance + 2\n        sum = sum + accountBalance\n        \n    return sum\n\n"}
{"task_id": "Open/73", "completion": "    balance = 0\n    for i in range( n ) :\n        balance += arr[i]\n        if balance < 0 :\n            return False\n    return balance\n\n"}
{"task_id": "Open/74", "completion": "    \n    #### Code:\n    balance = 0\n    count = 0\n    for i in a :\n        if ( (2**i) > balance) :\n            balance = balance + i\n            count = count + 1\n    return count\n    \n    \n    #### Testing:\n    a = [1,2,3,4,5,6,7,8,9,10]\n    n = len(a)\n    print(countPairs(a, n))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/75", "completion": "    \n    balance = 0\n    for i in range ( n ) :\n        balance += 1\n        if balance < 0 :\n            return True\n    return False\n\n"}
{"task_id": "Open/76", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    balance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range(n) :\n        if A[i] == 1 :\n            balance += 1\n        elif A[i] == 0 :\n            balance -= 1\n            \n        if balance < 0 :\n            return True\n            \n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/77", "completion": "    \n    account_balance = 0\n    \n    for i in range ( radian ) :\n        account_balance += i\n        \n        if account_balance < 0 :\n            return False\n        \n    return account_balance\n\n"}
{"task_id": "Open/78", "completion": "    return math.floor( n / 2 )\n"}
{"task_id": "Open/79", "completion": "    balance = 0\n    for i in range(n) :\n        balance += a\n        if balance < 0 :\n            return False\n    return True\n"}
{"task_id": "Open/80", "completion": "\n    # Step 1. Initialize account balance as 0.\n    balance = 0\n\n    # Step 2. Iterate through operations.\n    for i in range ( n ) :\n        balance += i\n        if balance < 0 :\n            return False\n\n    # Step 3. Return False.\n    return False\n"}
{"task_id": "Open/81", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    account_balance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range (moves) :\n        if account_balance < 0 :\n            return False\n        account_balance = account_balance + 1\n    \n    # Step 3. Return False.\n    return False\n    \n    # Step 4. Return True.\n    return True\n    \n    # Step 5. Return False.\n    return False\n    \n    # Step 6. Return False.\n    return False\n    \n    # Step 7. Return False.\n    return False\n    \n    # Step 8. Return False.\n    return False\n    \n    # Step 9. Return False.\n    return False\n    \n    # Step 10. Return False.\n    return False\n    \n    # Step 11. Return False.\n    return False\n    \n    # Step 12. Return False.\n    return False\n    \n    # Step 13. Return False.\n    return False\n    \n    # Step 14. Return False.\n    return False\n    \n    # Step 15."}
{"task_id": "Open/82", "completion": "\n    balance = 0\n    for i in range( n ) :\n        balance += i\n        if balance < 0 :\n            return False\n    return balance\n\n"}
{"task_id": "Open/83", "completion": " You're given a list of deposit and withdrawal operations on a bank account that starts with\n        zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n        at that point function should return True. Otherwise it should return False.\n        \"\"\"\n    \n    #### Solution:\n    def below_zero(operations: List[int]) -> bool:\n        \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n        zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n        at that point function should return True. Otherwise it should return False.\n        \"\"\"\n    \n    #### Solution:\n    def below_zero(operations: List[int]) -> bool:\n        \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n        zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n        at that point function should return"}
{"task_id": "Open/84", "completion": "    array = [0] * n\n    for i in range( l, r + 1 ) :\n        if i % 2 == 0 :\n            array[i] = array[i] + 1\n        else :\n            array[i] = array[i] + 2\n    return sum( array )\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        return x\n    else :\n        return y\n"}
{"task_id": "Open/86", "completion": "    balance = 0\n    i = 0\n    while balance < 0 :\n        balance = A + B\n        i += 1\n    return i - N\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/87", "completion": "    account_balance = 0\n    count = 0\n    for i in range(len(str)) :\n        if str[i] == substr :\n            account_balance += 1\n        else :\n            if account_balance < 0 :\n                return False\n            else :\n                account_balance = 0\n        count += 1\n    return count\n\n"}
{"task_id": "Open/88", "completion": "    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    balance = 0\n    \n    # Step 2. Iterate through operations.\n    # -add value to account balance.\n    for i in range ( A, B + 1 ) :\n        for j in range ( C, A + 1 ) :\n            for k in range ( B, C + 1 ) :\n                if i * k > j * j :\n                    balance += 1\n    \n    # Step 3. Return the number of triplets that satisfy the condition i * k > j * j.\n    return balance\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    # Step 1. Initialize account balance as 0.\n    balance = 0\n    # Step 2. Iterate through operations.\n    for i in range( n ) :\n        # Step 3. Return False.\n        if balance < 0 :\n            return False\n        # Step 4. Return the length of the longest arithmetic subsequence in arr.\n        balance += arr[ i ]\n        # Step 5. Return the length of the longest arithmetic subsequence.\n        if balance == 0 :\n            return i + 1\n        # Step 6. Return the length of the longest arithmetic subsequence.\n        balance -= arr[ i - 1 ]\n        # Step 7. Return the length of the longest arithmetic subsequence.\n        balance += arr[ i + 1 ]\n        # Step 8. Return the length of the longest arithmetic subsequence.\n        balance -= arr[ i - 1 ]\n        # Step 9. Return the length of the longest arithmetic subsequence.\n        balance += arr[ i + 1 ]\n    # Step 10. Return the length of the longest arithmetic subsequence.\n    return i + 1\n"}
{"task_id": "Open/92", "completion": "    balance = 0\n    maxLen = -1\n    for i in range( len( str ) ) :\n        if str[i].isalnum() :\n            balance += int( str[i] )\n            if balance < 0 :\n                return False\n        else :\n            if balance > 0 :\n                balance = 0\n            else :\n                return -1\n        if i == len( str ) - 1 :\n            if balance > 0 :\n                balance = 0\n            else :\n                return -1\n        if balance > 0 :\n            if i + 1 == len( str ) :\n                maxLen = i\n    return maxLen\n\n"}
{"task_id": "Open/93", "completion": "    account_balance = 0\n    count = 0\n    while account_balance < n :\n        account_balance += 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    s = list(range(n))\n    s.reverse()\n    account = 0\n    for i in range(n) :\n        if k > 0 :\n            if k > 26 :\n                if s[i] == 'a' :\n                    s[i] = 'z'\n                    k -= 26\n                else :\n                    s[i] = chr(97 + (ord(s[i]) - 1))\n            else :\n                s[i] = chr(97 + (ord(s[i]) + k))\n        else :\n            if s[i] == 'a' :\n                return False\n            else :\n                return True\n        account += s[i]\n    return ''.join(s)\n\n"}
{"task_id": "Open/95", "completion": "    \n    #### Solution:\n    account_balance = 0\n    distance = 0\n    while n > 0 :\n        distance += fuel // n\n        n -= 1\n    return distance\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/96", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range( n ) :\n        accountBalance += arr[i]\n        \n        if accountBalance < 0 :\n            return True\n        \n    # Step 3. Return False.\n    return False\n    "}
{"task_id": "Open/97", "completion": "    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "    balance = 0\n    while balance < 0 :\n        balance = balance + n\n        if balance < 0 :\n            return True\n        n = n // 10\n    return False\n"}
{"task_id": "Open/99", "completion": "    if a == b and a == c and b == c :\n        return True\n    elif a == b or a == c or b == c :\n        return False\n    else :\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/100", "completion": "    account_balance = 0\n    while account_balance!= y :\n        account_balance = account_balance | x\n        if account_balance < 0 :\n            return True\n        else :\n            account_balance = account_balance & (1 << 32)\n    return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    balance = 0\n    for i in range( len( s ) ) :\n        if s[i] == s[i+1] :\n            count += 1\n        else :\n            balance += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    balance = 0\n    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n        balance += int(i)\n    if balance < 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/103", "completion": "    \n    balance = 0\n    for i in range(n) :\n        balance += arr[i]\n        if balance < 0 :\n            return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/104", "completion": "    balance = 0\n    max_consecutive_bits = 0\n    while balance < right :\n        balance += left\n        max_consecutive_bits = max( max_consecutive_bits, balance & 1 )\n    return max_consecutive_bits\n\n"}
{"task_id": "Open/105", "completion": "\n    balance = 0\n    while balance < n :\n        balance += 1\n    return balance\n"}
{"task_id": "Open/106", "completion": "    accountBalance = 0\n    for i in range ( 1, n + 1 ) :\n        if n % i == 0 :\n            accountBalance += i\n    return accountBalance == n\n"}
{"task_id": "Open/107", "completion": "    def oddDays ( N ) :\n        accountBalance = 0\n        oddDays = 0\n        for i in range( N ) :\n            if ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ("}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return a + (a + a + a) // 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/109", "completion": "    balance = 0\n    for i in str(n) :\n        if i == d :\n            balance += 1\n    return balance\n"}
{"task_id": "Open/110", "completion": "\n    # Step 1. Initialize account balance as 0.\n    account_balance = 0\n\n    # Step 2. Iterate through operations.\n    for i in range( len( str( n ) ) ) :\n        if n[ i ]!= str ( i + 1 ) :\n            account_balance += int ( n [ i ] )\n\n    # Step 3. Return False if account balance < 0.\n    return account_balance < 0\n"}
{"task_id": "Open/111", "completion": "    balance = 0\n    for i in a :\n        balance += i\n        if balance % n == 0 :\n            return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/112", "completion": "    balance = 0\n    for i in range(3, n+1) :\n        if i % 2 == 0 :\n            balance += 4\n        else :\n            balance += 7\n    return balance\n"}
{"task_id": "Open/113", "completion": "    accountBalance = 0\n    for i in range(3, n+1) :\n        if i % 2 == 0 :\n            accountBalance += i//2 * 10\n        else :\n            accountBalance += (i//2)-1 * 10\n    return accountBalance\n"}
{"task_id": "Open/114", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range( n+1 ) :\n        if i % 2 == 0 :\n            accountBalance += i//2\n        else :\n            accountBalance += (i//2)-1\n            \n    # Step 3. Return False.\n    if accountBalance < 0 :\n        return False\n    \n    # Step 4. Return the nth element of an array.\n    return accountBalance\n"}
{"task_id": "Open/115", "completion": "    accountBalance = 0\n    for i in range(n) :\n        accountBalance += a[i]\n        if accountBalance < 0 :\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b * h\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    balance = 0\n    new_string = \"\"\n    for word in string.split() :\n        new_string += word[0].upper() + word[-1].upper() + \" \"\n        balance += int(word[1:])\n    return new_string if balance >= 0 else False\n"}
{"task_id": "Open/118", "completion": "    return int( math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2 )\n\n"}
{"task_id": "Open/119", "completion": "    if len(arr) == 0 :\n        return False\n    if len(arr) == 1 :\n        return True\n    if arr[0] == arr[1] :\n        return areDistinct(arr[2:])\n    else :\n        return False\n"}
{"task_id": "Open/120", "completion": "    accountBalance = 0\n    count = 0\n    for i in range( len( string ) ) :\n        if string[i] == string[i+1] :\n            accountBalance += 1\n        else :\n            if accountBalance > 0 :\n                count += 1\n                accountBalance = 0\n    return count\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in ss :\n        if i.isdigit() :\n            accountBalance += int(i) * 10\n        else :\n            if accountBalance > 0 :\n                return accountBalance\n            else :\n                accountBalance = int(i)\n    return False\n"}
{"task_id": "Open/123", "completion": "    accountBalance = 0\n    longestSubstring = \"\"\n    for i in range( length ) :\n        if s[i] == \"0\" :\n            accountBalance = 0\n        else :\n            accountBalance += 1\n        if accountBalance > 0 :\n            longestSubstring = s[i:i+length]\n    return longestSubstring\n"}
{"task_id": "Open/124", "completion": " You're given a list of deposit and withdrawal operations on a bank account that starts with\n        zero balance. Your task is to detect if at any point the balance of account falls above zero, and\n        at that point function should return True. Otherwise it should return False.\n        \"\"\"\n    \n    #### Solution:\n    def remaining_area( N, M, K ) :\n        \"\"\"\n        :type N: int\n        :type M: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        if K == 0 or (N == 0 and M == 0):\n            return 0\n        else:\n            return (K - (N + M)) * (N + M)\n    \n    #### Tests:\n    assert remaining_area(1, 1, 0) == 0\n    assert remaining_area(1, 1, 1) == 1\n    assert remaining_area(1, 1, 2) == 2\n    assert remaining_area(1, 2, 1) == 2\n    assert remaining_area("}
{"task_id": "Open/125", "completion": "    balance = 0\n    for i in range(length) :\n        if string[i] == string[i+1] :\n            balance += 1\n        else :\n            return False\n    return balance <= 0\n"}
{"task_id": "Open/126", "completion": "    \n    balance = 0\n    for i in range(1, n+1) :\n        balance += i\n        if balance < 0 :\n            return False\n    return True\n"}
{"task_id": "Open/127", "completion": "    if len(A)!= len(B) :\n        return False\n    else :\n        for i in range(len(A)) :\n            if A[i]!= B[i] :\n                return False\n        return True\n"}
{"task_id": "Open/128", "completion": "    if x == y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range ( 3, n ) :\n        accountBalance = accountBalance + i\n        \n        # Step 3. Return False.\n        if accountBalance < 0 :\n            return False\n        \n        # Step 4. Iterate from 3 to n and update the values of Sn_1, Sn_2, and Sn_3 accordingly.\n        if accountBalance == i :\n            return i\n        elif accountBalance < i :\n            return False\n        \n    # Step 4. Iterate from 3 to n and update the values of Sn_1, Sn_2, and Sn_3 accordingly.\n    return False\n"}
{"task_id": "Open/130", "completion": "    account_balance = 0\n    steps = 0\n    for i in range( n ) :\n        account_balance += arr[i]\n        if account_balance < 0 :\n            return False\n        steps += abs( arr[i] - arr[i-1] )\n    return steps\n"}
{"task_id": "Open/131", "completion": "    balance = 0\n    while balance < 0 :\n        balance += n\n        if n % 4 == 0 or n % 3 == 0 :\n            return 0\n        elif n % 1 == 0 or n % 2 == 0 :\n            return 1\n    return False\n\n"}
{"task_id": "Open/132", "completion": "\n    m = 0\n    sum = 0\n    ans = 0\n    while m < N :\n        sum += m\n        m += a\n        ans += m\n    return ans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/133", "completion": "    balance = 0\n    for i in range ( 1, N + 1 ) :\n        balance = balance + i\n        if balance < 0 :\n            return True\n    return False\n"}
{"task_id": "Open/134", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    accountBalance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range(0,n) :\n        accountBalance += arr[i]\n        \n    # Step 3. Return False.\n    return accountBalance % 2 == 0\n    "}
{"task_id": "Open/135", "completion": "    if (N == 1) :\n        return (R - L + 1)\n    elif (N > 1) :\n        return (countSum (N - 2, L, R) + 1)\n    else :\n        return 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/136", "completion": "    \n    balance = 0\n    for i in range( n ) :\n        balance += arr[i]\n        if balance < 0 :\n            return i\n    return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/137", "completion": "    balance = 0\n    for i in range(n) :\n        balance += int(s[i])\n        if balance < 0 :\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n        elif arr[i] < arr[i-1] :\n            arr[i] = arr[i-1]\n    return count\n\n"}
{"task_id": "Open/139", "completion": "    balance = 0\n    for i in s :\n        balance += ord(i)\n    return balance / len(s)\n"}
{"task_id": "Open/140", "completion": "    account_balance = 0\n    banknotes_needed = 0\n    for i in range(N) :\n        account_balance += A\n        if account_balance < S :\n            return False\n        banknotes_needed += 1\n    return banknotes_needed\n"}
{"task_id": "Open/141", "completion": "    return x * y / math.gcd(x, y)\n\n"}
{"task_id": "Open/142", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    balance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range ( n ) :\n        balance = balance + i\n        \n        # If account balance < 0, return True.\n        if balance < 0 :\n            return True\n        \n    # Step 3. Return False.\n    return False\n    "}
{"task_id": "Open/143", "completion": "    balance = 0\n    for i in range(n) :\n        balance = balance + arr[i]\n    if balance < 0 :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/144", "completion": "    balance = 0\n    for i in range( n ) :\n        balance += arr[i]\n        if balance < 0 :\n            return i\n    return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/145", "completion": "    if n == 0 :\n        return -1\n    if k == 0 :\n        return arr[0]\n    if k > 0 :\n        return min(arr) + k\n    else :\n        return min(arr) - k\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/146", "completion": "\n    balance = 0\n    while balance < 0 :\n        balance += 1\n        if balance % K == 0 :\n            return balance\n    return -1\n"}
{"task_id": "Open/147", "completion": "    balance = 0\n    count = 0\n    for i in range( n ) :\n        if balance < 0 :\n            return False\n        balance += arr[i]\n        count += 1\n    return count\n"}
{"task_id": "Open/148", "completion": "    balance = 0\n    sum = 0\n    for i in range ( n ) :\n        balance = balance + 3\n        sum = sum + balance\n    return sum\n"}
{"task_id": "Open/149", "completion": "    if s == 0 :\n        return 0\n    else :\n        return (s**0.5)\n"}
{"task_id": "Open/150", "completion": "    balance = 0\n    for i in range(p) :\n        balance += i\n    for j in range(q) :\n        balance += j\n    return balance / (p + q)\n"}
{"task_id": "Open/151", "completion": "    balance = 0\n    for i in range( len1 ) :\n        balance += ord( str1[i] )\n        if balance < 0 :\n            return False\n    return True\n"}
{"task_id": "Open/152", "completion": "    balance = 0\n    for i in range ( n ) :\n        balance += int ( input ( \"Enter value for account balance: \" ) )\n        if balance < 0 :\n            return True\n    return False\n\n"}
{"task_id": "Open/153", "completion": "\n    \"\"\"\n    def areVowelsInOrder ( s ) :\n        if len( s ) == 0 :\n            return True\n        if s[0] == s[-1] :\n            return areVowelsInOrder ( s[1:-1] )\n        else :\n            return False\n    \"\"\"\n    \"\"\"\n    def areVowelsInOrder ( s ) :\n        if len( s ) == 0 :\n            return True\n        if s[0] == s[-1] :\n            return areVowelsInOrder ( s[1:-1] )\n        else :\n            return False\n    \"\"\"\n    \"\"\"\n    def areVowelsInOrder ( s ) :\n        if len( s ) == 0 :\n            return True\n        if s[0] == s[-1] :\n            return areVowelsIn"}
{"task_id": "Open/154", "completion": "    balance = 0\n    count = 0\n    for i in range( low, high + 1 ) :\n        if i % 10 == k :\n            balance += i\n            count += 1\n        else :\n            balance -= i\n    return balance, count\n\n"}
{"task_id": "Open/155", "completion": "    if n < 0 :\n        return False\n    else :\n        return math.floor(math.log(n,2))\n\n"}
{"task_id": "Open/156", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    account_balance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range( r ) :\n        account_balance = account_balance + i\n        \n        # Step 3. Return False if account balance < 0.\n        if account_balance < 0 :\n            return False\n        \n        # Step 4. Return True if account balance > 0.\n        if account_balance > 0 :\n            return True\n        \n    # Step 5. Return -1 if radius is negative.\n    return -1\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    \n    # Step 1. Initialize account balance as 0.\n    balance = 0\n    \n    # Step 2. Iterate through operations.\n    for i in range(size) :\n        balance += ar[i]\n        \n        # If account balance < 0, return True.\n        if balance < 0 :\n            return True\n        \n    # Step 3. Return False.\n    return False\n"}
{"task_id": "Open/159", "completion": "    balance = 0\n    count = 0\n    for i in range( len( str ) ) :\n        if str[i] == \"010\" :\n            balance += 1\n        else :\n            if balance < 0 :\n                return True\n            else :\n                balance = 0\n            count += 1\n    return False\n"}
{"task_id": "Open/160", "completion": "    accountBalance = 0\n    for i in range(n) :\n        accountBalance += arr[i]\n        if accountBalance < 0 :\n            return arr[i]\n    return False\n\n\n"}
{"task_id": "Open/161", "completion": "    ans = 0\n    accountBalance = 0\n    for i in range(n) :\n        xorArr = arr[i]\n        ans = ans ^ xorArr\n        accountBalance = accountBalance + xorArr\n    if accountBalance < 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/162", "completion": "    if sx == dx and sy == dy :\n        return True\n    elif sx == dx :\n        return False\n    elif sy == dy :\n        return False\n    else :\n        return isReachable ( sx + 1, sy, dx, dy ) or isReachable ( sx, sy + 1, dx, dy )\n"}
{"task_id": "Open/163", "completion": "\n    \n    return cntWays ( n )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/164", "completion": "    count = {}\n    count[0] = 1\n    for i in arr :\n        if i in count :\n            count[i] += 1\n        else :\n            count[i] = 1\n    for i in count :\n        if count[i] > n :\n            return False\n        elif count[i] < n :\n            return True\n        elif count[i] == n :\n            return True\n        elif count[i] == n :\n            return False\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/165", "completion": "\n    if height < 0 :\n        return False\n    else :\n        return (height - 1) * 2 + 1\n\n"}
{"task_id": "Open/166", "completion": "    if source < 0 or step < 0 or dest < 0 :\n        return sys\n    if source == dest :\n        return 0\n    if source == 0 :\n        return 1\n    if step == 0 :\n        return 1\n    if step == 1 :\n        return 2\n    if step == -1 :\n        return 2\n    if source == dest :\n        return 3\n    if source == 0 and step == 0 :\n        return 4\n    if source == 0 and step == 1 :\n        return 5\n    if source == 0 and step == -1 :\n        return 6\n    if source == dest and step == 0 :\n        return 7\n    if source == dest and step == 1 :\n        return 8\n    if source == dest and step == -1 :\n        return 9\n    if source == dest and step == -1 :\n        return 10\n    return sys\n\n"}
{"task_id": "Open/167", "completion": "    if n == 0 :\n        return \"1\"\n    else :\n        return countnndSay ( n - 1 ) + countnndSay ( n - 2 )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/168", "completion": "    balance = 0\n    max_len = 0\n    for i in arr :\n        balance += i\n        if balance < 0 :\n            return True\n        if balance > 0 :\n            max_len = max(max_len, i)\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/169", "completion": "    balance = 0\n    for i in range(0, m) :\n        balance += i\n    for i in range(0, n) :\n        balance += i\n    return ( (m * n) / math.sqrt( (m * m) + (n * n) ) )\n"}
{"task_id": "Open/170", "completion": "    \n    accountBalance = 0\n    count = 0\n    \n    for i in range(n) :\n        accountBalance += arr[i]\n        \n        if accountBalance < k :\n            count += 1\n            \n        if accountBalance > k :\n            return False\n            \n    return True\n\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(n) :\n        for j in range(i+1, n) :\n            for k in range(j+1, n) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/172", "completion": "    balance = 0\n    for i in range(l,r+1) :\n        balance += i\n        if balance < 0 :\n            return False\n        if balance % 3 == 0 or balance % 2 == 0 :\n            return False\n    return True\n"}
{"task_id": "Open/173", "completion": "    balance = 0\n    while n > 0 :\n        balance += n & 1\n        n >>= 1\n    if balance < 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/174", "completion": "\n    # Step 1. Initialize account balance as 0.\n    account_balance = 0\n    # Step 2. Iterate through operations.\n    # -add value to account balance.\n    # -If account balance < 0, return True.\n    # Step 3. Return False.\n    # Step 4. Iterate through numbers.\n    # -If the remainder of each number divided by 9 is equal to K, it increments the count.\n    # -If it is, it returns the count.\n    for i in range(L,R) :\n        if (i % 9 == K) :\n            account_balance += i\n    return account_balance\n"}
{"task_id": "Open/175", "completion": "    account_balance = 0\n    while account_balance < 0 :\n        account_balance = account_balance + n\n    return str(math.log10(n))[:k]\n"}
{"task_id": "Open/176", "completion": "\n    # Step 1. Initialize account balance as 0.\n    balance = 0\n\n    # Step 2. Iterate through operations.\n    for i in range(n) :\n        balance += A[i]\n\n        # If account balance < 0, return True.\n        if balance < 0 :\n            return True\n\n    # Step 3. Return False.\n    return False\n"}
{"task_id": "Open/177", "completion": "    if a > b :\n        return a + b\n    else :\n        return b + a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
