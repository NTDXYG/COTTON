{"task_id": "Open/0", "completion": "\n    \n    sum = 0\n    count = 0\n    \n    for i in range ( len ( arr ) ) :\n        sum += arr[i]\n        \n    for i in range ( len ( arr ) ) :\n        if arr[i] > sum + K :\n            count += 1\n            \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/1", "completion": "\n    max_freq = 0\n    max_freq_index = 0\n    freq_dict = {}\n    for i in range(n) :\n        if arr[i] in freq_dict :\n            freq_dict[arr[i]] += 1\n        else :\n            freq_dict[arr[i]] = 1\n    for key in freq_dict :\n        if freq_dict[key] > max_freq :\n            max_freq = freq_dict[key]\n            max_freq_index = key\n    return max_freq_index\n\narr = [1,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"}
{"task_id": "Open/2", "completion": "\n    \n    if n == 0 :\n        return \"No\"\n    \n    if n == 1 :\n        return \"Yes\"\n    \n    if l == r :\n        return \"Yes\"\n    \n    if l == 0 and r == 1 :\n        return \"Yes\"\n    \n    if l == 0 and r == 0 :\n        return \"No\"\n    \n    if l == 1 and r == 1 :\n        return \"Yes\"\n    \n    if l == 1 and r == 0 :\n        return \"No\"\n    \n    if l == 0 and r == 0 :\n        return \"No\"\n    \n    if l == 0 and r == 1 :\n        return \"No\"\n    \n    if l == 1 and r == 1 :\n        return \"No\"\n    \n    if l == 1 and r == 0 :\n        return \"No\"\n    \n    if l == 0 and r == 0 :\n        return \"No\"\n    \n    if l == 0 and r == 1 :\n        return \"No\"\n    \n    if l == 1 and r == 1 :\n        return \"No\"\n    \n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n\nA = [1,2,3,4,5,6,7,8,9,10]\nn = len(A)\nK = 3"}
{"task_id": "Open/4", "completion": "\n    \n    if len(a) == 1 :\n        return True\n    \n    if sum(a) % 2!= 0 :\n        return False\n    \n    if sum(a) == 0 :\n        return True\n    \n    if sum(a) == 2 :\n        return True\n    \n    if sum(a) == 4 :\n        return True\n    \n    if sum(a) == 6 :\n        return True\n    \n    if sum(a) == 8 :\n        return True\n    \n    if sum(a) == 10 :\n        return True\n    \n    if sum(a) == 12 :\n        return True\n    \n    if sum(a) == 14 :\n        return True\n    \n    if sum(a) == 16 :\n        return True\n    \n    if sum(a) == 18 :\n        return True\n    \n    if sum(a) == 20 :\n        return True\n    \n    if sum(a) == 22 :\n        return True\n    \n    if sum(a) == 24 :\n        return True\n    \n    if sum(a) == 26 :\n        return"}
{"task_id": "Open/5", "completion": "\n    \n    # 1. Convert the integer to a binary string.\n    binary = bin(x)\n    \n    # 2. Remove the first two characters.\n    binary = binary[2:]\n    \n    # 3. Convert the binary string to a list.\n    binary = list(binary)\n    \n    # 4. Iterate through the list.\n    for i in range(len(binary)):\n        \n        # 5. If the current character is '1', then add 1 to the parity count.\n        if binary[i] == '1':\n            parity += 1\n        \n        # 6. Else, if the current character is '0', then subtract 1 from the parity count.\n        else:\n            parity -= 1\n    \n    # 7. If the parity count is 0, then the number has even parity.\n    if parity == 0:\n        return 1\n    \n    # 8. If the parity count is not 0, then the number has odd parity.\n    else:\n        return 0\n"}
{"task_id": "Open/6", "completion": "\n    \n    output = []\n    \n    for i in range(len(vec)):\n        if vec[i] < 0:\n            vec[i] = abs(vec[i]) - 1\n    \n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i + 1)\n    \n    return output\n"}
{"task_id": "Open/7", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 2\n    \n    if n == 3 :\n        return 3\n    \n    if n == 4 :\n        return 4\n    \n    if n == 5 :\n        return 5\n    \n    if n == 6 :\n        return 6\n    \n    if n == 7 :\n        return 7\n    \n    if n == 8 :\n        return 8\n    \n    if n == 9 :\n        return 9\n    \n    if n == 10 :\n        return 10\n    \n    if n == 11 :\n        return 11\n    \n    if n == 12 :\n        return 12\n    \n    if n == 13 :\n        return 13\n    \n    if n == 14 :\n        return 14\n    \n    if n == 15 :\n        return 15\n    \n    if n == 16 :\n        return 16\n    \n    if n == 17 :\n        return 17\n    \n    if n == 18 :\n        return 18\n    \n    if n == 19 :\n"}
{"task_id": "Open/8", "completion": "\n    factors = []\n    for i in a :\n        factors.append(Distinct_Prime_factors_helper(i))\n    return factors\n"}
{"task_id": "Open/9", "completion": "\n    arr.sort()\n    return min(arr[k] - arr[0], arr[k] - arr[k-1])\n"}
{"task_id": "Open/10", "completion": "\n    time = 0\n    while len(A)!= 0 and len(B)!= 0 :\n        if A[0] == B[0] :\n            A.popleft()\n            B.popleft()\n            time += 1\n        else :\n            B.append(B.popleft())\n            A.append(A.popleft())\n            time += 2\n    return time\n"}
{"task_id": "Open/11", "completion": "\n    \n    even_count = 0\n    for i in range ( size ) :\n        if array[i] % 2 == 0 :\n            even_count += 1\n    return even_count\n"}
{"task_id": "Open/12", "completion": "\n    \n    if k == 0 :\n        return 0\n    \n    if len(s) == 0 :\n        return 0\n    \n    count = 0\n    \n    for i in range(len(s)) :\n        \n        if len(s[i:]) < k :\n            return count\n        \n        count += find_sub( s[i+1:], k )\n        \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/13", "completion": "\n    \n    if n == 1 :\n        return True\n    \n    for i in range(2, n+1) :\n        if n % i == 0 :\n            return False\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    \n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "\n    a = random.randint(2,n-1)\n    for i in range(t) :\n        b = a**((n-1)/2) % n\n        if b == 1 or b == n-1 :\n            a = random.randint(2,n-1)\n        else :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "\n    for i in range(n):\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return ((x * (a + b) * (c - d)) / ((a * d) - (b * c)))\n"}
{"task_id": "Open/18", "completion": "\n    \n    count = 0\n    \n    for i in range(0, len(s), 2) :\n        if s[i] == '0' :\n            count += 1\n        elif s[i] == '1' :\n            count += 1\n    \n    return min(count, len(s) - count)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/19", "completion": "\n    powerNumbers = 0\n    for i in range(1, n + 1) :\n        powerNumbers += math.floor(math.log(n, i))\n    return powerNumbers\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return x\n    else :\n        return x + product(x, y - 1)\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        if i % 4 == 1 :\n            count1 += 1\n        if i % 4 == 2 :\n            count2 += 1\n        if i % 4 == 3 :\n            count3 += 1\n    if count0 == count1 and count1 == count2 and count2 == count3 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return 1\n    \n    if arr[0] > arr[1] :\n        return 1\n    \n    if arr[n-1] > arr[n-2] :\n        return n\n    \n    if arr[n-1] < arr[n-2] :\n        return lenOfLongIncSubArr( arr, n - 1 )\n    \n    if arr[n-1] > arr[n-2] :\n        return lenOfLongIncSubArr( arr, n - 1 )\n    \n    if arr[n-1] < arr[n-2] :\n        return lenOfLongIncSubArr( arr, n - 1 )\n    \n    if arr[n-1] > arr[n-2] :\n        return lenOfLongIncSubArr( arr, n - 1 )\n    \n    if arr[n-1] < arr[n-2] :\n        return lenOfLongIncSubArr( arr, n - 1 )\n    \n    if arr[n-"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    count = subsetSum( arr, n, i + 1, sum, count )\n    count = subsetSum( arr, n, i + 1, sum - arr[i], count )\n    return count\n"}
{"task_id": "Open/24", "completion": "\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return ( n * (n + 1) ) // 2\n"}
{"task_id": "Open/25", "completion": "\n    \n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum += i ** 2\n    \n    sum += 1\n    return sum\n"}
{"task_id": "Open/26", "completion": "\n    if n == 1 :\n        return 1\n    \n    max_sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            max_sum += i\n    \n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    return x <= y\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return (b-a)/a * 100\n"}
{"task_id": "Open/30", "completion": "\n    \n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum += i ** 2\n    return sum / n\n"}
{"task_id": "Open/31", "completion": "\n    \n    arr.sort()\n    return arr[k-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/32", "completion": "\n    chicks = 3**(n-1)\n    return chicks\n"}
{"task_id": "Open/33", "completion": "\n    \n    if n == 1 :\n        return 1\n    \n    return findTerm ( n - 1 ) * 2 + ( n - 1 ) - 1\n"}
{"task_id": "Open/34", "completion": "\n    \n    if len(a) == 0 :\n        return 0\n    \n    if len(a) == 1 :\n        if a[0] < k :\n            return 1\n        else :\n            return 0\n    \n    if a[0] < k :\n        return 0\n    \n    count = 0\n    \n    for i in range(1, len(a)):\n        if a[i] < k :\n            count += countSubArrayProductLessThanK(a[i+1:], k)\n        else :\n            count += countSubArrayProductLessThanK(a[i+1:], k) + 1\n    \n    return count\n"}
{"task_id": "Open/35", "completion": "\n    occurence = 0\n    for i in range ( 1, n + 1 ) :\n        if ( i % 10 == d ) :\n            occurence += 1\n    return occurence\n"}
{"task_id": "Open/36", "completion": "\n    \n    arr.sort()\n    \n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n    \n    return n+1\n"}
{"task_id": "Open/37", "completion": "\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 2\n    \n    return ways ( n - 1 ) + ways ( n - 2 )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/38", "completion": "\n    \n    area = l * b\n    \n    while l > 1 :\n        l = l - 1\n        b = b + 1\n        area = area + l * b\n    \n    return area\n"}
{"task_id": "Open/39", "completion": "\n    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "\n    \n    if len(arr) == 0 :\n        return -1\n    \n    max_consecutive = 0\n    current_consecutive = 0\n    \n    for i in range(0,n) :\n        if arr[i] == 1 :\n            current_consecutive = 0\n        else :\n            current_consecutive += 1\n        \n        if current_consecutive > max_consecutive :\n            max_consecutive = current_consecutive\n    \n    return max_consecutive\n\narr = [1,0,0,1,0,1]\nn = len(arr)"}
{"task_id": "Open/41", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return 1\n    \n    if arr[0] == 0 :\n        return 0\n    \n    if arr[0] == 1 :\n        return 1\n    \n    if arr[0] == 0 :\n        return 0\n    \n    if arr[0] == 1 :\n        return 1\n    \n    if arr[0] == 0 :\n        return 0\n    \n    if arr[0] == 1 :\n        return 1\n    \n    if arr[0] == 0 :\n        return 0\n    \n    if arr[0] == 1 :\n        return 1\n    \n    if arr[0] == 0 :\n        return 0\n    \n    if arr[0] == 1 :\n        return 1\n    \n    if arr[0] == 0 :\n        return 0\n    \n    if arr[0] == 1 :\n        return 1\n    \n    if arr[0] == 0 :\n        return 0\n    \n    if arr[0] == 1 :\n        return 1\n    \n    if arr["}
{"task_id": "Open/42", "completion": "\n    if n == 0 :\n        return 0\n    if k == 1 :\n        return min(a)\n    if k == 2 :\n        return max(a[0], a[-1])\n    else :\n        return max(a[0], a[-1])\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i,n) :\n            if array[i]*array[j] <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    \n    arr.sort()\n    \n    for i in range(1,n) :\n        arr[i] = abs(arr[i] - i)\n    \n    return sum(arr)\n"}
{"task_id": "Open/45", "completion": "\n    min_cost = arr[0]\n    for i in range(1,n):\n        if arr[i] < min_cost :\n            min_cost = arr[i]\n    return min_cost * (n-1)\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/46", "completion": "\n    \n    max_diff = 0\n    \n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            diff = array[i] - array[j]\n            if diff > max_diff :\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "\n    \n    if ( (a*x1 + b*y1) == (c*x2 + d*y2) ) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(a) :\n        if (i + (a ^ i)) == a :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max = 0\n    while L < R :\n        if L & R :\n            max = max | L\n        L = L + 1\n        R = R - 1\n    return max\n"}
{"task_id": "Open/50", "completion": "\n    smallest = a[0]\n    for i in range(1,n) :\n        if a[i] % smallest == 0 :\n            continue\n        else :\n            smallest = a[i]\n            break\n    if smallest == a[0] :\n        return -1\n    else :\n        return smallest\n"}
{"task_id": "Open/51", "completion": "\n    \n    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n    \n    "}
{"task_id": "Open/52", "completion": "\n    \n    xor = 0\n    for i in range(n) :\n        for j in range(n) :\n            xor ^= arr[i][j]\n    return xor\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(N+1):\n        if xorEqualsOrCount(i) == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    \n    if n == 1 :\n        return a[0] == k\n    \n    if n == 2 :\n        return a[0] + a[1] == k\n    \n    if n == 3 :\n        return a[0] + a[1] + a[2] == k\n    \n    if n == 4 :\n        return a[0] + a[1] + a[2] + a[3] == k\n    \n    if n == 5 :\n        return a[0] + a[1] + a[2] + a[3] + a[4] == k\n    \n    if n == 6 :\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] == k\n    \n    if n == 7 :\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] == k\n    \n    if n == 8 :\n        return a[0] + a[1] + a[2]"}
{"task_id": "Open/55", "completion": "\n    \n    return ( n & 1 ) == 1 and ( n & 2 ) == 0 and ( n & 4 ) == 0 and ( n & 8 ) == 0 and ( n & 16 ) == 0 and ( n & 32 ) == 0 and ( n & 64 ) == 0 and ( n & 128 ) == 0 and ( n & 256 ) == 0 and ( n & 512 ) == 0 and ( n & 1024 ) == 0 and ( n & 2048 ) == 0 and ( n & 4096 ) == 0 and ( n & 8192 ) == 0 and ( n & 16384 ) == 0 and ( n & 32768 ) == 0 and ( n & 65536 ) == 0 and ( n & 131072 ) == 0 and ( n & 262144 ) == 0 and ( n & 524288 ) == 0 and ( n & 1048576 ) == 0 and ( n & 2097152 ) == 0 and ( n & 4194304 ) == 0 and ( n & 8388608 ) == 0 and ( n & 16777216 ) == 0 and ( n & 33554432 ) == 0 and ( n & 67108864 ) == 0 and ( n & 134217728 ) == 0"}
{"task_id": "Open/56", "completion": "\n    \n    \n    if len(s) == 0 :\n        return 0\n    \n    if len(s) == 1 :\n        return 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = var1 + var2\n    for i in range(2,N) :\n        result = result + arr[i]\n        result = result / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "\n    \n    for i in range(index, len(arr)):\n        if ranges[i] == 0 :\n            arr[i] = arr[i] * reversals[i]\n        else :\n            arr[i] = arr[i] * reversals[i]\n            \n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    if n < 0 :\n        return False\n    \n    for i in range(1, int(n**0.5)+1) :\n        if n - i*i == 0 :\n            return True\n        \n    return False\n"}
{"task_id": "Open/61", "completion": "\n    \n    if len(a) > len(b):\n        return -1\n    \n    if len(a) == 0:\n        return 0\n    \n    if len(a) == 1:\n        if a == b:\n            return 1\n        else:\n            return -1\n    \n    if a[0] == b[0]:\n        return getCount(a[1:],b[1:])\n    else:\n        return getCount(a[1:],b)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/62", "completion": "\n    \n    newStr = \"\"\n    \n    for i in range(len-1, -1, -1) :\n        if str[i] > str[i+1] :\n            newStr += str[i] - 1\n            str = str[:i] + str[i+1:]\n        else :\n            newStr += str[i]\n    \n    return newStr\n"}
{"task_id": "Open/63", "completion": "\n    arr.sort()\n    min_value = math.log(arr[0])\n    for i in range(1,n) :\n        min_value = min(min_value,math.log(arr[i])*i)\n    return min_value\n"}
{"task_id": "Open/64", "completion": "\n    if len( s ) == 0 or s[-1] == '1' :\n        return \"-1\"\n    \n    max_len = 0\n    max_str = \"\"\n    \n    for i in range( len( s ) ) :\n        if s[i] == '1' :\n            continue\n        \n        if i == 0 :\n            max_len = 1\n            max_str = s[i]\n            continue\n        \n        if s[i-1] == '1' :\n            continue\n        \n        if s[i] == '1' :\n            max_len += 1\n            max_str += s[i]\n            continue\n        \n        if max_len < i :\n            max_len = i\n            max_str = s[i]\n            continue\n        \n        if max_len == i :\n            max_len = i\n            max_str = s[i]\n            continue\n    \n    return max_str\n"}
{"task_id": "Open/65", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if k == 0 :\n        return n\n    \n    if k > n :\n        return n\n    \n    if k == 1 :\n        return n - 1\n    \n    if k == 2 :\n        return n - 2\n    \n    if k == 3 :\n        return n - 3\n    \n    if k == 4 :\n        return n - 4\n    \n    if k == 5 :\n        return n - 5\n    \n    if k == 6 :\n        return n - 6\n    \n    if k == 7 :\n        return n - 7\n    \n    if k == 8 :\n        return n - 8\n    \n    if k == 9 :\n        return n - 9\n    \n    if k == 10 :\n        return n - 10\n    \n    if k == 11 :\n        return n - 11\n    \n    if k == 12 :\n        return n - 12\n    \n    if k == 13 :\n        return n - 13\n    \n    if k == 14 :\n        return n - 14\n    \n    if k == 15"}
{"task_id": "Open/66", "completion": "\n    arr.sort()\n    n = len(arr)\n    if n % 2 == 0 :\n        return (arr[n//2] + arr[n//2 - 1])/2\n    else :\n        return arr[n//2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/67", "completion": "\n    \n    pos = 0\n    neg = 0\n    zero = 0\n    \n    for i in a :\n        if i > 0 :\n            pos += 1\n        elif i < 0 :\n            neg += 1\n        elif i == 0 :\n            zero += 1\n    \n    if neg % 2 == 0 :\n        step = pos + zero\n    else :\n        step = pos + zero + 2\n    \n    return step\n\na = [1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    while n > 1 :\n        v.append(n % 5)\n        n = n // 5\n    v.append(n)\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    if n == 0 :\n        return False\n    while n > 0 :\n        if n & 1 == 0 :\n            return False\n        n = n >> 1\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    if x > n :\n        return x\n    else :\n        return n\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(n+1) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    \n    sum = 0\n    for i in range(1, n+1) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    max_value = arr[0]\n    max_count = 1\n    for i in range(1,n) :\n        if arr[i] == max_value :\n            max_count += 1\n        else :\n            max_value = arr[i]\n            max_count = 1\n        if max_count > n :\n            return max_value\n    return max_value\n"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if a[i] > a[j] :\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    \n    return n ^ (n >> 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/76", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    changes = 0\n    \n    for i in range(1,n) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            changes += 1\n            A[i] = 0\n            \n    return changes\n"}
{"task_id": "Open/77", "completion": "\n    \n    degree = (radian * 180) / 3.14\n    \n    return degree\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    \n    sum = a + (d * (n - 1))\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    if n == 0 :\n        return 1\n    if n == 1 :\n        return 1\n    if n == 2 :\n        return 2\n    if n == 3 :\n        return 2\n    if n == 4 :\n        return 4\n    if n == 5 :\n        return 4\n    if n == 6 :\n        return 8\n    if n == 7 :\n        return 8\n    if n == 8 :\n        return 16\n    if n == 9 :\n        return 16\n    if n == 10 :\n        return 32\n    if n == 11 :\n        return 32\n    if n == 12 :\n        return 64\n    if n == 13 :\n        return 64\n    if n == 14 :\n        return 128\n    if n == 15 :\n        return 128\n    if n == 16 :\n        return 256\n    if n == 17 :\n        return 256\n    if n == 18 :\n        return 512\n    if n == 19 :\n        return 512\n    if n == 20 :\n        return 1024\n    if n == 21 :\n        return 1024\n    if n == 22 :\n        return 2048\n    if n"}
{"task_id": "Open/81", "completion": "\n    \n    if row == 0 and column == 0 :\n        return 1\n    \n    if row == 0 and column == 8 :\n        return 1\n    \n    if row == 8 and column == 0 :\n        return 1\n    \n    if row == 8 and column == 8 :\n        return 1\n    \n    if row == 0 :\n        return Square ( row, column + 1, moves )\n    \n    if row == 8 :\n        return Square ( row, column - 1, moves )\n    \n    if column == 0 :\n        return Square ( row - 1, column, moves )\n    \n    if column == 8 :\n        return Square ( row + 1, column, moves )\n    \n    return Square ( row - 1, column, moves ) + Square ( row + 1, column, moves ) + Square ( row, column - 1, moves ) + Square ( row, column + 1, moves )\n"}
{"task_id": "Open/82", "completion": "\n    \n    if n == 1 :\n        return 1\n    \n    return n + findNumber(n-1)\n"}
{"task_id": "Open/83", "completion": "\n    \n    s = list(s)\n    \n    for i in range(len(s)):\n        if s[i] in s[i+1:]:\n            s[i], s[s[i]+1] = s[s[i]+1], s[i]\n    \n    return \"\".join(s)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/84", "completion": "\n    \n    arr = []\n    for i in range(n) :\n        if i % 2 == 0 :\n            arr.append(i)\n        else :\n            arr.append(i+1)\n    \n    sum = 0\n    for i in range(l-1, r) :\n        sum += arr[i]\n    \n    return sum\n"}
{"task_id": "Open/85", "completion": "\n    if x > y :\n        smaller = y\n    else :\n        smaller = x\n    for i in range(1, smaller+1) :\n        if (x % i == 0) and (y % i == 0) :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "\n    \n    if A == B :\n        return A\n    \n    if A > B :\n        return findNthNumber( A - B, B, N ) + findNthNumber( A, B - A, N )\n    \n    if A < B :\n        return findNthNumber( A, B - A, N ) + findNthNumber( A + B, B, N )\n    \n    if A == B :\n        return A\n    \n    return findNthNumber( A, B, N ) + findNthNumber( A + 1, B, N )\n"}
{"task_id": "Open/87", "completion": "\n    \n    return str.count( substr )\n"}
{"task_id": "Open/88", "completion": "\n    emi = p * r * (1 + r) ** t / ((1 + r) ** t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * k > j * j and B[j] * k > i * i and C[k] * k > i * i:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if (i % 10) % 2 == 0 :\n            count += 1\n        elif (i % 10) % 3 == 0 :\n            count += 1\n        elif (i % 10) % 9 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    \n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 2\n    \n    for i in range(2, n) :\n        for j in range(i) :\n            if arr[i] - arr[j] == arr[i] - arr[j] :\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"}
{"task_id": "Open/92", "completion": "\n    max_len = -1\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1].isalnum() :\n                if j-i+1 > max_len :\n                    max_len = j-i+1\n    return max_len\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n >= 1 :\n        if n % 2 == 0 :\n            n = n / 2\n        else :\n            n = n - 1\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/95", "completion": "\n    \n    maxDistance = 0\n    \n    while n > 0 :\n        fuel = fuel // n\n        maxDistance += fuel\n        n -= 1\n        \n    return maxDistance\n"}
{"task_id": "Open/96", "completion": "\n    if n == 1 :\n        return 0\n    \n    if arr[0] == 0 :\n        return 1\n    \n    if arr[n-1] == 0 :\n        return n-1\n    \n    if arr[0] + arr[1] == arr[n-1] :\n        return 0\n    \n    if arr[0] + arr[n-2] == arr[n-1] :\n        return n-2\n    \n    if arr[0] + arr[1] == arr[n-3] :\n        return 1\n    \n    if arr[0] + arr[n-2] == arr[n-3] :\n        return n-2\n    \n    if arr[0] + arr[1] == arr[n-4] :\n        return 1\n    \n    if arr[0] + arr[n-3] == arr[n-4] :\n        return n-3\n    \n    if arr[0] + arr[1] == arr[n-5] :\n        return 1\n    \n    if arr[0] + arr[n-4]"}
{"task_id": "Open/97", "completion": "\n    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "\n    count = 0\n    while n > 0 :\n        count += 1\n        n = math.floor(n / 10)\n    return count\n"}
{"task_id": "Open/99", "completion": "\n    \n    if a + b + c == k :\n        return True\n    \n    if a + b + c == k - 1 :\n        return True\n    \n    if a + b + c == k + 1 :\n        return True\n    \n    if a + b + c == k - 2 :\n        return True\n    \n    if a + b + c == k + 2 :\n        return True\n    \n    if a + b + c == k - 3 :\n        return True\n    \n    if a + b + c == k + 3 :\n        return True\n    \n    if a + b + c == k - 4 :\n        return True\n    \n    if a + b + c == k + 4 :\n        return True\n    \n    if a + b + c == k - 5 :\n        return True\n    \n    if a + b + c == k + 5 :\n        return True\n    \n    if a + b + c == k - 6 :\n        return True\n    \n    if a + b + c == k + 6 :\n        return True\n    \n    if a + b + c == k"}
{"task_id": "Open/100", "completion": "\n    if x == y :\n        return True\n    else :\n        while x!= y :\n            if x > y :\n                x = x - y\n            else :\n                y = y - x\n        return True if x == y else False\n"}
{"task_id": "Open/101", "completion": "\n    \n    count = 0\n    \n    for i in range(len(s) - 1) :\n        if s[i] == s[i + 1] :\n            count += 1\n        else :\n            count = 0\n        \n        if count > 1 :\n            return count\n    \n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return 0\n    \n    if n == 2 :\n        return 1\n    \n    if n == 3 :\n        return 2\n    \n    if n == 4 :\n        return 3\n    \n    if n == 5 :\n        return 4\n    \n    if n == 6 :\n        return 5\n    \n    if n == 7 :\n        return 6\n    \n    if n == 8 :\n        return 7\n    \n    if n == 9 :\n        return 8\n    \n    if n == 10 :\n        return 9\n    \n    if n == 11 :\n        return 10\n    \n    if n == 12 :\n        return 11\n    \n    if n == 13 :\n        return 12\n    \n    if n == 14 :\n        return 13\n    \n    if n == 15 :\n        return 14\n    \n    if n == 16 :\n        return 15\n    \n    if n == 17 :\n        return 16\n    \n    if n == 18 :\n        return 17\n    \n    if n == 19 :\n"}
{"task_id": "Open/104", "completion": "\n    \n    def countMaxSetBits_helper( left, right ) :\n        if left == 0 :\n            return 0\n        \n        if left % 2 == 0 :\n            return max( countMaxSetBits_helper( left // 2, right ), countMaxSetBits_helper( left // 2, right - left % 2 ) )\n        \n        return max( countMaxSetBits_helper( left // 2, right ), countMaxSetBits_helper( left // 2, right - left % 2 ) + 1 )\n    \n    return countMaxSetBits_helper( left, right )\n"}
{"task_id": "Open/105", "completion": "\n    if n == 0 :\n        return 1\n    if n == 1 :\n        return 2\n    if n == 2 :\n        return 4\n    if n == 3 :\n        return 8\n    if n == 4 :\n        return 16\n    if n == 5 :\n        return 32\n    if n == 6 :\n        return 64\n    if n == 7 :\n        return 128\n    if n == 8 :\n        return 256\n    if n == 9 :\n        return 512\n    if n == 10 :\n        return 1024\n    if n == 11 :\n        return 2048\n    if n == 12 :\n        return 4096\n    if n == 13 :\n        return 8192\n    if n == 14 :\n        return 16384\n    if n == 15 :\n        return 32768\n    if n == 16 :\n        return 65536\n    if n == 17 :\n        return 131072\n    if n == 18 :\n        return 262144\n    if n == 19 :\n        return 524288\n    if n == 20 :\n        return 1048576\n    if n == 21 :\n        return 2097152\n    "}
{"task_id": "Open/106", "completion": "\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/107", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    elif a == 0 :\n        return 0\n    elif a == 1 :\n        return 1\n    else :\n        return (a*(a+1))/2\n"}
{"task_id": "Open/109", "completion": "\n    count = 0\n    while n > 0 :\n        if n % 10 == d :\n            count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/110", "completion": "\n    \n    if n < 0 :\n        return False\n    \n    if n == 0 :\n        return False\n    \n    if n == 1 :\n        return True\n    \n    if n == 2 :\n        return True\n    \n    if n == 3 :\n        return True\n    \n    if n == 4 :\n        return True\n    \n    if n == 5 :\n        return True\n    \n    if n == 6 :\n        return True\n    \n    if n == 7 :\n        return True\n    \n    if n == 8 :\n        return True\n    \n    if n == 9 :\n        return True\n    \n    if n == 10 :\n        return True\n    \n    if n == 11 :\n        return True\n    \n    if n == 12 :\n        return True\n    \n    if n == 13 :\n        return True\n    \n    if n == 14 :\n        return True\n    \n    if n == 15 :\n        return True\n    \n    if n == 16 :\n        return True\n    \n    if n == 17 :\n        return True\n    \n    if n == 18 :\n"}
{"task_id": "Open/111", "completion": "\n    \n    for i in range(len(a)):\n        if a[i] % 5!= 0 or a[i] % 3!= 0 :\n            return False\n    return True\n"}
{"task_id": "Open/112", "completion": "\n    \n    arr = [0,4,7]\n    for i in range(3,n+1) :\n        if i%2 == 0 :\n            arr[i] = arr[i//2]*10 + 4\n        else :\n            arr[i] = arr[i//2]*10 + 7\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "\n    \n    arr = [0] * (n+1)\n    arr[0] = 3\n    arr[1] = 5\n    \n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            arr[i] = arr[i//2] * 10 + 3\n        else :\n            arr[i] = arr[i//2] * 10 + 5\n    \n    return arr[n]\n    "}
{"task_id": "Open/114", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    \n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10 + 1\n        else :\n            array[i] = array[i//2] * 10 + 2\n    \n    return array[n]\n    \n    "}
{"task_id": "Open/115", "completion": "\n    if (a[0] == 0) :\n        return True\n    \n    for i in range(1,len(a)):\n        if (a[i] % 11 == 0) :\n            return True\n        \n    return False\n"}
{"task_id": "Open/116", "completion": "\n    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "\n    new_string = \"\"\n    for word in string.split() :\n        new_string += word[0].upper() + word[1:] + \" \"\n    return new_string[:-1]\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil(math.sqrt(8 * p + 1) - 1) // 2\n"}
{"task_id": "Open/119", "completion": "\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/120", "completion": "\n    \n    count = 0\n    \n    for i in range(len(string) - 1) :\n        if string[i] == string[i + 1] :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/121", "completion": "\n    \n    if lower == higher :\n        return lower\n    \n    if lower > higher :\n        return mostCommon ( lower - 1, higher )\n    else :\n        return mostCommon ( lower, higher - 1 )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/122", "completion": "\n    \n    max = 0\n    for i in range(len(ss)):\n        if ss[i].isdigit():\n            max = max * 10 + int(ss[i])\n        else:\n            if max > max(extractMaximum(ss[:i]), extractMaximum(ss[i+1:])):\n                max = max(extractMaximum(ss[:i]), extractMaximum(ss[i+1:]))\n    return max\n"}
{"task_id": "Open/123", "completion": "\n    \n    if length == 0 :\n        return \"\"\n    \n    if length == 1 :\n        return s\n    \n    if s[0] == '-' :\n        return longestInteger(s[1:], length-1)\n    \n    if s[0] == '+' :\n        return longestInteger(s[1:], length-1)\n    \n    if s[0] == '0' :\n        return longestInteger(s[1:], length-1)\n    \n    if s[0] == '1' :\n        return longestInteger(s[1:], length-1)\n    \n    if s[0] == '2' :\n        return longestInteger(s[1:], length-1)\n    \n    if s[0] == '3' :\n        return longestInteger(s[1:], length-1)\n    \n    if s[0] == '4' :\n        return longestInteger(s[1:], length-1)\n    \n    if s[0] == '5' :\n        return longestInteger(s[1:], length-1)"}
{"task_id": "Open/124", "completion": "\n    if N > M :\n        N, M = M, N\n    if K > 0 :\n        if N > 0 :\n            N -= 1\n            K -= 1\n        elif M > 0 :\n            M -= 1\n            K -= 1\n        else :\n            return 0\n    return N * M\n"}
{"task_id": "Open/125", "completion": "\n    \n    for i in range(length) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 2\n    \n    if n == 3 :\n        return 4\n    \n    if n == 4 :\n        return 8\n    \n    if n == 5 :\n        return 16\n    \n    if n == 6 :\n        return 32\n    \n    if n == 7 :\n        return 64\n    \n    if n == 8 :\n        return 128\n    \n    if n == 9 :\n        return 256\n    \n    if n == 10 :\n        return 512\n    \n    if n == 11 :\n        return 1024\n    \n    if n == 12 :\n        return 2048\n    \n    if n == 13 :\n        return 4096\n    \n    if n == 14 :\n        return 8192\n    \n    if n == 15 :\n        return 16384\n    \n    if n == 16 :\n        return 32768\n    \n    if n == 17 :\n        return 65536\n    \n    if n == 18 :\n        return 131072\n    \n    if n"}
{"task_id": "Open/127", "completion": "\n    if len(str(A)) == len(str(B)) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/128", "completion": "\n    return x!= y and (x + y) % 2 == 0\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1, Sn_2, Sn_3 = 1, 1, 1\n    for i in range(3, n+1) :\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2 + Sn_3\n    return str(Sn_3)\n"}
{"task_id": "Open/130", "completion": "\n    steps = 0\n    for i in range(1,n) :\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 :\n        return 0\n    elif n % 4 == 3 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/132", "completion": "\n    m = (N * (N + 1)) // 2\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n    "}
{"task_id": "Open/134", "completion": "\n    if arr[0] % 2!= 0 and arr[-1] % 2!= 0 and n % 2!= 0 :\n        return True\n    else :\n        return False\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/135", "completion": "\n    if N == 1 :\n        return countSum(N,L,R)\n    elif N == 2 :\n        return countSum(N,L,R) + countSum(N-1,L,R)\n    else :\n        return countSum(N-2,L,R) + countSum(N-1,L,R)\n"}
{"task_id": "Open/136", "completion": "\n    arr.sort()\n    for i in range(n):\n        if arr[i] > 0:\n            return arr[i]\n    return 1\n"}
{"task_id": "Open/137", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return int(s)\n    \n    if n == 2 :\n        if s[0] == s[1] :\n            return int(s)\n        else :\n            return int(s[0])\n    \n    if n == 3 :\n        if s[0] == s[1] and s[1] == s[2] :\n            return int(s)\n        else :\n            return int(s[0])\n    \n    if n == 4 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] :\n            return int(s)\n        else :\n            return int(s[0])\n    \n    if n == 5 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] :\n            return int(s)\n        else :\n            return int(s[0])"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(n-1) :\n        if arr[i] > arr[i+1] :\n            count += arr[i] - arr[i+1]\n            arr[i+1] = arr[i]\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    \n    sum = 0\n    for i in s :\n        sum += ord(i)\n    return sum / len(s)\n"}
{"task_id": "Open/140", "completion": "\n    \n    if A == 1 and B == 1 and S == 1 and N == 1 :\n        return 1\n    \n    if A == 1 and B == 1 and S == 1 and N == 2 :\n        return 2\n    \n    if A == 1 and B == 1 and S == 1 and N == 3 :\n        return 3\n    \n    if A == 1 and B == 1 and S == 1 and N == 4 :\n        return 4\n    \n    if A == 1 and B == 1 and S == 1 and N == 5 :\n        return 5\n    \n    if A == 1 and B == 1 and S == 1 and N == 6 :\n        return 6\n    \n    if A == 1 and B == 1 and S == 1 and N == 7 :\n        return 7\n    \n    if A == 1 and B == 1 and S == 1 and N == 8 :\n        return 8\n    \n    if A == 1 and B == 1 and S == 1 and N == 9 :\n        return 9\n    \n    if A == 1 and B == 1 and S == 1 and N == 10 :\n        return 10\n    \n    if A =="}
{"task_id": "Open/141", "completion": "\n    if x > y :\n        smaller = y\n    else :\n        smaller = x\n    \n    for i in range(1, smaller+1) :\n        if (x % i == 0) and (y % i == 0) :\n            lcm = i\n    return lcm\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n > 0 :\n        n = n >> 1\n        count += n\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    \n    max_sum = 0\n    \n    for i in range(n) :\n        \n        left_sum = 0\n        right_sum = 0\n        \n        for j in range(i) :\n            left_sum += arr[j]\n        \n        for j in range(i+1, n) :\n            right_sum += arr[j]\n        \n        max_sum = max(max_sum, left_sum ^ right_sum)\n    \n    return max_sum\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\n"}
{"task_id": "Open/144", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if arr[n-1] > arr[n-2] :\n        return 1 + lds ( arr, n-1 )\n    \n    return max ( lds ( arr, n-1 ), lds ( arr, n-2 ) )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/145", "completion": "\n    if k > arr[0] :\n        return -1\n    elif k < 0 :\n        return -1\n    else :\n        arr.sort()\n        for i in range(n-1) :\n            if arr[i] + k!= arr[i+1] :\n                return -1\n        return arr[0] + k\n"}
{"task_id": "Open/146", "completion": "\n    \n    if K == 1 :\n        return -1\n    \n    if K == 2 :\n        return 1\n    \n    if K == 3 :\n        return 2\n    \n    if K == 4 :\n        return 3\n    \n    if K == 5 :\n        return 4\n    \n    if K == 6 :\n        return 5\n    \n    if K == 7 :\n        return 6\n    \n    if K == 8 :\n        return 7\n    \n    if K == 9 :\n        return 8\n    \n    if K == 10 :\n        return 9\n    \n    if K == 11 :\n        return 10\n    \n    if K == 12 :\n        return 11\n    \n    if K == 13 :\n        return 12\n    \n    if K == 14 :\n        return 13\n    \n    if K == 15 :\n        return 14\n    \n    if K == 16 :\n        return 15\n    \n    if K == 17 :\n        return 16\n    \n    if K == 18 :\n        return 17\n    \n    if K == 19 :\n        return 18\n    \n    if K == 20 :"}
{"task_id": "Open/147", "completion": "\n    \n    if n == 1 :\n        return 0\n    \n    if n == 2 :\n        return 1\n    \n    if n == 3 :\n        return 2\n    \n    if n == 4 :\n        return 3\n    \n    if n == 5 :\n        return 4\n    \n    if n == 6 :\n        return 5\n    \n    if n == 7 :\n        return 6\n    \n    if n == 8 :\n        return 7\n    \n    if n == 9 :\n        return 8\n    \n    if n == 10 :\n        return 9\n    \n    if n == 11 :\n        return 10\n    \n    if n == 12 :\n        return 11\n    \n    if n == 13 :\n        return 12\n    \n    if n == 14 :\n        return 13\n    \n    if n == 15 :\n        return 14\n    \n    if n == 16 :\n        return 15\n    \n    if n == 17 :\n        return 16\n    \n    if n == 18 :\n        return 17\n    \n    if n == 19 :\n        return 18\n    \n    if n == 20 :\n"}
{"task_id": "Open/148", "completion": "\n    \n    if n == 1 :\n        return 3\n    else :\n        return 3 + calSum(n-1)\n"}
{"task_id": "Open/149", "completion": "\n    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/152", "completion": "\n    \n    binary_representation = str(bin(n))\n    \n    if binary_representation.count('1') == 1 :\n        return False\n    else :\n        return True\n    \n    "}
{"task_id": "Open/153", "completion": "\n    vowels = ['a','e','i','o','u']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == 0:\n                if s[i] > s[i+1]:\n                    return False\n            elif s[i] < s[i-1]:\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low,high+1) :\n        if i%10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    if n == 2 :\n        return 1\n    if n == 3 :\n        return 1\n    if n == 4 :\n        return 2\n    if n == 5 :\n        return 2\n    if n == 6 :\n        return 2\n    if n == 7 :\n        return 3\n    if n == 8 :\n        return 3\n    if n == 9 :\n        return 4\n    if n == 10 :\n        return 4\n    if n == 11 :\n        return 5\n    if n == 12 :\n        return 5\n    if n == 13 :\n        return 6\n    if n == 14 :\n        return 6\n    if n == 15 :\n        return 7\n    if n == 16 :\n        return 7\n    if n == 17 :\n        return 8\n    if n == 18 :\n        return 8\n    if n == 19 :\n        return 9\n    if n == 20 :\n        return 9\n    if n == 21 :\n        return 10\n    if n == 22 :\n        return 10\n    if n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else :\n        return ( 1/3 ) * r**2\n"}
{"task_id": "Open/157", "completion": "\n    newString = \"\"\n    for i in sorted(s) :\n        newString += i\n    return newString\n"}
{"task_id": "Open/158", "completion": "\n    \n    if size == 0 :\n        return None\n    \n    if size == 1 :\n        return ar[0]\n    \n    if ar[0] > ar[size - 1] :\n        return ar[0]\n    \n    if ar[0] < ar[size - 1] :\n        return ar[size - 1]\n    \n    if ar[0] == ar[size - 1] :\n        return ar[0]\n    \n    left = 0\n    right = size - 1\n    \n    while left <= right :\n        mid = (left + right) // 2\n        if ar[mid] == ar[mid - 1] :\n            left = mid + 1\n        elif ar[mid] > ar[mid - 1] :\n            left = mid + 1\n        else :\n            right = mid - 1\n    \n    return ar[left]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    \n    for i in range(n):\n        if arr[i] % 2 == 0 :\n            return arr[i]\n    return -1\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nn = len(arr)"}
{"task_id": "Open/161", "completion": "\n    ans = 0\n    xorArr = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    \n    for i in range(n):\n        ans = ans ^ arr[i]\n        if ans & xorArr == 0 :\n            print(ans)\n            return ans\n        else:\n            ans = ans ^ arr[i]\n            \n    return ans\n\narr = [3,5,7,9]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    if sx == dx and sy == dy :\n        return True\n    if sx == dx or sy == dy :\n        return False\n    if abs(sx-dx) == abs(sy-dy) :\n        return True\n    return False\n"}
{"task_id": "Open/163", "completion": "\n    if n % 2 == 0 :\n        return cntWays( n // 2 ) + cntWays( n // 2 )\n    else :\n        return 0\n"}
{"task_id": "Open/164", "completion": "\n    count = {}\n    for i in arr :\n        if i in count :\n            count[i] += 1\n        else :\n            count[i] = 1\n    \n    count_arr = []\n    for i in arr :\n        count_arr.append(count[i])\n    \n    count_arr.sort()\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr\n    \n    count_arr = [0] + count_arr"}
{"task_id": "Open/165", "completion": "\n    return AVLnodes( height )\n"}
{"task_id": "Open/166", "completion": "\n    if source == dest :\n        return 0\n    if source > dest :\n        return sys.maxsize\n    if step > 0 :\n        return steps( source + step, step, dest ) + 1\n    if step < 0 :\n        return steps( source - step, step, dest ) + 1\n    if step == 0 :\n        return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "\n    \n    nth_term = \"1\"\n    \n    for i in range(1, n) :\n        count = 0\n        nth_term = \"\"\n        for j in range(len(nth_term)) :\n            if nth_term[j] == \"1\" :\n                count += 1\n            else :\n                nth_term += str(count) + \"1\"\n                count = 0\n    return nth_term\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/168", "completion": "\n    \n    max_len = 0\n    for i in range(N) :\n        if arr[i] < 0 :\n            continue\n        elif arr[i] > 0 :\n            max_len = max(max_len, 1)\n        else :\n            max_len = max(max_len, 2)\n            \n    return max_len\n"}
{"task_id": "Open/169", "completion": "\n    return math.sqrt( ( m * m ) + ( n * n ) )\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i,n) :\n            if arr[i] + arr[j] < k :\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "\n    \n    arr.sort()\n    \n    count = 0\n    \n    for i in range(len(arr)-2) :\n        \n        if arr[i] > L :\n            break\n        \n        for j in range(i+1,len(arr)-1) :\n            \n            if arr[j] > L :\n                break\n            \n            for k in range(j+1,len(arr)) :\n                \n                if arr[k] - arr[i] <= L :\n                    count += 1\n    \n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if (i % 2 == 0) and (i % 3 == 0) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    \n    return n & ~(1 << m)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/174", "completion": "\n    count = 0\n    for i in range(L, R + 1):\n        if (i % 9 == 0) or (i % 9 == K):\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    \n    if k > math.log10(n) :\n        return 0\n    \n    if k == 0 :\n        return 1\n    \n    if k == 1 :\n        return n\n    \n    if k == 2 :\n        return n * math.log10(n)\n    \n    if k == 3 :\n        return n * math.log10(n) + n\n    \n    if k == 4 :\n        return n * math.log10(n) + n + 1\n    \n    if k == 5 :\n        return n * math.log10(n) + n + 2\n    \n    if k == 6 :\n        return n * math.log10(n) + n + 3\n    \n    if k == 7 :\n        return n * math.log10(n) + n + 4\n    \n    if k == 8 :\n        return n * math.log10(n) + n + 5\n    \n    if k == 9 :\n        return n * math.log10(n) + n + 6\n    \n    if k == 10 :\n        return n * math.log10"}
{"task_id": "Open/176", "completion": "\n    \n    if n == 0 :\n        return -1\n    \n    if A[0] > A[1] :\n        return A[0]\n    \n    if A[n-1] > A[n-2] :\n        return A[n-1]\n    \n    for i in range(1,n-1) :\n        if A[i] > A[i-1] and A[i] > A[i+1] :\n            return A[i]\n    \n    return -1\n\nA = [1,2,3,4,5,6,7,8,9,10]\nn = len(A)"}
{"task_id": "Open/177", "completion": "\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    \n    if a[0] + b[0] > c[0] :\n        return c[0] - a[0]\n    if a[0] + b[0] < c[0] :\n        return c[0] - a[0]\n    if a[0] + b[0] == c[0] :\n        return c[0] - a[0]\n    if a[0] + b[0] < c[0] :\n        return c[0] - a[0]\n    if a[0] + b[0] > c[0] :\n        return c[0] - a[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
