{"task_id": "Open/0", "completion": "    sum = 0\n    count = 0\n    for i in range(N) :\n        sum += arr[i]\n        if sum > K :\n            count += 1\n            sum = arr[i]\n    return count\n\narr = [1, 2, 3, 4, 5]\nN = len(arr)\nK = 10"}
{"task_id": "Open/1", "completion": "    min_val = arr[0]\n    freq = 1\n    for i in range(1,n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n            freq = 1\n        elif arr[i] == min_val :\n            freq += 1\n    return freq\n"}
{"task_id": "Open/2", "completion": "    # Your code here\n    return \"Yes\" if ( ( 1 << ( r - l + 1 ) - 1 ) & n ) == ( 1 << ( r - l + 1 ) - 1 ) else \"No\""}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A [ i ] + A [ j ] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    pass\n"}
{"task_id": "Open/5", "completion": "    # Write your code here.\n    return 0\n"}
{"task_id": "Open/6", "completion": "    vec_modified = []\n    for i in vec :\n        vec_modified.append( -i )\n    vec_modified.sort()\n    vec_output = []\n    for i in vec_modified :\n        vec_output.append( i + 1 )\n    return vec_output\n\nvec = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]"}
{"task_id": "Open/7", "completion": "    # Write your code here.\n    return 0\n"}
{"task_id": "Open/8", "completion": "    # Create a dictionary to store the number of distinct prime factors for each integer in the list.\n    # Initialize the dictionary with 0 for each integer in the list.\n    # Iterate through the list of integers.\n    # For each integer, find the prime factors of the integer.\n    # Add the number of distinct prime factors for the integer to the dictionary.\n    # Return the dictionary.\n"}
{"task_id": "Open/9", "completion": "    arr.sort()\n    return min( arr[k-1] - arr[0], sum( arr[k-1] - arr[i] for i in range( 1, k ) ) )\n"}
{"task_id": "Open/10", "completion": "    total = 0\n    while A :\n        if A[0] == B[0] :\n            total += 1\n            A.popleft()\n            B.pop()\n        else :\n            B.appendleft(A[0])\n            A.pop()\n            total += 2\n    return total\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range ( 0, size ) :\n        if array [ i ] % 2 == 0 and array [ i ]!= 0 and array [ i ]!= 2 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    return len(set(s)) <= k\n"}
{"task_id": "Open/13", "completion": "    if n == 1 :\n        return True\n    elif n % 2 == 0 :\n        return Survives ( n // 2 )\n    elif n % 3 == 0 :\n        return Survives ( n // 3 )\n    elif n % 5 == 0 :\n        return Survives ( n // 5 )\n    else :\n        return False\n"}
{"task_id": "Open/14", "completion": "    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    for i in range(t):\n        if (pow(a,(n-1)//2,n) == 1 or pow(a,(n-1)//2,n) == n-1):\n            a = random.randint(2,n-1)\n        else:\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "    for i in range(n) :\n        if s1[i] == '0' and s2[i] == '1' :\n            return True\n        elif s1[i] == '1' and s2[i] == '0' :\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range( length ) :\n        if s[i] == '1' :\n            count += 1\n        else :\n            count -= 1\n    return min( count, length - count )\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1,n+1):\n        if math.log(i,2) == math.ceil(math.log(i,2)):\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    else :\n        return x + product( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n):\n        if a[i]%4 == 0:\n            count0 += 1\n        elif a[i]%4 == 1:\n            count1 += 1\n        elif a[i]%4 == 2:\n            count2 += 1\n        elif a[i]%4 == 3:\n            count3 += 1\n    if count0%2 == 0 and count1%2 == 0 and count2%2 == 0 and count3%2 == 0:\n        return 1\n    else:\n        return 2\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(a)"}
{"task_id": "Open/22", "completion": "    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        # find the longest increasing subarray in the first n-2 elements\n        lenOfLongIncSubArr_n_2 = lenOfLongIncSubArr ( arr, n - 2 )\n        \n        # find the longest increasing subarray in the first n-1 elements\n        lenOfLongIncSubArr_n_1 = lenOfLongIncSubArr ( arr, n - 1 )\n        \n        # find the longest increasing subarray in the first n elements\n        lenOfLongIncSubArr_n = 1\n        for i in range ( 0, n - 1 ) :\n            if arr [ i ] < arr [ i + 1 ] :\n                lenOfLongIncSubArr_n += 1\n        \n        # return the maximum of the above three\n        return max ( lenOfLongIncSubArr_n_2, lenOfLongIncSubArr_n_1, lenOfLongIncSubArr_n )\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    return subsetSum( arr, n, i + 1, sum - arr[i], count ) + subsetSum( arr, n, i + 1, sum, count )\n\narr = [ 3, 34, 4, 12, 5, 2 ]\nn = len( arr )\nsum = 9\ncount = 0"}
{"task_id": "Open/24", "completion": "    pass\n"}
{"task_id": "Open/25", "completion": "    return n * ( n + 1 ) * ( 2 * n + 1 ) / 6\n"}
{"task_id": "Open/26", "completion": "    # 1. Find the maximum sum of all the factors of n.\n    # 2. Find the LCM of all the factors of n.\n    # 3. Return the maximum sum of all the factors of n.\n    pass\n"}
{"task_id": "Open/27", "completion": "    return x <= y\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return ( ( b - a ) / a ) * 100\n"}
{"task_id": "Open/30", "completion": "    return sum( [ x**2 for x in range(1,n+1) ] ) / n\n"}
{"task_id": "Open/31", "completion": "    # 1. Sort the array\n    arr.sort()\n    \n    # 2. Return the kth element\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "    return n * 2 + (n - 1)\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in range ( len ( a ) ) :\n        prod = 1\n        for j in range ( i, len ( a ) ) :\n            prod *= a [ j ]\n            if prod < k :\n                count += 1\n            else :\n                break\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1) :\n        if d in str(i) :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    for i in range(n) :\n        while arr[i] > 0 and arr[i] <= n and arr[arr[i] - 1]!= arr[i] :\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n) :\n        if arr[i]!= i + 1 :\n            return i + 1\n    return n + 1\n"}
{"task_id": "Open/37", "completion": "    if n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    else :\n        return ways( n - 1 ) + ways( n - 2 )\n"}
{"task_id": "Open/38", "completion": "    pass\n"}
{"task_id": "Open/39", "completion": "    sum = 0\n    for i in range(1,N+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/40", "completion": "    # Write your code here.\n"}
{"task_id": "Open/41", "completion": "    # Initialize the result\n    result = 0\n    \n    # Initialize the left and right pointers\n    left = 0\n    right = 0\n    \n    # Iterate through the array\n    while right < n :\n        # If the element at the right pointer is zero\n        if arr[right] == 0 :\n            # Update the result\n            result = max( result, right - left + 1 )\n            \n            # Move the left pointer to the right\n            left = right + 1\n        # Move the right pointer to the right\n        right += 1\n    \n    # Return the result\n    return result\n"}
{"task_id": "Open/42", "completion": "    pass"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range ( n ) :\n        count += ( n - i ) * ( n - i + 1 ) // 2\n        for j in range ( i + 1, n ) :\n            if array [ i ] * array [ j ] <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    arr.sort()\n    return sum(abs(i-j) for i,j in zip(arr,range(1,n+1)))\n"}
{"task_id": "Open/45", "completion": "    min_ele = min(arr)\n    return min_ele * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    array.sort()\n    return array[-1] - array[0]\n"}
{"task_id": "Open/47", "completion": "    # 1. Calculate the slope of the line.\n    slope = (y2 - y1) / (x2 - x1)\n    \n    # 2. Calculate the y-intercept of the line.\n    yIntercept = y1 - slope * x1\n    \n    # 3. Check if the point is on the same side of the line.\n    return (slope * x + yIntercept) >= 0\n"}
{"task_id": "Open/48", "completion": "    return 0\n"}
{"task_id": "Open/49", "completion": "    pass\n"}
{"task_id": "Open/50", "completion": "    smallest = a[0]\n    for i in range(1,n) :\n        if a[i] % smallest == 0 :\n            smallest = a[i]\n        else :\n            return -1\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(n):\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    return 0\n"}
{"task_id": "Open/53", "completion": "    pass\n"}
{"task_id": "Open/54", "completion": "    return sum(a) + n - 1 == k\n"}
{"task_id": "Open/55", "completion": "    return ( n & 1 ) == 1 and ( n & ( n - 1 ) ) == 0\n"}
{"task_id": "Open/56", "completion": "    pass\n"}
{"task_id": "Open/57", "completion": "    return N - ( N % K )\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = result + var1 + var2 + (var1*var2)/100\n    for i in range(2,N):\n        result = result + arr[i] + (result*arr[i])/100\n    return result\n"}
{"task_id": "Open/59", "completion": "    # 1. Get the range\n    range = ranges[ index ]\n    # 2. Get the start and end of the range\n    start = range[ 0 ]\n    end = range[ 1 ]\n    # 3. Get the array length\n    length = len( arr )\n    # 4. Perform the reversals\n    for i in range( reversals ) :\n        # 4.1 Swap the elements\n        arr[ start ], arr[ end ] = arr[ end ], arr[ start ]\n        # 4.2 Increment the start and end\n        start += 1\n        end -= 1\n    # 5. Return the value at the index\n    return arr[ index ]\n"}
{"task_id": "Open/60", "completion": "    for i in range( int( n ** 0.5 ) + 1 ) :\n        if i ** 2 + ( n - i ** 2 ) ** 2 == n :\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    if len(b) == 0 :\n        return 0\n    elif len(b) == 1 :\n        return 1 if b == a else -1\n    else :\n        return getCount(a, b[1:]) + getCount(a, b[:-1])\n"}
{"task_id": "Open/62", "completion": "    str = list(str)\n    for i in range(len-1,-1,-1):\n        if str[i] > str[i+1]:\n            str[i] -= 1\n            str[i+1:] = [9] * len(str[i+1:])\n    return ''.join(str)\n"}
{"task_id": "Open/63", "completion": "    # Write your code here.\n"}
{"task_id": "Open/64", "completion": "    # Your code here\n    return -1\n"}
{"task_id": "Open/65", "completion": "    # 1. Sort the array\n    a.sort()\n    \n    # 2. Count the number of elements in the array\n    count = [0] * ( a[ -1 ] + 1 )\n    for i in range( n ) :\n        count[ a[ i ] ] += 1\n    \n    # 3. Remove the elements from the array\n    i = 0\n    for j in range( len( count ) ) :\n        while count[ j ] > k :\n            count[ a[ i ] ] -= 1\n            i += 1\n        if count[ j ] > 0 :\n            a[ i ] = j\n            i += 1\n    \n    # 4. Return the length of the array\n    return i\n"}
{"task_id": "Open/66", "completion": "    arr.sort()\n    if len(arr) % 2 == 0 :\n        return ( arr[len(arr)//2] + arr[len(arr)//2 - 1] ) / 2\n    else :\n        return arr[len(arr)//2]\n"}
{"task_id": "Open/67", "completion": "    # initialize step count\n    step = 0\n    # initialize number of negative elements\n    neg = 0\n    # initialize number of positive elements\n    pos = 0\n    # initialize number of zero elements\n    zero = 0\n    # iterate through the array\n    for i in range( n ) :\n        # check if the element is negative\n        if a[ i ] < 0 :\n            # increment number of negative elements\n            neg += 1\n            # add absolute difference between element and -1 to the step count\n            step += abs( a[ i ] - 1 )\n        # check if the element is positive\n        elif a[ i ] > 0 :\n            # increment number of positive elements\n            pos += 1\n            # add absolute difference between element and 1 to the step count\n            step += abs( a[ i ] - -1 )\n        # check if the element is zero\n        else :\n            # increment number of zero elements\n            zero += 1\n            # check if number of negative elements is even\n            if neg % 2 == 0 :\n                # add number of zero elements to the step count\n                step += zero\n            # check if number of negative elements is odd\n            else :\n                # check if there are any zero elements\n               "}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    else :\n        v = []\n        n -= 1\n        while n > 0 :\n            v.append( n % 5 )\n            n = n // 5\n        result = 0\n        for i in reversed( v ) :\n            result = result * 10 + i\n        return 2 * result\n"}
{"task_id": "Open/69", "completion": "    if n == 0 :\n        return True\n    elif n == 1 :\n        return True\n    else :\n        return ( n & ( n - 1 ) ) == 0\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        return n * (x // n + 1)\n"}
{"task_id": "Open/71", "completion": "    return n * ( n + 1 ) / 2\n"}
{"task_id": "Open/72", "completion": "    return 0\n"}
{"task_id": "Open/73", "completion": "    max_count = 0\n    max_val = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[i] == arr[j]:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_val = arr[i]\n    return max_val\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range( n ) :\n        for j in range( i + 1, n ) :\n            if ( a[ i ] & a[ j ] ) == a[ i ] :\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    pass\n"}
{"task_id": "Open/76", "completion": "    pass\n"}
{"task_id": "Open/77", "completion": "    degree = radian * 180 / math.pi\n    return degree\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "    return ( a + ( n - 1 ) * d )\n"}
{"task_id": "Open/80", "completion": "    return 1 if n % 2 == 0 else 2 ** (n // 2)\n"}
{"task_id": "Open/81", "completion": "    return moves\n"}
{"task_id": "Open/82", "completion": "    return n + (n-1)\n"}
{"task_id": "Open/83", "completion": "    last_occurrences = []\n    for char in s :\n        last_occurrences.append( s.rfind( char ) )\n    last_occurrences.sort()\n    for i in range( len( s ) ) :\n        if s[ i ]!= s[ last_occurrences[ i ] ] :\n            return swap( s, i, last_occurrences[ i ] )\n    return s\n"}
{"task_id": "Open/84", "completion": "    # create an array of length n\n    arr = [0] * n\n    # fill the array with consecutive odd numbers\n    for i in range(n) :\n        arr[i] = i * 2 + 1\n    # fill the array with consecutive even numbers\n    for i in range(n) :\n        arr[i + n] = i * 2 + 2\n    # calculate the sum of the elements in the array from index l-1 to index r\n    return sum(arr[l-1:r])\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        x, y = y, x\n    for i in range ( x // 2, 1, -1 ) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    if N == 1 :\n        return A\n    elif N == 2 :\n        return B\n    else :\n        return findNthNumber ( B, A + B, N - 1 )\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    r = r/1200\n    t = t*12\n    EMI = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return EMI\n\nemi_calculator(10000, 10, 10)\n"}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range ( 1, A + 1 ) :\n        for j in range ( 1, B + 1 ) :\n            for k in range ( 1, C + 1 ) :\n                if i * k > j * j :\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1):\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9:\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    # Write your code here.\n"}
{"task_id": "Open/92", "completion": "    maxLen = 0\n    start = 0\n    for i in range(len(str)) :\n        if str[i].isalnum() :\n            if i - start + 1 > maxLen and i - start + 1 % 2 == 0 :\n                maxLen = i - start + 1\n                start = i\n    if maxLen == 0 :\n        return \"-1\"\n    else :\n        return str[start : start + maxLen]\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        count += 1\n        n = n // 2\n    return count\n"}
{"task_id": "Open/94", "completion": "    s = 'a'*n\n    k = k % 26\n    for i in range(n-1,-1,-1):\n        if k >= 0:\n            if k >= 26:\n                s[i] = 'z'\n                k -= 26\n            else:\n                s[i] = chr(ord(s[i]) + k - 97)\n                k -= ord(s[i]) - ord('a') + 1\n        if k < 0:\n            break\n        k += i\n    return s\n"}
{"task_id": "Open/95", "completion": "    total_distance = 0\n    while n > 0 :\n        total_distance += fuel / n\n        n -= 1\n    return total_distance\n"}
{"task_id": "Open/96", "completion": "    sum_arr = sum(arr)\n    if sum_arr % 3 == 0 :\n        sum_1 = 0\n        sum_2 = sum_arr\n        for i in range(n) :\n            sum_1 += arr[i]\n            sum_2 -= arr[i]\n            if sum_1 == sum_2 :\n                return 1\n    return 0\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    return math.floor( math.log10( n ) + 1 )\n"}
{"task_id": "Open/99", "completion": "    return ( a + k == b + k == c + k ) or ( a - k == b - k == c - k )\n"}
{"task_id": "Open/100", "completion": "    return x == ( x << 32 | x >> 1 ) & y\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range( len( s ) ) :\n        if s[ i ]!= s[ i + 1 ] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)) :\n        if string[i] == '0' :\n            i += 1\n        else :\n            i += 2\n        count += 1\n    return count\n"}
{"task_id": "Open/103", "completion": "    # Find the minimum element in the array\n    min_element = min( arr )\n    \n    # Initialize the minimum difference\n    min_diff = abs( arr[ 0 ] - arr[ 1 ] )\n    \n    # Iterate over the array\n    for i in range( 1, n ) :\n        # Find the absolute difference between the current element and the next element\n        diff = abs( arr[ i ] - arr[ i + 1 ] )\n        \n        # If the absolute difference is less than the minimum difference, update the minimum difference\n        if diff < min_diff :\n            min_diff = diff\n    \n    # Return the minimum difference\n    return min_diff\n"}
{"task_id": "Open/104", "completion": "    pass\n"}
{"task_id": "Open/105", "completion": "    if n == 0 :\n        return 1\n    else :\n        return 2 * setBitNumber( n // 2 )\n"}
{"task_id": "Open/106", "completion": "    return sum( [ i for i in range( 1, n ) if n % i == 0 ] ) == n\n"}
{"task_id": "Open/107", "completion": "    # 1. Divide the year by 100 and 400 to determine the number of centuries and leap centuries respectively.\n    # 2. Shift the year by 2 bits to get the number of leap years.\n    # 3. Subtract the number of leap years from the total number of days in the year to get the number of non-leap years.\n    # 4. If there are any centuries or leap centuries, adjust the number of non-leap years and leap years accordingly.\n    # 5. Calculate the total number of days by adding the number of non-leap years and twice the number of leap years.\n    # 6. Take the modulus of the total number of days divided by 7 to get the number of odd days.\n    # 7. Return the number of odd days.\n    return ( ( ( N // 100 ) + ( N // 400 ) ) - ( N % 2 ) ) % 7\n"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return ( 3 * a * ( a + 1 ) ) / 2\n"}
{"task_id": "Open/109", "completion": "    return n//10**d%10\n"}
{"task_id": "Open/110", "completion": "    pass\n"}
{"task_id": "Open/111", "completion": "    if n % 5 == 0 and n % 3 == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/112", "completion": "    arr = [0] * (n+1)\n    arr[0] = 4\n    arr[1] = 7\n    for i in range(2, n+1) :\n        if i % 2 == 1 :\n            arr[i] = (i//2) * 10 + 4\n        else :\n            arr[i] = ((i//2)-1) * 10 + 7\n    print(arr[n])\n"}
{"task_id": "Open/113", "completion": "    arr = [0] * (n+1)\n    arr[0] = 3\n    arr[1] = 5\n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            arr[i] = arr[i//2-1] * 10 + 5\n        else :\n            arr[i] = arr[i//2] * 10 + 3\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "    pass\n"}
{"task_id": "Open/115", "completion": "    if n == 0 :\n        return True\n    elif n == 1 :\n        return a[0] % 11 == 0\n    elif n == 2 :\n        return a[0] % 11 == 0 and a[1] % 11 == 0\n    else :\n        return a[0] % 11 == 0 and isPossibleToZero( a[1:n], n - 1 )\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return l * b\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    pass"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt( 8 * p + 1 ) / 2 ) - 1\n"}
{"task_id": "Open/119", "completion": "    return len(set(arr)) == len(arr)\n"}
{"task_id": "Open/120", "completion": "    pass\n"}
{"task_id": "Open/121", "completion": "    return 2\n"}
{"task_id": "Open/122", "completion": "    max_num = 0\n    for char in ss :\n        if char.isdigit() :\n            max_num = max_num * 10 + int(char)\n        else :\n            max_num = max(max_num, int(char))\n    return max_num\n"}
{"task_id": "Open/123", "completion": "    pass\n"}
{"task_id": "Open/124", "completion": "    if N > M :\n        N, M = M, N\n    while K > 0 :\n        if N > M :\n            N -= M\n        else :\n            M -= N\n        K -= 1\n    return N * M\n"}
{"task_id": "Open/125", "completion": "    if len(string) == length:\n        for i in range(len(string)-1):\n            if string[i] == string[i+1]:\n                return False\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/126", "completion": "    if n == 1 :\n        return 1\n    else :\n        return 2 ** getValue( n // 2 )\n"}
{"task_id": "Open/127", "completion": "    return len(str(A)) == len(str(B))\n"}
{"task_id": "Open/128", "completion": "    return x!= y and abs(x - y)!= 1\n"}
{"task_id": "Open/129", "completion": "    if n == 1 :\n        return \"1\"\n    elif n == 2 :\n        return \"12\"\n    elif n == 3 :\n        return \"1213\"\n    else :\n        return tribWord( n - 1 ) + tribWord( n - 2 ) + tribWord( n - 3 )\n"}
{"task_id": "Open/130", "completion": "    if n == 1 :\n        return 0\n    else :\n        return min( minSteps( arr, n - 1 ) + abs( arr[ n - 1 ] - arr[ n - 2 ] ), minSteps( arr, n - 2 ) + abs( arr[ n - 2 ] - arr[ n - 1 ] ) )\n"}
{"task_id": "Open/131", "completion": "    return 0 if n % 4 == 0 or n % 4 == 3 else 1\n"}
{"task_id": "Open/132", "completion": "    m = (N - 1) // a\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2:\n        return N\n    elif N <= 4:\n        return N + 3\n    elif (N - 4) % 4 == 0:\n        return N + 1\n    elif (N - 4) % 4 <= 2:\n        return N + 2\n    else:\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    return ( arr[0] % 2 == 1 ) and ( arr[n-1] % 2 == 1 ) and ( n % 2 == 1 )\n"}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return R - L + 1\n    elif N == 2 :\n        return R - L + 1\n    else :\n        return ( R - L + 1 ) * ( N - 2 ) + 1\n"}
{"task_id": "Open/136", "completion": "    for i in range(n) :\n        if arr[i] > 0 :\n            return i + 1\n    return n + 1\n"}
{"task_id": "Open/137", "completion": "    pass\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range ( n ) :\n        if arr [ i ] > arr [ i - 1 ] :\n            count += arr [ i ] - arr [ i - 1 ]\n            arr [ i ] = arr [ i - 1 ]\n    return count\n"}
{"task_id": "Open/139", "completion": "    return sum(ord(c) for c in s)/len(s)\n"}
{"task_id": "Open/140", "completion": "    # 1. Calculate the number of banknotes of value A needed to reach S\n    # 2. Calculate the number of banknotes of value B needed to reach S\n    # 3. Calculate the number of banknotes of value A needed to reach the number of banknotes of value B needed to reach S\n    # 4. Return the minimum of the two numbers calculated in step 3.\n    # 5. If the number of banknotes of value A needed to reach the number of banknotes of value B needed to reach S is greater than the number of banknotes of value A needed to reach S, return -1.\n    # 6. If the number of banknotes of value A needed to reach the number of banknotes of value B needed to reach S is equal to the number of banknotes of value A needed to reach S, return 0.\n    # 7. If the number of banknotes of value A needed to reach the number of banknotes of value B needed to reach S is less than the number of banknotes of value A needed to reach S, return 1.\n"}
{"task_id": "Open/141", "completion": "    return ( x * y ) // math.gcd( x, y )\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n % 2 == 0:\n        count += 1\n        n = n / 2\n    return count\n"}
{"task_id": "Open/143", "completion": "    max_xor = 0\n    max_index = 0\n    for i in range(n) :\n        xor = 0\n        for j in range(i) :\n            xor ^= arr[j]\n        for j in range(i+1,n) :\n            xor ^= arr[j]\n        if xor > max_xor :\n            max_xor = xor\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/144", "completion": "    pass\n"}
{"task_id": "Open/145", "completion": "    if n == 0 :\n        return -1\n    if n == 1 :\n        return arr[0] + k\n    if arr[0] == arr[1] :\n        return equalize( arr[1:], n - 1, k )\n    if arr[0] + k == arr[1] :\n        return equalize( arr[1:], n - 1, k )\n    if arr[0] - k == arr[1] :\n        return equalize( arr[1:], n - 1, k )\n    return -1\n"}
{"task_id": "Open/146", "completion": "    if K == 1 :\n        return 1\n    elif K == 2 :\n        return 2\n    else :\n        return 1 + numLen(K-1) + numLen(K-2)\n"}
{"task_id": "Open/147", "completion": "    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/148", "completion": "    return 3 + 3 + 5 + 8 + 13 + 21 + 34 + 55 + 89 + 144 + 233 + 377 + 610 + 987 + 1597 + 2584 + 4181 + 6765 + 10946 + 17711 + 28657 + 46368 + 75025 + 121393 + 196418 + 317811 + 514229 + 832040 + 1346269 + 2178309 + 3524578 + 5702887 + 9227465 + 14930352 + 24157817 + 39088169 + 63245986 + 102334155 + 1"}
{"task_id": "Open/149", "completion": "    return s**0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    # Initialize the XOR value\n    xor = 0\n    \n    # Iterate over the string\n    for i in range(len1) :\n        # XOR the ASCII value of the character with the XOR value\n        xor ^= ord(str1[i])\n    \n    # Return the XOR value\n    return xor\n"}
{"task_id": "Open/152", "completion": "    return False\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)) :\n        if s[i] in vowels :\n            if i == 0 :\n                continue\n            if s[i] < s[i-1] :\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    return 0\n"}
{"task_id": "Open/155", "completion": "    return math.pow(2, math.ceil(math.log(n, 2))) - n\n"}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else :\n        return 3.14 * r * r\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    # 1. Find the middle index of the array.\n    mid = size // 2\n    \n    # 2. If the middle index is the missing number, return it.\n    if ar[mid] == mid + 1 :\n        return mid + 1\n    \n    # 3. If the middle index is greater than the missing number, then the missing number is present in the left half of the array.\n    elif ar[mid] > mid + 1 :\n        return search( ar[:mid], mid )\n    \n    # 4. If the middle index is less than the missing number, then the missing number is present in the right half of the array.\n    else :\n        return search( ar[mid+1:], size - mid - 1 )\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range( len( str ) ) :\n        if str[ i : i + 3 ] == \"010\" :\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    for i in range( n ) :\n        if arr[i] % 2 == 0 :\n            return arr[i]\n    return -1\n"}
{"task_id": "Open/161", "completion": "    xorArr = arr[0]\n    ans = 0\n    for i in range(1,n) :\n        xorArr = xorArr ^ arr[i]\n        ans = max(ans, xorArr)\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if sx == dx and sy == dy :\n        return True\n    elif sx == dx :\n        return sy < dy\n    elif sy == dy :\n        return sx < dx\n    else :\n        return False\n"}
{"task_id": "Open/163", "completion": "    if n % 2 == 1 :\n        return 0\n    else :\n        return n // 2\n"}
{"task_id": "Open/164", "completion": "    # Initialize the dictionary\n    count = {}\n    # Iterate through the array\n    for i in range( n ) :\n        # If the element is not present in the dictionary, add it with value 1\n        if arr[ i ] not in count :\n            count[ arr[ i ] ] = 1\n        # If the element is present in the dictionary, increment its value by 1\n        else :\n            count[ arr[ i ] ] += 1\n    # Initialize the result\n    result = 1\n    # Iterate through the dictionary\n    for i in count :\n        # Multiply the result with the value of the dictionary\n        result *= count[ i ]\n    # Return the result\n    return result\n"}
{"task_id": "Open/165", "completion": "    pass\n"}
{"task_id": "Open/166", "completion": "    if dest < source :\n        return sys.maxsize\n    if dest == source :\n        return 0\n    if dest == source + step :\n        return 1\n    if dest == source - step :\n        return 1\n    if dest < source + step :\n        return steps ( source + step, step, dest )\n    if dest > source - step :\n        return steps ( source - step, step, dest )\n    return steps ( source + step, step, dest ) + steps ( source - step, step, dest )\n"}
{"task_id": "Open/167", "completion": "    if n == 1 :\n        return \"1\"\n    else :\n        return countnndSay(n-1) + str(len(countnndSay(n-1))) + countnndSay(n-1)[-1]\n"}
{"task_id": "Open/168", "completion": "    max_len = 0\n    max_prod = 0\n    for i in range( N ) :\n        max_prod = max_prod * arr[ i ]\n        if max_prod < 0 :\n            max_prod = 0\n        max_len = max( max_len, i + 1 )\n    return max_len\n"}
{"task_id": "Open/169", "completion": "    return ( math.fabs(m) * math.fabs(n) ) / math.sqrt( ( math.fabs(m) * math.fabs(m) ) + ( math.fabs(n) * math.fabs(n) ) )\n"}
{"task_id": "Open/170", "completion": "    return 0\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range( l, r + 1 ) :\n        if isPrime( i ) and isPrime( i // 2 ) and isPrime( i // 3 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    # 1. Get the last m bits of n\n    # 2. Toggle the last m bits of n\n    # 3. Return the result of 1 and 2.\n    pass\n"}
{"task_id": "Open/174", "completion": "    count = 0\n    for i in range ( R, R - R % 9, -1 ) :\n        if i % 9 == K :\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    return math.log10(n) * n\n"}
{"task_id": "Open/176", "completion": "    if n == 1 :\n        return A[0]\n    else :\n        return max( FindElement( A[:n//2], n//2 ), FindElement( A[n//2+1:], n//2 ) )\n"}
{"task_id": "Open/177", "completion": "    return max( a, b ) + max( c, a + b ) - min( a, b )\n"}
