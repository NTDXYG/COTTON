{"task_id": "Open/0", "completion": "\n    \n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    \n    count = 0\n    for i in range(N):\n        if arr[i] + K > sum:\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/1", "completion": "\n    freq = {}\n    for i in range(n) :\n        if arr[i] in freq :\n            freq[arr[i]] += 1\n        else :\n            freq[arr[i]] = 1\n    return max(freq.values())\n"}
{"task_id": "Open/2", "completion": "\n    \n    if l > r :\n        return \"No\"\n    \n    if l == r :\n        return \"Yes\" if n & 1 == 1 else \"No\"\n    \n    if n & 1 == 1 :\n        return \"No\"\n    \n    if n & 1 == 0 :\n        return \"Yes\"\n    \n    if n & 1 == 1 :\n        return \"Yes\"\n    \n    if n & 1 == 0 :\n        return \"Yes\"\n    \n    if n & 1 == 1 :\n        return \"Yes\"\n    \n    if n & 1 == 0 :\n        return \"Yes\"\n    \n    if n & 1 == 1 :\n        return \"Yes\"\n    \n    if n & 1 == 0 :\n        return \"Yes\"\n    \n    if n & 1 == 1 :\n        return \"Yes\"\n    \n    if n & 1 == 0 :\n        return \"Yes\"\n    \n    if n & 1 == 1 :\n        return \"Yes\"\n    \n    if n & 1 == 0 :\n        return \"Yes\"\n    \n    if n & 1 == 1 :\n        "}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1, n) :\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    \n    if ( n % 2 == 1 ) :\n        return False\n    \n    if ( n == 0 ) :\n        return True\n    \n    if ( n == 1 ) :\n        return True\n    \n    if ( n == 2 ) :\n        return True\n    \n    if ( n == 3 ) :\n        return True\n    \n    if ( n == 4 ) :\n        return True\n    \n    if ( n == 5 ) :\n        return True\n    \n    if ( n == 6 ) :\n        return True\n    \n    if ( n == 7 ) :\n        return True\n    \n    if ( n == 8 ) :\n        return True\n    \n    if ( n == 9 ) :\n        return True\n    \n    if ( n == 10 ) :\n        return True\n    \n    if ( n == 11 ) :\n        return True\n    \n    if ( n == 12 ) :\n        return True\n    \n    if ( n == 13 ) :\n        return True\n    \n    if ( n == 14 ) :\n        return True\n    \n    if ( n == 15 ) :\n        return True"}
{"task_id": "Open/5", "completion": "\n    x = bin(x)\n    x = x[2:]\n    if x.count(\"1\") % 2 == 0 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/6", "completion": "\n    \n    output = []\n    for i in range(len(vec)) :\n        if abs(vec[i]) == i + 1 :\n            vec[i] = -vec[i]\n    for i in range(len(vec)) :\n        if vec[i] > 0 :\n            output.append(i + 1)\n    return output\n    "}
{"task_id": "Open/7", "completion": "\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    "}
{"task_id": "Open/8", "completion": "\n    \n    factors = []\n    \n    for i in a :\n        factors.append(0)\n        \n    for i in a :\n        for j in range(2,i+1) :\n            if i % j == 0 :\n                factors[a.index(i)] += 1\n    \n    return factors\n"}
{"task_id": "Open/9", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    arr.sort()\n    \n    if k > n :\n        return 0\n    \n    return arr[n-1] - arr[0] + findSum(arr[1:], n-1, k)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/10", "completion": "\n    \n    total_time = 0\n    \n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.appendleft(B.pop())\n            A.append(A.popleft())\n    \n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n\narray = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nsize = len(array)"}
{"task_id": "Open/12", "completion": "\n    \n    if len(s) == 0 :\n        return 0\n    \n    if len(s) == 1 :\n        if len(s) == k :\n            return 1\n        else :\n            return 0\n    \n    if len(s) == 2 :\n        if len(s) == k :\n            return 1\n        else :\n            return 0\n    \n    if len(s) == 3 :\n        if len(s) == k :\n            return 1\n        else :\n            return 0\n    \n    if len(s) == 4 :\n        if len(s) == k :\n            return 1\n        else :\n            return 0\n    \n    if len(s) == 5 :\n        if len(s) == k :\n            return 1\n        else :\n            return 0\n    \n    if len(s) == 6 :\n        if len(s) == k :\n            return 1\n        else :\n            return 0\n    \n    if len(s) == 7 :\n        if len(s) == k :\n            return 1\n        else :\n            return 0\n    \n"}
{"task_id": "Open/13", "completion": "\n    if n == 1 :\n        return True\n    if n == 2 :\n        return False\n    if n % 2 == 0 :\n        return False\n    if n % 3 == 0 :\n        return False\n    if n % 5 == 0 :\n        return False\n    if n % 7 == 0 :\n        return False\n    if n % 11 == 0 :\n        return False\n    if n % 13 == 0 :\n        return False\n    if n % 17 == 0 :\n        return False\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    \n    switch = {\n        0 : n,\n        1 : 1,\n        2 : n + 1,\n        3 : 0\n    }\n    return switch.get(n % 4, \"\")\n"}
{"task_id": "Open/15", "completion": "\n    \n    for i in range(t) :\n        a = random.randint(2,n-1)\n        if ( (a**(n-1)/2)%n )!= 1 :\n            return -1\n    return 1\n    \n    "}
{"task_id": "Open/16", "completion": "\n    for i in range(n) :\n        if s1[i] == '0' and s2[i] == '1' :\n            return True\n        elif s1[i] == '1' and s2[i] == '0' :\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(length) :\n        if i % 2 == 0 :\n            if s[i] == '0' :\n                count += 1\n        else :\n            if s[i] == '1' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "\n    if n == 0 :\n        return 1\n    if n == 1 :\n        return 1\n    if n == 2 :\n        return 2\n    if n == 3 :\n        return 4\n    if n == 4 :\n        return 7\n    if n == 5 :\n        return 13\n    if n == 6 :\n        return 24\n    if n == 7 :\n        return 44\n    if n == 8 :\n        return 81\n    if n == 9 :\n        return 149\n    if n == 10 :\n        return 274\n    if n == 11 :\n        return 577\n    if n == 12 :\n        return 1358\n    if n == 13 :\n        return 2489\n    if n == 14 :\n        return 3536\n    if n == 15 :\n        return 4135\n    if n == 16 :\n        return 5592\n    if n == 17 :\n        return 6681\n    if n == 18 :\n        return 7297\n    if n == 19 :\n        return 8078\n    if n == 20 :\n        return 9792\n    if n == 21 :\n        return 10995\n    if"}
{"task_id": "Open/20", "completion": "\n    if x == 0 or y == 0 :\n        return 0\n    elif x == 1 :\n        return y\n    elif x == y :\n        return x * y\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 1\n    curr_len = 1\n    for i in range( 1, n ) :\n        if arr[i] > arr[i - 1] :\n            curr_len += 1\n        else :\n            max_len = max( max_len, curr_len )\n            curr_len = 1\n    return max( max_len, curr_len )\n"}
{"task_id": "Open/23", "completion": "\n    \n    if (i == n) :\n        if (sum == 0) :\n            count += 1\n        return count\n    \n    else :\n        count = subsetSum ( arr, n, i + 1, sum - arr[i], count )\n        count = subsetSum ( arr, n, i + 1, sum, count )\n        \n        return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/24", "completion": "\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 3\n    \n    if n == 3 :\n        return 4\n    \n    if n == 4 :\n        return 7\n    \n    if n == 5 :\n        return 10\n    \n    if n == 6 :\n        return 13\n    \n    if n == 7 :\n        return 16\n    \n    if n == 8 :\n        return 19\n    \n    if n == 9 :\n        return 22\n    \n    if n == 10 :\n        return 25\n    \n    if n == 11 :\n        return 28\n    \n    if n == 12 :\n        return 31\n    \n    if n == 13 :\n        return 34\n    \n    if n == 14 :\n        return 37\n    \n    if n == 15 :\n        return 40\n    \n    if n == 16 :\n        return 43\n    \n    if n == 17 :\n        return 46\n    \n    if n == 18 :\n        return 49\n    \n    if n == 19 :\n        return 52\n    \n    if n == 20 :\n"}
{"task_id": "Open/25", "completion": "\n    \n    sum = 0\n    for i in range ( n ) :\n        sum += i * i\n    \n    sum += n\n    sum += 1\n    \n    return sum\n"}
{"task_id": "Open/26", "completion": "\n    \n    maxSum = 0\n    \n    for i in range(1, n) :\n        if n % i == 0 :\n            maxSum = max(maxSum, i)\n            maxSum = max(maxSum, n // i)\n    \n    return maxSum\n"}
{"task_id": "Open/27", "completion": "\n    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    \n    if a > b :\n        return ((a - b) / a) * 100\n    else :\n        return ((b - a) / b) * 100\n    "}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum = sum + i * i\n    return sum / n\n"}
{"task_id": "Open/31", "completion": "\n    \n    if k > n :\n        return None\n    \n    if k == 1 :\n        return min(arr)\n    \n    if k == n :\n        return max(arr)\n    \n    arr.sort()\n    return arr[k-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/32", "completion": "\n    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "\n    \n    if n == 1 :\n        return 1\n    else :\n        return findTerm(n-1) * 2 + 1\n"}
{"task_id": "Open/34", "completion": "\n    if len(a) == 0 :\n        return 0\n    if len(a) == 1 :\n        if a[0] < k :\n            return 1\n        else :\n            return 0\n    \n    left = 0\n    right = 0\n    count = 0\n    product = 1\n    while right < len(a) :\n        product *= a[right]\n        while product >= k and left <= right :\n            product /= a[left]\n            left += 1\n        count += right - left + 1\n        right += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    \n    n = math.floor(n)\n    d = math.floor(d)\n    \n    occurence = 0\n    \n    for i in range(1, n+1) :\n        \n        digit = math.floor(i/10)\n        \n        if digit == d :\n            occurence += 1\n            \n    return occurence\n"}
{"task_id": "Open/36", "completion": "\n    \n    if len(arr) == 0 :\n        return 1\n    \n    for i in range(n) :\n        if arr[i] > 0 :\n            if arr[i] - 1!= i :\n                arr[i] = arr[i] - 1\n                return i + 1\n            \n    return n + 1\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/37", "completion": "\n    \n    if n == 0 :\n        return 1\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 2\n    \n    return ways(n-1) + ways(n-2)\n"}
{"task_id": "Open/38", "completion": "\n    \n    areaSum = 0\n    \n    while l > 0 and b > 0 :\n        areaSum += l * b\n        l -= 1\n        b -= 1\n    \n    return areaSum\n"}
{"task_id": "Open/39", "completion": "\n    return sum(range(1,N+1))\n"}
{"task_id": "Open/40", "completion": "\n    \n    count = 0\n    maxCount = 0\n    \n    for i in range(n) :\n        if arr[i] == 1 :\n            count = 0\n        else :\n            count += 1\n            maxCount = max(maxCount, count)\n    \n    return maxCount\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/41", "completion": "\n    \n    max_len = 0\n    curr_len = 0\n    \n    for i in range(n):\n        if arr[i] == 0:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n    \n    max_len = max(max_len, curr_len)\n    \n    return max_len\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/42", "completion": "\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0], a[n-1])\n    else :\n        return max(a)\n"}
{"task_id": "Open/43", "completion": "\n    \n    count = 0\n    for i in range(n) :\n        for j in range(i,n) :\n            if (array[i] * array[j] <= k) :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    \n    sorted_arr = sorted(arr)\n    \n    for i in range(n) :\n        arr[i] = sorted_arr[i] - i\n    \n    return sum(arr)\n"}
{"task_id": "Open/45", "completion": "\n    \n    min_cost = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_cost :\n            min_cost = arr[i]\n    \n    return min_cost * (n - 1)\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/46", "completion": "\n    \n    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] > array[j]:\n                max_diff = max(max_diff, array[i] - array[j])\n            else:\n                max_diff = max(max_diff, array[j] - array[i])\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "\n    return ( ( a * x1 + b * y1 ) - c ) * ( ( a * x2 + b * y2 ) - c ) > 0\n"}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(0, a + 1) :\n        for j in range(0, a + 1) :\n            if i + (a ^ i) == j :\n                count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    \n    if L == R :\n        return L\n    \n    if L > R :\n        return maxAND( L - R, R )\n    \n    if L < R :\n        return maxAND( L, R - L )\n    \n    return 0\n"}
{"task_id": "Open/50", "completion": "\n    \n    smallest = a[0]\n    for i in range(1, n) :\n        if smallest % a[i]!= 0 :\n            smallest = a[i]\n    \n    if smallest == -1 :\n        return -1\n    else :\n        return smallest\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(a)"}
{"task_id": "Open/51", "completion": "\n    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum ( n - 1 )\n"}
{"task_id": "Open/52", "completion": "\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return arr[0][0]\n    else :\n        return arr[0][0] ^ submatrixXor(arr, n-1) ^ submatrixXor(arr, n-1) ^ submatrixXor(arr, n-1)\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(N+1) :\n        count += (i & N)\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    if ( a[0] + n - 1 == k ) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/55", "completion": "\n    \n    if n == 0 :\n        return True\n    \n    if n & (n - 1) == 0 :\n        return False\n    \n    return onlyFirstAndLastAreSet ( n >> 1 )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/56", "completion": "\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    "}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    for i in range(2, N+1):\n        var1 = arr[i-1]\n        var2 = arr[i-2]\n        result = result + var1 + var2\n        result = result + (var1 * var2) / 100\n    return result\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,"}
{"task_id": "Open/59", "completion": "\n    \n    for i in range(0, reversals) :\n        arr, ranges, reversals, index = answer ( arr, ranges, reversals, index )\n    \n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    \n    if n == 0 :\n        return True\n    \n    for i in range(1, n // 2 + 1) :\n        if i * i == n :\n            return True\n        \n        if i * i > n :\n            break\n        \n        if n - i * i in range(1, i) :\n            return True\n    \n    return False\n"}
{"task_id": "Open/61", "completion": "\n    \n    if len(a) < len(b) :\n        return -1\n    \n    if len(a) == len(b) :\n        return 0\n    \n    if len(a) > len(b) :\n        return getCount(b,a)\n    \n    if a[0] == b[0] :\n        return getCount(a[1:],b[1:])\n    \n    return getCount(a[1:],b)\n    "}
{"task_id": "Open/62", "completion": "\n    str = str[::-1]\n    for i in range(len-1,0,-1) :\n        if str[i] > str[i-1] :\n            str[i] = str[i] - 1\n            for j in range(i-1,-1,-1) :\n                str[j] = 9\n    return str[::-1]\n"}
{"task_id": "Open/63", "completion": "\n    \n    minValue = arr[0]\n    for i in range(1, n) :\n        minValue = min(minValue, arr[i])\n    \n    return minValue\n"}
{"task_id": "Open/64", "completion": "\n    \n    if len(s) == 0 :\n        return \"-1\"\n    \n    if len(s) == 1 :\n        return s\n    \n    max_len = 0\n    max_str = \"\"\n    \n    for i in range(len(s)) :\n        if s[i] == '1' :\n            continue\n        \n        for j in range(i, len(s)) :\n            if s[j] == '1' :\n                break\n            \n            if len(s[i:j+1]) > max_len :\n                max_len = len(s[i:j+1])\n                max_str = s[i:j+1]\n    \n    return max_str\n"}
{"task_id": "Open/65", "completion": "\n    \n    i = 0\n    j = 0\n    \n    while i < n :\n        if a[i] <= k :\n            i += 1\n        else :\n            a[j] = a[i]\n            j += 1\n            i += 1\n    \n    while j < n :\n        a[j] = 0\n        j += 1\n    \n    return j\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/66", "completion": "\n    \n    size = n + k\n    \n    arr.sort()\n    \n    if size % 2 == 0 :\n        median = (arr[size//2] + arr[size//2 - 1]) / 2\n    else :\n        median = arr[size//2]\n    \n    return median\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/67", "completion": "\n    \n    stepCount = 0\n    \n    positive = 0\n    negative = 0\n    zero = 0\n    \n    for i in range(n) :\n        if a[i] > 0 :\n            positive += 1\n        elif a[i] < 0 :\n            negative += 1\n        else :\n            zero += 1\n    \n    if negative % 2 == 0 :\n        stepCount += zero\n    else :\n        if zero > 0 :\n            stepCount += zero\n        else :\n            stepCount += 2\n    \n    return stepCount\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    n = bin(n)[2:]\n    for i in range(len(n)-1) :\n        if n[i] > n[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    \n    if x > n :\n        return x\n    \n    return n - (n % x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/71", "completion": "\n    \n    sum = 0\n    for i in range ( 0, n + 1 ) :\n        sum += i\n    \n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    \n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum += i + 2\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    \n    maxm = arr[0]\n    count = 1\n    \n    for i in range(1, n) :\n        if arr[i] == arr[i-1] :\n            count += 1\n        else :\n            if count > 1 :\n                count -= 1\n            else :\n                count = 1\n        \n        if count > maxm :\n            maxm = count\n    \n    return maxm\n\narr = [1,2,3,1,2,3,1,2,3]\nn = len(arr)\n"}
{"task_id": "Open/74", "completion": "\n    \n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( a[i] > a[j] ) and ( a[i] & a[j] == 0 ) :\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    \n    if n == 0 :\n        return 1\n    \n    if n & 1 == 0 :\n        return toggle( n >> 1 )\n    \n    return toggle( n ^ 1 )\n"}
{"task_id": "Open/76", "completion": "\n    \n    changes = 0\n    \n    for i in range(1, n-1) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            A[i+1] = 0\n            changes += 1\n    \n    return changes\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/77", "completion": "\n    \n    degree = radian * 180 / 3.14\n    \n    return degree\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    \n    sum = 0\n    for i in range(1, n+1) :\n        sum += a + (i-1)*d\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/80", "completion": "\n    \n    if n % 2 == 0 :\n        return n\n    else :\n        return 1\n"}
{"task_id": "Open/81", "completion": "\n    \n    if moves == 0 :\n        return 1\n    \n    if row < 0 or row > 7 or column < 0 or column > 7 :\n        return 0\n    \n    if moves == 1 :\n        return 1\n    \n    return Square(row - 1, column, moves - 1) + Square(row + 1, column, moves - 1) + Square(row, column - 1, moves - 1) + Square(row, column + 1, moves - 1)\n    \n    "}
{"task_id": "Open/82", "completion": "\n    if n == 1 :\n        return 2\n    elif n == 2 :\n        return 3\n    elif n == 3 :\n        return 4\n    elif n == 4 :\n        return 5\n    elif n == 5 :\n        return 6\n    elif n == 6 :\n        return 7\n    elif n == 7 :\n        return 8\n    elif n == 8 :\n        return 9\n    elif n == 9 :\n        return 10\n    elif n == 10 :\n        return 11\n    elif n == 11 :\n        return 12\n    elif n == 12 :\n        return 13\n    elif n == 13 :\n        return 14\n    elif n == 14 :\n        return 15\n    elif n == 15 :\n        return 16\n    elif n == 16 :\n        return 17\n    elif n == 17 :\n        return 18\n    elif n == 18 :\n        return 19\n    elif n == 19 :\n        return 20\n    elif n == 20 :\n        return 21\n    elif n == 21 :\n        return 22\n    elif n =="}
{"task_id": "Open/83", "completion": "\n    \n    sortedString = sorted(s)\n    \n    for i in range(len(s)) :\n        if s[i]!= sortedString[i] :\n            s[i], s[s.index(sortedString[i])] = s[s.index(sortedString[i])], s[i]\n            \n    return \"\".join(s)\n    \n    "}
{"task_id": "Open/84", "completion": "\n    \n    arr = [ ]\n    for i in range ( n ) :\n        if i % 2 == 0 :\n            arr.append ( i )\n        else :\n            arr.append ( i + 1 )\n    \n    return sum ( arr[ l - 1 : r ] )\n"}
{"task_id": "Open/85", "completion": "\n    \n    if x > y :\n        smaller = y\n    else :\n        smaller = x\n    for i in range(1, smaller + 1) :\n        if x % i == 0 and y % i == 0 :\n            hcf = i\n    return hcf\n"}
{"task_id": "Open/86", "completion": "\n    \n    if N == 1 :\n        return A\n    elif N == 2 :\n        return B\n    else :\n        return findNthNumber(A+B,B,N-2) + B\n"}
{"task_id": "Open/87", "completion": "\n    \n    if len(str) < len(substr) :\n        return 0\n    \n    count = 0\n    for i in range(len(str) - len(substr) + 1) :\n        if str[i:i+len(substr)] == substr :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/88", "completion": "\n    \n    r = r / 100\n    t = t * 12\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    \n    count = 0\n    for i in range(len(A)) :\n        for j in range(len(B)) :\n            for k in range(len(C)) :\n                if A[i] * C[k] > B[j] * B[j] :\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    \n    if n == 1:\n        return 1\n    \n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == arr[i] - arr[j]:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = 0\n    \n    return max(max(dp))\n"}
{"task_id": "Open/92", "completion": "\n    \n    maxLen = 0\n    start = 0\n    \n    while start < len(str) :\n        end = start + 1\n        while end < len(str) :\n            if str[end].isdigit() :\n                end += 1\n            else :\n                break\n        \n        if end - start > maxLen :\n            maxLen = end - start\n        \n        start = end\n    \n    return maxLen\n"}
{"task_id": "Open/93", "completion": "\n    \n    if n <= 1 :\n        return 0\n    \n    if n % 2 == 0 :\n        return 1 + count ( n / 2 )\n    else :\n        return 1 + count ( n - 1 )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/94", "completion": "\n    \n    string = 'a' * n\n    \n    for i in range(n-1, -1, -1) :\n        \n        k = k - 1\n        \n        if k >= 0 :\n            \n            if k >= 26 :\n                \n                string = string[:i] + 'z' + string[i+1:]\n                \n                k = k - 26\n                \n            else :\n                \n                string = string[:i] + chr(97 + k) + string[i+1:]\n                \n                k = k - k\n                \n        else :\n            \n            break\n            \n    return string\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/95", "completion": "\n    \n    distance = 0\n    stops = 0\n    \n    while stops < n :\n        distance += fuel / n\n        stops += 1\n        fuel -= fuel / n\n    \n    return distance\n    \n    "}
{"task_id": "Open/96", "completion": "\n    \n    total = sum(arr)\n    if total % 3!= 0 :\n        return 0\n    \n    total /= 3\n    \n    for i in range(n) :\n        if sum(arr[:i]) == total :\n            return 1\n    \n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/97", "completion": "\n    return word in sentence\n"}
{"task_id": "Open/98", "completion": "\n    if n == 0 :\n        return 1\n    else :\n        return int(math.log10(n)) + 1\n"}
{"task_id": "Open/99", "completion": "\n    \n    if a == b == c :\n        return True\n    \n    if a == b :\n        if k == 0 :\n            return True\n        else :\n            return False\n    \n    if a == c :\n        if k == 0 :\n            return True\n        else :\n            return False\n    \n    if b == c :\n        if k == 0 :\n            return True\n        else :\n            return False\n    \n    return False\n"}
{"task_id": "Open/100", "completion": "\n    \n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    \n    if x == y :\n        return True\n    \n    while x < y :\n        x = x[1:] + \"0\"\n        y = y[1:] + \"0\"\n    \n    if x == y :\n        return True\n    \n    return False\n"}
{"task_id": "Open/101", "completion": "\n    \n    count = 0\n    \n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            count += 1\n    \n    return count\n    "}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in range(n) :\n        if string[i] == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    \n    if n == 1 :\n        return 0\n    \n    min_diff = arr[1] - arr[0]\n    \n    for i in range(1, n) :\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    \n    return min_diff\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/104", "completion": "\n    \n    maxSetBits = 0\n    \n    for i in range(left, right + 1) :\n        maxSetBits = max(maxSetBits, countSetBits(i))\n    \n    return maxSetBits\n"}
{"task_id": "Open/105", "completion": "\n    \n    if n == 0 :\n        return 1\n    \n    if n == 1 :\n        return 2\n    \n    if n == 2 :\n        return 4\n    \n    if n == 3 :\n        return 8\n    \n    if n == 4 :\n        return 16\n    \n    if n == 5 :\n        return 32\n    \n    if n == 6 :\n        return 64\n    \n    if n == 7 :\n        return 128\n    \n    if n == 8 :\n        return 256\n    \n    if n == 9 :\n        return 512\n    \n    if n == 10 :\n        return 1024\n    \n    if n == 11 :\n        return 2048\n    \n    if n == 12 :\n        return 4096\n    \n    if n == 13 :\n        return 8192\n    \n    if n == 14 :\n        return 16384\n    \n    if n == 15 :\n        return 32768\n    \n    if n == 16 :\n        return 65536\n    \n    if n == 17 :\n        return 131072\n    \n    if n == 18 :\n        return 262144\n    \n"}
{"task_id": "Open/106", "completion": "\n    divisors = []\n    for i in range ( 1, n ) :\n        if n % i == 0 :\n            divisors.append ( i )\n    if sum ( divisors ) == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "\n    \n    century = N // 100\n    leap_century = N // 400\n    \n    if century % 2 == 0 :\n        leap_years = 0\n    else :\n        leap_years = 1\n    \n    total_days = (N - (century * 100 + leap_years * 400)) * 7\n    \n    return total_days % 7\n"}
{"task_id": "Open/108", "completion": "\n    \n    if a < 0 :\n        return -1\n    \n    else :\n        return int(a * (3 * a - 1) / 2)\n"}
{"task_id": "Open/109", "completion": "\n    \n    n = str(n)\n    d = str(d)\n    \n    return n.count(d)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/110", "completion": "\n    \n    if n < 0 :\n        return False\n    \n    if n == 0 :\n        return True\n    \n    if n > 0 :\n        \n        if n % 10 == 0 :\n            return False\n        \n        if n % 10!= 0 :\n            return validate(n // 10)\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/111", "completion": "\n    if n == 0 :\n        return True\n    if a[0] % 5 == 0 :\n        return canMakeEqual(a[1:], n - 1)\n    if a[0] % 3 == 0 :\n        return canMakeEqual(a[1:], n - 1)\n    return False\n"}
{"task_id": "Open/112", "completion": "\n    \n    arr = [0]*(n+1)\n    arr[0] = 4\n    arr[1] = 7\n    for i in range(2, n+1):\n        if i%2 == 0:\n            arr[i] = arr[i//2]*10 + 7\n        else:\n            arr[i] = arr[i//2]*10 + 4\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    \n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10 + 5\n        else :\n            array[i] = array[i//2] * 10 + 3\n    \n    return array[n]\n    "}
{"task_id": "Open/114", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    \n    for i in range(2, n+1) :\n        if i%2 == 0 :\n            array[i] = array[i//2] * 10 + 2\n        else :\n            array[i] = array[i//2] * 10 + 1\n    \n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    \n    for i in range(n) :\n        if (a[i] % 11!= 0) :\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/116", "completion": "\n    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return l * b\n"}
{"task_id": "Open/117", "completion": "\n    \n    new_string = \"\"\n    \n    for i in range(len(string)) :\n        if string[i].isalpha() :\n            new_string += string[i].upper()\n        else :\n            new_string += string[i]\n    \n    return new_string\n    \n    "}
{"task_id": "Open/118", "completion": "\n    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "\n    return len(arr) == len(set(arr))\n"}
{"task_id": "Open/120", "completion": "\n    \n    count = 0\n    \n    for i in range( len( string ) - 1 ) :\n        if string[i]!= string[i+1] :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    \n    maximum = 0\n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            maximum = maximum * 10 + int(ss[i])\n        else :\n            if maximum > maximum :\n                maximum = maximum\n            else :\n                maximum = maximum * 10\n    return maximum\n"}
{"task_id": "Open/123", "completion": "\n    \n    if len(s) == 0 :\n        return 0\n    \n    longest = 0\n    \n    for i in range(len(s)) :\n        \n        if s[i] == '0' :\n            continue\n        \n        if i == 0 :\n            longest = 1\n            \n        else :\n            if s[i-1] == '0' :\n                longest += 1\n            else :\n                longest = 1\n        \n        for j in range(i+1, len(s)) :\n            if s[j] == '0' :\n                continue\n            \n            if int(s[i:j+1]) > longest :\n                longest = int(s[i:j+1])\n    \n    return longest\n"}
{"task_id": "Open/124", "completion": "\n    \n    if N > M :\n        N, M = M, N\n    \n    if N == 0 or M == 0 :\n        return 0\n    \n    if K == 0 :\n        return N * M\n    \n    while K > 0 :\n        if N > M :\n            N -= M\n            K -= 1\n        else :\n            M -= N\n            K -= 1\n    \n    return N * M\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/125", "completion": "\n    if len(string)!= length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 2\n    \n    if n == 3 :\n        return 2\n    \n    if n == 4 :\n        return 2\n    \n    if n == 5 :\n        return 2\n    \n    if n == 6 :\n        return 2\n    \n    if n == 7 :\n        return 2\n    \n    if n == 8 :\n        return 2\n    \n    if n == 9 :\n        return 2\n    \n    if n == 10 :\n        return 2\n    \n    if n == 11 :\n        return 2\n    \n    if n == 12 :\n        return 2\n    \n    if n == 13 :\n        return 2\n    \n    if n == 14 :\n        return 2\n    \n    if n == 15 :\n        return 2\n    \n    if n == 16 :\n        return 2\n    \n    if n == 17 :\n        return 2\n    \n    if n == 18 :\n        return 2\n    \n    if n == 19 :\n"}
{"task_id": "Open/127", "completion": "\n    \n    if len(str(A)) == len(str(B)) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/128", "completion": "\n    \n    if x == y :\n        return False\n    elif x == y + 1 or x == y - 1 :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/129", "completion": "\n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    \n    for i in range(3, n+1) :\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2 + Sn_3\n    \n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    \n    steps = [0] * n\n    steps[0] = abs(arr[0] - arr[1])\n    steps[1] = abs(arr[1] - arr[2])\n    \n    for i in range(2, n):\n        steps[i] = steps[i-1] + abs(arr[i] - arr[i-1])\n    \n    return steps\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    elif n % 4 == 1 or n % 4 == 2 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/132", "completion": "\n    m = N / a\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n    "}
{"task_id": "Open/133", "completion": "\n    \n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/134", "completion": "\n    if arr[0] % 2!= 0 :\n        return False\n    if arr[n-1] % 2!= 0 :\n        return False\n    if n % 2!= 0 :\n        return False\n    return True\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/135", "completion": "\n    if N == 1 :\n        return R - L + 1\n    elif N == 2 :\n        return R - L + 2\n    else :\n        return R - L + 2 + countSum(N-2, L, R)\n    "}
{"task_id": "Open/136", "completion": "\n    \n    for i in range(n) :\n        if arr[i] <= 0 :\n            arr[i] = n + 1\n    \n    for i in range(n) :\n        if arr[i] > n :\n            return i + 1\n    \n    return n + 1\n\narr = [ -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -"}
{"task_id": "Open/137", "completion": "\n    \n    if len(s) == 1 :\n        return s\n    \n    s = list(s)\n    \n    for i in range(len(s)) :\n        if s.count(s[i]) > n :\n            s[i] = '0'\n            \n    s = ''.join(s)\n    \n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i - 1] :\n            count += arr[i] - arr[i - 1]\n            arr[i] = arr[i - 1]\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    \n    total = 0\n    for i in s :\n        total += ord(i)\n    return total / len(s)\n"}
{"task_id": "Open/140", "completion": "\n    if A == B :\n        if S % A == 0 :\n            return S // A\n        else :\n            return -1\n    else :\n        if S % A == 0 :\n            return S // A\n        elif S % B == 0 :\n            return S // B\n        else :\n            return -1\n"}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n!= 0 :\n        n = n // 2\n        count += n\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    \n    xor_sum = 0\n    for i in range(n) :\n        xor_sum = xor_sum ^ arr[i]\n    \n    max_sum = xor_sum\n    for i in range(n) :\n        xor_sum = xor_sum ^ arr[i]\n        if xor_sum > max_sum :\n            max_sum = xor_sum\n            max_sum_index = i\n    \n    return max_sum_index\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/144", "completion": "\n    \n    dp = [1 for i in range(n)]\n    \n    for i in range(1,n) :\n        for j in range(i) :\n            if arr[i] > arr[j] :\n                dp[i] = max(dp[i],dp[j]+1)\n    \n    return max(dp)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/145", "completion": "\n    \n    if k == 0 :\n        return min(arr)\n    \n    if k < 0 :\n        return -1\n    \n    if n == 1 :\n        return arr[0]\n    \n    if n == 2 :\n        return max(arr[0], arr[1])\n    \n    if k > 0 :\n        return max(arr[0] + equalize(arr[1:], n-1, k-1), arr[1] + equalize(arr[2:], n-1, k-1))\n    \n    if k < 0 :\n        return min(arr[0] + equalize(arr[1:], n-1, k+1), arr[1] + equalize(arr[2:], n-1, k+1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/146", "completion": "\n    \n    if K == 1 :\n        return -1\n    \n    if K == 2 :\n        return 1\n    \n    if K % 2 == 0 :\n        return 1\n    \n    if K % 3 == 0 :\n        return 1\n    \n    if K % 5 == 0 :\n        return 1\n    \n    if K % 7 == 0 :\n        return 1\n    \n    if K % 11 == 0 :\n        return 1\n    \n    if K % 13 == 0 :\n        return 1\n    \n    if K % 17 == 0 :\n        return 1\n    \n    return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/147", "completion": "\n    \n    if n == 1 :\n        return 0\n    \n    if n == 2 :\n        if arr[0] == arr[1] :\n            return 0\n        else :\n            return 1\n    \n    if arr[0] == arr[1] :\n        return changeTheArray ( arr[1:], n - 1 )\n    \n    if arr[0]!= arr[1] :\n        return 1 + changeTheArray ( arr[1:], n - 1 )\n    \n    \n"}
{"task_id": "Open/148", "completion": "\n    if n == 1 :\n        return 3\n    else :\n        return 3 + calSum(n-1)\n"}
{"task_id": "Open/149", "completion": "\n    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    \n    result = 0\n    \n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    \n    return result\n"}
{"task_id": "Open/152", "completion": "\n    \n    if n == 0 :\n        return True\n    \n    if n % 2 == 1 :\n        return False\n    \n    return check_binary( n // 2 )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/153", "completion": "\n    \n    vowels = ['a','e','i','o','u']\n    \n    for i in range(len(s)-1) :\n        if s[i] in vowels and s[i+1] in vowels :\n            return True\n        \n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/154", "completion": "\n    \n    count = 0\n    for i in range ( low, high + 1 ) :\n        if ( i % 10 ) >= k :\n            count += 1\n    return count\n    "}
{"task_id": "Open/155", "completion": "\n    \n    if n == 0 :\n        return 0\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 1\n    \n    if n == 3 :\n        return 2\n    \n    if n == 4 :\n        return 2\n    \n    if n == 5 :\n        return 2\n    \n    if n == 6 :\n        return 2\n    \n    if n == 7 :\n        return 2\n    \n    if n == 8 :\n        return 2\n    \n    if n == 9 :\n        return 2\n    \n    if n == 10 :\n        return 2\n    \n    if n == 11 :\n        return 2\n    \n    if n == 12 :\n        return 2\n    \n    if n == 13 :\n        return 2\n    \n    if n == 14 :\n        return 2\n    \n    if n == 15 :\n        return 2\n    \n    if n == 16 :\n        return 2\n    \n    if n == 17 :\n        return 2\n    \n    if n == 18 :\n        return 2\n    \n    if n == 19 :\n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else :\n        return 3 * r * r\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/157", "completion": "\n    \n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    return s\n"}
{"task_id": "Open/158", "completion": "\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    \n    \"\"\"\n    Let's think step by step.\n    \"\"\"\n    "}
{"task_id": "Open/159", "completion": "\n    \n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    for i in range(n) :\n        if arr[i] % 2 == 0 :\n            return arr[i]\n    return None\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110"}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    if (sx == dx and sy == dy) :\n        return True\n    if (sx == dx and sy!= dy) :\n        return True\n    if (sx!= dx and sy == dy) :\n        return True\n    if (sx!= dx and sy!= dy) :\n        return False\n"}
{"task_id": "Open/163", "completion": "\n    \n    if n == 1 :\n        return 1\n    \n    if n == 2 :\n        return 2\n    \n    if n == 3 :\n        return 4\n    \n    if n == 4 :\n        return 7\n    \n    if n == 5 :\n        return 11\n    \n    if n == 6 :\n        return 16\n    \n    if n == 7 :\n        return 22\n    \n    if n == 8 :\n        return 28\n    \n    if n == 9 :\n        return 36\n    \n    if n == 10 :\n        return 45\n    \n    if n == 11 :\n        return 55\n    \n    if n == 12 :\n        return 66\n    \n    if n == 13 :\n        return 77\n    \n    if n == 14 :\n        return 89\n    \n    if n == 15 :\n        return 101\n    \n    if n == 16 :\n        return 121\n    \n    if n == 17 :\n        return 131\n    \n    if n == 18 :\n        return 141\n    \n    if n == 19 :\n        return 152\n    \n    if n == 20 :\n"}
{"task_id": "Open/164", "completion": "\n    d = {}\n    for i in arr :\n        if i in d :\n            d[i] += 1\n        else :\n            d[i] = 1\n    count = 1\n    for i in d :\n        count *= d[i]\n    return count\n"}
{"task_id": "Open/165", "completion": "\n    \n    if height == 0 :\n        return 0\n    \n    return AVLnodes(height-1) + 2**height\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/166", "completion": "\n    if source == dest :\n        return 0\n    elif source < dest :\n        return steps ( source + step, step, dest ) + 1\n    elif source > dest :\n        return steps ( source - step, step, dest ) + 1\n    else :\n        return sys.maxsize\n"}
{"task_id": "Open/167", "completion": "\n    \n    if n == 1 :\n        return \"1\"\n    \n    else :\n        return countnndSay(n-1) + countnndSay(n-1)[0]*countnndSay(n-1)[1]\n    \n    "}
{"task_id": "Open/168", "completion": "\n    Input : arr[] = {-1, 2, 3, -4, 5}\n    Output : 4\n    \n    Input : arr[] = {-1, -2, -3, -4, -5}\n    Output : 5\n    \n    Input : arr[] = {-1, 2, 3, -4, 5, -6, 7, -8, 9}\n    Output : 4\n    \n    Input : arr[] = {-1, 2, 3, -4, 5, -6, 7, -8, 9, -10, -11, -12, -13, -14, -15}\n    Output : 5\n    \n    Input : arr[] = {-1, 2, 3, -4, 5, -6, 7, -8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -"}
{"task_id": "Open/169", "completion": "\n    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n"}
{"task_id": "Open/170", "completion": "\n    \n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if (arr[i] + arr[j]) < k :\n                count += 1\n    return count\n\narr = [1,2,3,4,5]\nn = len(arr)\nk = 6"}
{"task_id": "Open/171", "completion": "\n    \n    arr.sort()\n    \n    count = 0\n    \n    for i in range(len(arr) - 2) :\n        \n        for j in range(i + 1, len(arr) - 1) :\n            \n            k = len(arr) - 1\n            \n            while k > j :\n                \n                if arr[k] - arr[i] <= L and arr[k] - arr[j] <= L :\n                    count += 1\n                    \n                k -= 1\n    \n    return count\n\nn = int(input())\nL = int(input())\narr = [int(x) for x in input().split()]"}
{"task_id": "Open/172", "completion": "\n    \n    count = 0\n    for i in range ( l, r + 1 ) :\n        if ( i % 2 == 0 ) or ( i % 3 == 0 ) :\n            continue\n        else :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    \n    n = n ^ (1 << m)\n    n = n ^ (1 << (m - 1))\n    return n\n"}
{"task_id": "Open/174", "completion": "\n    \n    total = R - L + 1\n    div = total / 9\n    rem = total % 9\n    \n    if K == 9 :\n        K = 0\n    \n    count = 0\n    \n    for i in range ( L, R + 1 ) :\n        if ( i % 9 == rem ) and ( i % K == K ) :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/175", "completion": "\n    \n    n = math.log10(n)\n    n = int(n)\n    \n    k = int(k)\n    \n    return n * math.log10(n)\n"}
{"task_id": "Open/176", "completion": "\n    \n    if n == 1 :\n        return A[0]\n    \n    if A[0] > A[1] :\n        return A[0]\n    \n    if A[n-1] < A[n-2] :\n        return A[n-1]\n    \n    for i in range(1,n-1) :\n        if A[i] > A[i-1] and A[i] > A[i+1] :\n            return A[i]\n    \n    return -1\n"}
{"task_id": "Open/177", "completion": "\n    \n    if a > b :\n        return a - b\n    elif a < b :\n        return b - a\n    else :\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
