{"task_id": "Open/0", "completion": "\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    count = 0\n    for i in range(N):\n        if arr[i] + K > sum:\n            count += 1\n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nN = len(arr)\nK = 3"}
{"task_id": "Open/1", "completion": "\n    max_len = 0\n    for i in range(n):\n        if arr[i] < min(arr):\n            max_len += 1\n    return max_len\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/2", "completion": "Convert the integer n to its binary representation.\"\"\"\n        return bin(n)[2:]\n    \n    def countSetBits ( binary ) :\n        \"\"\"Count the number of bits that are set to 1 in the binary representation.\"\"\"\n        return binary.count(\"1\")\n    \n    def convertToBinary ( n ) :\n        \"\"\"Convert the integer n to its binary representation.\"\"\"\n        return bin(n)[2:]\n    \n    def countSetBits ( binary ) :\n        \"\"\"Count the number of bits that are set to 1 in the binary representation.\"\"\"\n        return binary.count(\"1\")\n    \n    def convertToBinary ( n ) :\n        \"\"\"Convert the integer n to its binary representation.\"\"\"\n        return bin(n)[2:]\n    \n    def countSetBits ( binary ) :\n        \"\"\"Count the number of bits that are set to 1 in the binary representation.\"\"\"\n        return binary.count(\"1\")\n    \n    def convertToBinary ( n ) :\n        \"\"\"Convert the integer n to its binary representation.\""}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    \n    if n % 2!= 0 :\n        return False\n    \n    sum_a = sum(a)\n    \n    if sum_a == n :\n        return True\n    \n    if sum_a > n :\n        return False\n    \n    for i in range(len(a)) :\n        if sum_a + a[i] == n :\n            return True\n        \n    return False\n"}
{"task_id": "Open/5", "completion": "\n    \n    binary = bin(x)\n    count = binary.count(\"1\")\n    if count % 2 == 0 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/6", "completion": "\n    output = []\n    for i in range(len(vec)):\n        vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/7", "completion": "\n    \n    max_length = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] in arr[j]:\n                max_length = max(max_length, j-i+1)\n    \n    return max_length\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/8", "completion": "\n    \n    prime_factors = {}\n    \n    for i in a :\n        prime_factors[i] = 0\n        \n        for j in range(2, int(math.sqrt(i)) + 1) :\n            if i % j == 0 :\n                prime_factors[i] += 1\n                \n    for i in prime_factors :\n        prime_factors[i] = len(prime_factors[i])\n    \n    return prime_factors\n"}
{"task_id": "Open/9", "completion": "\n    \n    arr.sort()\n    sum = 0\n    for i in range(k):\n        sum += arr[i] - arr[0]\n    return sum\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 4"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.appendleft(B.pop())\n            A.append(A.pop())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    count = 0\n    for i in range( len( s ) ) :\n        set = set()\n        for j in range( i, len( s ) ) :\n            if s[j] not in set :\n                set.add( s[j] )\n            if len( set ) <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617"}
{"task_id": "Open/14", "completion": "\n    \n    switch = {\n        0 : n,\n        1 : 1,\n        2 : n + 1,\n        3 : 0\n    }\n    \n    return switch.get(n % 4, \"\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/15", "completion": "\n    for i in range(t) :\n        a = random.randint(2, n-1)\n        if ( pow(a, (n-1)/2, n)!= 1 ) and ( pow(a, (n-1)/2, n)!= n-1 ) :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "\n    for i in range( n ) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(length):\n        if s[i] == '0':\n            count += 1\n        else:\n            count -= 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "\n    counter = 0\n    for i in range(1, n+1) :\n        if math.pow(i, i) <= n :\n            counter += 1\n    return counter\n"}
{"task_id": "Open/20", "completion": "\n    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 1\n    for i in range(n):\n        curr_len = 1\n        for j in range(i+1,n):\n            if arr[j] >= arr[i]:\n                curr_len += 1\n            else:\n                break\n        max_len = max(max_len,curr_len)\n    return max_len\n"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        return 0\n    if sum == 0 :\n        return 1\n    return subsetSum ( arr, n, i+1, sum - arr[i], count ) + subsetSum ( arr, n, i+1, sum, count )\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nsum = sum(arr)"}
{"task_id": "Open/24", "completion": "\n    \n    return (n * 7) - 4\n"}
{"task_id": "Open/25", "completion": "\n    sum_squares, sum_num, total_sum = 0, 0, 0\n    for i in range ( 1, n+1 ) :\n        sum_squares += i**2\n        sum_num += i\n    total_sum = sum_squares + sum_num + 1\n    return sum_squares, sum_num, total_sum\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    \n    return ( ( b - a ) / a ) * 100\n"}
{"task_id": "Open/30", "completion": "\n    \n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1) :\n        sum = sum + (i * i)\n        count = count + 1\n    \n    return sum / count\n"}
{"task_id": "Open/31", "completion": "\n    \n    arr.sort()\n    return arr[k-1]\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nk = 3"}
{"task_id": "Open/32", "completion": "\n    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "\n    term = 1\n    for i in range(1, n+1):\n        term = term * 2 + i - 1\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    if len(a) == 0 :\n        return 0\n    if len(a) == 1 :\n        return 0 if a[0] > k else 1 if a[0] < k else 0\n    \n    left = 0\n    right = 0\n    product = 1\n    count = 0\n    \n    while right < len(a) :\n        product *= a[right]\n        \n        while product >= k :\n            product /= a[left]\n            left += 1\n        \n        count += right - left + 1\n        right += 1\n    \n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range ( 1, n + 1 ) :\n        if ( i % 10 == d ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    if (arr == None or len(arr) == 0) :\n        return 1\n    \n    for i in range(1, n + 1) :\n        if i not in arr :\n            return i\n    \n    return n + 1\n"}
{"task_id": "Open/37", "completion": "\n    if n == 0 or n == 1 :\n        return 1\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    sum = 0\n    squareSize = 1\n    while squareSize <= b and squareSize <= l :\n        sum += squareSize * squareSize\n        squareSize += 1\n    return sum\n"}
{"task_id": "Open/39", "completion": "\n    return sum(range(N+1))\n"}
{"task_id": "Open/40", "completion": "\n    max_count = 0\n    current_count = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_count += 1\n        else:\n            current_count = 0\n        max_count = max(max_count, current_count)\n    return max_count\n\narr = [0,1,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            max_length += 1\n        else:\n            if max_length < i + 1:\n                max_length = i + 1\n    return max_length\n\narr = [1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"}
{"task_id": "Open/42", "completion": "\n    if k == 1 :\n        return min(a)\n    elif k == 2 :\n        return max(a[0],a[n-1])\n    else :\n        return max(a)\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (array[i] * array[j]) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    sorted_arr = sorted(arr)\n    for i in range(n) :\n        print(sorted_arr[i], i+1)\n    return sum(abs(sorted_arr[i] - (i+1)) for i in range(n))\n"}
{"task_id": "Open/45", "completion": "\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val * (n - 1)\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/46", "completion": "\n    max_diff = 0\n    for i in range(len(array)):\n        diff = abs(array[i] - i)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "\n    return ( ( a * x1 + b * y1 ) - c ) * ( a * x2 + b * y2 ) > 0\n"}
{"task_id": "Open/48", "completion": "\n    \n    count = 0\n    for i in range(0, a+1) :\n        a = i + (a ^ i)\n        if a == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    \n    result = L & R\n    return result\n"}
{"task_id": "Open/50", "completion": "\n    smallest = a[0]\n    for i in range(1, n):\n        if a[i] % smallest == 0:\n            smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "\n    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum ( n - 1 )\n"}
{"task_id": "Open/52", "completion": "\n    \n    xor_dict = {}\n    \n    for i in range(n):\n        for j in range(n):\n            if (i+1) * (j+1) > n:\n                break\n            \n            top_left = arr[i][j]\n            bottom_right = arr[i+1][j+1]\n            \n            if top_left * bottom_right % 2!= 0:\n                xor_dict[top_left * bottom_right] = 1\n    \n    return sum(xor_dict.values())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(N+1):\n        count += (i & i)\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    \n    sum += n - 1\n    \n    if sum == k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/55", "completion": "\n    \n    binary = bin(n)\n    \n    if binary[0] == '0' and binary[-1] == '1' :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    for i in range(len(s)):\n        num_partitions = 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                num_partitions += 1\n            else:\n                if num_partitions > max_partitions:\n                    max_partitions = num_partitions\n                num_partitions = 1\n        if num_partitions > max_partitions:\n            max_partitions = num_partitions\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    for i in range(2,N+1):\n        var1 = arr[i-1]\n        var2 = arr[i-2]\n        result = result + var1 + var2\n        result = result + (var1*var2)/100\n    return result\n\narr = [1,2,3,4,5,6,7,8,9,10]\nN = 10"}
{"task_id": "Open/59", "completion": "\n    \n    value = arr[index]\n    \n    for i in range ( len ( ranges ) ) :\n        if ( ranges [ i ] [ 0 ] <= index <= ranges [ i ] [ 1 ] ) :\n            value = ranges [ i ] [ 2 ]\n            break\n        \n    for i in range ( reversals ) :\n        arr [ index ], value = value, arr [ index ]\n        index = index + 1 if index < len ( arr ) - 1 else 0\n        \n    return value\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/60", "completion": "\n    \n    for i in range(0, int(n**0.5) + 1):\n        for j in range(0, int(n**0.5) + 1):\n            if i**2 + j**2 == n:\n                return True\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    count = 1\n    for i in range(len(b)) :\n        if a[0] == b[i] :\n            count = count * 2 + 1\n        else :\n            return -1\n    return count\n"}
{"task_id": "Open/62", "completion": "\n    modified_str = \"\"\n    for i in range ( len - 2, -1, -1 ) :\n        if str[i] > str[i+1] :\n            modified_str += \"9\"\n        else :\n            modified_str += str[i]\n    return modified_str\n"}
{"task_id": "Open/63", "completion": "\n    min_value = math.inf\n    for i in range(n):\n        if math.log(arr[i]) < min_value:\n            min_value = math.log(arr[i])\n    return min_value\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/64", "completion": "\n    largest = \"\"\n    for i in range(len(s)):\n        if s[i]!= '1' and len(largest) < len(s[i:]):\n            largest = s[i:]\n    if largest == \"\":\n        return \"-1\"\n    else:\n        return largest\n"}
{"task_id": "Open/65", "completion": "\n    count = 0\n    b = []\n    for i in range(k, n):\n        if a[i] <= k:\n            b.append(a[i])\n            count += 1\n    return count, b\n"}
{"task_id": "Open/66", "completion": "\n    newSize = n + k\n    newArr = [0] * newSize\n    for i in range(n):\n        newArr[i] = arr[i]\n    for i in range(k):\n        newArr[i + n] = arr[i]\n    newArr.sort()\n    if newSize % 2 == 0:\n        return ( newArr[newSize // 2] + newArr[newSize // 2 - 1] ) / 2\n    else:\n        return newArr[newSize // 2]\n\narr = [1,2,3,4,5,6,7,8,9,10]"}
{"task_id": "Open/67", "completion": "\n    \n    pos = 0\n    neg = 0\n    zero = 0\n    for i in range(n):\n        if a[i] > 0:\n            pos += 1\n        elif a[i] < 0:\n            neg += 1\n        else:\n            zero += 1\n    \n    if neg % 2 == 0:\n        return pos + neg + zero\n    else:\n        if zero == 0:\n            return pos + neg + 2\n        else:\n            return pos + neg + zero\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    n = n - 1\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    if n < 0 :\n        n = n & 0xffffffff\n    n = bin(n)[2:]\n    n = n.zfill(32)\n    for i in range(1, len(n)) :\n        if n[i] == '1' and n[i-1] == '0' :\n            return False\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    if n % x == 0 :\n        return n\n    elif n < x :\n        return n\n    else :\n        return n + (x - n % x)\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    num = 0\n    while num <= n :\n        sum += num\n        num += 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i + 2\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    \n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    max_val = 0\n    for key in count:\n        if count[key] > max_val:\n            max_val = count[key]\n    \n    return max_val\n\narr = [1,2,3,4,5,6,7,8,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] > a[j] and (a[i] & a[j] == 0):\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    \n    binary = bin(n)\n    binary = binary[2:]\n    \n    for i in range(len(binary)):\n        if binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n        elif binary[i] == '1':\n            binary = binary[:i] + '0' + binary[i+1:]\n    \n    return int(binary, 2)\n    "}
{"task_id": "Open/76", "completion": "\n    changes = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            A[i+1] = 0\n            changes += 1\n    return changes\n\nA = [1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"}
{"task_id": "Open/77", "completion": "\n    \n    degree = radian * 180 / pi\n    return degree\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    sum = (a + (n-1) * d) * n / 2\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 0 :\n        return 1\n    else :\n        max_power = 0\n        while n > 1 :\n            n = n / 2\n            max_power += 1\n        return max_power\n"}
{"task_id": "Open/81", "completion": "\n    squares = 0\n    for i in range(moves) :\n        if row + i < 8 and column + i < 8 :\n            squares += 1\n        if row + i < 8 :\n            squares += 1\n        if column + i < 8 :\n            squares += 1\n    return squares\n"}
{"task_id": "Open/82", "completion": "\n    \n    prev = 0\n    for i in range(1, n+1):\n        prev = prev + i\n    return prev\n"}
{"task_id": "Open/83", "completion": "\n    \n    lastOccurrence = []\n    for i in range(len(s)):\n        lastOccurrence.append(s.rfind(s[i]))\n    \n    sortedString = sorted(s)\n    \n    for i in range(len(s)):\n        if lastOccurrence[i]!= i:\n            s = s[:i] + s[lastOccurrence[i]] + s[i+1:lastOccurrence[i]] + s[i] + s[lastOccurrence[i]+1:]\n    \n    return s\n"}
{"task_id": "Open/84", "completion": "\n    arr = []\n    for i in range(n) :\n        if i%2 == 0 :\n            arr.append(i)\n        else :\n            arr.append(i)\n    return sum(arr[l-1:r])\n"}
{"task_id": "Open/85", "completion": "\n    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range(1, smaller + 1) :\n        if x % i == 0 and y % i == 0 :\n            hcf = i\n    return hcf\n"}
{"task_id": "Open/86", "completion": "\n    count = 0\n    num = A\n    numList = [A, B]\n    while count < N:\n        num += B\n        numList.append(num)\n        count += 1\n    return numList[N]\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    str_list = str.split()\n    for i in str_list:\n        if i == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    \n    r = r / 12\n    t = t * 12\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    counter = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[k] > B[j] * B[j]:\n                    counter += 1\n    return counter\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range ( l, r + 1 ) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] == arr[j] - arr[i]:\n                max_length = max(max_length, j - i + 1)\n    return max_length\n"}
{"task_id": "Open/92", "completion": "\n    max_len = 0\n    d = {}\n    for i in range(len(str)):\n        if str[i].isalnum():\n            if str[i].isdigit():\n                d[i] = 1\n            else:\n                d[i] = 0\n            if max_len % 2 == 0 and max_len > 0:\n                max_len += 1\n            elif max_len == 0:\n                max_len = 1\n        else:\n            d[i] = 0\n    if max_len == 0:\n        return -1\n    result = []\n    for key in d:\n        if d[key] % 2 == 0 and d[key] > max_len:\n            max_len = d[key]\n            result = [key, key + max_len - 1]\n    return str[result[0]:result[1] + 1]\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 0 and n <= 1 :\n        count += 1\n        n = n / 2\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    string = \"\"\n    for i in range(n):\n        string += \"a\"\n    \n    for i in range(n-1, -1, -1):\n        k -= 1\n        if k >= 0:\n            if k >= 26:\n                string = string[:i] + \"z\" + string[i+1:]\n                k -= 26\n            else:\n                string = string[:i] + chr(97+k) + string[i+1:]\n                k -= 97 - ord(string[i])\n    return string\n"}
{"task_id": "Open/95", "completion": "\n    distance = 0\n    while n > 0 :\n        distance += fuel / n\n        n -= 1\n    return distance\n"}
{"task_id": "Open/96", "completion": "\n    sum1 = 0\n    sum2 = 0\n    for i in range(n):\n        sum1 += arr[i]\n    sum2 = sum1 - arr[n-1]\n    if sum1 == sum2/3:\n        return 1\n    else:\n        return 0\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    sentence = sentence.split()\n    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "\n    \n    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "\n    if a + k!= b and b + k!= c and c + k!= a:\n        return False\n    if a - k!= b and b - k!= c and c - k!= a:\n        return False\n    if a * k!= b and b * k!= c and c * k!= a:\n        return False\n    if a / k!= b and b / k!= c and c / k!= a:\n        return False\n    if a % k!= b and b % k!= c and c % k!= a:\n        return False\n    return True\n"}
{"task_id": "Open/100", "completion": "\n    \n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    \n    if x_bin == y_bin:\n        return True\n    \n    while x_bin!= y_bin:\n        x_bin = x_bin[1:] + x_bin[0]\n        y_bin = y_bin[1:] + y_bin[0]\n        \n        if x_bin == y_bin:\n            return True\n        \n    return False\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    \n    arr.sort()\n    min_removal = 0\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i - 1])\n        if diff > 0:\n            min_removal += diff\n        else:\n            min_removal = max(min_removal, diff)\n    return min_removal\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/104", "completion": "\n    max_count = 0\n    for i in range(left, right + 1):\n        count = 0\n        while i > 0:\n            if i & 1 == 1:\n                count += 1\n            i = i >> 1\n        if count > max_count:\n            max_count = count\n    return max_count\n"}
{"task_id": "Open/105", "completion": "\n    result = 0\n    while n >= 2 :\n        result += 1\n        n = n - 1\n    return result\n"}
{"task_id": "Open/106", "completion": "\n    divisors = []\n    for i in range(1, n) :\n        if n % i == 0 :\n            divisors.append(i)\n    return sum(divisors) == n\n"}
{"task_id": "Open/107", "completion": "\n    \n    century = (N // 100)\n    leap_century = (N // 400)\n    leap_year = (N // 4)\n    \n    if (N % 100) % 4 == 0:\n        leap_year = (N // 4)\n    else:\n        leap_year = (N // 4) + 1\n    \n    odd_days = ((N % 100) * 365) + ((N % 100) // 4) + ((N % 100) // 4) + ((N % 100) // 4)\n    \n    return odd_days % 7\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/108", "completion": "\n    \n    if a < 0 :\n        return -1\n    \n    return int((3 * (a ** 2)) / 2)\n"}
{"task_id": "Open/109", "completion": "\n    \n    string = str(n)\n    \n    return string.count(str(d))\n"}
{"task_id": "Open/110", "completion": "\n    \n    if n < 0 :\n        return False\n    \n    n = str(n)\n    \n    for i in n :\n        if n.count(i) > 1 :\n            return False\n    \n    return True\n"}
{"task_id": "Open/111", "completion": "\n    count = 0\n    for i in a:\n        while i%5!= 0 or i%3!= 0:\n            i = i/5\n            count += 1\n    return count == n-1\n"}
{"task_id": "Open/112", "completion": "\n    array = [0] * (n+1)\n    array[0] = 4\n    array[1] = 7\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 7\n        else:\n            array[i] = array[(i//2)-1] * 10 + 4\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    \n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 5\n        else:\n            array[i] = array[i//2] * 10 + 3\n    \n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    \n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 2\n        else:\n            array[i] = array[i//2 - 1] * 10 + 1\n    \n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    for i in range(n) :\n        if (a[i] % 11)!= 0 :\n            return False\n    return True\n"}
{"task_id": "Open/116", "completion": "\n    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return l * b * h\n"}
{"task_id": "Open/117", "completion": "\n    \n    words = string.split()\n    modified_words = []\n    \n    for word in words:\n        modified_words.append(word[0].upper() + word[1:len(word)-1] + word[len(word)-1].upper())\n    \n    return \" \".join(modified_words)\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "\n    return len(arr) == len(set(arr))\n"}
{"task_id": "Open/120", "completion": "\n    \n    # Initialize an empty set to store distinct two-character codes.\n    distinct_codes = set()\n    \n    for i in range(len(string) - 1):\n        # Convert the character pair to a two-character code.\n        code = string[i:i+2]\n        \n        # Add the two-character code to the set.\n        distinct_codes.add(code)\n        \n    return len(distinct_codes)\n    "}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    maximum = 0\n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            maximum = maximum * 10 + int(ss[i])\n        else :\n            if maximum < int(ss[i]) :\n                maximum = int(ss[i])\n    return maximum\n"}
{"task_id": "Open/123", "completion": "\n    longest = 0\n    index = 0\n    while index < len(s):\n        if not s[index].isdigit() or index == len(s)-1:\n            break\n        elif s[index+1].isdigit() or index == 0:\n            longest = max(longest, index+1)\n            index += 1\n        else:\n            index += 1\n    return s[0:longest]\n"}
{"task_id": "Open/124", "completion": "\n    \n    if N > M :\n        smaller = M\n    else :\n        smaller = N\n    \n    while K > 0 :\n        if N > M :\n            N -= smaller\n        else :\n            M -= smaller\n        K -= 1\n    \n    if N > 0 and M > 0 :\n        return N * M\n    else :\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/125", "completion": "\n    if len(string)!= length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    result = 0\n    while n >= 2**result :\n        result += 1\n    return result\n"}
{"task_id": "Open/127", "completion": "\n    \n    A = str(A)\n    B = str(B)\n    \n    if len(A) == len(B):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/128", "completion": "\n    \n    if x - y == 1 or x - y == -1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    for i in range(3, n+1):\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2 + Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    min_steps = 0\n    for i in range(n):\n        if i == 0:\n            min_steps = 0\n        else:\n            min_steps += abs(arr[i] - arr[i-1])\n    return min_steps\n"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/132", "completion": "\n    m = (N // a) + 1\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    \n    if N <= 2 :\n        return N\n    \n    elif N <= 4 :\n        return N + 3\n    \n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    \n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    \n    else :\n        return N - 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/134", "completion": "\n    \n    if arr[0] % 2 == 0:\n        return False\n    \n    if arr[n-1] % 2 == 0:\n        return False\n    \n    if n % 2 == 0:\n        return False\n    \n    return True\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\n"}
{"task_id": "Open/135", "completion": "\n    \n    if N == 1 :\n        return ( R - L + 1 )\n    elif N == 2 :\n        return ( R - L + 2 )\n    elif N > 2 :\n        return ( R - L + 2 ) + ( N - 2 )\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "\n    for i in range ( n ) :\n        if arr[i] == i + 1 :\n            return i + 2\n    return n + 1\n\narr = [ -1, -2, -3, -4, -5, -6, -7, -8, -9, -10 ]\nn = len ( arr )"}
{"task_id": "Open/137", "completion": "\n    \n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    return int(s)\n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for char in s :\n        sum += ord(char)\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/140", "completion": "\n    count = 0\n    while ( A * count + B * ( count + 1 ) ) <= S :\n        count += 1\n    if count == N :\n        return count\n    else :\n        return -1\n"}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x, y)\n"}
{"task_id": "Open/142", "completion": "\n    \n    count = 0\n    \n    while n > 0 :\n        if n % 10 == 0 :\n            count += 1\n        else :\n            break\n        n = n // 10\n    \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/143", "completion": "\n    max_sum = 0\n    max_index = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i):\n            sum += arr[j]\n        for j in range(i+1,n):\n            sum += arr[j]\n        if sum > max_sum:\n            max_sum = sum\n            max_index = i\n    return max_index\n\narr = [1,3,4,8,10,5,7]\nn = len(arr)"}
{"task_id": "Open/144", "completion": "\n    dp = []\n    for i in range(1, n) :\n        for j in range(0, i) :\n            if arr[i] < arr[j] :\n                dp.append(arr[j])\n    return len(dp)\n"}
{"task_id": "Open/145", "completion": "\n    \n    if k < 0 :\n        return -1\n    \n    min_element = arr[0]\n    for i in range(n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n        elif arr[i] - k < 0 :\n            return -1\n    return min_element + k\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 3"}
{"task_id": "Open/146", "completion": "\n    count = 1\n    res = -1\n    while K % count!= 0 :\n        count += 1\n    while K % count == 0 :\n        if K % count == 1 :\n            res = count\n        count += 1\n    return res\n"}
{"task_id": "Open/147", "completion": "\n    min_ops = sys.maxsize\n    for i in range(n):\n        if arr[i]!= arr[0]:\n            min_ops = min(min_ops, arr[i] - arr[0] + 1)\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "\n    sum = 0\n    for i in range(n) :\n        if i % 2 == 0 :\n            sum += 5\n        else :\n            sum += 3\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s**0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "\n    \n    binary = bin(n)\n    binary = binary[2:]\n    \n    bits = binary.split(\"0\")\n    \n    for bit in bits:\n        if bit == \"1\" and bits[bits.index(bit) + 1] == \"1\":\n            return False\n    \n    return True\n"}
{"task_id": "Open/153", "completion": "\n    vowels = []\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            vowels.append(char)\n    vowels.sort()\n    for i in range(len(vowels)-1):\n        if vowels[i] > vowels[i+1]:\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range ( low, high + 1 ) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    \n    float_input = float(n)\n    log_input = math.log(float_input)\n    nearest_power = 2 ** math.floor(log_input)\n    diff = abs(float_input - nearest_power)\n    return diff\n"}
{"task_id": "Open/156", "completion": "\n    \n    if r < 0 :\n        return -1\n    else :\n        return ( (3 ** 0.5) / 4 ) * 3.14 * r ** 2\n"}
{"task_id": "Open/157", "completion": "\n    \n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    return s\n"}
{"task_id": "Open/158", "completion": "\n    \n    start = 0\n    end = size - 1\n    \n    while start <= end :\n        middle = (start + end) // 2\n        \n        if ar[middle] == middle :\n            start = middle + 1\n        else :\n            end = middle - 1\n    \n    return start\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    \n    count = [0] * n\n    \n    for i in range(n):\n        count[arr[i]] += 1\n    \n    for i in range(n):\n        if count[i] % 2 == 1:\n            return i\n    \n    return None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    ans = 0\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n\narr = [0, 1, 1, 0]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    if sx == dx and sy == dy :\n        return True\n    elif sx == dx :\n        return isReachable ( sx, sy + 1, dx, dy )\n    elif sy == dy :\n        return isReachable ( sx + 1, sy, dx, dy )\n    else :\n        return False\n"}
{"task_id": "Open/163", "completion": "\n    if n % 2 == 1 :\n        return 0\n    a = 1\n    b = 0\n    for i in range(3, n/2+1, 2) :\n        a, b = a*2 + b*2*i, a*2 + b*2*(i-1)\n    return a\n"}
{"task_id": "Open/164", "completion": "\n    \n    d = {}\n    for i in range(n):\n        d[arr[i]] = d.get(arr[i],0) + 1\n    \n    count = 1\n    for i in d:\n        count *= d[i]\n    \n    return count\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/165", "completion": "\n    if height == 0:\n        return 1\n    else:\n        return AVLnodes(height-1) + AVLnodes(height-2)\n"}
{"task_id": "Open/166", "completion": "\n    if source == dest :\n        return 0\n    if abs(source - dest) > step :\n        return sys.maxsize\n    return steps(source + step, step, dest) + 1\n"}
{"task_id": "Open/167", "completion": "\n    s = \"1\"\n    for i in range(2,n+1):\n        count = 0\n        temp = \"\"\n        for j in range(len(s)):\n            if j == len(s)-1:\n                temp += str(count+1)\n            elif s[j] == s[j+1]:\n                count += 1\n            else:\n                temp += str(count+1)\n                count = 0\n        s = temp\n    return s\n"}
{"task_id": "Open/168", "completion": "\n    max_length = 0\n    for i in range(N):\n        product = arr[i]\n        for j in range(i+1,N):\n            product *= arr[j]\n            if product >= 0:\n                max_length = max(max_length, j-i+1)\n                break\n    return max_length if max_length > 0 else N\n\narr = [1,2,3,4,5]"}
{"task_id": "Open/169", "completion": "\n    \n    m = abs(m)\n    n = abs(n)\n    product = m * n\n    sum = m + n\n    sqrt = math.sqrt(sum)\n    normal = (product / sqrt)\n    return normal\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n - k + 1):\n        sum = 0\n        for j in range(i, i + k):\n            sum += arr[j]\n        if sum < k:\n            count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "\n    \n    arr.sort()\n    count = 0\n    \n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            k = j + 1\n            while k < len(arr):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n                k += 1\n    \n    return count\n\nn = int(input())\nL = int(input())\narr = [int(x) for x in input().split()]"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range ( l, r + 1 ) :\n        if ( i % 2 == 1 and i % 3 == 1 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    \n    n = bin(n)[2:]\n    m = bin(m)[2:]\n    \n    if len(n) < len(m):\n        n = '0' * (len(m) - len(n)) + n\n    else:\n        m = '0' * (len(n) - len(m)) + m\n    \n    return int(n[:-m] + str(1 - int(n[-m])) + '0' * m, 2)\n    \n    "}
{"task_id": "Open/174", "completion": "\n    count = 0\n    total = R - L + 1\n    divisible = total // 9\n    remainder = total % 9\n    if K == 9 :\n        K = 0\n    for i in range(R, L - 1, -1) :\n        if remainder == K :\n            count += 1\n        remainder = (remainder * 10) % 9\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    \n    product = math.log10(n) * n\n    return str(product)[:k]\n"}
{"task_id": "Open/176", "completion": "\n    \n    for i in range(1, n) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    return -1\n\nA = [1,2,3,4,5,6,7,8,9,10]\nn = len(A)"}
{"task_id": "Open/177", "completion": "\n    \n    a, b, c = sorted(a, b, c)\n    \n    if a >= b + c :\n        return 0\n    \n    return a + b + c - max(a, b, c)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
