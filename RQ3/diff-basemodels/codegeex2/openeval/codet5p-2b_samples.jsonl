{"task_id": "Open/0", "completion": "\n    sum = 0\n    count = 0\n    for i in arr :\n        sum += i\n    for i in arr :\n        if (sum - i) % K == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    max_len = 0\n    for i in arr :\n        if i < arr[0] :\n            max_len = max(max_len,1)\n        else :\n            max_len = max(max_len,arr.count(i))\n    return max_len\n"}
{"task_id": "Open/2", "completion": "\n    \n    n = int( bin(n)[2:], 2)\n    \n    for i in range(l, r+1):\n        i = int(bin(i)[2:], 2)\n        if i.count(1) == 0:\n            return \"No\"\n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n\nA = [1,2,3,4,5,6,7,8,9]\nn = len(A)\nK = 3"}
{"task_id": "Open/4", "completion": "\n    \n    for i in a :\n        a.remove(i)\n        if sum(a) == n - sum(a) :\n            return True\n        a.append(i)\n    return False\n"}
{"task_id": "Open/5", "completion": "\n    return 1 if x % 2 == 0 else 0\n"}
{"task_id": "Open/6", "completion": "\n    output = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            vec[i] = vec[i] + 1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i + 1)\n    return output\n"}
{"task_id": "Open/7", "completion": "\n    max_length = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if arr[i] % 10 == arr[j] % 10 or arr[i] // 10 == arr[j] // 10 :\n                max_length = max(max_length, j-i+1)\n    return max_length\n"}
{"task_id": "Open/8", "completion": "\n    distinct_prime_factors = {}\n    for i in a :\n        prime_factors = []\n        for j in range(1,i+1) :\n            if i % j == 0 :\n                prime_factors.append(j)\n        distinct_prime_factors[i] = len(prime_factors)\n    return distinct_prime_factors\n"}
{"task_id": "Open/9", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(n-1):\n        sum += abs(arr[i] - arr[i+1])\n    return sum\n"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A)!= 0 and len(B)!= 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            A.append(A.popleft())\n            B.append(B.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    count = 0\n    for i in range(len(s)):\n        set = set()\n        for j in range(i,len(s)):\n            if s[j] not in set:\n                set.add(s[j])\n            else:\n                break\n        if len(set) <= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "\n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613,"}
{"task_id": "Open/14", "completion": "\n    \n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/15", "completion": "\n    for i in range(t) :\n        a = random.randint(2,n-1)\n        if ( (n-1)**(a-1) % n ) == 1 :\n            return 1\n    return -1\n"}
{"task_id": "Open/16", "completion": "\n    for i in range(n):\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(length) :\n        if i % 2 == 0 :\n            if s[i] == '1' :\n                count += 1\n        else :\n            if s[i] == '0' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "\n    counter = 0\n    for i in range(1,n+1) :\n        if math.log(i,2).is_integer() :\n            counter += 1\n    return counter\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return 0\n    elif y == 1 :\n        return x\n    else :\n        return x + product(x, y-1)\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        elif i % 4 == 1 :\n            count1 += 1\n        elif i % 4 == 2 :\n            count2 += 1\n        elif i % 4 == 3 :\n            count3 += 1\n    if count0 == count1 and count1 == count2 and count2 == count3 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 1\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            max_len += 1\n        else:\n            max_len = 1\n    return max_len\n\narr = [1, 3, 5, 4, 7]\nn = len(arr)"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    \n    count = subsetSum( arr, n, i+1, sum-arr[i], count )\n    count = subsetSum( arr, n, i+1, sum, count )\n    return count\n"}
{"task_id": "Open/24", "completion": "\n    return ( n * 7) - 4\n"}
{"task_id": "Open/25", "completion": "\n    sum_squares = 0\n    sum_num = 0\n    total_sum = 0\n    \n    for i in range(1, n+1) :\n        sum_squares += i**2\n        sum_num += i\n        total_sum += 1\n    \n    total_sum += 1\n    \n    return sum_squares, sum_num, total_sum\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    return x <= y\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return (b-a)/a*100\n"}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    count = 0\n    for i in range(n) :\n        sum += (i**2)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/31", "completion": "\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "\n    chicks = 3**(n-1)\n    return chicks\n"}
{"task_id": "Open/33", "completion": "\n    term = 1\n    for i in range(1, n+1) :\n        term = term * 2 + (i - 1)\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    count = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            product = 1\n            for k in range(i, j + 1):\n                product *= a[k]\n            if product < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range(1,n+1) :\n        if (i%10 == d) :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    arr.sort()\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n    return n+1\n"}
{"task_id": "Open/37", "completion": "\n    dp = [0] * ( n + 1 )\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1 ) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    sum = 0\n    \n    while l < b :\n        l = l + 1\n        b = b - 1\n        sum = sum + (l * b)\n    return sum\n"}
{"task_id": "Open/39", "completion": "\n    return sum(range(1,N+1))\n"}
{"task_id": "Open/40", "completion": "\n    max_count = 0\n    current_count = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            current_count += 1\n        else :\n            current_count = 0\n        max_count = max(max_count, current_count)\n    return max_count\n"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            max_length = max(max_length, 1)\n        else:\n            max_length = max(max_length, max(0, i-1) + 1)\n    return max_length\n\narr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}
{"task_id": "Open/42", "completion": "\n    max_mins = 0\n    for i in range(n-k+1):\n        max_mins = max(max_mins,min(a[i:i+k]))\n    return max_mins\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(0,n) :\n        for j in range(i+1,n+1) :\n            product = array[i]*array[j]\n            if product <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    arr.sort()\n    total = 0\n    for i in range(0,n) :\n        total += abs(arr[i] - i)\n    return total\n"}
{"task_id": "Open/45", "completion": "\n    min_val = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n    return min_val * (n - 1)\n"}
{"task_id": "Open/46", "completion": "\n    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            diff = array[j] - array[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "\n    \n    a = float(a)\n    b = float(b)\n    c = float(c)\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    \n    if a == 0 :\n        if b == 0 :\n            if c == 0 :\n                return True\n            else :\n                return False\n        else :\n            return False\n    else :\n        det = (b*c) - (a*y1)\n        if det == 0 :\n            return True\n        else :\n            return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(0, a+1):\n        a = i + (a ^ i)\n        if a == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max = 0\n    while L < R :\n        max = max & L\n        L = L + 1\n    return max\n"}
{"task_id": "Open/50", "completion": "\n    smallest = a[0]\n    for i in range(1,n) :\n        if a[i] % smallest == 0 :\n            smallest = a[i]\n    if smallest == -1 :\n        return -1\n    return smallest\n"}
{"task_id": "Open/51", "completion": "\n    sum = 0\n    for i in range(n+1):\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "\n    d = {}\n    for i in range(n):\n        for j in range(n):\n            if (arr[i][j] * arr[i][j+1] * arr[i+1][j] * arr[i+1][j+1]) % 2!= 0:\n                d[(i,j)] = arr[i][j] * arr[i][j+1] * arr[i+1][j] * arr[i+1][j+1]\n    return d.values()\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(N+1):\n        count += i & (i ^ N) == i\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    \n    sum = 0\n    for i in range(n) :\n        sum += a[i]\n    sum += n - 1\n    \n    if sum == k :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/55", "completion": "\n    return ( n & (1 << 0) ) and ( n & (1 << 7) )\n"}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    for i in range(len(s)):\n        num_partitions = 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                num_partitions += 1\n            else:\n                break\n        if num_partitions > max_partitions:\n            max_partitions = num_partitions\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2,N):\n        result = result + var1 + var2\n        var1 = var2\n        var2 = result\n    return result\n\narr = [1,2,3,4,5]\nN = len(arr)"}
{"task_id": "Open/59", "completion": "\n    \n    for i in range(ranges) :\n        arr[index + i], arr[index - i] = arr[index - i], arr[index + i]\n    \n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    for i in range(0, int(n ** 0.5) + 1) :\n        square = i * i\n        if square + square == n :\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    count = 1\n    for i in range(len(b)):\n        if a[i] == b[0]:\n            count = count * 2 + 1\n        else:\n            return -1\n    return count\n"}
{"task_id": "Open/62", "completion": "\n    modified_str = \"\"\n    for i in range(len-1, -1, -1) :\n        if str[i] > str[i+1] :\n            str[i] = str[i] - 1\n            modified_str += \"9\"\n        else :\n            modified_str += str[i]\n    return modified_str\n"}
{"task_id": "Open/63", "completion": "\n    min_value = math.inf\n    for num in arr :\n        min_value = min(min_value, math.log(num, 2))\n    return min_value * n\n"}
{"task_id": "Open/64", "completion": "\n    largest = \"\"\n    for i in range(len(s)):\n        if s[i]!= '1' and len(largest) < len(s[i:]):\n            largest = s[i:]\n    if largest == \"\":\n        return \"-1\"\n    else:\n        return largest\n"}
{"task_id": "Open/65", "completion": "\n    b = []\n    count = 0\n    for i in range(k,n):\n        if a[i] <= k:\n            b.append(a[i])\n        else:\n            count += 1\n    b.sort()\n    for i in range(k):\n        b.pop(0)\n    return len(b),count\n"}
{"task_id": "Open/66", "completion": "\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return arr[0]\n    if n == 2 :\n        return max(arr[0], arr[1])\n    \n    newSize = n + k - 1\n    arr.sort()\n    if newSize % 2 == 0 :\n        return (arr[newSize//2 - 1] + arr[newSize//2]) / 2\n    else :\n        return arr[newSize//2]\n"}
{"task_id": "Open/67", "completion": "\n    \n    if a == []:\n        return 0\n    \n    pos = 0\n    neg = 0\n    zero = 0\n    for i in a:\n        if i > 0:\n            pos += 1\n        elif i < 0:\n            neg += 1\n        else:\n            zero += 1\n    \n    if pos % 2 == 0:\n        step = pos + zero\n    else:\n        step = pos + zero + 2\n    \n    return step\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    count = 0\n    while n > 0 :\n        if n & 1 == 1 :\n            count += 1\n        n = n >> 1\n    return count > 0\n"}
{"task_id": "Open/70", "completion": "\n    if n % x == 0 :\n        return n\n    elif n < x :\n        return x\n    else :\n        return n + (x - n % x)\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    num = 0\n    while num <= n:\n        sum = sum + num\n        num = num + 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        sum += i\n        i += 2\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    dict = {}\n    for i in arr :\n        if i in dict :\n            dict[i] += 1\n        else :\n            dict[i] = 1\n    max_value = max(dict.values())\n    return [key for key, value in dict.items() if value == max_value]\n"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n):\n        if a[i] > 0:\n            if a[i] & 1 == 1:\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    return int( bin( n )[2:], 2 )\n"}
{"task_id": "Open/76", "completion": "\n    changes = 0\n    for i in range(n) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            A[i+1] = 0\n            changes += 1\n    return changes\n\nA = [1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"task_id": "Open/77", "completion": "\n    return (radian * 180 / 3.14159)\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n / 2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    sum = (a + (n-1) * d) * n / 2\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    max_power = 0\n    if n % 2 == 1 :\n        return 1\n    while n > 1 :\n        n = n // 2\n        max_power = max_power * 2\n    return max_power\n"}
{"task_id": "Open/81", "completion": "\n    squares = 0\n    for i in range(1, moves+1) :\n        if row + i < 8 and column + i < 8 :\n            squares += 1\n    return squares\n"}
{"task_id": "Open/82", "completion": "\n    prev = 0\n    for i in range(1, n+1) :\n        prev = prev + i\n    return prev\n"}
{"task_id": "Open/83", "completion": "\n    \n    if len( s ) == 0 :\n        return \"\"\n    \n    last_occ = [0] * 26\n    \n    for i in range( len( s ) ) :\n        last_occ[ ord( s[i] ) - ord( 'a' ) ] = i\n    \n    sorted_string = sorted( s )\n    \n    for i in range( len( s ) ) :\n        if s[i]!= sorted_string[i] :\n            s[i], s[last_occ[ ord( sorted_string[i] ) - ord( 'a' ) ]] = s[last_occ[ ord( sorted_string[i] ) - ord( 'a' ) ]], s[i]\n    \n    return ''.join( s )\n"}
{"task_id": "Open/84", "completion": "\n    array = []\n    for i in range(n) :\n        array.append(i+1)\n    for i in range(n) :\n        if i % 2 == 0 :\n            array.append(i+1)\n    sum = 0\n    for i in range(l-1,r) :\n        sum += array[i]\n    return sum\n"}
{"task_id": "Open/85", "completion": "\n    if x > y :\n        smaller = y\n    else :\n        smaller = x\n    for i in range(1,smaller+1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "\n    count = 0\n    num = A\n    list = []\n    while count < N :\n        count += 1\n        num += B\n        list.append(num)\n    return list[N-1]\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    substr = substr.lower()\n    str = str.lower()\n    substr = substr.lower()\n    substr_list = str.split()\n    for i in substr_list:\n        if i == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    emi = ( p * r * (1 + r)**t ) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    counter = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i * C > j * j:\n                counter += 1\n    return counter\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if ( i % 10 == 2 or i % 10 == 3 or i % 10 == 9 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    max_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == arr[i] - arr[j-1]:\n                max_length = max(max_length, j-i+1)\n    return max_length\n"}
{"task_id": "Open/92", "completion": "\n    max_len = 0\n    d = {}\n    for i, c in enumerate(str) :\n        if c.isalnum() :\n            d[i] = d.get(i, 0) + 1\n        else :\n            d[i] = 0\n        if d[i] % 2 == 0 and d[i] > max_len :\n            max_len = d[i]\n    if max_len == 0 :\n        return -1\n    result = []\n    for i in range(len(str)) :\n        if i % 2 == 0 and d[i] > max_len :\n            result.append(i)\n    return str[result[0]:result[-1]+1]\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n >= 1 :\n        n = n/2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    if n <= 0 or k <= 0 :\n        return \"\"\n    \n    string = \"a\" * n\n    \n    for i in range(n-1, -1, -1) :\n        k = k - 26 if k >= 26 else k + 97 - 97\n        if k <= 0 :\n            break\n        string = string[:i] + chr(k) + string[i+1:]\n    \n    return string\n"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    currentDistance = fuel / n\n    while n > 0:\n        totalDistance += currentDistance\n        n -= 1\n        currentDistance = fuel / n\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    sum1 = 0\n    sum2 = 0\n    for i in range(n) :\n        sum1 += arr[i]\n        sum2 += arr[n-1-i]\n    if sum1 == sum2/3 and sum1 == 2*sum2/3 :\n        return 1\n    return 0\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    sentence = sentence.split()\n    if word in sentence :\n        return True\n    else :\n        return False\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nword = \"fox\""}
{"task_id": "Open/98", "completion": "\n    return math.floor(math.log10(n)) + 1\n"}
{"task_id": "Open/99", "completion": "\n    return True if a + k == b or b + k == c or c + k == a or a - k == b or b - k == c or c - k == a or a * k == b or b * k == c or c * k == a or a / k == b or b / k == c or c / k == a or a % k == b or b % k == c or c % k == a else False\n"}
{"task_id": "Open/100", "completion": "\n    return (x == y) or (x ^ y) == (x >> 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i + 1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for char in string :\n        if char == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    arr.sort()\n    min_removal = 0\n    for i in range(1,n):\n        diff = arr[i] - arr[i-1]\n        if diff > 0:\n            min_removal += diff\n        else:\n            min_removal = max(min_removal, diff)\n    return min_removal\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/104", "completion": "\n    max_count = 0\n    for i in range(left, right+1):\n        binary_rep = bin(i)[2:]\n        count = 0\n        for j in binary_rep:\n            if j == '1':\n                count += 1\n        if count > max_count:\n            max_count = count\n    return max_count\n"}
{"task_id": "Open/105", "completion": "\n    result = 0\n    while n >= 2 :\n        result += 1\n        n = n - 1\n    return result\n"}
{"task_id": "Open/106", "completion": "\n    if n <= 0 :\n        return False\n    divisors = []\n    for i in range(1,n) :\n        if n % i == 0 :\n            divisors.append(i)\n    return sum(divisors) == n\n"}
{"task_id": "Open/107", "completion": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    else :\n        return (1 + 5**0.5) / 2\n"}
{"task_id": "Open/109", "completion": "\n    \n    string_n = str(n)\n    \n    count = 0\n    \n    for i in string_n :\n        if i == d :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/110", "completion": "\n    for i in range(len(n)) :\n        if n.count(n[i]) > 1 :\n            return False\n    return True\n"}
{"task_id": "Open/111", "completion": "\n    for i in a :\n        if i % 5!= 0 and i % 3!= 0 :\n            return False\n    return True\n"}
{"task_id": "Open/112", "completion": "\n    \n    array = [0]*(n+1)\n    array[0] = 4\n    array[1] = 7\n    for i in range(2,n+1) :\n        if i%2 == 0 :\n            array[i] = array[i//2]*10 + 4\n        else :\n            array[i] = array[i//2]*10 + 7\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    arr = [0] * (n+1)\n    arr[0] = 3\n    arr[1] = 5\n    for i in range(2, n+1) :\n        if i % 2 == 1 :\n            arr[i] = arr[i//2] * 10 + 3\n        else :\n            arr[i] = arr[i//2] * 10 + 5\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "\n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            array[i] = array[i//2] * 10 + 1\n        else :\n            array[i] = array[i//2] * 10 + 2\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    for i in range(n) :\n        if a[i] % 11!= 0 :\n            return False\n    return True\n"}
{"task_id": "Open/116", "completion": "\n    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return l * b * h\n"}
{"task_id": "Open/117", "completion": "\n    \n    string = string.split()\n    \n    for i in range(len(string)):\n        string[i] = string[i][0].upper() + string[i][1:]\n        string[i] = string[i].capitalize()\n    \n    return \" \".join(string)\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil(math.sqrt(8 * p + 1) - 1) // 2\n"}
{"task_id": "Open/119", "completion": "\n    \n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j] and i!= j:\n                return False\n    return True\n"}
{"task_id": "Open/120", "completion": "\n    \n    set = set()\n    \n    for char in string :\n        two_char_code = char[0] + char[1]\n        set.add(two_char_code)\n    \n    return len(set)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    elif lower > higher :\n        return 2\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    maximum = 0\n    for i in range(len(ss)):\n        if ss[i].isdigit():\n            maximum = max(maximum, int(ss[i])*10+int(ss[i+1]))\n        else:\n            maximum = max(maximum, int(ss[i]))\n    return maximum\n"}
{"task_id": "Open/123", "completion": "\n    longest = 0\n    for i in range(0, len(s)) :\n        if ( s[i].isdigit() and i == 0 ) or ( s[i].isdigit() and s[i-1].isdigit() ) :\n            continue\n        else :\n            if i == len(s) - 1 :\n                break\n            else :\n                if s[i+1].isdigit() :\n                    continue\n                else :\n                    if i == 0 :\n                        longest = i + 1\n                    else :\n                        longest = i - longest\n                    break\n    return s[0:longest]\n"}
{"task_id": "Open/124", "completion": "\n    if N > M :\n        smaller = N\n    else :\n        smaller = M\n    \n    if K == 0 :\n        return 0\n    \n    while K > 0 and smaller > 0 :\n        if smaller > 0 :\n            if smaller > M :\n                smaller = smaller - M\n            else :\n                smaller = smaller - N\n        else :\n            if smaller > M :\n                smaller = smaller - M\n            else :\n                smaller = smaller - N\n        K = K - 1\n    \n    if smaller == 0 :\n        return N * M\n    else :\n        return smaller * M\n"}
{"task_id": "Open/125", "completion": "\n    \n    for i in range(1, length) :\n        if string[i] == string[i-1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    result = 0\n    while n >= 2**result :\n        result += 1\n    return result\n"}
{"task_id": "Open/127", "completion": "\n    \n    A = str(A)\n    B = str(B)\n    \n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/128", "completion": "\n    \n    if (x - y)!= 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1, Sn_2, Sn_3 = \"1\", \"12\", \"1213\"\n    for i in range(3, n+1) :\n        Sn_1, Sn_2, Sn_3 = Sn_2 + Sn_1, Sn_1 + Sn_2, Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    min_steps = 0\n    for i in range(n) :\n        if i == 0 :\n            min_steps = 0\n        else :\n            min_steps += abs(arr[i] - arr[i-1])\n    return min_steps\n"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 :\n        return 0\n    elif n % 4 == 1 or n % 4 == 2 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/132", "completion": "\n    m = (N // a) + 1\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "\n    if arr[0] % 2 == 1 and arr[-1] % 2 == 1 and arr[-1] % 2 == 1 and arr[-1] % 2 == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/135", "completion": "\n    if N == 1 :\n        return countSum(N-1, L, R ) + (R-L+1)\n    elif N > 1 :\n        return countSum(N-2, L, R ) + (R-L+1)\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "\n    for i in range(n) :\n        if arr[i] == i + 1 :\n            return i + 1\n    return n + 1\n"}
{"task_id": "Open/137", "completion": "\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = int(s)\n    return s\n\ns = \"1234\"\nn = 4"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1,n):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for i in s :\n        sum += ord(i)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "\n    count = 0\n    while (S >= 0):\n        if (S % B == 0):\n            count += S // B\n            S = 0\n        else:\n            S -= A\n            count += 1\n    if (count == N):\n        return count\n    else:\n        return -1\n"}
{"task_id": "Open/141", "completion": "\n    gcd = math.gcd(x,y)\n    lcm = x*y//gcd\n    return lcm\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n > 0 :\n        if n % 2 == 0 :\n            n = n // 2\n        else :\n            n = n - 1\n        count += 1\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    max_sum = 0\n    max_index = 0\n    for i in range(n) :\n        xor_sum = arr[i] ^ arr[i-1] ^ arr[i+1]\n        if xor_sum > max_sum :\n            max_sum = xor_sum\n            max_index = i\n    return max_index\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)"}
{"task_id": "Open/144", "completion": "\n    dp = []\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp.append(arr[i])\n                break\n    return len(dp)\n"}
{"task_id": "Open/145", "completion": "\n    arr.sort()\n    for i in range(n-1) :\n        if arr[i] == arr[i+1] :\n            arr[i] += k\n            arr[i+1] -= k\n            if arr[i] == 0 :\n                arr[i] = -1\n                arr[i+1] = -1\n    for i in range(n) :\n        if arr[i] == -1 :\n            return -1\n    return arr[0] + k\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 3"}
{"task_id": "Open/146", "completion": "\n    count = 1\n    res = -1\n    while K % count!= 0 :\n        count += 1\n        if K % count == 0 :\n            res = count\n    return res\n"}
{"task_id": "Open/147", "completion": "\n    min_ops = sys.maxsize\n    for i in range(n) :\n        if arr[i]!= arr[0] :\n            min_ops = min(min_ops, abs(arr[i] - arr[0]) + changeTheArray(arr[:i] + arr[i+1:], n))\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "\n    sum = 0\n    for i in range(n) :\n        if i % 2 == 0 :\n            sum += 3\n        else :\n            sum += 5\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s**(1/2)\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "\n    return True if check_binary( n ) else False\n"}
{"task_id": "Open/153", "completion": "\n    vowels = ['a','e','i','o','u']\n    sorted_vowels = sorted(vowels)\n    for i in range(len(sorted_vowels)):\n        if sorted_vowels[i]!= s[i]:\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low,high+1) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    return math.fabs(math.log(n) - math.log(2))\n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else:\n        return ( ( (3**(1/2)) / 4 ) * 3.14159265 ) * r**2\n"}
{"task_id": "Open/157", "completion": "\n    new_s = ''\n    for i in sorted(s) :\n        new_s += i\n    return new_s\n"}
{"task_id": "Open/158", "completion": "\n    \n    # Step 1. Take an array and its size as input.\n    ar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    size = len(ar)\n    \n    # Step 2. Sort the array in ascending order.\n    ar.sort()\n    \n    # Step 3. Use binary search to find the missing number.\n    start = 0\n    end = size - 1\n    \n    while start <= end :\n        mid = (start + end) // 2\n        if ar[mid] == mid :\n            start = mid + 1\n        else :\n            end = mid - 1\n    \n    return ar[start]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    \n    for i in range(n) :\n        count = arr.count(arr[i])\n        if count % 2 == 0 :\n            return arr[i]\n    return None\n"}
{"task_id": "Open/161", "completion": "\n    ans = 0\n    xorArr = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n    for i in range(n) :\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "\n    if sx == dx :\n        return False\n    if sy == dy :\n        return False\n    if sx > dx :\n        return False\n    if sy > dy :\n        return False\n    return True\n"}
{"task_id": "Open/163", "completion": "\n    if n % 2 == 0 :\n        return cntWays( n // 2 ) + cntWays( n // 2 )\n    else :\n        return 0\n"}
{"task_id": "Open/164", "completion": "\n    d = {}\n    for i in arr :\n        d[i] = d.get(i,0) + 1\n    return (d[i] * (d[i] - 1) // 2 for i in arr)\n"}
{"task_id": "Open/165", "completion": "\n    if height == 0 :\n        return 1\n    else :\n        return AVLnodes(height-1) + AVLnodes(height-2)\n"}
{"task_id": "Open/166", "completion": "\n    steps = 0\n    if source == dest :\n        return 0\n    if abs(source - dest) > step :\n        return sys.maxsize\n    steps = abs(source - dest) + step\n    return steps\n"}
{"task_id": "Open/167", "completion": "\n    \n    if n == 1 :\n        return \"1\"\n    \n    if n == 2 :\n        return \"11\"\n    \n    if n == 3 :\n        return \"21\"\n    \n    if n == 4 :\n        return \"1211\"\n    \n    if n == 5 :\n        return \"111221\"\n    \n    if n == 6 :\n        return \"312211\"\n    \n    if n == 7 :\n        return \"13112221\"\n    \n    if n == 8 :\n        return \"1113213211\"\n    \n    if n == 9 :\n        return \"31131211131221\"\n    \n    if n == 10 :\n        return \"1321131113211321\"\n    \n    if n == 11 :\n        return \"31131211131211131221\"\n    \n    if n == 12 :\n        return \"1321131113211311131221\"\n    \n    if n == 13 :\n        return \"31131211131211131211131221\"\n    \n    if n == 14 :\n        return"}
{"task_id": "Open/168", "completion": "\n    max_length = 0\n    product = 1\n    for i in arr:\n        product *= i\n        if product < 0:\n            break\n        max_length = max(max_length, len(arr) - i)\n    return max_length if product >= 0 else N\n"}
{"task_id": "Open/169", "completion": "\n    m = abs(m)\n    n = abs(n)\n    product = m * n\n    sum = m + n\n    sqrt = math.sqrt(sum)\n    normal = (product / sqrt)\n    return normal\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n-k+1):\n        sum = 0\n        for j in range(k):\n            sum += arr[i+j]\n        if sum < k:\n            count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(len(arr)-2) :\n        for j in range(i+1, len(arr)-1) :\n            k = j+1\n            while k < len(arr) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n                k += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l, r+1) :\n        if i % 2 == 0 and i % 3 == 1 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    return n & ~(1 << m)\n"}
{"task_id": "Open/174", "completion": "\n    count = 0\n    for i in range(L, R + 1):\n        if i % 9 == 0:\n            count += 1\n        if i % 9 == K:\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    product = n * math.log(n, 10)\n    return product[:k]\n"}
{"task_id": "Open/176", "completion": "\n    \n    for i in range(1,n) :\n        if A[i] > A[i-1] and A[i] > A[i+1] :\n            return A[i]\n    return -1\n\nA = [1,2,3,4,5,6,7,8,9]\nn = len(A)"}
{"task_id": "Open/177", "completion": "\n    a.sort()\n    b.sort()\n    c.sort()\n    \n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(a) and j < len(b) and k < len(c) :\n        if a[i] < b[j] and a[i] < c[k]:\n            i += 1\n        elif b[j] < a[i] and b[j] < c[k]:\n            j += 1\n        elif c[k] < a[i] and c[k] < b[j]:\n            k += 1\n        else:\n            return a[i] - b[j]\n    \n    return a[i] - b[j]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
