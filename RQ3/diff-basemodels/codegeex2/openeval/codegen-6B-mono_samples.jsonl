{"task_id": "Open/0", "completion": "    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    count = 0\n    for i in range(N):\n        if arr[i] + K > sum:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    max_len = 0\n    for i in range(n):\n        if arr[i] < arr[max_len]:\n            max_len = i\n    return max_len\n"}
{"task_id": "Open/2", "completion": "Convert the integer n to its binary representation.\"\"\"\n        \n        binary = []\n        \n        while n > 0 :\n            binary.append ( n % 2 )\n            n = n // 2\n        \n        binary.reverse ()\n        \n        return binary\n    \n    def convertToBinaryRange ( l, r ) :\n        \"\"\"Convert each number in the range from l to r (inclusive) to its binary representation.\"\"\"\n        \n        binary = []\n        \n        for i in range ( l, r + 1 ) :\n            binary.append ( convertToBinary ( i ) )\n        \n        return binary\n    \n    def countBitsSetInTheGivenRange ( l, r ) :\n        \"\"\"Count the number of bits that are set to 1 in the binary representation of each number in the range from l to r (inclusive).\"\"\"\n        \n        binary = convertToBinaryRange ( l, r )\n        \n        count = 0\n        \n        for i in range ( len ( binary ) ) :\n            count += binary [ i ].count ( 1"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    \n    for i in range(len(a)):\n        if (n - a[i]) == sum(a[i+1:]):\n            return True\n    return False\n"}
{"task_id": "Open/5", "completion": "    \n    return bin(x).count('1') % 2\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in range(len(vec)):\n        vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i + 1)\n    return output\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(arr[i:j+1]) > max_length and len(set(arr[i:j+1])) == len(arr[i:j+1]):\n                max_length = len(arr[i:j+1])\n    return max_length\n"}
{"task_id": "Open/8", "completion": "    \n    # Step 1. Initialize an empty dictionary to store the distinct prime factors.\n    prime_factors = {}\n    \n    # Step 2. Iterate through the list of integers.\n    for i in a:\n        # For each integer, calculate its prime factors and store them in the dictionary.\n        prime_factors[i] = Get_Prime_Factors(i)\n    \n    # Step 3. Iterate through the dictionary and count the number of distinct prime factors for each integer.\n    count = 0\n    for i in prime_factors:\n        count += len(prime_factors[i])\n    \n    # Step 4. Return the count of distinct prime factors for each integer.\n    return count\n"}
{"task_id": "Open/9", "completion": "    \n    arr.sort()\n    \n    sum = 0\n    for i in range(k) :\n        sum += arr[i] - arr[0]\n    \n    return sum\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.appendleft(B.pop())\n            A.append(A.pop())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range(len(s)) :\n        set_char = set()\n        for j in range(i, len(s)) :\n            if s[j] not in set_char :\n                set_char.add(s[j])\n            if len(set_char) <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    \n    # Initialize a list of prime numbers (2, 3, 5, 7, 11,...).\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 5"}
{"task_id": "Open/14", "completion": "    \n    # Your code here\n    \n    return \"\"\n"}
{"task_id": "Open/15", "completion": "    \n    for i in range(t) :\n        a = random.randint(2, n-1)\n        x = pow(a, (n-1)/2, n)\n        if x == 1 or x == n-1 :\n            continue\n        else :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "    for i in range( n ) :\n        if s1[i] == '0' and s2[i] == '1' :\n            return True\n        elif s1[i] == '1' and s2[i] == '0' :\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(length) :\n        if i % 2 == 0 :\n            if s[i] == '0' :\n                count += 1\n        else :\n            if s[i] == '1' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "    \n    counter = 0\n    for i in range(1, n+1) :\n        if isPowerNumber(i) :\n            counter += 1\n    return counter\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    elif y == 1 :\n        return x\n    else :\n        return x + product(x, y-1)\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n):\n        if a[i] % 4 == 0:\n            count0 += 1\n        elif a[i] % 4 == 1:\n            count1 += 1\n        elif a[i] % 4 == 2:\n            count2 += 1\n        elif a[i] % 4 == 3:\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n:\n        return 1\n    else:\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 1\n    for i in range(n):\n        curr_len = 1\n        for j in range(i+1,n):\n            if arr[j] >= arr[i]:\n                curr_len += 1\n            else:\n                break\n        max_len = max(max_len, curr_len)\n    return max_len\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        return 0\n    if sum == 0 :\n        return 1\n    return subsetSum(arr, n, i+1, sum-arr[i], count) + subsetSum(arr, n, i+1, sum, count)\n"}
{"task_id": "Open/24", "completion": "    return (n * 7) - 4\n"}
{"task_id": "Open/25", "completion": "    sum_squares = 0\n    sum_num = 0\n    total_sum = 0\n    for i in range ( 1, n+1 ) :\n        sum_squares += i**2\n        sum_num += i\n    total_sum = sum_squares + sum_num + 1\n    return sum_squares, sum_num, total_sum\n"}
{"task_id": "Open/26", "completion": "    max_sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return (b - a) / a * 100\n"}
{"task_id": "Open/30", "completion": "    return sum(i*i for i in range(1,n+1))/n\n"}
{"task_id": "Open/31", "completion": "    \n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "    term = 1\n    for i in range(1, n+1):\n        term = term * 2 + i - 1\n    return term\n"}
{"task_id": "Open/34", "completion": "    if len(a) == 0 :\n        return 0\n    \n    count = 0\n    product = 1\n    left = 0\n    right = 0\n    \n    while right < len(a) :\n        product *= a[right]\n        while product >= k and left <= right :\n            product /= a[left]\n            left += 1\n        count += right - left + 1\n        right += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1, n+1):\n        if str(i).find(str(d))!= -1:\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    \n    for i in range ( n ) :\n        if arr[i] > 0 and arr[i] < n + 1 :\n            return i + 1\n    \n    return n + 1\n"}
{"task_id": "Open/37", "completion": "    if n == 0 or n == 1 :\n        return 1\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    sum = 0\n    while l >= 1 and b >= 1 :\n        sum += (l * b)\n        l -= 1\n        b -= 1\n    return sum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "    max_count = 0\n    current_count = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            current_count += 1\n        else :\n            current_count = 0\n        max_count = max(max_count, current_count)\n    return max_count\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            max_length = max(max_length, 1)\n        else:\n            if max_length == 0:\n                max_length = 1\n            else:\n                max_length = max(max_length, i - max_length + 1)\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    max_mins = 0\n    for i in range(0, n-k+1):\n        min_element = min(a[i:i+k])\n        max_mins = max(max_mins, min_element)\n    return max_mins\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (array[j]*array[i]) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    \n    #Step 1\n    arr.sort()\n    \n    #Step 2\n    total = 0\n    for i in range(n):\n        total += abs(arr[i] - i + 1)\n    \n    return total\n"}
{"task_id": "Open/45", "completion": "    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        diff = abs(array[i] - i)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    return ( ( a * x1 + b * y1 ) - c ) * ( a * x2 + b * y2 ) > 0\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a + 1):\n        if (a - i) % (i + 1) == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    \n    # Step 1\n    # Perform bitwise AND operation between L and R\n    # L = 1010\n    # R = 1011\n    # 1010 & 1011 = 1011\n    # return 1011\n    \n    # Step 2\n    # Return the result of the bitwise AND operation. \n    # return 1011\n    \n    # Step 3\n    # Perform bitwise AND operation between L and R\n    # L = 1010\n    # R = 1011\n    # 1010 & 1011 = 1010\n    # return 1010\n    \n    # Step 4\n    # Return the result of the bitwise AND operation. \n    # return 1010\n    \n    # Step 5\n    # Perform bitwise AND operation between L and R\n    # L = 1010\n    # R = 1011\n    # 1010 & 1011 = 1010\n    # return 1010\n    \n    # Step 6\n    # Return the result of the bitwise AND operation. \n    # return 1010\n    \n    # Step 7\n    # Perform bitwise AND operation between L and R\n    # L = 1010"}
{"task_id": "Open/50", "completion": "    smallest = a[0]\n    for i in range(1, n):\n        if smallest % a[i] == 0:\n            smallest = a[i]\n    if smallest == -1:\n        return -1\n    else:\n        return smallest\n"}
{"task_id": "Open/51", "completion": "    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "    \n    # Initialize an empty dictionary to store the XOR values.\n    xor_dict = {}\n    \n    # Iterate through all possible submatrices of size (i+1) x (j+1) where i and j range from 0 to n-1.\n    for i in range(n) :\n        for j in range(n) :\n            # Check if the product of the top left element and the bottom right element is odd.\n            if ( ( i + 1 ) * ( j + 1 ) ) % 2 == 1 :\n                # If it is, add the XOR value to the dictionary.\n                xor_dict[ ( i + 1 ) * ( j + 1 ) ] = arr[i][j] ^ arr[i][j+1] ^ arr[i+1][j] ^ arr[i+1][j+1]\n    \n    # Return the XOR value of all submatrices that satisfy the condition.\n    return xor_dict\n"}
{"task_id": "Open/53", "completion": "    \n    count = 0\n    for i in range(N+1):\n        if i ^ i == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    \n    # Step 1. Calculate the sum of all array elements.\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    \n    # Step 2. Calculate the sum of all array elements plus the length of the array minus 1.\n    sum_plus_n = sum + n - 1\n    \n    # Step 3. Compare the calculated sums with the given k.\n    if sum_plus_n == k:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/55", "completion": "    \n    # convert the integer to its binary representation\n    binary = bin(n)\n    \n    # check if the first and last bits of the binary representation are set to 1\n    if binary[0] == '1' and binary[-1] == '1' :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    for i in range(len(s)):\n        num_partitions = 1\n        for j in range(i+1,len(s)):\n            if s[i] == s[j]:\n                num_partitions += 1\n            else:\n                if num_partitions > max_partitions:\n                    max_partitions = num_partitions\n                num_partitions = 1\n        if num_partitions > max_partitions:\n            max_partitions = num_partitions\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    \n    remainder = N % K\n    if remainder == 0 :\n        return N\n    else :\n        return N - remainder\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2, N):\n        result = result + var1 + var2\n        var1 = var1 * var2\n        var2 = result / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "    \n    # Step 1\n    value = arr[index]\n    \n    # Step 2\n    for i in range(len(ranges)) :\n        if ranges[i][0] <= index <= ranges[i][1] :\n            arr[ranges[i][0]], arr[ranges[i][1]] = arr[ranges[i][1]], arr[ranges[i][0]]\n    \n    # Step 3\n    return value\n"}
{"task_id": "Open/60", "completion": "    \n    # Step 1\n    for i in range(0, int(n**0.5) + 1) :\n        for j in range(0, int(n**0.5) + 1) :\n            if i**2 + j**2 == n :\n                return True\n    \n    # Step 2\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 1\n    for i in range(len(b)) :\n        if a[0] == b[i] :\n            count = count * 2 + 1\n        else :\n            return -1\n    return count\n"}
{"task_id": "Open/62", "completion": "    modified_str = \"\"\n    for i in range(len-1, -1, -1):\n        if str[i] > str[i+1]:\n            modified_str += \"9\"\n        else:\n            modified_str += str[i]\n    return modified_str\n"}
{"task_id": "Open/63", "completion": "    min_value = max(arr)\n    for i in range(n):\n        sum = 0\n        for j in range(n):\n            sum += math.log(arr[j])\n        if sum < math.log(min_value) * n:\n            min_value = arr[i]\n    return min_value\n"}
{"task_id": "Open/64", "completion": "    if len(s) == 0:\n        return \"-1\"\n    if len(s) == 1:\n        if s == '1':\n            return \"-1\"\n        else:\n            return s\n    \n    largest = \"\"\n    for i in range(len(s)):\n        if s[i]!= '1' and len(largest) < len(s[i:]):\n            largest = s[i:]\n    if len(largest) == 0:\n        return \"-1\"\n    else:\n        return largest\n"}
{"task_id": "Open/65", "completion": "    b = []\n    count = 0\n    for i in range(k, n):\n        if a[i] <= k:\n            b.append(a[i])\n            count += 1\n    return count, b\n"}
{"task_id": "Open/66", "completion": "    \n    newSize = n + k\n    arr.sort()\n    if newSize % 2 == 0:\n        return (arr[newSize/2] + arr[(newSize/2) - 1]) / 2\n    else:\n        return arr[newSize/2]\n"}
{"task_id": "Open/67", "completion": "    \n    # Step 1. Calculate the number of positive, negative, and zero elements in the array.\n    positive = 0\n    negative = 0\n    zero = 0\n    for i in range(n) :\n        if a[i] > 0 :\n            positive += 1\n        elif a[i] < 0 :\n            negative += 1\n        else :\n            zero += 1\n    \n    # Step 2. For each negative element, add the absolute difference between the element and -1 to the step count.\n    step = 0\n    for i in range(negative) :\n        step += abs(a[i] - -1)\n    \n    # Step 3. For each positive element, add the absolute difference between the element and 1 to the step count.\n    for i in range(positive) :\n        step += abs(a[i] - 1)\n    \n    # Step 4. If the number of negative elements is even, add the number of zero elements to the step count.\n    if negative % 2 == 0 :\n        step += zero\n    \n    # Step 5. If the number of negative elements is odd, check if"}
{"task_id": "Open/68", "completion": "    if n == 1:\n        return 0\n    v = []\n    n = n - 1\n    while n > 0:\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v) - 1, -1, -1):\n        result = result * 10 + v[i]\n    return result * 2\n"}
{"task_id": "Open/69", "completion": "    \n    count = 0\n    \n    for i in range(0, 32):\n        if (n & (1 << i)):\n            count += 1\n        else:\n            count = 0\n        \n        if (count > 0):\n            return True\n    \n    return False\n"}
{"task_id": "Open/70", "completion": "    if n % x == 0 :\n        return n\n    elif n < x :\n        return n\n    else :\n        return n + (x - n % x)\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    num = 0\n    while num <= n:\n        sum = sum + num\n        num = num + 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1):\n        series = 1\n        for j in range(1, i+1):\n            series += 2\n        sum += series\n    return sum\n"}
{"task_id": "Open/73", "completion": "    \n    # Initialize a dictionary to store the count of each value in the array.\n    count = {}\n    \n    # Iterate through the array and update the count of each value in the dictionary.\n    for i in range(n) :\n        if arr[i] in count :\n            count[arr[i]] += 1\n        else :\n            count[arr[i]] = 1\n    \n    # Iterate through the dictionary and find the maximum value that occurs the same number of times.\n    max_count = 0\n    max_val = 0\n    for key in count :\n        if count[key] > max_count :\n            max_count = count[key]\n            max_val = key\n    \n    # Return the maximum value.\n    return max_val\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n):\n        if (a[i] & (a[i] - 1)) == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    return int( ''.join( ['1' if x == '0' else '0' for x in bin(n)[2:]] ), 2 )\n"}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            A[i+1] = 0\n            changes += 1\n    return changes\n"}
{"task_id": "Open/77", "completion": "    return radian * 180/pi\n"}
{"task_id": "Open/78", "completion": "    return n // 2\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    sum = (a + (n-1) * d) * n / 2\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 1 :\n        return 1\n    else :\n        max_power = 0\n        while n > 1 :\n            n = n / 2\n            max_power += 1\n        return max_power\n"}
{"task_id": "Open/81", "completion": "    squares = 0\n    for i in range(moves) :\n        if row < 0 or row > 7 or column < 0 or column > 7 :\n            return squares\n        else :\n            squares += 1\n            row += 1\n            column += 1\n    return squares\n"}
{"task_id": "Open/82", "completion": "    prev = 0\n    for i in range(1, n+1):\n        prev = prev + i\n    return prev\n"}
{"task_id": "Open/83", "completion": "    \n    # Step 1. Create an empty list to store the last occurrences of each character in the string.\n    last_occurrence = []\n    \n    # Step 2. Sort the string.\n    sorted_string = sorted(s)\n    \n    # Step 3. Iterate through each character in the string.\n    for i in range(len(s)):\n        # Find the last occurrence of the character in the sorted string and store it in the list.\n        last_occurrence.append(s.rfind(sorted_string[i]))\n        \n        # If the character is not in the correct position, swap it with the character at its last occurrence in the list.\n        if last_occurrence[i]!= i:\n            s = s[:last_occurrence[i]] + s[i] + s[last_occurrence[i]+1:]\n            \n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/84", "completion": "    \n    # Step 1. Initialize an empty array.\n    arr = []\n    \n    # Step 2. Create a range of consecutive odd numbers and add them to the array.\n    for i in range(1, n+1, 2) :\n        arr.append(i)\n    \n    # Step 3. Create a range of consecutive even numbers and add them to the array.\n    for i in range(2, n+1, 2) :\n        arr.append(i)\n    \n    # Step 4. Calculate the sum of the elements in the array from index l-1 to index r.\n    sum = 0\n    for i in range(l-1, r) :\n        sum += arr[i]\n    \n    # Step 5. Return the sum.\n    return sum\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range(1, smaller + 1) :\n        if x % i == 0 and y % i == 0 :\n            hcf = i\n    return hcf\n"}
{"task_id": "Open/86", "completion": "    count = 0\n    num = A\n    list = [A, B]\n    while count < N:\n        num = num + B\n        list.append(num)\n        count += 1\n    return list[N-1]\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    list_of_substrings = str.split()\n    for substring in list_of_substrings:\n        if substring == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    # Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n    r = r / 100\n    # Convert the loan tenure from years to months by multiplying it by 12.\n    t = t * 12\n    # Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    # Return the calculated EMI.\n    return emi\n"}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[k] > B[j] * B[j]:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    if l > r :\n        return 0\n    elif l == r :\n        return 1 if l % 10 in [2,3,9] else 0\n    else :\n        return countNums(l, (l+r)//2) + countNums( (l+r)//2 + 1, r )\n"}
{"task_id": "Open/91", "completion": "    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] == arr[j] - arr[i]:\n                length = 1\n                for k in range(j+1, n):\n                    if arr[k] - arr[j] == arr[k] - arr[j]:\n                        length += 1\n                max_length = max(max_length, length)\n    return max_length\n"}
{"task_id": "Open/92", "completion": "    max_len = 0\n    d = {}\n    for i in range(len(str)):\n        if str[i].isalnum():\n            if str[i].isdigit():\n                d[i] = int(str[i])\n            else:\n                d[i] = 1\n        else:\n            d[i] = 0\n    for key in d:\n        if d[key]%2 == 0 and d[key] > max_len:\n            max_len = d[key]\n    if max_len == 0:\n        return -1\n    result = []\n    for key in d:\n        if d[key]%2 == 0 and d[key] > max_len:\n            result.append(key)\n    return str[result[0]:result[-1]+1]\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 0 and n <= 1:\n        count += 1\n        n /= 2\n    return count\n"}
{"task_id": "Open/94", "completion": "    \n    # Step 1. Create a string of length n consisting of all 'a' characters.\n    string = 'a' * n\n    \n    # Step 2. Iterate through the string in reverse order.\n    for i in range(n-1, -1, -1) :\n        \n        # Step 2.1. Subtract the current index from k.\n        k = k - 1\n        \n        # Step 2.2. If k is greater than or equal to 0, check if k is greater than or equal to 26.\n        if k >= 0 :\n            \n            # Step 2.2.1. If it is, replace the character at the current index with 'z' and subtract 26 from k.\n            if k >= 26 :\n                string = string[:i] + 'z' + string[i+1:]\n                k = k - 26\n            \n            # Step 2.2.2. Otherwise, calculate the ASCII value of the character to be replaced by adding k to 97 and subtracting 1.\n            else :\n                string = string[:i] + chr(97 + k) + string[i+"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    currentDistance = fuel / n\n    numberOfStops = n\n    while numberOfStops > 0:\n        totalDistance += currentDistance\n        numberOfStops -= 1\n        currentDistance = fuel / numberOfStops\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    sum1 = 0\n    sum2 = 0\n    for i in range(n):\n        sum1 += arr[i]\n        sum2 += arr[n-i-1]\n    if sum1 == (sum1/3):\n        return 1\n    elif sum2 == (sum2/3):\n        return 1\n    else:\n        return 0\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "    \n    if a + k!= b and b + k!= c and c + k!= a:\n        return False\n    if a - k!= b and b - k!= c and c - k!= a:\n        return False\n    if a * k!= b and b * k!= c and c * k!= a:\n        return False\n    if a / k!= b and b / k!= c and c / k!= a:\n        return False\n    if a % k!= b and b % k!= c and c % k!= a:\n        return False\n    return True\n"}
{"task_id": "Open/100", "completion": "    \n    # Convert x and y to binary representations\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    \n    # Check if the resulting values are equal or if the value becomes less than y without being equal to it.\n    if x_bin == y_bin or x_bin[1:] + '0' == y_bin:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)) :\n        if string[i] == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    \n    arr.sort()\n    min_removal = 0\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > 0:\n            min_removal = max(min_removal, diff)\n    return min_removal\n"}
{"task_id": "Open/104", "completion": "    max_count = 0\n    for i in range(left, right+1):\n        count = 0\n        while i > 0:\n            if i & 1 == 1:\n                count += 1\n            i = i >> 1\n        if count > max_count:\n            max_count = count\n    return max_count\n"}
{"task_id": "Open/105", "completion": "    result = 0\n    while n >= 2 :\n        result += 1\n        n -= 1\n    return result\n"}
{"task_id": "Open/106", "completion": "    if n < 1 :\n        return False\n    divisors = []\n    for i in range ( 1, n ) :\n        if n % i == 0 :\n            divisors.append ( i )\n    return sum ( divisors ) == n\n"}
{"task_id": "Open/107", "completion": "    \n    # Step 1. Calculate the number of leap centuries by dividing the year by 100 and shift the result by 2 bits.\n    centuries = (N // 100)\n    leap_centuries = (centuries // 4)\n    \n    # Step 2. Calculate the number of leap years by shifting the year by 2 bits.\n    years = (N // 400)\n    leap_years = (years // 4)\n    \n    # Step 3. Subtract the number of leap years from the total number of days in the year.\n    non_leap_days = (N - (leap_years * 400))\n    \n    # Step 4. If there are any leap centuries or leap years, adjust the number of non-leap years and leap years accordingly.\n    if (leap_centuries > 0) :\n        non_leap_days -= leap_centuries * 100\n        leap_years -= leap_centuries\n    \n    # Step 5. Calculate the total number of days by adding the number of non-leap years and twice the number of leap years.\n    total_days = (non_le"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return ((3 * a * a) + 1) / 2\n"}
{"task_id": "Open/109", "completion": "    \n    # Step 1\n    n = str(n)\n    \n    # Step 2\n    count = 0\n    for i in n :\n        if i == d :\n            count += 1\n    \n    # Step 3\n    return count\n"}
{"task_id": "Open/110", "completion": "    \n    # Iterate through the number\n    for i in range(len(n)) :\n        # If any digit is repeated, return False\n        if n[i] in n[i+1:] :\n            return False\n    # Return True\n    return True\n"}
{"task_id": "Open/111", "completion": "    for i in range(len(a)) :\n        if a[i] % 5 == 0 :\n            a[i] = a[i] / 5\n        elif a[i] % 3 == 0 :\n            a[i] = a[i] / 3\n        else :\n            return False\n    return True\n"}
{"task_id": "Open/112", "completion": "    \n    arr = [0] * (n+1)\n    arr[0] = 4\n    arr[1] = 7\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            arr[i] = arr[i//2] * 10 + 7\n        else:\n            arr[i] = arr[i//2] * 10 + 4\n    \n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "    \n    arr = [0] * (n+1)\n    arr[0] = 3\n    arr[1] = 5\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            arr[i] = arr[i//2] * 10 + 3\n        else:\n            arr[i] = arr[(i-1)//2] * 10 + 5\n    \n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "    \n    # Initialize an array of length n+1 with all elements set to 0.\n    arr = [0] * (n+1)\n    \n    # Set the first element of the array to 1.\n    arr[0] = 1\n    \n    # Set the second element of the array to 2.\n    arr[1] = 2\n    \n    # Iterate from 3 to n.\n    for i in range(3, n+1):\n        # If the index is odd, calculate the element at that index by multiplying the element at index i//2 by 10 and adding 1.\n        if i % 2 == 1:\n            arr[i] = arr[i//2] * 10 + 1\n        # If the index is even, calculate the element at that index by multiplying the element at index (i//2)-1 by 10 and adding 2.\n        else:\n            arr[i] = arr[i//2-1] * 10 + 2\n    \n    # Return the element at index n.\n    return arr[n]\n"}
{"task_id": "Open/115", "completion": "    for i in range(n) :\n        if (a[i] % 11!= 0) :\n            return False\n    return True\n"}
{"task_id": "Open/116", "completion": "    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return l * b * h\n"}
{"task_id": "Open/117", "completion": "Write a function that takes a string as input and returns a new string where the first and last letter of each word in the input string are capitalized.\n        The function should ignore any non-alphabetic characters.\n        \n        How to solve:\n        Step 1. Split the input string into a list of words.\n        Step 2. Iterate through each word in the list.\n            -Capitalize the first and last letter of each word.\n        Step 3. Join the modified words back into a string, separated by spaces.\n        Step 4. Return the modified string. \n        \"\"\"\n        \n        def FirstAndLast ( string ) :\n            \"\"\"Write a function that takes a string as input and returns a new string where the first and last letter of each word in the input string are capitalized.\n            The function should ignore any non-alphabetic characters.\n            \n            How to solve:\n            Step 1. Split the input string into a list of words.\n            Step 2. Iterate through each word in the list.\n                -Capitalize the first and last letter of each word.\n            Step 3."}
{"task_id": "Open/118", "completion": "    return math.ceil(math.sqrt(8 * p + 1) - 1) / 2\n"}
{"task_id": "Open/119", "completion": "    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n    return True\n"}
{"task_id": "Open/120", "completion": "    # Initialize an empty set to store distinct two-character codes.\n    distinct_codes = set()\n    # Iterate through each character in the string.\n    for i in range(len(string)) :\n        # Convert the character pair to a two-character code.\n        distinct_codes.add(string[i:i+2])\n    # Return the length of the set.\n    return len(distinct_codes)\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    maximum = 0\n    for i in range(len(ss)):\n        if ss[i].isdigit():\n            maximum = maximum * 10 + int(ss[i])\n        else:\n            if maximum < int(ss[i]):\n                maximum = int(ss[i])\n    return maximum\n"}
{"task_id": "Open/123", "completion": "    longest = 0\n    index = 0\n    while index < len(s):\n        if s[index].isdigit() == False or index == len(s)-1:\n            break\n        elif s[index+1].isdigit() == False or s[index+1] == s[0]:\n            longest = max(longest, index+1)\n            index += 1\n        else:\n            index += 1\n    return s[0:longest]\n"}
{"task_id": "Open/124", "completion": "    if N > M :\n        smaller = M\n    else :\n        smaller = N\n    while K > 0 :\n        if smaller > 0 :\n            smaller -= 1\n            K -= 1\n        elif smaller < 0 :\n            smaller += 1\n            K -= 1\n    if smaller > 0 :\n        return smaller * smaller\n    else :\n        return 0\n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length :\n        return False\n    for i in range(len(string)-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    result = 0\n    while n >= 2**result:\n        result += 1\n    return result\n"}
{"task_id": "Open/127", "completion": "    \n    A = str(A)\n    B = str(B)\n    \n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/128", "completion": "    \n    return x!= y\n"}
{"task_id": "Open/129", "completion": "    Sn_1, Sn_2, Sn_3 = \"1\", \"12\", \"1213\"\n    for i in range(3, n+1):\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2 + Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    min_steps = 0\n    for i in range(n):\n        if i == 0:\n            min_steps = 0\n        else:\n            min_steps += abs(arr[i] - arr[i-1])\n    return min_steps\n"}
{"task_id": "Open/131", "completion": "    return 0 if n % 4 == 0 or n % 4 == 3 else 1\n"}
{"task_id": "Open/132", "completion": "    m = (N // a) + 1\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if arr[0] % 2 == 0 :\n        return False\n    if arr[n-1] % 2 == 0 :\n        return False\n    if n % 2 == 0 :\n        return False\n    return True\n"}
{"task_id": "Open/135", "completion": "    if N == 1 :\n        return ( R - L + 1 )\n    elif N > 1 :\n        return ( ( R - L + 1 ) + countSum ( N - 2, L, R ) )\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "    for i in range(n):\n        if arr[i] == (i + 1):\n            return (i + 2)\n    return (n + 1)\n"}
{"task_id": "Open/137", "completion": "    \n    # Convert the string to a list of integers.\n    s = list(s)\n    \n    # Sort the list of integers in ascending order.\n    s.sort()\n    \n    # Convert the list of integers back to a string.\n    s = ''.join(s)\n    \n    # Convert the string back to an integer.\n    return int(s)\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for i in s:\n        sum += ord(i)\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    while ( A * count + B * ( count + 1 ) ) < S :\n        count += 1\n    if ( A * count + B * ( count + 1 ) ) == S :\n        return count\n    else :\n        return -1\n"}
{"task_id": "Open/141", "completion": "    return x * y / math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "    \n    # Convert the input integer to a binary representation.\n    binary = bin(n)\n    \n    # Initialize a count variable to 0.\n    count = 0\n    \n    # Iterate through the binary representation from right to left.\n    for i in range(len(binary)-1, -1, -1):\n        \n        # If a digit is 0, increment the count variable.\n        if binary[i] == '0':\n            count += 1\n        \n        # If a digit is 1, break the loop.\n        else:\n            break\n    \n    # Return the count variable.\n    return count\n"}
{"task_id": "Open/143", "completion": "    max_sum = 0\n    max_index = 0\n    for i in range(n):\n        xor_sum = 0\n        for j in range(i):\n            xor_sum ^= arr[j]\n        for j in range(i+1,n):\n            xor_sum ^= arr[j]\n        if xor_sum > max_sum:\n            max_sum = xor_sum\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/144", "completion": "    dp = []\n    for i in range(n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp.append(arr[j])\n    return len(dp)\n"}
{"task_id": "Open/145", "completion": "    \n    if k == 0:\n        return 0\n    \n    min_element = arr[0]\n    \n    for i in range(n):\n        if arr[i] < 0:\n            return -1\n        \n        if arr[i] > k:\n            return min_element\n        \n        min_element = min(min_element, arr[i])\n    \n    return min_element + k\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/146", "completion": "    count = 1\n    res = -1\n    while K % count!= 0 :\n        count += 1\n    while K % count == 0 :\n        if K % count == 1 :\n            res = count\n        count += 1\n    return res\n"}
{"task_id": "Open/147", "completion": "    min_ops = sys.maxint\n    for i in range(n):\n        if arr[i]!= arr[0]:\n            min_ops = min(min_ops, abs(arr[i] - arr[0]))\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(n) :\n        if i % 2 == 0 :\n            sum += 5\n        else :\n            sum += 3\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1):\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    \n    # Convert the integer to its binary representation using the bin() function.\n    binary_representation = bin(n)\n    \n    # Split the binary representation by \"0\" to get a list of individual bits.\n    binary_representation = binary_representation.split(\"0\")\n    \n    # Iterate through the list of bits.\n    for i in range(len(binary_representation)-1) :\n        \n        # If a bit is \"1\" and the next bit is also \"1\", return False.\n        if binary_representation[i] == \"1\" and binary_representation[i+1] == \"1\" :\n            return False\n    \n    # Return True.\n    return True\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)-1) :\n        if s[i] in vowels and s[i+1] in vowels :\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1):\n        if i % 10 >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    \n    # Convert the input number to a float.\n    n = float(n)\n    \n    # Calculate the logarithm of the input number.\n    logN = math.log(n)\n    \n    # Calculate the nearest power of 2 using the logarithm value from step 2.\n    pow2 = 2 ** int(logN)\n    \n    # Calculate the difference between the input number and the nearest power of 2.\n    diff = abs(n - pow2)\n    \n    # Return the absolute value of the difference from step 4.\n    return diff\n    "}
{"task_id": "Open/156", "completion": "    \n    # Check if the input radius is negative. If it is, return -1.\n    if r < 0 :\n        return -1\n    \n    # Calculate the area of a Reuleaux triangle using the formula: area = (sqrt(3) / 4) * pi * r^2.\n    area = (3 ** 0.5 / 4) * 3.141592653589793 * r ** 2\n    \n    # Return the calculated area.\n    return area\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    \n    # Step 1\n    ar = sorted(ar)\n    \n    # Step 2\n    start = 0\n    end = len(ar) - 1\n    \n    # Step 3\n    while start <= end :\n        \n        # Step 3.1\n        middle = (start + end) // 2\n        \n        # Step 3.2\n        if ar[middle] == middle :\n            start = middle + 1\n        else :\n            end = middle - 1\n    \n    # Step 4\n    return ar[start]\n"}
{"task_id": "Open/159", "completion": "    return str.count(\"010\")\n"}
{"task_id": "Open/160", "completion": "    \n    # Step 1.\n    for i in range(n):\n        # Step 2.\n        count = 0\n        for j in range(n):\n            if arr[j] == arr[i]:\n                count += 1\n        # Step 3.\n        if count % 2!= 0:\n            return arr[i]\n    # Step 4.\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if sx == dx :\n        if sy == dy :\n            return True\n        elif sy > dy :\n            return False\n        else :\n            return True\n    elif sx > dx :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/163", "completion": "    if n % 2 == 1 :\n        return 0\n    a = 1\n    b = 0\n    for i in range ( 3, n/2 + 1 ) :\n        a, b = ( a + b ) * 2, a\n    return a\n"}
{"task_id": "Open/164", "completion": "    \n    # Initialize an empty dictionary\n    d = {}\n    \n    # Iterate through the array and add each element to the dictionary\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    \n    # Multiply the values in the dictionary to get the count of all possible subsequences\n    count = 1\n    for i in d:\n        count *= d[i]\n    \n    return count\n"}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 1\n    else :\n        return AVLnodes(height-1) + AVLnodes(height-2)\n"}
{"task_id": "Open/166", "completion": "    if source == dest :\n        return 0\n    if abs(source - dest) > step :\n        return sys.maxsize\n    return abs(source - dest) + step\n"}
{"task_id": "Open/167", "completion": "    s = \"1\"\n    for i in range(2, n+1):\n        count = 0\n        temp = \"\"\n        for j in s:\n            if j == s[count]:\n                count += 1\n            else:\n                temp += str(count)\n                temp += j\n                count = 1\n        s = temp\n    return s\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    product = 1\n    for i in range(N):\n        product *= arr[i]\n        if product < 0:\n            break\n        max_length = max(max_length, i + 1)\n    return max_length if max_length > 0 else N\n"}
{"task_id": "Open/169", "completion": "    return ( abs(m) * abs(n) ) / math.sqrt( ( abs(m) * abs(m) ) + ( abs(n) * abs(n) ) )\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n-k+1):\n        if sum(arr[i:i+k]) < k:\n            count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r+1) :\n        if i % 2 == 1 and i % 3 == 1 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return n ^ (2**m - 1)\n"}
{"task_id": "Open/174", "completion": "    count = 0\n    total = R - L + 1\n    div9 = total / 9\n    rem = total % 9\n    if K == 9 :\n        K = 0\n    for i in range ( R, L - 1, -1 ) :\n        if ( i % 9 ) == K :\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    \n    # Step 1. Calculate the product of n and the logarithm of n to the base 10.\n    product = n * math.log10(n)\n    \n    # Step 2. Return the first k digits of the product.\n    return str(product)[:k]\n"}
{"task_id": "Open/176", "completion": "    for i in range(1,n):\n        if A[i] > A[i-1] and A[i] < A[i+1]:\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    \n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    \n    smallest_a = a[0]\n    smallest_b = b[0]\n    largest = c[-1]\n    \n    sum_a = smallest_a + smallest_b\n    sum_b = largest\n    \n    increase = sum_a - sum_b\n    \n    return increase\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
