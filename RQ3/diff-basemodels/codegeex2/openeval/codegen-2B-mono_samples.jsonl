{"task_id": "Open/0", "completion": "    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    for i in range(len(arr)):\n        if arr[i] + K > sum:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    max_len = 0\n    for i in range(n):\n        if arr[i] < arr[max_len]:\n            max_len = i\n    return max_len\n"}
{"task_id": "Open/2", "completion": "    # Step 1. Convert the integer n to its binary representation.\n    binary_rep = bin(n)\n    # Step 2. Iterate through the range from l to r (inclusive).\n    for i in range(l, r+1):\n        # Step 3. Count the number of bits that are set to 1 in the binary representation.\n        if binary_rep[2:].count('1')!= 0:\n            return \"No\"\n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (A[i]+A[j])%K == 0:\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    # Step 1. Iterate through the list a.\n    for i in a:\n        # Step 2. For each element in a, remove it from the list and check if the sum of the remaining list is equal to the difference between n and the sum of the remaining list.\n        # Step 3. If it is possible, return True.\n        if (n - i) in a and (n - i) == (n - (n - i)) :\n            return True\n    return False\n"}
{"task_id": "Open/5", "completion": "    # Write your code here\n    return 1 if x % 2 == 0 else 0\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in range(len(vec)):\n        if vec[i] < 0:\n            vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i + 1)\n    return output\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]%10 == arr[j]%10 or arr[i]//10 == arr[j]//10):\n                max_length = max(max_length, j-i+1)\n    return max_length\n"}
{"task_id": "Open/8", "completion": "    \n    # Step 1. Initialize an empty dictionary to store the distinct prime factors.\n    distinct_prime_factors = {}\n    \n    # Step 2. Iterate through the list of integers.\n    for i in a:\n        # Step 3. Calculate its prime factors and store them in the dictionary.\n        prime_factors = Prime_factors(i)\n        # Step 4. Iterate through the dictionary and count the number of distinct prime factors for each integer.\n        for prime_factor in prime_factors:\n            if prime_factor in distinct_prime_factors:\n                distinct_prime_factors[prime_factor] += 1\n            else:\n                distinct_prime_factors[prime_factor] = 1\n    \n    # Step 5. Return the count of distinct prime factors for each integer.\n    return distinct_prime_factors\n"}
{"task_id": "Open/9", "completion": "    arr.sort()\n    sum1 = 0\n    sum2 = 0\n    for i in range(n):\n        sum1 += arr[i] - arr[0]\n        sum2 += arr[i] - arr[i+1]\n    return min(sum1, sum2)\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while len(A)!= 0 and len(B)!= 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.append(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(0, size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range(len(s)) :\n        distinct_characters = set()\n        for j in range(i, len(s)) :\n            if s[j] not in distinct_characters :\n                distinct_characters.add(s[j])\n            if len(distinct_characters) <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    \n    # Step 1. Initialize a list of prime numbers (2, 3, 5, 7, 11,...).\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 5"}
{"task_id": "Open/14", "completion": "    if n % 4 == 0:\n        return n\n    elif n % 4 == 1:\n        return 1\n    elif n % 4 == 2:\n        return n + 1\n    elif n % 4 == 3:\n        return 0\n    else:\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    \n    a = random.randint(2,n-1)\n    \n    for i in range(t):\n        x = pow(a,(n-1)/2,n)\n        if x == 1 or x == n-1:\n            continue\n        else:\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "    for i in range(len(s1)) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == '1':\n            count += 1\n        else:\n            count += 2\n    return min(count, len(s) - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n + 1):\n        if i ** i == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    else :\n        return x + product(x, y - 1)\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        if a[i] % 4 == 1 :\n            count1 += 1\n        if a[i] % 4 == 2 :\n            count2 += 1\n        if a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == count1 and count0 == count2 and count0 == count3 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 1\n    for i in range(1, n) :\n        curr_len = 1\n        for j in range(i) :\n            if arr[j] >= arr[i] :\n                curr_len += 1\n        if curr_len > max_len :\n            max_len = curr_len\n    return max_len\n"}
{"task_id": "Open/23", "completion": "    if i == n:\n        if sum == 0:\n            count += 1\n        return count\n    if sum == 0:\n        count += 1\n    count = subsetSum(arr, n, i + 1, sum, count)\n    count = subsetSum(arr, n, i + 1, sum - arr[i], count)\n    return count\n"}
{"task_id": "Open/24", "completion": "    return (n * 7) - 4\n"}
{"task_id": "Open/25", "completion": "    sum_squares = 0\n    sum_num = 0\n    total_sum = 0\n    for i in range(1, n+1) :\n        sum_squares += i**2\n        sum_num += i\n    total_sum = sum_squares + sum_num + 1\n    return sum_squares, sum_num, total_sum\n"}
{"task_id": "Open/26", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    return x <= y\n"}
{"task_id": "Open/28", "completion": "    return (9 * n * n - 9 * n + 1)\n"}
{"task_id": "Open/29", "completion": "    return ( b - a ) / a * 100\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**2\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3**(n-1)\n"}
{"task_id": "Open/33", "completion": "    term = 1\n    for i in range(1, n+1):\n        term = term * 2 + (i - 1)\n    return term\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            product = 1\n            for k in range(i,j+1):\n                product *= a[k]\n            if product < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1):\n        if d in str(i):\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    # Your code here\n    arr = sorted(arr)\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n    return n+1\n"}
{"task_id": "Open/37", "completion": "    # Base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # Create a list of size n+1\n    dp = [0] * (n+1)\n    \n    # Initialize first two values in list\n    dp[0] = 1\n    dp[1] = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    # Return dp[n]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    sum = 0\n    while l < b:\n        sum += l * b\n        l += 1\n    return sum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "    max_count = 0\n    current_count = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_count += 1\n        else:\n            current_count = 0\n        max_count = max(max_count, current_count)\n    return max_count\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            max_length = max(max_length, 1)\n        else:\n            max_length = max(max_length, i - start + 1)\n            start = i + 1\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    max_mins = 0\n    for i in range(0,n-k+1):\n        max_mins = max(max_mins,min(a[i:i+k]))\n    return max_mins\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            product = 1\n            for k in range(i,j+1):\n                product *= array[k]\n            if product <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    arr.sort()\n    total = 0\n    for i in range(n):\n        total += abs(arr[i] - i)\n    return total\n"}
{"task_id": "Open/45", "completion": "    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            diff = array[i] - array[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    if ( (a * x1 + b * y1) - c ) * ( (a * x2 + b * y2) - c ) > 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a+1):\n        if i + (a ^ i) == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    return L & R\n"}
{"task_id": "Open/50", "completion": "    smallest = a[0]\n    for i in range(1,n):\n        if a[i] % smallest == 0:\n            smallest = a[i]\n    if smallest == 0:\n        return -1\n    else:\n        return smallest\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(n+1):\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    \n    # Initialize an empty dictionary to store the XOR values.\n    xor_dict = {}\n    \n    # Iterate through all possible submatrices of size (i+1) x (j+1) where i and j range from 0 to n-1.\n    for i in range(n):\n        for j in range(n):\n            \n            # Check if the product of the top left element and the bottom right element is odd.\n            if (arr[i][j] * arr[i+1][j] * arr[i][j+1] * arr[i+1][j+1]) % 2!= 0:\n                \n                # If it is, add the XOR value to the dictionary.\n                xor_dict[(i,j)] = arr[i][j] * arr[i+1][j] * arr[i][j+1] * arr[i+1][j+1]\n    \n    # Return the XOR value of all submatrices that satisfy the condition.\n    return xor_dict.values()\n"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(0, N+1):\n        count += i & (i ^ N) == i\n    return count\n"}
{"task_id": "Open/54", "completion": "    \n    # Step 1. Calculate the sum of all array elements.\n    sum_of_all_array_elements = sum(a)\n    \n    # Step 2. Calculate the sum of all array elements plus the length of the array minus 1.\n    sum_of_all_array_elements_plus_length_minus_1 = sum_of_all_array_elements + n - 1\n    \n    # Step 3. Compare the calculated sums with the given k.\n    if sum_of_all_array_elements_plus_length_minus_1 == k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/55", "completion": "    return (n & (n - 1) == 0) and (n & 0x80 == 0)\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    for i in range(len(s)):\n        num_partitions = 1\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                num_partitions += 1\n            else:\n                break\n        if num_partitions > max_partitions:\n            max_partitions = num_partitions\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2, N):\n        result = result + var1 + var2\n        var1 = var2\n        var2 = result\n    return result\n"}
{"task_id": "Open/59", "completion": "    \n    # Step 1. Get the value at the given index after performing the specified number of reversals.\n    # Step 2. Perform the reversals on the array.\n    # Step 3. Return the value at the given index after the reversals. \n    \n    # Step 1. Get the value at the given index after performing the specified number of reversals.\n    # Step 2. Perform the reversals on the array.\n    # Step 3. Return the value at the given index after the reversals. \n    \n    # Step 1. Get the value at the given index after performing the specified number of reversals.\n    # Step 2. Perform the reversals on the array.\n    # Step 3. Return the value at the given index after the reversals. \n    \n    # Step 1. Get the value at the given index after performing the specified number of reversals.\n    # Step 2. Perform the reversals on the array.\n    # Step 3. Return the value at the given index after the reversals. \n    \n    # Step 1. Get the value at the given index after performing the specified number of reversals.\n    # Step 2"}
{"task_id": "Open/60", "completion": "    \n    for i in range(0, int(math.sqrt(n)) + 1):\n        if n - i*i == 0:\n            return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 1\n    for i in range(len(b)):\n        if a[i] == b[0]:\n            count = count * 2 + 1\n        else:\n            return -1\n    return count\n"}
{"task_id": "Open/62", "completion": "    modified_str = \"\"\n    for i in range(len-2, -1, -1):\n        if str[i] > str[i+1]:\n            modified_str += str[i] - 1\n            str = str[:i] + str[i+1:]\n    modified_str += str\n    return modified_str\n"}
{"task_id": "Open/63", "completion": "    min_value = math.inf\n    for i in range(n):\n        log_i = math.log(arr[i])\n        if log_i < min_value:\n            min_value = log_i * (n - i)\n    return min_value\n"}
{"task_id": "Open/64", "completion": "    largest = \"\"\n    for i in range(len(s)):\n        if s[i]!= '1' and len(largest) < len(s[i:]):\n            largest = s[i:]\n        elif s[i]!= '1' and len(largest) == len(s[i:]):\n            return -1\n    return largest\n"}
{"task_id": "Open/65", "completion": "    count = 0\n    b = []\n    for i in range(k, n):\n        if a[i] <= k:\n            b.append(a[i])\n            count += 1\n    for i in range(k):\n        if a[i] <= k:\n            b.append(a[i])\n            count += 1\n    return len(b), count\n"}
{"task_id": "Open/66", "completion": "    \n    # Step 1. Calculate the new size of the array after adding k elements by subtracting k from n.\n    new_size = n + k - 1\n    \n    # Step 2. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 3. If the new size is even, calculate the median by taking the average of the two middle elements.\n    if new_size % 2 == 0:\n        return (arr[new_size//2 - 1] + arr[new_size//2]) / 2\n    \n    # Step 4. If the new size is odd, return the middle element as the median.\n    return arr[new_size//2]\n"}
{"task_id": "Open/67", "completion": "    \n    # Step 1. Calculate the number of positive, negative, and zero elements in the array.\n    # Step 2. For each negative element, add the absolute difference between the element and -1 to the step count.\n    # Step 3. For each positive element, add the absolute difference between the element and 1 to the step count.\n    # Step 4. If the number of negative elements is even, add the number of zero elements to the step count.\n    # Step 5. If the number of negative elements is odd, check if there are any zero elements.\n    # Step 6. If there are zero elements, add the number of zero elements to the step count.\n    # Step 7. If there are no zero elements, add 2 to the step count.\n    # Step 8. Return the total step count. \n    \n    # Step 1. Calculate the number of positive, negative, and zero elements in the array.\n    # Step 2. For each negative element, add the absolute difference between the element and -1 to the step count.\n    # Step 3. For each positive element, add the absolute difference between the element and 1 to the step count.\n    "}
{"task_id": "Open/68", "completion": "    if n == 1:\n        return 0\n    else:\n        v = []\n        n -= 1\n        while n > 0:\n            v.append(n % 5)\n            n = n // 5\n        result = 0\n        for i in range(len(v)-1, -1, -1):\n            result = result * 10 + v[i]\n        return 2 * result\n\n"}
{"task_id": "Open/69", "completion": "    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        else:\n            count = 0\n        n = n >> 1\n    return count > 0\n"}
{"task_id": "Open/70", "completion": "    if n % x == 0:\n        return n\n    elif n < x:\n        return x\n    else:\n        return n + (x - n % x)\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    num = 0\n    while num <= n:\n        sum += num\n        num += 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += i\n        i += 2\n    return sum\n"}
{"task_id": "Open/73", "completion": "    \n    # Step 1. Initialize a dictionary to store the count of each value in the array.\n    count = {}\n    \n    # Step 2. Iterate through the array and update the count of each value in the dictionary.\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # Step 3. Iterate through the dictionary and find the maximum value that occurs the same number of times.\n    max_count = 0\n    max_value = 0\n    for i in count:\n        if count[i] > max_count:\n            max_count = count[i]\n            max_value = i\n    \n    # Step 4. Return the maximum value.\n    return max_value\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(0,n):\n        if a[i] > 0:\n            if a[i] == 1:\n                count += 1\n            else:\n                if a[i] & 1 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    return int(bin(n)[2:].replace('0', '1').replace('1', '0'), 2)\n"}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range(1, n):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            A[i] = 0\n            changes += 1\n    return changes\n"}
{"task_id": "Open/77", "completion": "    return radian * 180 / pi\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n / 2)\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    sum = (a + (n-1) * d) * n / 2\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 1:\n        return 1\n    max_power = 0\n    while n > 1:\n        n = n // 2\n        max_power = max_power * 2\n    return max_power\n"}
{"task_id": "Open/81", "completion": "    squares = 0\n    for i in range(1, moves + 1) :\n        if row + i > 7 or column + i > 7 :\n            break\n        else :\n            squares += 1\n    return squares\n"}
{"task_id": "Open/82", "completion": "    prev = 0\n    for i in range(1,n+1):\n        prev = prev + i\n    return prev\n"}
{"task_id": "Open/83", "completion": "    \n    # Step 1. Create an empty list to store the last occurrences of each character in the string.\n    lastOccur = []\n    for i in range(len(s)) :\n        lastOccur.append(s[i])\n    \n    # Step 2. Sort the string.\n    sortedString = sorted(s)\n    \n    # Step 3. Iterate through each character in the string.\n    for i in range(len(s)) :\n        # Step 3.1. Find the last occurrence of the character in the sorted string and store it in the list.\n        lastOccurIndex = sortedString.index(s[i])\n        lastOccur[i] = sortedString[lastOccurIndex]\n        \n        # Step 3.2. If the character is not in the correct position, swap it with the character at its last occurrence in the list.\n        if i!= lastOccurIndex :\n            sortedString[i], sortedString[lastOccurIndex] = sortedString[lastOccurIndex], sortedString[i]\n    \n    # Step 4. Return the modified string.\n    return \"\".join"}
{"task_id": "Open/84", "completion": "    \n    # Step 1. Initialize an empty array.\n    arr = []\n    \n    # Step 2. Create a range of consecutive odd numbers and add them to the array.\n    for i in range(n):\n        if i % 2 == 0:\n            arr.append(i)\n    \n    # Step 3. Create a range of consecutive even numbers and add them to the array.\n    for i in range(n):\n        if i % 2 == 1:\n            arr.append(i)\n    \n    # Step 4. Calculate the sum of the elements in the array from index l-1 to index r.\n    sum = 0\n    for i in range(l-1, r):\n        sum += arr[i]\n    \n    # Step 5. Return the sum.\n    return sum\n"}
{"task_id": "Open/85", "completion": "    if x > y :\n        min = y\n    else :\n        min = x\n    for i in range(min, 1, -1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    \n    # Step 1. Initialize a variable \"count\" as 0.\n    count = 0\n    \n    # Step 2. Initialize a variable \"num\" as A.\n    num = A\n    \n    # Step 3. Iterate while count is less than N.\n    while count < N:\n        # - Increment count by 1.\n        count += 1\n        # - Update num by adding B to it.\n        num += B\n        # - Store num in a list.\n        nums.append(num)\n    \n    # Step 4. Return the Nth number in the list. \n    return nums[N-1]\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    str_list = str.split()\n    for i in range(len(str_list)):\n        if str_list[i] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    monthly_interest_rate = r / 12\n    months_in_year = 12\n    monthly_installment = p * monthly_interest_rate * (1 + monthly_interest_rate) ** months_in_year / ((1 + monthly_interest_rate) ** months_in_year - 1)\n    emi = p * r * (1 + monthly_interest_rate) ** months_in_year / ((1 + monthly_interest_rate) ** months_in_year - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                if i * k > j * j:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l, r + 1):\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9:\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    max_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == arr[i] - arr[j]:\n                max_length = max(max_length, j - i + 1)\n    return max_length\n"}
{"task_id": "Open/92", "completion": "    \n    max_len = 0\n    d = {}\n    \n    for i in range(len(str)) :\n        if str[i].isalnum() :\n            d[i] = 1\n        else :\n            d[i] = 0\n    \n    for i in range(len(str)) :\n        if d[i] == 0 :\n            continue\n        elif d[i] == 1 and i % 2 == 0 and max_len < i :\n            max_len = i\n        elif d[i] == 1 and i % 2!= 0 and max_len < i :\n            max_len = i\n    \n    if max_len == 0 :\n        return -1\n    else :\n        return str[0:max_len]\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 0 and n <= 1:\n        count += 1\n        n = n/2\n    return count\n"}
{"task_id": "Open/94", "completion": "    if (n == 0) :\n        return \"\"\n    if (k == 0) :\n        return \"a\" * n\n    if (k > 26) :\n        k = k - 26\n    else :\n        k = k + 97 - 1\n    return \"a\" * n + chr(k) + lexo_small(n - 1, k - 1)\n"}
{"task_id": "Open/95", "completion": "    \n    # Initialize variables\n    total_distance_covered = 0\n    current_distance_covered = fuel / n\n    number_of_stops = n\n    \n    # While number of stops is greater than 0:\n    while number_of_stops > 0:\n        # Add current distance covered to total distance covered\n        total_distance_covered += current_distance_covered\n        \n        # Decrement number of stops by 1\n        number_of_stops -= 1\n        \n        # Update current distance covered as fuel divided by number of stops\n        current_distance_covered = fuel / number_of_stops\n    \n    # Return total distance covered\n    return total_distance_covered\n"}
{"task_id": "Open/96", "completion": "    sum1 = 0\n    sum2 = 0\n    for i in range(n):\n        sum1 += arr[i]\n        sum2 += arr[n-i-1]\n    if sum1 == sum2/3 and sum1 == sum2*2/3:\n        return 1\n    else:\n        return 0\n"}
{"task_id": "Open/97", "completion": "    for i in sentence.split():\n        if i == word:\n            return True\n    return False\n"}
{"task_id": "Open/98", "completion": "    count = 0\n    while n > 0 :\n        count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/99", "completion": "    # Step 1. Check if a, b, and c can be made equal by adding or subtracting k.\n    if a + k!= b and b + k!= c and c + k!= a:\n        return False\n    if a - k!= b and b - k!= c and c - k!= a:\n        return False\n    if a * k!= b and b * k!= c and c * k!= a:\n        return False\n    if a / k!= b and b / k!= c and c / k!= a:\n        return False\n    if a % k!= b and b % k!= c and c % k!= a:\n        return False\n    # Step 2. Return True. \n    return True\n"}
{"task_id": "Open/100", "completion": "    return (x == y) or (x ^ y == 0)\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    arr.sort()\n    min_removal = 0\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff > 0:\n            min_removal += diff\n        else:\n            min_removal = max(min_removal, diff)\n    return min_removal\n"}
{"task_id": "Open/104", "completion": "    max_count = 0\n    for i in range(left, right+1):\n        binary = bin(i)[2:]\n        count = 0\n        for j in binary:\n            if j == '1':\n                count += 1\n        if count > max_count:\n            max_count = count\n    return max_count\n"}
{"task_id": "Open/105", "completion": "    result = 0\n    while n >= 2:\n        result += 1\n        n = n - 1\n    return result\n"}
{"task_id": "Open/106", "completion": "    if n == 1:\n        return False\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n\n"}
{"task_id": "Open/107", "completion": "    \n    # Step 1. Calculate the number of leap centuries by dividing the year by 100 and shift the result by 2 bits.\n    century = int(N/100)\n    leap_century = century >> 1\n    \n    # Step 2. Calculate the number of leap years by shifting the year by 2 bits.\n    leap_year = int(N/400)\n    \n    # Step 3. Subtract the number of leap years from the total number of days in the year.\n    leap_days = leap_century * 400 + leap_year\n    \n    # Step 4. If there are any leap centuries or leap years, adjust the number of non-leap years and leap years accordingly.\n    if leap_century > 0:\n        leap_days -= 1\n    if leap_year > 0:\n        leap_days -= 2\n    \n    # Step 5. Calculate the total number of days by adding the number of non-leap years and twice the number of leap years.\n    total_days = leap_days + (century * 400) + (leap_year * 2)\n    \n    # Step 6"}
{"task_id": "Open/108", "completion": "    if a < 0:\n        return -1\n    else:\n        return (1 + 5**0.5) / 2\n"}
{"task_id": "Open/109", "completion": "    count = 0\n    while n > 0:\n        if n % 10 == d:\n            count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/110", "completion": "    # Step 1. Iterate through the number.\n    for i in range(len(n)):\n        # Step 2. If any digit is repeated, return False.\n        if n[i] in n[i+1:]:\n            return False\n    # Step 3. Return True.\n    return True\n"}
{"task_id": "Open/111", "completion": "    count = 0\n    for i in a:\n        if i % 5!= 0 and i % 3!= 0:\n            count += 1\n        else:\n            count = 0\n        if count == n-1:\n            return True\n    return False\n"}
{"task_id": "Open/112", "completion": "    # Your code here\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the array\n    # return the value at index n of the"}
{"task_id": "Open/113", "completion": "    # Your code here\n    arr = []\n    for i in range(n+1):\n        if i == 0:\n            arr.append(3)\n        elif i == 1:\n            arr.append(5)\n        else:\n            if i % 2 == 0:\n                arr.append(arr[i//2]*10+3)\n            else:\n                arr.append(arr[i//2]*10+5)\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "    \n    # Step 1. Initialize an array of length n+1 with all elements set to 0.\n    array = [0] * (n+1)\n    \n    # Step 2. Set the first element of the array to 1.\n    array[0] = 1\n    \n    # Step 3. Set the second element of the array to 2.\n    array[1] = 2\n    \n    # Step 4. Iterate from 3 to n.\n    for i in range(3, n+1):\n        # Step 5. If the index is odd, calculate the element at that index by multiplying the element at index i//2 by 10 and adding 1.\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 1\n        # Step 6. If the index is even, calculate the element at that index by multiplying the element at index (i//2)-1 by 10 and adding 2.\n        else:\n            array[i] = array[i//2] * 10 + 2\n    \n    # Step 7. Return the element at index n.\n    return array[n]\n\n"}
{"task_id": "Open/115", "completion": "    sum = 0\n    for i in range(len(a)):\n        sum += a[i]\n    return sum % 11 == 0\n"}
{"task_id": "Open/116", "completion": "    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else:\n        return l * b * h\n"}
{"task_id": "Open/117", "completion": "    \n    # Split the input string into a list of words\n    words = string.split()\n    \n    # Iterate through each word in the list\n    for i in range(len(words)):\n        \n        # Capitalize the first and last letter of each word\n        words[i] = words[i][0].upper() + words[i][1:] + words[i][0].upper()\n        \n    # Join the modified words back into a string, separated by spaces\n    return \" \".join(words)\n"}
{"task_id": "Open/118", "completion": "    return int(math.ceil(math.sqrt(8 * p + 1) - 1) / 2)\n"}
{"task_id": "Open/119", "completion": "    # Step 1. Iterate through the array.\n    for i in range(len(arr)):\n        # Step 2. Check if each element is unique by comparing it with all the elements in the array.\n        for j in range(len(arr)):\n            if arr[i] == arr[j] and i!= j:\n                return False\n    # Step 3. If all elements are unique, return True. \n    return True\n"}
{"task_id": "Open/120", "completion": "    # Step 1. Initialize an empty set to store distinct two-character codes.\n    distinct_codes = set()\n    # Step 2. Iterate through each character in the string.\n    for char in string:\n        # Step 3. Convert the character pair to a two-character code.\n        code = char + char\n        # Step 4. Add the two-character code to the set.\n        distinct_codes.add(code)\n    # Step 5. Return the length of the set.\n    return len(distinct_codes)\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    maximum = 0\n    for i in range(len(ss)):\n        if ss[i].isdigit():\n            maximum = max(maximum, int(ss[i]) * 10 + int(ss[i+1]))\n        else:\n            maximum = max(maximum, int(ss[i]))\n    return maximum\n"}
{"task_id": "Open/123", "completion": "    longest = 0\n    for i in range(len(s)) :\n        if not s[i].isdigit() :\n            break\n        if i == 0 or not s[i-1].isdigit() :\n            longest = max(longest, len(s[i:]))\n    return s[:longest]\n"}
{"task_id": "Open/124", "completion": "    while K > 0 and N > 0 and M > 0:\n        if N > M:\n            N = N - M\n        else:\n            M = M - N\n        K = K - 1\n    if K == 0:\n        return N * M\n    else:\n        return 0\n"}
{"task_id": "Open/125", "completion": "    if len(string) < length :\n        return False\n    \n    for i in range(1, len(string)) :\n        if string[i] == string[i-1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    result = 0\n    while n >= 2**result:\n        result += 1\n    return result\n"}
{"task_id": "Open/127", "completion": "    \n    # Step 1. Convert both A and B to strings.\n    A = str(A)\n    B = str(B)\n    \n    # Step 2. Get the length of A and B as separate variables.\n    len_A = len(A)\n    len_B = len(B)\n    \n    # Step 3. Compare the lengths of A and B.\n    if len_A == len_B:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/128", "completion": "    return x!= y and x + y!= 1\n"}
{"task_id": "Open/129", "completion": "    \n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"12\"\n    elif n == 3:\n        return \"1213\"\n    else:\n        Sn_1 = \"1\"\n        Sn_2 = \"12\"\n        Sn_3 = \"1213\"\n        for i in range(3, n+1):\n            Sn_3 = Sn_1 + Sn_2 + Sn_3\n            Sn_1 = Sn_2\n            Sn_2 = Sn_3\n        return Sn_3\n"}
{"task_id": "Open/130", "completion": "    min_steps = 0\n    for i in range(1, n):\n        min_steps += abs(arr[i] - arr[i-1])\n    return min_steps\n"}
{"task_id": "Open/131", "completion": "    \n    # Step 1. Calculate the remainder of dividing the integer by 4.\n    remainder = n % 4\n    \n    # Step 2. If the remainder is 0 or 3, return 0.\n    if remainder == 0 or remainder == 3:\n        return 0\n    \n    # Step 3. If the remainder is 1 or 2, return 1.\n    elif remainder == 1 or remainder == 2:\n        return 1\n    \n    # Step 4. If the remainder is anything else, return -1.\n    else:\n        return -1\n"}
{"task_id": "Open/132", "completion": "    m = N // a\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2:\n        return N\n    elif N <= 4:\n        return N + 3\n    elif (N - 4) % 4 == 0:\n        return N + 1\n    elif (N - 4) % 4 < 2:\n        return N + 2\n    else:\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if n == 0 :\n        return False\n    if n == 1 :\n        return True\n    if arr[0] % 2 == 0 or arr[n - 1] % 2 == 0 or n % 2 == 0 :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/135", "completion": "    if N == 1:\n        return countSum1(L,R)\n    else:\n        return countSum2(L,R)\n"}
{"task_id": "Open/136", "completion": "    for i in range(n):\n        if arr[i] == i + 1:\n            return i + 1\n    return n + 1\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1. Convert the string to a list of integers.\n    s = list(s)\n    \n    # Step 2. Sort the list of integers in ascending order.\n    s.sort()\n    \n    # Step 3. Convert the list of integers back to a string.\n    s = ''.join(s)\n    \n    # Step 4. Convert the string back to an integer.\n    s = int(s)\n    \n    # Step 5. Return the integer.\n    return s\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for i in s:\n        sum += ord(i)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    while (S >= 0):\n        if (S % B == 0):\n            count += S // B\n            S = 0\n        else:\n            S -= A\n            count += 1\n    if (count == N):\n        return count\n    else:\n        return -1\n"}
{"task_id": "Open/141", "completion": "    gcd = math.gcd(x,y)\n    lcm = x * y // gcd\n    return lcm\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n!= 0 :\n        if n % 2 == 0 :\n            n = n // 2\n        else :\n            n = n - 1\n        count += 1\n    return count\n"}
{"task_id": "Open/143", "completion": "    max_sum = 0\n    max_index = 0\n    for i in range(n) :\n        xor_sum = 0\n        for j in range(i) :\n            xor_sum += arr[j]\n        for k in range(i,n) :\n            xor_sum += arr[k]\n        if xor_sum > max_sum :\n            max_sum = xor_sum\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/144", "completion": "    dp = []\n    for i in range(n) :\n        for j in range(i) :\n            if arr[i] > arr[j] :\n                dp.append(arr[i])\n                break\n    return len(dp)\n"}
{"task_id": "Open/145", "completion": "    # Step 1. Iterate through the array.\n    # -Subtract k from each element.\n    # -If any element becomes negative, return -1.\n    for i in range(n):\n        if arr[i] < 0:\n            return -1\n        arr[i] -= k\n    # Step 2. Iterate through the array.\n    # -If any element is greater than k, return the minimum element.\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element + k\n"}
{"task_id": "Open/146", "completion": "    count = 1\n    res = -1\n    while K % count!= 0 :\n        count += count\n    while K % count == 0 :\n        if K % count == 1 :\n            res = count\n        count += count\n    return res\n"}
{"task_id": "Open/147", "completion": "    min_ops = sys.maxsize\n    for i in range(1, n):\n        if arr[i]!= arr[0]:\n            min_ops = min(min_ops, abs(arr[i] - arr[0]))\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += 3\n        else:\n            sum += 5\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1) :\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    return True if n == bin(n)[2:] else False\n"}
{"task_id": "Open/153", "completion": "    vowels = ['a','e','i','o','u']\n    s = s.lower()\n    s = s.replace(' ','')\n    for i in range(len(s)):\n        if s[i] in vowels:\n            vowels.remove(s[i])\n    return sorted(vowels) == vowels\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low,high+1):\n        if i%10 >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    \n    # Step 1. Convert the input number to a float.\n    input_number = float(n)\n    \n    # Step 2. Calculate the logarithm of the input number.\n    log_input_number = math.log(input_number)\n    \n    # Step 3. Calculate the nearest power of 2 using the logarithm value from step 2.\n    nearest_power_of_two = math.pow(2, math.ceil(log_input_number))\n    \n    # Step 4. Calculate the difference between the input number and the nearest power of 2.\n    diff = nearest_power_of_two - input_number\n    \n    # Step 5. Return the absolute value of the difference from step 4.\n    return abs(diff)\n"}
{"task_id": "Open/156", "completion": "    if r < 0 :\n        return -1\n    else:\n        return (sqrt(3) / 4) * pi * r**2\n"}
{"task_id": "Open/157", "completion": "    # Step 1. Convert the input string to a list of characters.\n    s = list(s)\n    # Step 2. Sort the list of characters in alphabetical order.\n    s.sort()\n    # Step 3. Convert the sorted list back to a string.\n    s = ''.join(s)\n    # Step 4. Return the sorted string.\n    return s\n"}
{"task_id": "Open/158", "completion": "    \n    # Step 1. Take an array and its size as input.\n    # Step 2. Sort the array in ascending order.\n    # Step 3. Use binary search to find the missing number.\n    #        - Start the search at index 0 and end it at index size-1.\n    #        - Calculate the middle index as (start + end) // 2.\n    #        - If the middle element is equal to the middle index, increment start to the middle index + 1.\n    #        - If the middle element is not equal to the middle index, increment end to the middle index - 1.\n    #        - Repeat until start is greater than end.\n    #        - If the middle element is equal to the middle index + 1, return middle - 1.\n    #        - Otherwise, continue to the next iteration.\n    # Step 4. Return the missing number. \n    \n    # Step 1. Take an array and its size as input.\n    # Step 2. Sort the array in ascending order.\n    # Step 3. Use binary search to find the missing number.\n    #        - Start the search at index 0 and end it at index"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    \n    # Step 1. Iterate through the array.\n    for i in range(n):\n        # Step 2. Count the number of occurrences of each element in the array.\n        count = 0\n        for j in range(n):\n            if arr[i] == arr[j]:\n                count += 1\n        # Step 3. If an element appears an odd number of times, return it.\n        if count % 2 == 1:\n            return arr[i]\n    # Step 4. If no element satisfies the condition, return None.\n    return None\n"}
{"task_id": "Open/161", "completion": "    \n    # Step 1. Calculate the XOR of all the elements in the array and store it in a variable xorArr.\n    xorArr = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    \n    # Step 2. Initialize a variable ans to 0.\n    ans = 0\n    \n    # Step 3. Iterate through the array and calculate the XOR of xorArr and the current element.\n    for i in range(n):\n        ans = ans ^ arr[i]\n    \n    # Step 4. Compare the XOR value with the current value of ans and update ans if the XOR value is greater.\n    while ans!= xorArr:\n        ans = ans ^ xorArr\n    \n    # Step 5. Return the value of ans.\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if sx == dx :\n        return False\n    if sy == dy :\n        return False\n    if sx > dx :\n        return False\n    if sy > dy :\n        return False\n    return True\n"}
{"task_id": "Open/163", "completion": "    if n%2 == 1:\n        return 0\n    a = 1\n    b = 0\n    for i in range(3,n//2+1):\n        a,b = b,(a+b)\n    return b\n"}
{"task_id": "Open/164", "completion": "    \n    # Step 1. Initialize an empty dictionary.\n    d = {}\n    \n    # Step 2. Iterate through the array and add each element to the dictionary with its count as 1.\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    # Step 3. Multiply the values in the dictionary to get the count of all possible subsequences.\n    count = 1\n    for i in d:\n        count *= d[i]\n    \n    return count\n"}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 1\n    else :\n        return AVLnodes(height-1) + AVLnodes(height-2)\n"}
{"task_id": "Open/166", "completion": "    steps = 0\n    if source == dest :\n        return 0\n    if abs(source - dest) > step :\n        return sys.maxsize\n    else :\n        steps = abs(source - dest) + step\n        return steps\n"}
{"task_id": "Open/167", "completion": "    s = \"1\"\n    for i in range(2,n+1):\n        count = 0\n        temp = \"\"\n        for j in range(len(s)):\n            if s[j] == s[j+1]:\n                count += 1\n            else:\n                temp += str(count)\n                count = 0\n        temp += str(count)\n        s = temp\n    return s\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        if product < 0:\n            break\n        max_length = max(max_length, i - (N - 1))\n    return max_length\n"}
{"task_id": "Open/169", "completion": "    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    # Write your code here\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r+1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return n & ~(1 << m)\n"}
{"task_id": "Open/174", "completion": "    count = 0\n    for i in range(L, R + 1):\n        if i % 9 == 0:\n            count += 1\n        else:\n            count += i % 9\n    return count\n"}
{"task_id": "Open/175", "completion": "    return str(int(n*math.log(n,10)))[:k]\n"}
{"task_id": "Open/176", "completion": "    \n    for i in range(1,n) :\n        if A[i] > A[i-1] and A[i] > A[i+1] :\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    \n    sum_a = sum(a)\n    sum_b = sum(b)\n    sum_c = sum(c)\n    \n    if sum_a < sum_b :\n        sum_a, sum_b = sum_b, sum_a\n    if sum_a < sum_c :\n        sum_a, sum_c = sum_c, sum_a\n    if sum_b < sum_c :\n        sum_b, sum_c = sum_c, sum_b\n    \n    return sum_b - sum_a\n"}
