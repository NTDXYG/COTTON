{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    separate_groups = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')':\n            if current_group!= '' and is_balanced(current_group):\n                separate_groups.append(current_group)\n                current_group = ''\n            else:\n                current_group += char\n    if current_group!= '' and is_balanced(current_group):\n        separate_groups.append(current_group)\n    return separate_groups\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n    pass\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n    \n    "}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result.append(numbers[i])\n        result.append(delimeter)\n    return result\n    \n    "}
{"task_id": "HumanEval/6", "completion": "\n    max_nesting = 0\n    for char in paren_string:\n        if char == '(':\n            max_nesting += 1\n        elif char == ')':\n            max_nesting -= 1\n    return max_nesting\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n    # return [s for s in strings if substring in s]\n    # return [s for s in strings if substring in s]\n    # return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return sum_, product_\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        max_element = max(numbers[i:])\n        rolling_max_list.append(max_element)\n    return rolling_max_list\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if not string:\n        return string\n    \n    palindrome = ''\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        if is_palindrome(prefix):\n            palindrome = prefix\n            break\n    \n    return palindrome + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return \"\".join(map(lambda x: \"0\" if x[0] == x[1] else \"1\", zip(a, b)))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    return max(strings, key=len)\n    \n"}
{"task_id": "HumanEval/13", "completion": "\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return \" \".join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    return [4 if c == 'o' else 2 if c == 'o|' else 1 for c in music_string]\n    \n    "}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    numbers_list = numbers.split()\n    numbers_list.sort()\n    return''.join(numbers_list)\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    numbers.sort()\n    smallest_difference = numbers[1] - numbers[0]\n    smallest_numbers = (numbers[0], numbers[1])\n\n    for i in range(2, len(numbers)):\n        difference = numbers[i] - numbers[i - 1]\n        if difference < smallest_difference:\n            smallest_difference = difference\n            smallest_numbers = (numbers[i - 1], numbers[i])\n\n    return smallest_numbers\n"}
{"task_id": "HumanEval/21", "completion": "\n    smallest = min(numbers)\n    largest = max(numbers)\n    return [((x - smallest) / (largest - smallest)) for x in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n    # return list(filter(lambda x: isinstance(x, int), values))\n    # return list(filter(lambda x: isinstance(x, int), values))\n    # return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int)]\n    # return [value for value in values if isinstance(value, int)]\n    "}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    largest_divisor = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    i = 3\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2!= 0:\n        return None\n    x = xs[-1]\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            x = xs[i]\n            break\n    return poly(xs, x) / poly(xs, 1)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l)[i])\n    return l_prime\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0 and '7' in str(i):\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n        else:\n            l_.append(l[i] * 2)\n    l_.sort()\n    return l_\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, (a + b)\n        if is_prime(a):\n            return a\n    return a\n"}
{"task_id": "HumanEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    collisions = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if i!= 0:\n                collisions += 1\n        else:\n            if i!= n-1:\n                collisions += 1\n    return collisions\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result[::-1]\n"}
{"task_id": "HumanEval/45", "completion": "\n    return (a * h) / 2\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n"}
{"task_id": "HumanEval/52", "completion": "\n    for num in l:\n        if num > t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    same_chars = set()\n    for char in s0:\n        if char in s1:\n            same_chars.add(char)\n    return len(same_chars) == len(s0) or len(same_chars) == len(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    if len(brackets) % 2!= 0:\n        return False\n    opening_brackets = []\n    for i, bracket in enumerate(brackets):\n        if bracket == \"<\":\n            opening_brackets.append(i)\n        elif bracket == \">\":\n            if len(opening_brackets) == 0:\n                return False\n            opening_brackets.pop()\n    return len(opening_brackets) == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n"}
{"task_id": "HumanEval/58", "completion": "\n    return list(set(l1) & set(l2))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    assert n > 1\n    factor = 2\n    while factor < n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    if len(brackets) == 0:\n        return True\n    if len(brackets) % 2!= 0:\n        return False\n    opening_brackets = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets.append(i)\n        elif brackets[i] == \")\":\n            if len(opening_brackets) == 0:\n                return False\n            opening_brackets.pop()\n    return len(opening_brackets) == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    count = 0\n    for char in s:\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n            count += 1\n        if char == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    \n    str_x = str(x)\n    \n    if shift > len(str_x):\n        return str_x[::-1]\n    \n    return str_x[shift:] + str_x[:shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    return n - sum([int(x) for x in s.split() if x.isdigit()])\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    \n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    \n    return [min(evens), arr.index(min(evens))]\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    freq = {}\n    for i in lst:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    for i in lst:\n        if freq[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    result = []\n    for i in range(len(lst)):\n        min_value = min(lst)\n        result.append(min_value)\n        lst.remove(min_value)\n        max_value = max(lst)\n        result.append(max_value)\n        lst.remove(max_value)\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\n    changes = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]!= arr[j]:\n                changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    result = []\n    for i in lst1:\n        total = 0\n        for j in i:\n            total += len(j)\n        if total < len(lst2):\n            result.append(i)\n    for i in lst2:\n        total = 0\n        for j in i:\n            total += len(j)\n        if total < len(lst1):\n            result.append(i)\n    return result\n"}
{"task_id": "HumanEval/75", "completion": "\n    count = 0\n    for i in range(2, a-1):\n        if a % i == 0:\n            count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return True\n    if n == x:\n        return True\n    if n % x == 0:\n        return False\n    return is_simple_power(x, n // x)\n"}
{"task_id": "HumanEval/77", "completion": "\n    cube = a ** 3\n    if cube == a:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/78", "completion": "\n    \n    def is_prime(num):\n        if num == 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    def hex_to_decimal(num):\n        if num == \"\":\n            return 0\n        decimal = 0\n        for i in range(len(num)):\n            if num[i] == \"A\":\n                decimal += 10 * 16 ** (len(num) - i - 1)\n            elif num[i] == \"B\":\n                decimal += 11 * 16 ** (len(num) - i - 1)\n            elif num[i] == \"C\":\n                decimal += 12 * 16 ** (len(num) - i - 1)\n            elif num[i] == \"D\":\n                decimal += 13 * 16 ** (len(num) - i - 1)\n            elif num[i] == \"E\":\n                decimal += 14 * 16 ** (len(num) - i - 1)\n            elif num[i] == \""}
{"task_id": "HumanEval/79", "completion": "\n    binary = \"\"\n    return binary\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    \n    prev_letters = set()\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n        prev_letters.add(s[i])\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    grade_equation = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'E'\n    }\n    return [grade_equation[gpa] for gpa in grades]\n"}
{"task_id": "HumanEval/82", "completion": "\n    if len(string) < 2:\n        return False\n    count = 0\n    for char in string:\n        count += 1\n    if count == len(string):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i % 10 == 9:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\n    \n    total_sum = 0\n    \n    for digit in str(N):\n        total_sum += int(digit)\n    \n    return str(total_sum)\n"}
{"task_id": "HumanEval/85", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split()\n    for i in range(len(words)):\n        word = words[i]\n        chars = list(word)\n        chars.sort()\n        words[i] = ''.join(chars)\n    return''.join(words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    coordinates = []\n    for row in lst:\n        for col in row:\n            if col == x:\n                coordinates.append((lst.index(row), row.index(col)))\n    coordinates.sort()\n    coordinates.sort(reverse=True)\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    \n    sum = 0\n    for i in range(len(array)):\n        sum += array[i]\n    \n    if sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        index = alphabet.find(char)\n        new_index = (index + 2) * 2\n        encrypted += alphabet[new_index]\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\n    lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    counter = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            counter += 1\n    return counter\n"}
{"task_id": "HumanEval/92", "completion": "\n    \n    def is_int(x):\n        try:\n            int(x)\n            return True\n        except ValueError:\n            return False\n    \n    if is_int(x) and is_int(y) and is_int(z):\n        return x == y + z\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/93", "completion": "\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/94", "completion": "\n    max_prime = 0\n    for i in lst:\n        if is_prime(i):\n            if i > max_prime:\n                max_prime = i\n    return sum(int(x) for x in str(max_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if len(dict) == 0:\n        return True\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() == True:\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    a = str(a)\n    b = str(b)\n    \n    a_unit = a[-1]\n    b_unit = b[-1]\n    \n    a_unit_digit = int(a_unit)\n    b_unit_digit = int(b_unit)\n    \n    product = a_unit_digit * b_unit_digit\n    \n    return product\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/98", "completion": "\n    counter = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            counter += 1\n    return counter\n"}
{"task_id": "HumanEval/99", "completion": "\n    return round(float(value))\n"}
{"task_id": "HumanEval/100", "completion": "\n    \n    result = []\n    if n % 2 == 0:\n        for i in range(1, n+1, 2):\n            result.append(i)\n    else:\n        for i in range(1, n+1, 2):\n            result.append(i+1)\n    return result\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split(\",\")\n"}
{"task_id": "HumanEval/102", "completion": "\n    result = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i > result:\n            result = i\n    return result\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return bin(int(avg))[2:]\n"}
{"task_id": "HumanEval/104", "completion": "\n    unique_digits = []\n    for number in x:\n        number_as_string = str(number)\n        number_of_even_digits = 0\n        for digit in number_as_string:\n            if int(digit) % 2 == 0:\n                number_of_even_digits += 1\n        if number_of_even_digits % 2 == 0:\n            unique_digits.append(number)\n    return sorted(unique_digits)\n"}
{"task_id": "HumanEval/105", "completion": "\n    d = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    arr.sort()\n    arr.reverse()\n    \n    for i in range(len(arr)):\n        arr[i] = d[arr[i]]\n    \n    return arr\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * f(i - 1))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for element in arr:\n        string = str(element)\n        signed_digits = 0\n        for digit in string:\n            if int(digit) > 0:\n                signed_digits += 1\n        if signed_digits > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True if arr[0] == 0 else False\n    elif len(arr) == 2:\n        return True if arr[0] < arr[1] else False\n    else:\n        max_element = max(arr)\n        if arr[0] == max_element:\n            return True\n        else:\n            arr = arr[1:] + [arr[0]]\n            return move_one_ball(arr)\n"}
{"task_id": "HumanEval/110", "completion": "\n    for i in lst1:\n        if i % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    \n    histogram = {}\n    \n    for letter in test:\n        if letter not in histogram:\n            histogram[letter] = 1\n        else:\n            histogram[letter] += 1\n    \n    max_count = 0\n    max_letter = ''\n    for letter in histogram:\n        if histogram[letter] > max_count:\n            max_count = histogram[letter]\n            max_letter = letter\n    \n    return {max_letter: max_count}\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "HumanEval/112", "completion": "\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    if result == \"\":\n        return (result, False)\n    else:\n        result = result[::-1]\n        return (result, result == result[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    output = []\n    for string in lst:\n        count = 0\n        for digit in list(string):\n            if int(digit) % 2!= 0:\n                count += 1\n        output.append(count)\n    return output\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    sum = 0\n    for num in nums:\n        sum += num\n        if sum < min_sum:\n            min_sum = sum\n        if sum >= len(nums):\n            sum -= nums[0]\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    max_times = 0\n    for row in grid:\n        num_times = 0\n        for element in row:\n            if element == 1:\n                num_times += 1\n            if num_times > capacity:\n                max_times = num_times\n                break\n        if num_times > 0:\n            max_times += 1\n    return max_times\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.isalpha() and letter.lower() not in \"aeiou\":\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    closest_vowel = \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in \"aeiou\":\n            if closest_vowel == \"\":\n                closest_vowel = word[i]\n            elif word[i] not in \"aeiou\":\n                closest_vowel = word[i]\n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    result = []\n    arr.sort(reverse=True)\n    for i in range(k):\n        result.append(arr[i])\n    return result\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0])\n"}
{"task_id": "HumanEval/122", "completion": "\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz = []\n    while n > 1:\n        if n % 2 == 1:\n            collatz.append(n)\n        else:\n            n = n/2\n    return sorted(collatz)\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if int(month) < 1 or int(month) > 12:\n        return False\n    \n    if int(month) == 2 and int(day) < 1 or int(day) > 29:\n        return False\n    \n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) < 1 or int(day) > 31:\n        return False\n    \n    if int(month) in [4, 6, 9, 11] and int(day) < 1 or int(day) > 30:\n        return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    pass\n"}
{"task_id": "HumanEval/126", "completion": "\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    intersection_length = max(interval1[0], interval2[0]) - min(interval1[1], interval2[1])\n    if intersection_length < 0:\n        return \"NO\"\n    elif intersection_length == 0:\n        return \"NO\"\n    elif intersection_length == 1:\n        return \"YES\"\n    elif intersection_length == 2:\n        return \"NO\"\n    elif intersection_length % 2 == 0:\n        return \"NO\"\n    elif intersection_length % 3 == 0:\n        return \"NO\"\n    elif intersection_length % 5 == 0:\n        return \"NO\"\n    elif intersection_length % 7 == 0:\n        return \"NO\"\n    elif intersection_length % 11 == 0:\n        return \"NO\"\n    elif intersection_length % 13 == 0:\n        return \"NO\"\n    elif intersection_length % 17 == 0:\n        return \"NO\"\n    elif intersection_length % 19 == 0:\n        return \"NO\"\n    elif intersection_length % 23 == 0:\n        return \""}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    prod = 1\n    sum = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n            sum += prod\n        elif i < 0:\n            prod *= -1\n            sum += prod\n        else:\n            continue\n    return sum\n"}
{"task_id": "HumanEval/129", "completion": " (0, 0).\n        - If the cell is not the top-left corner, then the minimum path length from the cell to the cell (i, j) is the minimum of the minimum path length from the cell to the cell (i-1, j) and the minimum path length from the cell to the cell (i, j-1).\n        - If the cell is the top-left corner, then the minimum path length from the cell to the cell (i, j) is the minimum of the minimum path length from the cell to the cell (i-1, j) and the minimum path length from the cell to the cell (i, j-1).\n        - If the cell is not the top-left corner, then the minimum path length from the cell to the cell (i, j) is the minimum of the minimum path length from the cell to the cell (i-1, j) and the minimum path length from the cell to the cell (i, j-1).\n        - If the cell is the top-left corner, then the minimum path length from the cell to the cell (i, j) is the minimum of the minimum path length from the cell to the cell (i-"}
{"task_id": "HumanEval/130", "completion": "\n    tribonacci = []\n    tribonacci.append(3)\n    tribonacci.append(1)\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[i-1] + (tribonacci[i-2] + tribonacci[i-3]) / 2)\n        else:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n    return tribonacci\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            product *= int(i)\n    return product or 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[' or char == '{' or char == '(':\n            stack.append(char)\n        elif char == ']' or char == '}' or char == ')':\n            if not stack:\n                return False\n            if char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n"}
{"task_id": "HumanEval/133", "completion": "\n    \n    sum_squares = 0\n    for i in lst:\n        sum_squares += int(i)**2\n    return sum_squares\n"}
{"task_id": "HumanEval/134", "completion": "\n    \n    words = txt.split()\n    last_char = words[-1][-1]\n    if last_char.isalpha() and not last_char.isupper():\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            if a is None or i > a:\n                a = i\n        elif i > 0:\n            if b is None or i < b:\n                b = i\n    return (a, b)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if type(a) == type(b):\n        if a == b:\n            return None\n        elif type(a) == int and type(b) == float:\n            return a\n        elif type(a) == float and type(b) == int:\n            return b\n        elif type(a) == str and type(b) == str:\n            if len(a) > len(b):\n                return a\n            elif len(a) < len(b):\n                return b\n            else:\n                for i in range(len(a)):\n                    if a[i] > b[i]:\n                        return a\n                    elif a[i] < b[i]:\n                        return b\n        else:\n            return None\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0 and n - i >= 0:\n            sum += i\n    return sum == n\n"}
{"task_id": "HumanEval/139", "completion": "\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "\n    \n    # Step 1. Split the file name into a substring before the dot and a substring after the dot.\n    file_name_split = file_name.split('.')\n    \n    # Step 2. Check if the length of the substring before the dot is greater than 3. If it is, return 'No'.\n    if len(file_name_split[0]) > 3:\n        return 'No'\n    \n    # Step 3. Check if there is exactly one dot in the file name. If there is not, return 'No'.\n    if '.' not in file_name:\n        return 'No'\n    \n    # Step 4. Check if the substring before the dot starts with a letter from the latin alphapet. If it does not, return 'No'.\n    if file_name_split[0][0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'No'\n    \n    # Step 5. Check if the substring after the dot is one of these: ['txt',"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    words = sentence.split()\n    primes = []\n    for word in words:\n        if len(word) > 1 and len(word) % 2 == 1:\n            primes.append(word)\n    return''.join(primes)\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_numerator, x_denominator = x.split(\"/\")\n    n_numerator, n_denominator = n.split(\"/\")\n    x_numerator = int(x_numerator)\n    x_denominator = int(x_denominator)\n    n_numerator = int(n_numerator)\n    n_denominator = int(n_denominator)\n    x_numerator_numerator = x_numerator * n_numerator\n    x_denominator_numerator = x_denominator * n_numerator\n    x_numerator_denominator = x_numerator * n_denominator\n    x_denominator_denominator = x_denominator * n_denominator\n    x_numerator_result = x_numerator_numerator / x_denominator_denominator\n    x_denominator_result = x_numerator_denominator / x_denominator_denominator\n    x"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(num):\n        return sum([int(i) for i in str(num)])\n\n    def sort_by_points(nums):\n        sorted_nums = []\n        for i, num in enumerate(nums):\n            sorted_nums.append((sum_of_digits(num), i))\n        sorted_nums.sort()\n        return [nums[i] for _, i in sorted_nums]\n\n    return sort_by_points(nums)\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    counter = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1:\n            counter += 1\n    return counter\n"}
{"task_id": "HumanEval/147", "completion": "\n    triples = []\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples.append((a[i], a[j], a[k]))\n    return len(triples)\n"}
{"task_id": "HumanEval/148", "completion": "\n    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n    if planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planets.sort()\n    for planet in planets:\n        if planet == planet1:\n            continue\n        if planet == planet2:\n            continue\n        if planet1 in planet:\n            if planet2 in planet:\n                continue\n            else:\n                return (planet,)\n        else:\n            if planet2 in planet:\n                continue\n            else:\n                return (planet,)\n    return ()\n"}
{"task_id": "HumanEval/149", "completion": "\n    return sorted(lst, key=lambda x: (len(x), x))\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum_squares = 0\n    for element in lst:\n        if isinstance(element, int) and element % 2 == 1:\n            sum_squares += element ** 2\n    return sum_squares\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(guess[i] - game[i]) for i in range(len(game))]\n"}
{"task_id": "HumanEval/153", "completion": "\n    class_name = class_name.lower()\n    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions:\n        extension = extension.lower()\n        if extension.isalpha() and extension.isupper():\n            strength += 1\n        elif extension.isalpha() and extension.islower():\n            strength -= 1\n        elif extension.isalpha() and extension.isupper() and extension.islower():\n            strength += 1\n        else:\n            continue\n        if strength > strength:\n            strongest_extension = extension\n    return \"{}.{}\".format(class_name, strongest_extension)\n"}
{"task_id": "HumanEval/154", "completion": "\n    \n    a = a.lower()\n    b = b.lower()\n    \n    for i in range(len(b)):\n        rotation = b[i:] + b[:i]\n        if rotation in a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    \n    roman_numerals = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000:'m'\n    }\n\n    roman_numeral = ''\n\n    for key in sorted(roman_numerals, reverse=True):\n        while number >= key:\n            roman_numeral += roman_numerals[key]\n            number -= key\n\n    return roman_numeral\n"}
{"task_id": "HumanEval/157", "completion": "\n    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2)\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique = 0\n    max_word = None\n    for word in words:\n        unique = 0\n        for char in word:\n            if char not in word:\n                unique += 1\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n        elif unique == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    total_eaten = number + remaining\n    return [total_eaten, total_eaten - need]\n"}
{"task_id": "HumanEval/160", "completion": "\n    expression = \"\"\n    for i in range(len(operator)):\n        if operator[i] == \"+\":\n            expression += str(operand[i]) + \" + \" + str(operand[i+1])\n        elif operator[i] == \"-\":\n            expression += str(operand[i]) + \" - \" + str(operand[i+1])\n        elif operator[i] == \"*\":\n            expression += str(operand[i]) + \" * \" + str(operand[i+1])\n        elif operator[i] == \"//\":\n            expression += str(operand[i]) + \" // \" + str(operand[i+1])\n        elif operator[i] == \"**\":\n            expression += str(operand[i]) + \" ** \" + str(operand[i+1])\n    return eval(expression)\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not result:\n        result = s[::-1]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    if text == '':\n        return None\n    else:\n        import hashlib\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    even_digits = []\n    for i in range(a, b + 1):\n        i_str = str(i)\n        for j in range(len(i_str)):\n            if int(i_str[j]) % 2 == 0:\n                even_digits.append(int(i_str[j]))\n    return sorted(even_digits)\n"}
