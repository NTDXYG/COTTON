{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "    # Step 1. Initialize an empty list to store the separate groups of parentheses.\n    separate_groups = []\n    # Step 2. Initialize a variable to keep track of the current group.\n    current_group = ''\n    # Step 3. Iterate through each character in the input string.\n    for character in paren_string:\n        # If the character is an open parenthesis, start a new group.\n        if character == '(':\n            current_group += character\n        # If the character is a close parenthesis, check if the current group is balanced. If it is, add the current group to the list and start a new group.\n        elif character == ')':\n            if current_group == '(':\n                current_group = ''\n            else:\n                separate_groups.append(current_group)\n                current_group = ''\n    # Step 4. Return the list of separate groups.\n    return separate_groups\n\n"}
{"task_id": "HumanEval/2", "completion": "    return float(number).to_bytes(4, byteorder='little')[3]\n"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n    return balance < 0\n\n"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for number in numbers:\n        if number % 2 == 0:\n            result.append(number)\n        else:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "    max_nesting = 0\n    for char in paren_string:\n        if char == '(':\n            max_nesting += 1\n        elif char == ')':\n            max_nesting -= 1\n    return max_nesting\n\n"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n"}
{"task_id": "HumanEval/9", "completion": "    rolling_max = []\n    for number in numbers:\n        max_element = max(rolling_max)\n        rolling_max.append(max_element)\n    return rolling_max\n\n"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    return make_palindrome(string[1:]) + string[0]\n\n"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(len(a)):\n        result += chr(ord(a[i]) ^ ord(b[i]))\n    return result\n\n"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:])\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "    return''.join(str(i) for i in range(n))\n"}
{"task_id": "HumanEval/16", "completion": "    # Step 1\n    distinct_characters = set()\n\n    # Step 2\n    string = string.upper()\n\n    # Step 3\n    for character in string:\n        # Step 4\n        distinct_characters.add(character)\n\n    return len(distinct_characters)\n\n"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "    closest_num1 = None\n    closest_num2 = None\n    for i in range(1, len(numbers)):\n        if closest_num1 is None or abs(numbers[i] - closest_num1) < abs(numbers[i] - closest_num2):\n            closest_num1 = numbers[i]\n            closest_num2 = numbers[i - 1]\n    return closest_num1, closest_num2\n"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / range_val\n    return numbers\n\n"}
{"task_id": "HumanEval/22", "completion": "    return [int(x) for x in values if isinstance(x, int)]\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "    if n % 2 == 0:\n        return n\n    else:\n        return 1\n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n\n"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/31", "completion": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 == 0:\n        if xs[0]!= 0:\n            return None\n        else:\n            return xs[1]\n    else:\n        return None\n\n"}
{"task_id": "HumanEval/33", "completion": "    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(l[i])\n        else:\n            l_.append(sorted(l[i]))\n    return l_\n"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "    l_even = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n    l_even.sort()\n    return l_even\n"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b\n\n"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "    collisions = 0\n    for i in range(n):\n        if i % 2 == 0:\n            collisions += 1\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "    if base < 2:\n        raise ValueError('base must be greater than 1')\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 3:\n        return str(x).replace('0', '00').replace('1', '01').replace('2', '10').replace('3', '11').replace('4', '100').replace('5', '101').replace('6', '110').replace('7', '111').replace('8', '1000').replace('9', '1001')\n    if base == 4:\n        return str(x).replace('0', '000').replace('1', '001').replace('2', '010').replace('3', '011').replace('4', '1000').replace('5', '1001').replace('6', '1010').replace('7', '1011').replace('8', '1100').replace('9', '1101')"}
{"task_id": "HumanEval/45", "completion": "    return a * h / 2\n"}
{"task_id": "HumanEval/46", "completion": "    fib4_list = [0, 0, 2]\n    for i in range(4, n + 1):\n        fib4_list.append(fib4_list[i - 1] + fib4_list[i - 2] + fib4_list[i - 3] + fib4_list[i - 4])\n    return fib4_list[n]\n"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2-1])/2\n    else:\n        return l[len(l)//2]\n"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/50", "completion": "    decoded = \"\"\n    for ch in s:\n        decoded += chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\"))\n    return decoded\n\n"}
{"task_id": "HumanEval/51", "completion": "    result = ''\n    for char in text:\n        if char not in 'aeiou':\n            result += char\n    return result\n"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "    same_chars = set()\n    for c in s0:\n        if c in s1:\n            same_chars.add(c)\n    return len(same_chars) == len(s0) or len(same_chars) == len(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "    prev = l[0]\n    curr = l[1]\n    for i in range(2, len(l)):\n        if prev < curr:\n            return False\n        prev = curr\n        curr = l[i]\n    return True\n\n"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1).intersection(set(l2)))\n"}
{"task_id": "HumanEval/59", "completion": "    largest_prime = 1\n    for i in range(2, n):\n        if n % i == 0:\n            n = n // i\n            largest_prime = i\n    return largest_prime\n\n"}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n        else:\n            return False\n    return not stack\n"}
{"task_id": "HumanEval/62", "completion": "    return [x * (x + 1) for x in xs]\n"}
{"task_id": "HumanEval/63", "completion": "    if n == 0 or n == 1:\n        return 0\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a+b\n    return b\n\n"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for c in s:\n        if c in 'aeiouy':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "    if shift > len(str(x)):\n        return circular_shift(str(x)[::-1], shift - len(str(x)))\n    else:\n        return str(x)[:shift] + str(x)[shift:]\n"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "    mango = 0\n    for i in s:\n        if i == \"m\":\n            mango += 1\n    return mango\n"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    smallest_even_value = float('inf')\n    smallest_index = -1\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even_value:\n            smallest_even_value = node\n            smallest_index = i\n    return [smallest_even_value, smallest_index]\n"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in lst:\n        if i in freq and freq[i] >= i:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    for i in range(len(lst)):\n        result.append(lst[i])\n        lst.remove(lst[i])\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c or b + c > a or c + a > b:\n        return -1\n    return a * b * c / 2\n"}
{"task_id": "HumanEval/72", "completion": "    pass\n"}
{"task_id": "HumanEval/73", "completion": "    changes = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "    result = []\n    for i in lst1:\n        count = 0\n        for j in lst2:\n            if i == j:\n                count += 1\n        result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/75", "completion": "    count = 0\n    for i in range(2, a):\n        if a % i == 0:\n            count += 1\n    if count == 2:\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return True\n    elif n == x:\n        return True\n    elif n % x == 0:\n        return False\n    else:\n        return is_simple_power(x, n // x)\n"}
{"task_id": "HumanEval/77", "completion": "    return a**3 == a\n"}
{"task_id": "HumanEval/78", "completion": "    # your code here\n    return 0\n"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    for i in range(len(str(decimal))):\n        binary += str(bin(decimal)[2:][i])\n    binary = \"db\" + binary[1:-1]\n    return binary\n"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    set_ = set()\n    for i in s:\n        if i in set_:\n            return False\n        set_.add(i)\n    return True\n\n"}
{"task_id": "HumanEval/81", "completion": "    return [grade_map[grade] for grade in grades]\n\ngrade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'}\n"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    count = 0\n    for char in string:\n        if char == char.lower():\n            count += 1\n    return count == len(string)\n"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10):\n        if i == 1 or i == n-1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "    total_sum = 0\n    while N:\n        total_sum += N % 2\n        N //= 2\n    return str(total_sum)\n\n"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "HumanEval/86", "completion": "    return''.join(sorted(s.split()))\n\n"}
{"task_id": "HumanEval/87", "completion": "    return []\n"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 1:\n        return array\n    else:\n        return sort_array(sort_array(array[1:]) + array[:1])\n"}
{"task_id": "HumanEval/89", "completion": "    return \"\"\n"}
{"task_id": "HumanEval/90", "completion": "    lst.sort()\n    if len(lst) > 1:\n        return lst[1]\n    else:\n        return None\n"}
{"task_id": "HumanEval/91", "completion": "    return 0\n"}
{"task_id": "HumanEval/92", "completion": "    return x + y == z and all(isinstance(x, int) or isinstance(y, int) or isinstance(z, int) for x in (x, y, z))\n\n"}
{"task_id": "HumanEval/93", "completion": "    return ''\n"}
{"task_id": "HumanEval/94", "completion": "    max_prime = 0\n    for num in lst:\n        if num > 1:\n            if num % 2 == 0:\n                continue\n            if num > max_prime:\n                max_prime = num\n    return sum(str(max_prime).digits)\n"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            return False\n        if key.isupper():\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "    # Write your code here\n    return int(str(a) * str(b))\n"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "    return int(round(value))\n"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        return [n]\n    else:\n        return [n, n+1]\n\n"}
{"task_id": "HumanEval/101", "completion": "    return s.split(\",\")\n"}
{"task_id": "HumanEval/102", "completion": "    result = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > result:\n            result = i\n    return result\n"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        return bin(n + m - 1)[2:]\n"}
{"task_id": "HumanEval/104", "completion": "    unique_digits = []\n    for num in x:\n        num_str = str(num)\n        num_digits = len(num_str)\n        if num_digits % 2 == 0:\n            unique_digits.append(num)\n    unique_digits.sort()\n    return unique_digits\n\n"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr)[::-1].index(max(arr)) + 1\n"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i + 1)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if is_integer_palindrome(i):\n            if is_even(i):\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for i in arr:\n        s = str(i)\n        count += sum(map(int, s))\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return arr[0] == 0\n    if len(arr) == 2:\n        return arr[0] < arr[1]\n    if len(arr) > 2:\n        max_element = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > max_element:\n                max_element = arr[i]\n        if max_element == arr[0]:\n            return True\n        arr[0], arr[1] = arr[1], arr[0]\n        return move_one_ball(arr)\n"}
{"task_id": "HumanEval/110", "completion": "    # Write your code here\n    return \"YES\" if lst1[0] % 2 == 0 else \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts, key=counts.get)\n    return counts[max_count]\n"}
{"task_id": "HumanEval/112", "completion": "    result = ''\n    for i in s:\n        if i not in c:\n            result += i\n    if not result:\n        return (result, False)\n    result = result[::-1]\n    if result == s:\n        return (result, True)\n    return (result, False)\n"}
{"task_id": "HumanEval/113", "completion": "    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j % 2 == 1:\n                count += 1\n        output.append(str(count))\n    return output\n"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    sum = 0\n    for num in nums:\n        sum += num\n        if sum < min_sum:\n            min_sum = sum\n        if sum >= len(nums):\n            sum -= nums[0]\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "    max_times = 0\n    for row in grid:\n        num_times = 0\n        for element in row:\n            if element == 1:\n                num_times += 1\n            elif num_times > capacity:\n                max_times = num_times\n                break\n        if num_times > 0:\n            max_times += 1\n    return max_times\n\n"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: bin(x).count('1'))\n"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    consonants = 0\n    words_with_consonants = []\n    for word in words:\n        count = 0\n        for c in word:\n            if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\":\n                count += 1\n        if count == n:\n            words_with_consonants.append(word)\n    return words_with_consonants\n\n"}
{"task_id": "HumanEval/118", "completion": "    closest_vowel = \"\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in \"aeiou\":\n            closest_vowel = word[i]\n            break\n    return closest_vowel\n\n"}
{"task_id": "HumanEval/119", "completion": "    if lst == []:\n        return 'No'\n    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "    result = []\n    arr.sort(reverse=True)\n    for i in range(k):\n        result.append(arr.pop())\n    return result\n"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        sum += int(str(arr[i])[1:])\n    return sum\n\n"}
{"task_id": "HumanEval/123", "completion": "    collatz = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return collatz\n\n"}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    date_split = date.split('-')\n    if len(date_split)!= 3:\n        return False\n    if int(date_split[0]) < 1 or int(date_split[0]) > 12:\n        return False\n    if int(date_split[1]) < 1 or int(date_split[1]) > 31:\n        return False\n    if int(date_split[2]) < 1 or int(date_split[2]) > 30:\n        return False\n    if int(date_split[0]) == 2 and int(date_split[1]) == 29:\n        return False\n    if int(date_split[0]) == 1 and int(date_split[1]) == 12:\n        return False\n    if int(date_split[0]) == 4 and int(date_split[1]) == 30:\n        return False\n    if int(date_split[0]) == 4 and int(date_split[1]) == 29:\n        return False\n    if int(date_split[0]) == 6 and"}
{"task_id": "HumanEval/125", "completion": "    return []\n"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] <= interval2[1] and interval1[1] >= interval2[0]:\n        return \"YES\"\n    return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    prod = 1\n    sum = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n            sum += i\n        elif i < 0:\n            prod *= -1\n            sum += i\n        else:\n            pass\n    return sum if sum >= 0 else None\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    # Step 1. Initialize a 2D array dp of size N x N, where dp[i][j] represents the minimum path length from cell (i, j) to the cell (0, 0).\n    # dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = min(dp[i][j], dp[i-1][j-1] + grid[i][j])\n    # dp[i][j] = min(dp[i][j], dp[i-1][j-1] + grid[i][j])\n    # dp[i][j] = min(dp[i][j], dp[i-1][j-1] + grid[i][j])\n    # dp[i][j] = min(dp[i][j], dp[i-1][j-1] + grid[i][j])\n    # dp[i][j] = min(dp["}
{"task_id": "HumanEval/130", "completion": "    tribonacci = [3, 1]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2])\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci\n\n"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if digit % 2 == 0:\n            product *= int(digit)\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n        else:\n            return False\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "    sum_squares = 0\n    for i in lst:\n        sum_squares += i**2\n    return round(sum_squares, 2)\n"}
{"task_id": "HumanEval/134", "completion": "    return txt[-1].isalpha() and not any(char.isalpha() for char in txt[:-1])\n"}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "    a = b = None\n    for i in lst:\n        if i < 0:\n            if a is None or i < a:\n                a = i\n        elif i > 0:\n            if b is None or i > b:\n                b = i\n    return (a, b)\n"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        return a\n    elif isinstance(a, float) and isinstance(b, float):\n        return a\n    elif isinstance(a, str) and isinstance(b, str):\n        return a\n    elif isinstance(a, str) and isinstance(b, int):\n        return b\n    elif isinstance(a, int) and isinstance(b, str):\n        return a\n    elif isinstance(a, float) and isinstance(b, str):\n        return b\n    elif isinstance(a, str) and isinstance(b, float):\n        return a\n    elif isinstance(a, str) and isinstance(b, str):\n        return a\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "    sum = 0\n    for i in range(1, 5):\n        sum += i\n    return sum == n\n"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\n"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if file_name[0]!= '.':\n        return 'No'\n    if file_name[-1] not in ['.txt', '.exe', '.dll']:\n        return 'No'\n    if file_name[1] not in ['a', 'A', 'z', 'Z']:\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    return 'Yes'\n\n"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0:\n            sum += i ** 3\n        else:\n            sum += i\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1 and word[0] == word[1]:\n            prime_words.append(word)\n    return''.join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "    pass\n"}
{"task_id": "HumanEval/145", "completion": "    pass\n"}
{"task_id": "HumanEval/146", "completion": "    counter = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num % 100!= 10:\n            counter += 1\n    return counter\n\n"}
{"task_id": "HumanEval/147", "completion": "    triples = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if i + j + k % 3 == 0:\n                    triples.append((i, j, k))\n    return len(triples)\n\n"}
{"task_id": "HumanEval/148", "completion": "    pass\n"}
{"task_id": "HumanEval/149", "completion": "    pass\n"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "    sum_squares = 0\n    for element in lst:\n        if element % 2 == 0:\n            sum_squares += element ** 2\n    return sum_squares\n\n"}
{"task_id": "HumanEval/152", "completion": "    pass"}
{"task_id": "HumanEval/153", "completion": "    # Step 1\n    class_name = class_name.lower()\n    strongest_extension = ''\n    # Step 2\n    for extension in extensions:\n        # Step 3\n        if extension.isalpha() and extension.islower():\n            # Step 4\n            if extension.isupper():\n                strongest_extension = extension\n                break\n            elif extension.islower():\n                strongest_extension = extension\n                break\n            else:\n                strongest_extension = extension\n                break\n    return class_name + '.' + strongest_extension\n"}
{"task_id": "HumanEval/154", "completion": "    a = a.lower()\n    b = b.lower()\n    if len(a) > len(b):\n        a, b = b, a\n    for i in range(len(b)):\n        if b[i] in a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n"}
{"task_id": "HumanEval/156", "completion": "    if number < 1:\n        return ''\n    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    roman_numeral = ''\n    while number >= 1000:\n        roman_numeral += roman_numerals[number % 1000]\n        number = number // 1000\n    roman_numeral += roman_numerals[number]\n    return roman_numeral.lower()\n"}
{"task_id": "HumanEval/157", "completion": "    if a == 0 or b == 0 or c == 0:\n        return False\n    return (a + b + c) <= (a + c + b)\n\n"}
{"task_id": "HumanEval/158", "completion": "    max_unique = 0\n    max_word = None\n    for word in words:\n        unique = 0\n        for char in word:\n            if char not in max_word:\n                unique += 1\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + remaining\n    return [total_eaten, remaining]\n\n"}
{"task_id": "HumanEval/160", "completion": "    if operator == []:\n        return operand[0]\n    else:\n        result = operand[0]\n        for i in range(1, len(operator)):\n            if operator[i] == '+':\n                result = result + operand[i+1]\n            elif operator[i] == '-':\n                result = result - operand[i+1]\n            elif operator[i] == '*':\n                result = result * operand[i+1]\n            elif operator[i] == '//':\n                result = result // operand[i+1]\n            elif operator[i] == '**':\n                result = result ** operand[i+1]\n        return result\n\n"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.upper()\n        else:\n            result += c\n    if result == \"\":\n        result = s[::-1]\n    return result\n\n"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "    return sorted(list(str(a) + str(b)))\n"}
