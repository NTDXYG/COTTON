{"task_id": "Open/0", "completion": "    \n    # Initialize a variable count as 0.\n    count = 0\n    \n    # Iterate through each element in the array.\n    for i in range(N):\n        # For each element, iterate through the remaining elements.\n        for j in range(N):\n            # If the element is not equal to k, increment count by 1.\n            if arr[i]!= arr[j] and arr[i] + arr[j] > K:\n                count += 1\n    \n    # Return count.\n    return count\n"}
{"task_id": "Open/1", "completion": "    count = 0\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    count = 0\n    for i in range(r, l-1, -1) :\n        if ( n & (1 << i) ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n) :\n        for j in range(i + 1, n) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    \n    # Step 1\n    sum = 0\n    for i in a:\n        sum += i\n    \n    # Step 2\n    if sum == 0:\n        return True\n    \n    # Step 3\n    return False\n"}
{"task_id": "Open/5", "completion": "    count = 0\n    for i in range(len(x)) :\n        if (x[i] % 2) == 1 :\n            count += 1\n    if (count % 2) == 1 :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "    result = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            result.append(vec[i])\n    result.sort()\n    for i in range(len(result)):\n        if result[i]!= i + 1:\n            return [i + 1]\n    return result\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_subsequence(arr[i], arr[j]):\n                max_length = max(max_length, len(arr[i]) + len(arr[j]))\n    return max_length\n"}
{"task_id": "Open/8", "completion": "    \n    # Initialize an empty list to store the prime factors.\n    prime_factors = []\n    \n    # Iterate through numbers from 1 to n.\n    for i in range(1, a+1) :\n        \n        # If the number is divisible by the current number, add it to the list of prime factors.\n        if a % i == 0 :\n            prime_factors.append(i)\n    \n    # Return the list of prime factors.\n    return prime_factors\n"}
{"task_id": "Open/9", "completion": "    sum = 0\n    for i in range(n-1):\n        sum += abs(arr[i+1] - arr[i])\n    return sum\n"}
{"task_id": "Open/10", "completion": "    result = []\n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            result.append(B[i])\n            result.append(A[i])\n    return result\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range(len(s)) :\n        if s[i].isdigit() :\n            count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    if n == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/14", "completion": "    \n    # Your code here\n    \n    # The switch statement\n    switch = {\n        0: n,\n        1: 1,\n        2: n + 1,\n        3: 0\n    }\n    \n    return switch.get(n % 4, \"\")\n"}
{"task_id": "Open/15", "completion": "    result = 1\n    for i in range(1, n) :\n        if i == n :\n            result += 1\n        elif i > n :\n            result += 1\n        elif (i**((n-1)/2)) % n == 1 :\n            result += 1\n    return result\n"}
{"task_id": "Open/16", "completion": "    d = {}\n    for c in s1 :\n        if c not in d :\n            d[c] = 1\n        else :\n            d[c] += 1\n    for c in s2 :\n        if c not in d :\n            d[c] = 1\n        else :\n            d[c] += 1\n    for c in d :\n        if d[c] > n :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(length) :\n        if i % 2 == 0 :\n            if s[i] == '0' :\n                count += 1\n        else :\n            if s[i] == '1' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n):\n        if a[i]%4 == 0:\n            count0 += 1\n        elif a[i]%4 == 1:\n            count1 += 1\n        elif a[i]%4 == 2:\n            count2 += 1\n        elif a[i]%4 == 3:\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n:\n        return 1\n    else:\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] > max_length:\n            max_length = arr[i]\n    return max_length\n"}
{"task_id": "Open/23", "completion": "    if i == len(arr) :\n        return count\n    else :\n        if sum == 0 :\n            count += 1\n        return subsetSum(arr, n, i + 1, sum - arr[i], count) + subsetSum(arr, n, i + 1, sum, count)\n"}
{"task_id": "Open/24", "completion": "    \n    return (n**2 + n) // 2\n"}
{"task_id": "Open/25", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"}
{"task_id": "Open/26", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return (b - a) * b / a\n"}
{"task_id": "Open/30", "completion": "    return sum(i**2 for i in range(1, n+1)) / n\n"}
{"task_id": "Open/31", "completion": "    return sorted(arr)[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "    result = []\n    for i in range(1,n+1):\n        result.append(i*2+i-1)\n    return result\n"}
{"task_id": "Open/34", "completion": "    \n    count = 0\n    \n    for i in range(len(a)):\n        if a[i] >= k:\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1) :\n        if i == n :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    for i in range ( 1, n + 1 ) :\n        if i not in arr :\n            return i\n    return n + 1\n"}
{"task_id": "Open/37", "completion": "    count = 0\n    for i in range(1, n) :\n        if i % 2 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/38", "completion": "    sum = 0\n    for i in range(0, l) :\n        sum += (i+1)**2\n    return sum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1,N+1))\n"}
{"task_id": "Open/40", "completion": "    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n        else:\n            count = 0\n    return count\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] > max_length:\n            max_length = arr[i]\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    max_length = 0\n    for i in range(1, n):\n        if i % k == 0:\n            max_length = max(max_length, a[i])\n    return max_length\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (array[i]*array[j]) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    result = []\n    for i in range(n):\n        result.append(abs(arr[i] - i + 1))\n    return result\n"}
{"task_id": "Open/45", "completion": "    min_distance = 0\n    for i in range(n):\n        if i == 0:\n            min_distance = arr[i]\n        else:\n            if arr[i] < min_distance:\n                min_distance = arr[i]\n    return min_distance * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_distance = 0\n    for i in range(len(array)):\n        if i == 0:\n            max_distance = abs(array[i] - array[i+1])\n        else:\n            if abs(array[i] - array[i-1]) < max_distance:\n                max_distance = abs(array[i] - array[i-1])\n    return max_distance\n"}
{"task_id": "Open/47", "completion": "    return ( ( a * x1 + b * y1 ) - c ) * ( a * x2 + b * y2 ) > 0\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(1, a+1):\n        if i > 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    result = 0\n    for i in range(R,L,-1):\n        if i == R:\n            result += 1\n    return result\n"}
{"task_id": "Open/50", "completion": "    largest = 0\n    for i in range(1, n):\n        if a[i] > largest:\n            largest = a[i]\n    return largest\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += 1/pow(3, i)\n    return sum\n"}
{"task_id": "Open/52", "completion": "    result = []\n    for i in range(n):\n        for j in range(n):\n            result.append(arr[i][j] * arr[i][j])\n    return result\n"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(1, N+1):\n        if i & 1 == 1:\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(n):\n        sum += a[i]\n    if sum == k:\n        return sum\n    else:\n        return -1\n"}
{"task_id": "Open/55", "completion": "    sum = 0\n    for i in range(1, n+1):\n        if i & 1:\n            sum += 1\n    return sum == 1\n"}
{"task_id": "Open/56", "completion": "    count = 0\n    for i in range(len(s)) :\n        if s[i] == '1' :\n            count += 1\n    return count\n"}
{"task_id": "Open/57", "completion": "    return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    for i in range(1, N):\n        result += arr[i]\n        result += arr[i] * arr[i] / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "    result = []\n    for i in range(len(arr)) :\n        for j in range(i,i+ranges[index]) :\n            if arr[j] == arr[j-1] :\n                result.append(arr[j])\n    return result\n"}
{"task_id": "Open/60", "completion": "    \n    # Step 1. Calculate the square root of the input number.\n    sqrt = int(n**0.5)\n    \n    # Step 2. If the square root is an integer, return True.\n    if sqrt**2 == n :\n        return True\n    \n    # Step 3. Otherwise, return False.\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(a)) :\n        if a[i] == b[i] :\n            count += 1\n    return count\n"}
{"task_id": "Open/62", "completion": "    result = \"\"\n    for i in range ( len ( str ) - 1, -1, -1 ) :\n        if str[i].isalpha() :\n            result += str[i]\n        else :\n            result += \"9\"\n    return result\n"}
{"task_id": "Open/63", "completion": "    sum = 0\n    for i in range(n):\n        sum += abs(arr[i] - arr[i+1])\n    return sum\n"}
{"task_id": "Open/64", "completion": "    result = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            result += 1\n        elif s[i] == '1':\n            result += 1\n    return result\n"}
{"task_id": "Open/65", "completion": "    result = []\n    for i in range(n):\n        if a[i]!= k:\n            result.append(a[i])\n    return len(result)\n"}
{"task_id": "Open/66", "completion": "    \n    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 2. If the length of the array is odd, return the middle element.\n    if ( n % 2 == 1 ) :\n        return arr[n/2]\n    \n    # Step 3. If the length of the sorted array is even, return the average of the two middle elements.\n    else :\n        return ( arr[n/2] + arr[n/2 - 1] ) / 2.0\n    \n    "}
{"task_id": "Open/67", "completion": "    count = 0\n    for i in range(n):\n        if a[i] > 0:\n            count += 1\n        elif a[i] < 0:\n            count += abs(a[i])\n    return count\n"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    else :\n        v = []\n        n = n - 1\n        while n > 0 :\n            v.append(n%5)\n            n = n // 5\n        result = 0\n        for i in range(len(v)-1, -1, -1) :\n            result = result * 10 + v[i]\n        return 2 * result\n"}
{"task_id": "Open/69", "completion": "    if n == 0 :\n        return True\n    if n & 1 == 0 :\n        return False\n    return areSetBitsIncreasing ( n >> 1 )\n"}
{"task_id": "Open/70", "completion": "    if n % x == 0 :\n        return n\n    else :\n        return n + x - n % x\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/73", "completion": "    max_count = 0\n    for i in range(n):\n        if arr[i] == arr[i] :\n            max_count += 1\n    return max_count\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(1, n):\n        if (i & (i-1) == 0):\n            count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    return int( ''.join( ['1' if x == '0' else '0' for x in bin(n)[2:]] ), 2 )\n"}
{"task_id": "Open/76", "completion": "    count = 0\n    for i in range(n):\n        if A[i]!= 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/77", "completion": "    return radian * 180\n"}
{"task_id": "Open/78", "completion": "    return n // 2\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += a + (i-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    result = 1\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            result = i\n    return result\n"}
{"task_id": "Open/81", "completion": "    max_distance = 0\n    for i in range(8) :\n        distance = abs(row - i) + abs(column - (i + 1) % 8)\n        if distance < max_distance :\n            max_distance = distance\n    return max_distance\n"}
{"task_id": "Open/82", "completion": "    result = 1\n    for i in range(1, n+1):\n        result += i\n    return result\n"}
{"task_id": "Open/83", "completion": "    \n    # Step 1\n    d = {}\n    for c in s:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    \n    # Step 2\n    l = []\n    for c in s:\n        l.append(c)\n    \n    # Step 3\n    max_val = max(d.values())\n    \n    # Step 4\n    new_l = []\n    for c in d:\n        if d[c]!= max_val:\n            new_l.append(c)\n    \n    # Step 5\n    for c in l:\n        if c not in new_l:\n            new_l.append(c)\n    \n    # Step 6\n    return \"\".join(new_l)\n"}
{"task_id": "Open/84", "completion": "    \n    # Initialize a variable sum as 0.\n    sum = 0\n    \n    # Iterate through the range from 0 to n-1.\n    for i in range(l-1,r) :\n        \n        # If the current number is even, add it to the sum.\n        if i % 2 == 0 :\n            sum += i\n    \n    # Return the sum.\n    return sum\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range ( smaller, 1, -1 ) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    result = []\n    for i in range(N):\n        if i == 0:\n            result.append(A)\n        elif i == 1:\n            result.append(B)\n        else:\n            result.append(result[i-1] + result[i-2])\n    return result[N-1]\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for n in range(len(str)):\n        if str[n] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    # Convert the interest rate to monthly interest rate\n    r = r / 100 / 12\n    # Convert the loan tenure to monthly loan tenure\n    t = t * 12\n    # Calculate the EMI\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    # Return the EMI\n    return emi\n"}
{"task_id": "Open/89", "completion": "    max_count = 0\n    for i in A:\n        count = 0\n        for j in B:\n            if i * j > j * j:\n                count += 1\n        max_count += count\n    return max_count\n"}
{"task_id": "Open/90", "completion": "    return len([i for i in range(l, r+1) if i % 10 == 2 or i % 10 == 3 or i % 10 == 9])\n"}
{"task_id": "Open/91", "completion": "    max_length = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[j]-arr[i] == arr[j]-arr[i]:\n                max_length = max(max_length, j-i+1)\n    return max_length\n"}
{"task_id": "Open/92", "completion": "    max_length = 0\n    for i in range(len(str)):\n        if str[i].isalpha():\n            if isPalindrome(str[i]):\n                max_length += 1\n            else:\n                break\n    return max_length\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    for i in range ( 1, n ) :\n        if i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    result = \"\"\n    for i in range(n) :\n        if not(ord(i) >= 97 and ord(i) <= 122) :\n            result += i\n        else :\n            if k >= 26 :\n                result += chr(ord(i) + 26)\n                k -= 26\n            else :\n                result += chr(ord(i) + k + 97 - 1)\n                k -= (ord(i) + k + 97 - 1) - 97\n    return result\n"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    max_sum = 0\n    for i in range(n):\n        if max_sum < (arr[i] + arr[i+1])/3:\n            max_sum = (arr[i] + arr[i+1])/3\n    return max_sum\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    count = 0\n    while n > 0 :\n        if n % 10 == 0 :\n            count += 1\n        else :\n            count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/99", "completion": "    if a == b == c :\n        return True\n    elif a == b :\n        return (b-c) == k or (b+c) == k\n    elif a == c :\n        return (a-b) == k or (a+b) == k\n    elif b == c :\n        return (a-c) == k or (a+c) == k\n    else :\n        return False\n"}
{"task_id": "Open/100", "completion": "    if len(x) <= 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in s:\n        if i in \"aeiouAEIOU\":\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(n):\n        if string[i].isdigit():\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    max_distance = 0\n    for i in range(n-1):\n        if abs(arr[i] - arr[i+1]) < max_distance:\n            max_distance = abs(arr[i] - arr[i+1])\n    return max_distance\n"}
{"task_id": "Open/104", "completion": "    count = 0\n    for i in range(right, left, -1):\n        if i & (i - 1) == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/105", "completion": "    result = 1\n    for i in range(n):\n        result *= 2\n    return result\n"}
{"task_id": "Open/106", "completion": "    if n == 1 :\n        return False\n    else :\n        divisors = []\n        for i in range(1, n) :\n            if n % i == 0 :\n                divisors.append(i)\n        if sum(divisors) == n :\n            return True\n        else :\n            return False\n"}
{"task_id": "Open/107", "completion": "    count = 0\n    for i in range(N) :\n        if i % 2 == 1 :\n            count += 1\n    return count\n"}
{"task_id": "Open/108", "completion": "    \n    # Step 1.\n    # Calculate the length of the input list.\n    length = len(a)\n    \n    # Step 2.\n    # If the length is equal to 1, return the calculated number.\n    if length == 1 :\n        return a[0]\n    \n    # Step 3.\n    # If the length is less than 1, return the calculated number.\n    elif length < 1 :\n        return -1\n    \n    # Step 4.\n    # If the length is greater than 1, calculate the length of the input list.\n    # Calculate the length of the input list.\n    length = len(a)\n    \n    # Step 5.\n    # Calculate the length of the input list.\n    length = len(a)\n    \n    # Step 6.\n    # Calculate the length of the input list.\n    length = len(a)\n    \n    # Step 7.\n    # Calculate the length of the input list.\n    length = len(a)\n    \n    # Step 8.\n    # Calculate the length of the input list.\n    length"}
{"task_id": "Open/109", "completion": "    \n    dictionary = {}\n    \n    for i in range(n) :\n        if str(n)[i] in dictionary :\n            dictionary[str(n)[i]] += 1\n        else :\n            dictionary[str(n)[i]] = 1\n    \n    return dictionary[str(d)]\n"}
{"task_id": "Open/110", "completion": "    return len(set(str(n))) == len(str(n))\n"}
{"task_id": "Open/111", "completion": "    \n    sum = 0\n    for i in range(len(a)):\n        sum += a[i]\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/112", "completion": "    result = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            result.append(4)\n        else:\n            result.append(7)\n    return result[n-1]\n"}
{"task_id": "Open/113", "completion": "    result = []\n    for i in range(n+1):\n        if i % 2 == 0:\n            result.append(3)\n        else:\n            result.append(5)\n    return result[n]\n"}
{"task_id": "Open/114", "completion": "    result = []\n    for i in range(n+1):\n        if i%2 == 0:\n            result.append(1)\n        else:\n            result.append(2)\n    return result[n]\n"}
{"task_id": "Open/115", "completion": "    if a == [] :\n        return True\n    else :\n        if a[0] % 11 == 0 :\n            return isPossibleToZero( a[1:], n )\n        else :\n            return False\n"}
{"task_id": "Open/116", "completion": "    \n    # Step 1\n    sqrt = (l ** 2 + b ** 2 + h ** 2) ** 0.5\n    \n    # Step 2\n    if sqrt == 0 :\n        return l * b\n    \n    # Step 3\n    return l * b + sqrt\n"}
{"task_id": "Open/117", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += char.upper()\n    return result\n"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "    return len(arr) == len(set(arr))\n"}
{"task_id": "Open/120", "completion": "    \n    # Initialize an empty dictionary to store the count of each character.\n    count = {}\n    \n    # Iterate through the characters in the input string.\n    for char in string :\n        \n        # If the character is already in the dictionary, add it with a count of 1.\n        if char in count :\n            count[char] += 1\n        \n        # If the character is already in the dictionary, increment its count by 1.\n        else :\n            count[char] = 1\n    \n    # Return the dictionary of count.\n    return count\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    result = \"\"\n    for c in ss:\n        if c.isdigit():\n            result += c\n        else:\n            if result == \"\":\n                result = c\n            else:\n                if int(result) < int(c):\n                    result = c\n    return result\n"}
{"task_id": "Open/123", "completion": "    result = \"\"\n    for i in range(len(s)) :\n        if s[i].isdigit() :\n            result += s[i]\n        else :\n            result += \" \"\n    return result\n"}
{"task_id": "Open/124", "completion": "    sum = 0\n    for i in range(N, M, -1):\n        if i >= N:\n            sum += 1\n        elif i >= M:\n            return sum * i\n    return sum * M\n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    result = 1\n    for i in range(1, n):\n        result = result * 2\n    return result\n"}
{"task_id": "Open/127", "completion": "    \n    if len(str(A)) == len(str(B)) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/128", "completion": "    return ( x - y )!= 1\n"}
{"task_id": "Open/129", "completion": "    max_index = 0\n    for i in range(3, n+1):\n        max_index = max(max_index, i)\n    return max_index\n"}
{"task_id": "Open/130", "completion": "    max_diff = 0\n    for i in range(n):\n        if i == 0:\n            max_diff = abs(arr[i] - arr[i+1])\n        else:\n            if abs(arr[i] - arr[i-1]) < max_diff:\n                max_diff = abs(arr[i] - arr[i-1])\n    return max_diff\n"}
{"task_id": "Open/131", "completion": "    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/132", "completion": "    result = 0\n    for i in range(1, N + 1):\n        result += i * a\n    return result\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if n % 2 == 0 :\n        return False\n    else :\n        return arr[0] % 2 == 1 and arr[n-1] % 2 == 1 and n % 2 == 1\n"}
{"task_id": "Open/135", "completion": "    \n    if N == 1 :\n        return ( R - L + 1 )\n    else :\n        return ( ( countSum ( N - 1, L + 1, R ) + countSum ( N - 2, L + 1, R ) ) )\n"}
{"task_id": "Open/136", "completion": "    result = 1\n    for i in range(n):\n        if arr[i]!= result:\n            result += 1\n    return result\n"}
{"task_id": "Open/137", "completion": "Convert the number to a string.\"\"\"\n        \n        return str(s)\n    \n    def sortString ( s ) :\n        \"\"\"Sort the string in ascending order.\"\"\"\n        \n        return \"\".join(sorted(s))\n    \n    def isEmpty ( s ) :\n        \"\"\"Check if the string is empty.\"\"\"\n        \n        return len(s) == 0\n    \n    def smallestPoss ( s, n ) :\n        \"\"\"Write a function that takes a string and an integer as input and returns the smallest possible number that can be formed by rearranging the digits of the string.\n        \n        How to solve:\n        Step 1. Convert the number to a string.\n        Step 2. Sort the string in ascending order.\n        Step 3. If the sorted string is empty, return the sorted string.\n        Step 4. Otherwise, return the sorted string.\n        \"\"\"\n        \n        def convertToString ( s ) :\n            \"\"\"Convert the number to a string.\"\"\"\n            \n            return str(s)\n        \n        def sortString ( s )"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    for i in s :\n        sum += ord(i)\n    return sum / len(s)\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    for i in range(N) :\n        if A*i <= S :\n            count += 1\n        elif B*i <= S :\n            count += 1\n    return count\n"}
{"task_id": "Open/141", "completion": "    return x * y / math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n > 0 :\n        if n % 2 == 0 :\n            n = n / 2\n            count += 1\n        else :\n            return count\n    return count\n"}
{"task_id": "Open/143", "completion": "    sum = 0\n    for i in range(n):\n        for j in range(i):\n            sum = sum ^ arr[j]\n        for j in range(i+1,n):\n            sum = sum ^ arr[j]\n    return sum\n"}
{"task_id": "Open/144", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] > max_length:\n            max_length = arr[i]\n    return max_length\n"}
{"task_id": "Open/145", "completion": "    \n    sum = 0\n    for i in range(n):\n        if arr[i]!= k:\n            sum += arr[i]\n    if sum == k:\n        return sum\n    else:\n        return -1\n"}
{"task_id": "Open/146", "completion": "    max_length = 0\n    count = 0\n    for num in nums:\n        if num == k:\n            count += 1\n        elif num > max_length:\n            max_length = num\n    return max_length if count > 0 else -1\n"}
{"task_id": "Open/147", "completion": "    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    \n    # Step 1\n    abs_diff = abs(p - q)\n    \n    # Step 2\n    prob = (p**2 + q**2) / (p + q)\n    \n    # Step 3\n    return prob\n"}
{"task_id": "Open/151", "completion": "    result = \"\"\n    for i in range(len1):\n        result += chr(ord(str1[i]) ^ ord('a'))\n    return result\n"}
{"task_id": "Open/152", "completion": "    count = 0\n    for i in range(len(n)) :\n        if n[i] == '1' :\n            count += 1\n        else :\n            count = 0\n        if count > 1 :\n            return False\n    return True\n"}
{"task_id": "Open/153", "completion": "    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(s) - 1):\n        if s[i] not in vowels:\n            return False\n        if s[i] > s[i + 1]:\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1) :\n        if i >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    return min(abs(n-2**int(math.log(n,2))), abs(n-2**int(math.log(n,2)+1)))\n"}
{"task_id": "Open/156", "completion": "    result = 0\n    for i in range(0,r):\n        if i%2 == 0:\n            result += i\n    return result\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    sum = 0\n    count = 0\n    for i in range(size) :\n        if ar[i] == sum :\n            count += 1\n        else :\n            sum += 1\n    return count\n"}
{"task_id": "Open/159", "completion": "    return str.count(\"010\")\n"}
{"task_id": "Open/160", "completion": "    result = {}\n    for i in range(n):\n        if arr[i] not in result:\n            result[arr[i]] = 1\n        else:\n            result[arr[i]] += 1\n    for key, value in result.items():\n        if value % 2!= 0:\n            return key\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ (arr[i] ^ xorArr)\n    return ans\n"}
{"task_id": "Open/162", "completion": "    max_distance = 0\n    for i in range(1, len(nums)):\n        if abs(nums[i] - nums[i - 1]) < max_distance:\n            max_distance = abs(nums[i] - nums[i - 1])\n    return max_distance\n"}
{"task_id": "Open/163", "completion": "    if n % 4 == 0 :\n        return n // 4\n    elif n % 4 == 1 :\n        return 0\n    elif n % 4 == 2 :\n        return n // 4 + n // 4\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return 0\n"}
{"task_id": "Open/164", "completion": "    result = {}\n    for i in range(n):\n        if arr[i] not in result:\n            result[arr[i]] = 1\n        else:\n            result[arr[i]] += 1\n    return result\n"}
{"task_id": "Open/165", "completion": "    count = 0\n    for node in height:\n        if node == height:\n            count += 1\n    return count\n"}
{"task_id": "Open/166", "completion": "    max_diff = 0\n    for num in source:\n        if abs(num - dest) > max_diff:\n            max_diff = abs(num - dest)\n    return max_diff\n"}
{"task_id": "Open/167", "completion": "    count = 0\n    for i in range(n) :\n        count = count + 1\n        if i == 0 :\n            count = 1\n        elif i == 1 :\n            count = 2\n        elif i == 2 :\n            count = 11\n        elif i == 3 :\n            count = 21\n        elif i == 4 :\n            count = 1211\n        elif i == 5 :\n            count = 312211\n        elif i == 6 :\n            count = 13112221\n        elif i == 7 :\n            count = 213213211\n        elif i == 8 :\n            count = 312312321\n        elif i == 9 :\n            count = 13111312211\n        elif i == 10 :\n            count = 211312111312211\n        elif i == 11 :\n            count = 311311131112321\n        elif i == 12 :\n            count = 131111311123113112211\n        elif i == 13 :\n            count = 211311311231131121311221\n        elif i == 14 :\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (arr[i]*arr[j] < 0):\n                max_length = max(max_length, j-i)\n    return max_length\n"}
{"task_id": "Open/169", "completion": "    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    \n    # Step 1\n    count = 0\n    \n    # Step 2\n    for i in range(len(arr) - 1) :\n        if arr[i] < arr[i + 1] :\n            count += 1\n    \n    # Step 3\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r + 1):\n        if i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return n ^ ( (1 << m) - 1 )\n"}
{"task_id": "Open/174", "completion": "    count = 0\n    for i in range ( L, R + 1 ) :\n        if i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    result = 0\n    for i in range(1,n+1) :\n        result = result + math.log10(i)\n    return result\n"}
{"task_id": "Open/176", "completion": "    if n == 1 :\n        return A[0]\n    \n    for i in range(n) :\n        if A[i] >= A[i-1] and A[i] >= A[i+1] :\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    \n    sum = 0\n    for i in range(1, n):\n        if a < i and b < i:\n            sum += i\n    return sum\n"}
