{"task_id": "Open/0", "completion": "    count = 0\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(len(arr)):\n            if arr[i]!= K:\n                sum += arr[j]\n        if sum > arr[i] + K:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    count = 0\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    sum = 0\n    count = 0\n    for i in range(l, r+1):\n        if i == n:\n            count += 1\n    return count\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (A[i]+A[j]) % K == 0:\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    \n    # Step 1. Calculate the sum of all elements in the given list.\n    sum = 0\n    for i in a:\n        sum += i\n    \n    # Step 2. If the sum is equal to 0, return True.\n    if sum == 0:\n        return True\n    \n    # Step 3. Otherwise, return False.\n    return False\n"}
{"task_id": "Open/5", "completion": "    count = 0\n    for i in range(len(x)):\n        if x[i] % 2 == 1:\n            count += 1\n    if count % 2 == 1:\n        return 1\n    else:\n        return 0\n"}
{"task_id": "Open/6", "completion": "    result = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            result.append(i)\n    result.sort()\n    return result\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                max_length = max(max_length, j-i+1)\n    return max_length\n"}
{"task_id": "Open/8", "completion": "    prime_factors = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n"}
{"task_id": "Open/9", "completion": "    sum = 0\n    for i in range(n):\n        sum += abs(arr[i] - arr[i+1])\n    return sum\n"}
{"task_id": "Open/10", "completion": "    result = []\n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            result.append(A[i])\n            result.append(B[i])\n        else:\n            result.append(A[i])\n            result.append(B[i])\n            result.append(A[i])\n    return result\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(0,size):\n        if array[i] % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range(len(s)) :\n        if s[i].isdigit() :\n            count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        while n > 1:\n            if n % 2 == 0:\n                return False\n            else:\n                n = n // 2\n    return True\n"}
{"task_id": "Open/14", "completion": "    \n    if n % 4 == 0:\n        return n\n    elif n % 4 == 1:\n        return 1\n    elif n % 4 == 2:\n        return n + 1\n    elif n % 4 == 3:\n        return 0\n    else:\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    for i in range(t):\n        if (a**((n-1)/2))%n == 1:\n            return 1\n        else:\n            a = random.randint(2,n-1)\n    return -1\n"}
{"task_id": "Open/16", "completion": "    \n    # Step 1. Initialize an empty dictionary to store the count of each character in the string.\n    d = {}\n    \n    # Step 2. Iterate through the characters in the input string.\n    for i in range(len(s1)) :\n        \n        # If the character is not in the dictionary, add it with a count of 1.\n        if s1[i] not in d :\n            d[s1[i]] = 1\n        else :\n            d[s1[i]] += 1\n        \n        # If the character is already in the dictionary, increment its value by 1.\n        if s2[i] in d :\n            d[s2[i]] += 1\n        else :\n            d[s2[i]] = 1\n    \n    # Step 3. Iterate through the dictionary and check if the value is in the dictionary.\n    for i in d :\n        if d[i] > 0 :\n            return True\n    \n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(len(s)) :\n        if i % 2 == 0 :\n            if s[i] == '0' :\n                count += 1\n        else :\n            if s[i] == '1' :\n                count += 1\n    return min(count, len(s) - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    result = 1\n    if x == 0 or y == 0 :\n        return 0\n    else :\n        return x + product(x-1,y)\n"}
{"task_id": "Open/21", "completion": "    count = 0\n    for i in range(1, n + 1):\n        if i % 4 == 0:\n            count += 1\n    if count % 2 == 0:\n        return 1\n    else:\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] > max_length:\n            max_length = arr[i]\n    return max_length\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        count = subsetSum(arr, n, i + 1, sum, count)\n        count = subsetSum(arr, n, i + 1, sum - arr[i], count)\n        return count\n"}
{"task_id": "Open/24", "completion": "    return int(n**0.5)\n"}
{"task_id": "Open/25", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"}
{"task_id": "Open/26", "completion": "    max_sum = 0\n    for i in range(1, n + 1):\n        max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    if y <= 1 :\n        return False\n    else :\n        return x % 2 == 0\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return (b - a) * 100 / a\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum/n\n"}
{"task_id": "Open/31", "completion": "    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    # Step 2. Return the sorted array.\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3 ** (n - 1)\n"}
{"task_id": "Open/33", "completion": "    result = []\n    for i in range(1,n+1):\n        result.append(i*2 + (n-i))\n    return result\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in range(len(a)):\n        if a[i] >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1):\n        if i == n:\n            count += 1\n        elif i == d:\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    # Step 2. Initialize a variable \"missing\" as 1.\n    missing = 1\n    # Step 3. Iterate through the sorted array.\n    for i in range(1, n + 1):\n        # -If the current element is equal to \"missing\", increment \"missing\" by 1.\n        if arr[i - 1] == missing:\n            missing += 1\n    # Step 4. Return \"missing\".\n    return missing\n"}
{"task_id": "Open/37", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/38", "completion": "    sum = 0\n    for i in range(l) :\n        for j in range(b) :\n            sum += 1\n    return sum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N + 1))\n"}
{"task_id": "Open/40", "completion": "    count = 0\n    for i in range(0, n):\n        if arr[i] == 1:\n            count = count + 1\n        else:\n            if count > 0:\n                count = count + 1\n            else:\n                count = 0\n    return count\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            max_length = max(max_length,0)\n        else:\n            max_length = max(max_length,i-max_length+1)\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    max_length = 0\n    for i in range(1, n):\n        if a[i] < max_length:\n            max_length = a[i]\n        else:\n            max_length = max(a[i], max_length)\n    return max_length\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if array[i]*array[j] <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    result = []\n    for i in range(n):\n        result.append(abs(arr[i] - i))\n    return result\n"}
{"task_id": "Open/45", "completion": "    min_distance = 0\n    for i in range(n):\n        if i == 0:\n            min_distance = arr[i]\n        else:\n            min_distance = min(min_distance, arr[i] - arr[i - 1])\n    return min_distance * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_distance = 0\n    for i in range(len(array)-1):\n        diff = abs(array[i]-array[i+1])\n        if diff > max_distance:\n            max_distance = diff\n    return max_distance\n"}
{"task_id": "Open/47", "completion": "    if (a == b) :\n        raise Exception(\"The lengths of x and y are equal.\")\n    else :\n        difference = abs(a*y1 + b*x1 - c)\n        for i in range(len(points)-1, -1, -1) :\n            if (points[i][1] == y2) :\n                raise Exception(\"The points are on the same side of the line.\")\n            else :\n                sum = abs(points[i][1] - y1) + abs(points[i][0] - x1)\n                if (sum == difference) :\n                    return True\n                else :\n                    return False\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0, a+1):\n        if (i + (a ^ i)) == a:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    result = 0\n    for i in range(R, L-1, -1):\n        if i == R:\n            result = i\n        else:\n            result = result & i\n    return result\n"}
{"task_id": "Open/50", "completion": "    largest = 0\n    for i in range(1, n+1):\n        if a[i-1] > largest:\n            largest = a[i-1]\n    return largest\n"}
{"task_id": "Open/51", "completion": "    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "    result = []\n    for i in range(n):\n        for j in range(n):\n            result.append(arr[i][j]*arr[i][j+1]*arr[i+1][j+1]*arr[i+1][j])\n    return result\n"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(1, N+1):\n        if i % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(0, n):\n        sum += a[i]\n    if sum == k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/55", "completion": "    sum = 0\n    for i in range(1,n+1):\n        if i == 1 or i == n:\n            sum += 1\n    return sum == 1\n"}
{"task_id": "Open/56", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count\n"}
{"task_id": "Open/57", "completion": "    return N if N % K == 0 else N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    for i in range(2,N+1):\n        result = result + arr[i-1]\n        result = result + arr[i-2]*arr[i-1]\n    return result\n"}
{"task_id": "Open/59", "completion": "    result = []\n    for i in range(len(arr)) :\n        for j in range(i, len(arr)) :\n            if arr[i] == arr[j] :\n                result.append(arr[i])\n    \n    for i in range(len(ranges)) :\n        for j in range(ranges[i][0], ranges[i][1] + 1) :\n            if j == index :\n                return arr[j]\n    \n    for i in range(len(reversals)) :\n        if reversals[i] == 1 :\n            arr[index], arr[index + 1] = arr[index + 1], arr[index]\n            index += 2\n        else :\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index -= 2\n    \n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "    if n == 0:\n        return False\n    sqrt = int(math.sqrt(n))\n    if sqrt * sqrt == n:\n        return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i] == a:\n            count += 1\n    return count\n"}
{"task_id": "Open/62", "completion": "    result = \"\"\n    for i in range(len-1, -1, -1) :\n        if not str[i].isalpha() :\n            result += str[i]\n        else :\n            if str[i] > str[i+1] :\n                result += str[i] - 1\n                str = str[:i] + str[i+1:]\n    return result\n"}
{"task_id": "Open/63", "completion": "    sum = 0\n    for i in range(n):\n        sum += math.log(arr[i])\n    return sum\n"}
{"task_id": "Open/64", "completion": "    result = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            result += 1\n    if result == 0:\n        return -1\n    else:\n        return result\n"}
{"task_id": "Open/65", "completion": "    result = []\n    for i in range(n):\n        if a[i]!= k:\n            result.append(a[i])\n    return result\n"}
{"task_id": "Open/66", "completion": "    # Step 1. Sort the array in ascending order.\n    arr.sort()\n    # Step 2. If the length of the array is odd, return the middle element.\n    if n % 2!= 0:\n        return arr[n//2]\n    # Step 3. If the length of the sorted array is even, return the average of the two middle elements.\n    else:\n        return (arr[n//2-1] + arr[n//2])/2\n"}
{"task_id": "Open/67", "completion": "    count = 0\n    for i in range(n):\n        if a[i] > 0:\n            count += 1\n        elif a[i] < 0:\n            count += abs(a[i] - 1)\n        elif a[i] == 0:\n            count += 1\n    if count % 2 == 0:\n        count += 1\n    return count\n"}
{"task_id": "Open/68", "completion": "    # Your code here\n    if n == 1:\n        return 0\n    else:\n        result = []\n        while n > 0:\n            result.append(n % 5)\n            n = n // 5\n        result.reverse()\n        result = result[1:]\n        result = result * 10\n        result = result + result[:1]\n        return 2 * sum(result)\n"}
{"task_id": "Open/69", "completion": "    count = 0\n    for i in range(1,n+1):\n        if i & (i-1) == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/70", "completion": "    largest = None\n    for i in range(1, n+1):\n        if largest is None or i % x == 0:\n            largest = i\n    return largest\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/73", "completion": "    max_count = 0\n    for i in range(n):\n        if arr[i] == max_count:\n            max_count += 1\n    return max_count\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(1,n+1):\n        if isPalindrome(i):\n            count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    return bin(n)[2:]\n"}
{"task_id": "Open/76", "completion": "    count = 0\n    for i in range(len(A)):\n        if A[i]!= 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/77", "completion": "    return 180 * radian\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n / 2)\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1, n + 1):\n        sum += a + (i * d)\n    return sum\n"}
{"task_id": "Open/80", "completion": "    result = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result = i\n        else:\n            result = i\n    return result\n"}
{"task_id": "Open/81", "completion": "    max_distance = 0\n    for i in range(row,8) :\n        distance = abs(i - row) + abs(column - column)\n        if distance <= max_distance :\n            max_distance = distance\n    return max_distance\n"}
{"task_id": "Open/82", "completion": "    result = 1\n    for i in range(1, n):\n        result += i\n    return result\n"}
{"task_id": "Open/83", "completion": "    \n    # Step 1. Create a dictionary to store the count of each character in the string.\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    # Step 2. Iterate through the characters in the input string.\n    #         -If the character is not in the dictionary, add it with a count of 1.\n    #         -If the character is already in the dictionary, increment its value by 1.\n    for char in s:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n    \n    # Step 3. Find the maximum value in the dictionary.\n    max_count = max(count.values())\n    \n    # Step 4. Create a new list to store the new list.\n    new_list = []\n    \n    # Step 5. Iterate through the dictionary.\n    #         -If the character is not in the dictionary, append it to the new list.\n    for char in s:\n        if count[char"}
{"task_id": "Open/84", "completion": "    sum = 0\n    for i in range(n):\n        if i >= l and i <= r:\n            if i % 2 == 0:\n                sum += i\n    return sum\n"}
{"task_id": "Open/85", "completion": "    if x > y :\n        max_prime = x\n    else :\n        max_prime = y\n    \n    for i in range(1, max_prime) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    result = []\n    for i in range(A,B+1):\n        for j in range(i+1,B+1):\n            result.append(i+j)\n    return result[N-1]\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            if str[i:i+len(substr)] == substr:\n                count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    max_prime = 0\n    for i in range(len(nums)):\n        max_distance = abs(nums[i] - nums[i-1])\n        if max_distance > max_prime:\n            max_prime = max_distance\n    return max_prime\n"}
{"task_id": "Open/89", "completion": "    # Step 1. Initialize a variable `max_count` as 0.\n    max_count = 0\n    \n    # Step 2. Iterate through the elements of `nums`.\n    for i in range(len(A)):\n        # Step 3. Iterate through the remaining elements.\n        for j in range(i+1, len(A)):\n            # Step 4. If the current element is equal to `k`, increment `count` by 1.\n            if A[i] == C and A[j] == C:\n                max_count += 1\n    \n    return max_count\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l, r + 1):\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9:\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    max_length = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] - arr[j] == 0:\n                max_length = max(max_length, j - i + 1)\n    return max_length\n"}
{"task_id": "Open/92", "completion": "    max_length = 0\n    for i in range(len(str)):\n        if str[i].isalpha():\n            if str[i] == str[i][::-1]:\n                max_length += 1\n        if str[i] == \" \":\n            break\n    return max_length\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    result = \"\"\n    for i in range(n,0,-1):\n        if k>=26:\n            result += chr(97-k)\n            k-=26\n        else:\n            result += chr(ord(n)-k+97)\n            k-=1\n    return result\n"}
{"task_id": "Open/95", "completion": "    max_distance = 0\n    while n > 0 :\n        distance = fuel // n\n        if distance > max_distance :\n            max_distance = distance\n        fuel -= distance\n        n -= 1\n    return max_distance\n"}
{"task_id": "Open/96", "completion": "    max_sum = 0\n    for i in range(0, n):\n        if max_sum == 0:\n            max_sum = arr[i]\n        else:\n            max_sum = max(max_sum, arr[i])\n    return max_sum\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    count = 0\n    while n > 0 :\n        count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/99", "completion": "    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/100", "completion": "    if len(x) <= 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i] in \"aeiou\":\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        elif string[i].isalpha():\n            count += 1\n    return count\n"}
{"task_id": "Open/103", "completion": "    max_distance = 0\n    for i in range(0, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < max_distance:\n            max_distance = diff\n    return max_distance\n"}
{"task_id": "Open/104", "completion": "    count = 0\n    for i in range(right, left-1, -1):\n        if i & 1 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/105", "completion": "    result = 1\n    for i in range(1, n+1):\n        result = result << 1\n    return result\n"}
{"task_id": "Open/106", "completion": "    if n == 1:\n        return False\n    else:\n        divisors = []\n        for i in range(1, n):\n            if n % i == 0:\n                divisors.append(i)\n        return sum(divisors) == n\n"}
{"task_id": "Open/107", "completion": "    count = 0\n    for i in range(1,N+1):\n        if i%2 == 0:\n            count += i\n        else:\n            count += 1\n    return count\n"}
{"task_id": "Open/108", "completion": "    if a == 1:\n        return 1\n    elif a < 1:\n        return -1\n    else:\n        return (a * (a + 1)) / 2\n"}
{"task_id": "Open/109", "completion": "    count = 0\n    while n > 0:\n        if n % 10 == d:\n            count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/110", "completion": "    if n == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/111", "completion": "    sum = 0\n    for i in a:\n        sum += i\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/112", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(4)\n        else:\n            result.append(7)\n    return result[n-1]\n"}
{"task_id": "Open/113", "completion": "    result = []\n    for i in range(n+1):\n        if i%2 == 0:\n            result.append(result[i//2]*10+3)\n        else:\n            result.append(result[i//2]+5)\n    return result[n]\n"}
{"task_id": "Open/114", "completion": "    result = []\n    for i in range(n+1):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(1)\n    return result[n]\n"}
{"task_id": "Open/115", "completion": "    for i in range(1, n) :\n        if (a[i] % 11)!= 0 :\n            return False\n    return True\n"}
{"task_id": "Open/116", "completion": "    \n    # Step 1. Calculate the square root of the input tensor.\n    sqrt = math.sqrt(l * b * h)\n    \n    # Step 2. If the sum is 0, return the square root of the sum.\n    if sqrt == 0 :\n        return sqrt\n    \n    # Step 3. Otherwise, return the sum.\n    else :\n        return sqrt + l * b * h\n"}
{"task_id": "Open/117", "completion": "    result = \"\"\n    for char in string :\n        if char.isupper() :\n            result += char.upper()\n        else :\n            result += char\n    return result\n"}
{"task_id": "Open/118", "completion": "    return int(math.ceil(math.sqrt(8 * p + 1) - 1) / 2)\n"}
{"task_id": "Open/119", "completion": "    result = []\n    for i in range(len(arr)):\n        if arr[i] in result:\n            return False\n        else:\n            result.append(arr[i])\n    return True\n"}
{"task_id": "Open/120", "completion": "    # Initialize an empty dictionary to store the count of each character.\n    count_dict = {}\n    # Iterate through the characters in the input string.\n    for char in string:\n        # If the character is already in the dictionary, add it with a count of 1.\n        if char in count_dict:\n            count_dict[char] += 1\n        # If the character is already in the dictionary, increment its count by 1.\n        else:\n            count_dict[char] = 1\n    # Return the dictionary of count.\n    return count_dict\n"}
{"task_id": "Open/121", "completion": "    largest = None\n    for i in range(lower,higher+1):\n        if largest is None:\n            largest = i\n        elif i > largest:\n            largest = i\n    return largest\n"}
{"task_id": "Open/122", "completion": "    result = \"\"\n    for i in range(len(ss)):\n        if ss[i].isdigit():\n            result += ss[i]\n        else:\n            result = max(result,ss[i])\n    return result\n"}
{"task_id": "Open/123", "completion": "    result = \"\"\n    for i in range(len(s)) :\n        if s[i].isdigit() :\n            result += s[i]\n        else :\n            result += \" \"\n    return result\n"}
{"task_id": "Open/124", "completion": "    sum = 0\n    for i in range(0, N):\n        if i >= N:\n            sum += 1\n        elif i >= M:\n            sum += M\n        else:\n            sum += i\n    return sum if K >= 0 else 0\n"}
{"task_id": "Open/125", "completion": "    if len(string) < length :\n        return False\n    \n    for i in range(length) :\n        if i == 0 :\n            if string[i]!= string[i+1] :\n                return False\n        else :\n            if string[i] == string[i-1] :\n                return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    result = 1\n    for i in range(1, n+1):\n        result = result * 2\n    return result\n"}
{"task_id": "Open/127", "completion": "    if len(str(A)) == len(str(B)) :\n        return A == B\n    else :\n        return None\n"}
{"task_id": "Open/128", "completion": "    if abs(x - y) > 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/129", "completion": "    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"12\"\n    if n == 3:\n        return \"1213\"\n    max_length = 0\n    max_index = 0\n    for i in range(3, n+1):\n        if i > max_length:\n            max_length = i\n            max_index = i-1\n        if i > max_length:\n            max_length = i\n            max_index = i-2\n        if i > max_length:\n            max_length = i\n            max_index = i-3\n    return \"\".join([str(i) for i in range(1, max_length+1)]) + str(max_index)\n"}
{"task_id": "Open/130", "completion": "    max_diff = 0\n    for i in range(1, n):\n        max_diff = max(max_diff, abs(arr[i] - arr[i-1]))\n    return max_diff\n"}
{"task_id": "Open/131", "completion": "    if n < 0 :\n        return 0\n    else :\n        return 1 if n % 2 == 1 else 0\n"}
{"task_id": "Open/132", "completion": "    result = 0\n    for i in range(1, N + 1):\n        result += i\n    return result * a\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if n % 2 == 1 :\n        return True\n    else :\n        return arr[0] % 2 == 1 and arr[n-1] % 2 == 1 and n % 2 == 1\n"}
{"task_id": "Open/135", "completion": "    sum = 0\n    for i in range(1, N+1):\n        if i <= N:\n            sum += 1\n        else:\n            sum += 2\n    return sum\n"}
{"task_id": "Open/136", "completion": "    result = 1\n    for i in range(0,n):\n        if arr[i]!= result:\n            result += 1\n    return result\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1. Convert the number to a string.\n    s = str(s)\n    \n    # Step 2. Sort the string in ascending order.\n    s = sorted(s)\n    \n    # Step 3. If the sorted string is empty, return the sorted string.\n    if s == '':\n        return s\n    \n    # Step 4. Otherwise, return the sorted string.\n    return int(''.join(s))\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum/len(s)\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    for i in range(0,N):\n        if A<=S and S-A>=0:\n            count += 1\n            S = S - A\n        elif A>S and S-A>=0:\n            S = S - A\n            count += 1\n        else:\n            return -1\n    return count\n"}
{"task_id": "Open/141", "completion": "    max_num = max(x,y)\n    y_num = max_num\n    while True:\n        if (x % y_num == 0) and (y % y_num == 0):\n            return y_num\n        y_num += 1\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    for i in range(len(n)):\n        if n[i] == '0':\n            count += 1\n    return count\n"}
{"task_id": "Open/143", "completion": "    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n        for j in range(i+1, n):\n            sum = sum ^ arr[j]\n    return sum\n"}
{"task_id": "Open/144", "completion": "    max_length = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_length = max(max_length, arr[i] - arr[j])\n    return max_length\n"}
{"task_id": "Open/145", "completion": "    if n == 0 :\n        return -1\n    if k == 0 :\n        return 0\n    if k > 0 :\n        return arr[0] + k\n    if k < 0 :\n        return arr[0] - k\n"}
{"task_id": "Open/146", "completion": "    max_length = 0\n    count = 0\n    for i in nums:\n        if i == k:\n            count += 1\n        elif i > max_length:\n            max_length = i\n    if count == 0:\n        return -1\n    return max_length\n"}
{"task_id": "Open/147", "completion": "    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "    return abs(p - q) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = \"\"\n    for i in range(len1) :\n        result += chr(ord(str1[i]) ^ ord('a'))\n    return result\n"}
{"task_id": "Open/152", "completion": "    count = 0\n    for i in range(len(n)):\n        if n[i] == '1':\n            count += 1\n    return count == len(n)\n"}
{"task_id": "Open/153", "completion": "    \n    # Step 1. Iterate through each character in the string.\n    for i in range(len(s)):\n        # Step 2. Check if the character is in the alphabetical order.\n        if s[i] not in 'aeiou':\n            return False\n    # Step 3. If all characters are in alphabetical order, return True.\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high + 1):\n        if i >= low and i <= high:\n            if i % 10 >= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    min_diff = 0\n    for i in range(1, n+1):\n        if i < min_diff:\n            min_diff = i\n    return min_diff\n"}
{"task_id": "Open/156", "completion": "    result = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            result += i\n    return result\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    sum = 0\n    count = 0\n    for i in range(size) :\n        sum += nums[i]\n    for i in range(size) :\n        if nums[i] == sum :\n            count += 1\n    return size - count\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == \" \":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    result = {}\n    for i in range(n):\n        if arr[i] in result:\n            result[arr[i]] += 1\n        else:\n            result[arr[i]] = 1\n    for i in range(n):\n        if result[arr[i]] % 2 == 0:\n            return arr[i]\n    return -1\n"}
{"task_id": "Open/161", "completion": "    result = []\n    for i in range(n-1):\n        result.append(arr[i] ^ arr[i+1])\n    ans = 0\n    for i in range(n):\n        ans = max(ans, result[i])\n    return ans\n"}
{"task_id": "Open/162", "completion": "    max_distance = 0\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] < max_distance:\n            max_distance = nums[i] - nums[i-1]\n    return max_distance\n"}
{"task_id": "Open/163", "completion": "    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/164", "completion": "    result = {}\n    for i in range(n):\n        if arr[i] in result:\n            result[arr[i]] += 1\n        else:\n            result[arr[i]] = 1\n    return result\n"}
{"task_id": "Open/165", "completion": "    count = 0\n    for node in graph:\n        if node == height:\n            count += 1\n    return count\n"}
{"task_id": "Open/166", "completion": "    max_diff = 0\n    for i in range(len(source)):\n        diff = abs(source[i] - dest[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/167", "completion": "    count = 0\n    for i in range(len(n)):\n        if n[i] == '1':\n            count += 1\n        elif n[i] == '2':\n            count += 1\n        else:\n            continue\n    return count\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    for i in range(len(arr)):\n        if max_length == 0:\n            max_length = 1\n        else:\n            max_length = max(max_length, 1)\n        if arr[i] > 0:\n            max_length = max(max_length, 1)\n        else:\n            max_length = max(max_length, 2)\n    return max_length\n"}
{"task_id": "Open/169", "completion": "    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r + 1) :\n        if i % 3 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    result = 1\n    for i in range(1, n+1):\n        result = result * i\n    result = result >> m\n    return result\n"}
{"task_id": "Open/174", "completion": "    count = 0\n    for i in range(L, R + 1):\n        if i % 9 == 0:\n            count += 1\n        elif i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    result = 0\n    for i in range(1, n+1):\n        result += i * math.log10(i)\n    return result[:k]\n"}
{"task_id": "Open/176", "completion": "    \n    for i in range(len(A)):\n        if A[i] >= A[i-1] and A[i] <= A[i+1]:\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    sum = 0\n    for i in range(1, len(a) + 1):\n        if a[i - 1] < b[i - 1]:\n            sum += b[i - 1] - a[i - 1]\n    return sum\n"}
