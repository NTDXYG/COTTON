{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        if abs(numbers[i] - numbers[i - 1]) < threshold:\n            return i\n    return None\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    for char in paren_string:\n        if char == '(':\n            result.append('(')\n        elif char == ')':\n            if len(result) > 0:\n                result.pop()\n        else:\n            result.append(char)\n    return result\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    result = ''\n    while number > 0:\n        if number % 10 == 0:\n            result += str(number // 10)\n        number /= 10\n    return result\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    for i in range(len(operations)):\n        if operations[i] == 0:\n            return operations[i]\n    return None\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for number in numbers:\n        result.append(str(number) + delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        elif char == ')':\n            if len(stack) > 0:\n                return stack.pop()\n            else:\n                return 0\n        else:\n            stack.append(0)\n    return stack\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    if not numbers:\n        return 0, 1\n    sum = 0\n    product = 1\n    for number in numbers:\n        if number % 2 == 0:\n            sum += number\n        product *= number\n    return sum, product\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_list: List[int] = []\n    for num in numbers:\n        if num > max_list[-1]:\n            max_list.append(num)\n        else:\n            max_list.append(num)\n    return max_list\n\n"}
{"task_id": "HumanEval/10", "completion": "    result = ''\n    for char in string:\n        if is_palindrome(char):\n            result += char\n        else:\n            if result[-1] > char:\n                result += char\n    return result\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(bin(ord(a[i]) ^ ord(b[i]))[2:] for i in range(len(a)))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    result = ''\n    for string in strings:\n        if len(result) > len(string):\n            result = string\n        else:\n            return result\n    return result\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    result = 1\n    for i in range(1, min(a, b)):\n        if a % i == 0 and b % i == 0:\n            result = i\n    return result\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string)):\n        if string[i].isupper():\n            prefixes.append(string[:i] + string[i + 1:])\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    string = ''\n    for i in range(1, n + 1):\n        string += str(i)\n    return string\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    distinct_characters = set()\n    for char in string:\n        if char in distinct_characters:\n            distinct_characters.remove(char)\n        else:\n            distinct_characters.add(char)\n    return len(distinct_characters)\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    count = 0\n    for char in music_string:\n        if char.isdigit():\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[i]:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    result = ''\n    for character in numbers:\n        if character.isdigit():\n            result += character\n        else:\n            result += str(int(character))\n    return result\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    largest = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < largest:\n            largest = numbers[i]\n    return largest, largest\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    result = []\n    for number in numbers:\n        if number < 0:\n            result.append(0)\n        else:\n            result.append(number)\n    return result\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [v for v in values if isinstance(v, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    result = 1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result = i\n    return result\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    result = ''\n    for char in string:\n        if char.isupper():\n            result = result.lower()\n        elif char.islower():\n            result = result.upper()\n    return result\n\n"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "    result = []\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    result = []\n    for i in range(len(l)):\n        if l[i] % 3 == 0:\n            result.append(l[i])\n    return result\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    if not l:\n        return 0\n    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(l[i])\n        else:\n            result.append(l[i])\n    return result\n\n"}
{"task_id": "HumanEval/38", "completion": "    result = \"\"\n    for char in s:\n        if char.isdigit():\n            result += char\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/39", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/40", "completion": "    counter = 0\n    for i in l:\n        for j in l:\n            if i + j > 0:\n                l[i], l[j] = l[j], l[i]\n                counter += 1\n    return counter == 3\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i!= i - 1:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i + 1 for i in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                l[i], l[j] = l[j], l[i]\n    return True\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 10:\n        raise ValueError('base numbers are less than 10')\n    if x < 0:\n        raise ValueError('x must be greater than 0')\n    if x == 0:\n        return ''\n    if base == 1:\n        return str(x)\n    if base == 2:\n        return str(x // base)\n    if base == 3:\n        return str(x % base)\n    if base == 4:\n        return str(x // base * base)\n    if base == 5:\n        return str(x % base * base)\n    if base == 6:\n        return str(x // base * base * base)\n    if base == 7:\n        return str(x % base * base * base)\n    if base == 8:\n        return str(x // base * base * base)\n    if base == 9:\n        return str(x % base * base * base)\n    if base == 10:\n        return str(x // base * base * base)\n    if base == 11:\n        return str(x % base * base * base)\n    if base"}
{"task_id": "HumanEval/45", "completion": "\n    return (1 * h ** 2) / 2\n\n"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    # Step 1. Initialize two pointers, one at the beginning of the string and one at the end of the string.\n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if text[start]!= text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\n"}
{"task_id": "HumanEval/49", "completion": "    return 2**n % p\n\n"}
{"task_id": "HumanEval/50", "completion": "    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += chr((ord(ch) - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            result += ch\n    return result\n\n"}
{"task_id": "HumanEval/51", "completion": "    result = ''\n    for char in text:\n        if char in 'aeiou':\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in range(len(l)):\n        if l[i] < t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(\"<\")\n        elif char == \"<>\":\n            if len(stack) == 0:\n                return False\n            else:\n                return True\n        elif char == \"<<<\":\n            stack.append(\"<<\")\n        elif char == \"<>\":\n            if len(stack) == 0:\n                return False\n            else:\n                return True\n        elif char == \"<>\":\n            if len(stack) == 0:\n                return False\n            else:\n                return True\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                return True\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                return True\n        else:\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    for i in range(len(l)):\n        if l[i] > l[i+1]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n\n"}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                return True\n        else:\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    result = []\n    for x in xs:\n        result.append(x - x * x)\n    return result\n\n"}
{"task_id": "HumanEval/63", "completion": "    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/65", "completion": "\n    # Step 1. Convert the number to a string.\n    s = str(x)\n    # Step 2. Reverse the string.\n    s = s[::-1]\n    # Step 3. Convert the reversed string back to an integer.\n    s = int(s)\n    # Step 4. Return the reversed integer.\n    return s\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/67", "completion": "\n    count = 0\n    for i in s:\n        if i == i[::-1]:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/68", "completion": "\n    result = []\n    for i in arr:\n        if i % 2 == 0:\n            result.append([i, i])\n        else:\n            result.append([i, i + 1])\n    return result\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    # Step 1. Initialize a dictionary to store the frequency of each element in the list.\n    frequency = {}\n    for element in lst:\n        if element not in frequency:\n            frequency[element] = 1\n        else:\n            frequency[element] += 1\n    # Step 2. Iterate through the list.\n    # -If the element is not in the dictionary, add it with a frequency of 1.\n    # -If the element is already in the dictionary, increment its frequency by 1.\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n    # Step 3. Find the maximum frequency in the dictionary.\n    max_frequency = 0\n    for element in frequency:\n        if frequency[element] > max_frequency:\n            max_frequency = frequency[element]\n    return max_frequency\n\n"}
{"task_id": "HumanEval/70", "completion": "\n    result = []\n    for i in lst:\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a < 2:\n        return -1\n    if b < 2:\n        return -1\n    if c < 2:\n        return -1\n    if a + b + c == 3:\n        return a * b * c\n    if a + b + c > 3:\n        return -1\n    if a + b + c < 3:\n        return -1\n    if a + b + c > 3:\n        return -1\n    if a + b + c == 3:\n        return a * b * c\n    if a + b + c < 3:\n        return -1\n    if a + b + c > 3:\n        return -1\n    if a + b + c == 3:\n        return a * b * c\n    if a + b + c < 3:\n        return -1\n    if a + b + c > 3:\n        return -1\n    if a + b + c == 3:\n        return a * b * c\n    if a + b + c < 3:\n        return -1\n    if a + b + c > 3:\n        return -"}
{"task_id": "HumanEval/72", "completion": "\n    # Step 1. Create a dictionary to store the frequency of each element in the list.\n    frequency = {}\n\n    # Step 2. Iterate through the list.\n    for i in q:\n        if i not in frequency:\n            frequency[i] = 1\n        else:\n            frequency[i] += 1\n\n    # Step 3. Return the value of the dictionary.\n    return frequency[q[0]]\n\n"}
{"task_id": "HumanEval/73", "completion": "\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/74", "completion": "    result = []\n    for i in lst1:\n        if i in lst2:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    if len(a) < 2:\n        return False\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/76", "completion": "    if n < 0:\n        return False\n    if n == 1:\n        return True\n    if n**int(x) == x:\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    if type(a) is not int:\n        return False\n    if a < 0:\n        return False\n    if a > 2**31:\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    count = 0\n    for char in num:\n        if char.isdigit():\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    result = ''\n    for i in range(0, len(str(decimal))):\n        if str(decimal)[i] == '0':\n            result += '0'\n        elif str(decimal)[i] == '1':\n            result += '1'\n        else:\n            result += str(decimal)[i]\n    return result\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    max_length = 0\n    for i in range(len(s)):\n        if s[i]!= '0':\n            max_length += 1\n    if max_length >= 3:\n        for i in range(len(s)):\n            if s[i] == '0':\n                max_length += 1\n    return max_length == 3\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    grades.sort()\n    return grades\n\n"}
{"task_id": "HumanEval/82", "completion": "\n    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if string[i] == string[i-1]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 10 == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    # Step 1. Convert the integer to a string.\n    string = str(N)\n    # Step 2. Initialize a variable sum_digits as 0.\n    sum_digits = 0\n    # Step 3. Iterate through each character in the string.\n    for char in string:\n        # Convert the character back to an integer.\n        int_char = int(char)\n        # Add the integer to sum_digits.\n        sum_digits += int_char\n    # Step 4. Return sum_digits.\n    return str(sum_digits)\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "HumanEval/86", "completion": "\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result +=''\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for i in range(len(row)):\n            result.append((row[i], i))\n    result.sort(key=lambda x: x[1])\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    # Step 1. Create a dictionary to store the count of each element in the array.\n    count = {}\n    for i in array:\n        count[i] = count.get(i, 0) + 1\n\n    # Step 2. Iterate through the array and update the count of each element in the dictionary.\n    for i in array:\n        if i in count:\n            count[i] -= 1\n        else:\n            count[i] = 1\n\n    # Step 3. Sort the list in descending order.\n    sorted_array = []\n    for i in range(len(array)):\n        if count[array[i]] % 2 == 0:\n            sorted_array.append(array[i])\n\n    # Step 4. Iterate through the sorted list.\n    for i in range(len(sorted_array)):\n        if i % 2 == 0:\n            sorted_array[i] = count[sorted_array[i]]\n\n    return sorted_array\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    result = ''\n    for letter in s:\n        if letter.isalpha():\n            result += letter\n        else:\n            result += letter * 2\n    return result\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    largest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < largest:\n            largest = lst[i]\n    return largest\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    count = 0\n    for char in S:\n        if char == 'I':\n            count += 1\n        else:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/92", "completion": "    if len(x) == 0:\n        return True\n    else:\n        for i in range(len(x)):\n            if x[i] == y[i] == z[i]:\n                return True\n        return False\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    result = ''\n    for letter in message:\n        if letter.isalpha():\n            result += letter.lower()\n        else:\n            result += letter\n    return result\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    largest = 0\n    for i in lst:\n        if i > largest:\n            largest = i\n    return largest\n\n"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if key == \"\":\n            continue\n        if key.islower():\n            dict[key] = 1\n        elif key.isupper():\n            dict[key] += 1\n    return dict\n\n"}
{"task_id": "HumanEval/96", "completion": "\n    result = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    product = 1\n    for i in range(len(str(a))):\n        product *= int(str(a)[i])\n    for i in range(len(str(b))):\n        product *= int(str(b)[i])\n    return product\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for char in s:\n        if char.upper() in 'AEIOU':\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    result = 0\n    for char in value:\n        if char.isdigit():\n            if result in range(1, 10):\n                result += 1\n            else:\n                result = 0\n        else:\n            result += 1\n    return result\n\n"}
{"task_id": "HumanEval/100", "completion": "\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split(\",\")\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    result = []\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        if i > n:\n            sum += i\n        elif i > sum:\n            sum = i\n    return bin(sum).rjust(m, '0')\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    result = []\n    for i in x:\n        if i % 10 == 0:\n            result.append(i)\n    return sorted(result)\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    result = []\n    for i in arr:\n        if i < 1 or i > 9:\n            result.append('')\n        else:\n            result.append(str(i))\n    result.sort()\n    return result\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        if arr[left] > arr[right]:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            right -= 1\n\n    return True\n\n"}
{"task_id": "HumanEval/110", "completion": "    result = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            result += 1\n    return result\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    test = test.lower()\n    d = {}\n    for c in test:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    for i in range(len(s)-1):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            return s, True\n    return None, False\n\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    max_sum = 0\n    for num in nums:\n        max_sum = max(max_sum, num)\n    return max_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "    max_count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                if max_count < capacity:\n                    max_count = capacity\n                grid[i][j] = 0\n    return max_count\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    # Step 1. Convert the number to a list of integers.\n    # Step 2. Sort the list of integers in ascending order.\n    # Step 3. Return the sorted array.\n    arr = [int(bin(i)[2:]) for i in arr]\n    # Step 4. Sort the list of integers in ascending order.\n    arr.sort()\n    # Step 5. Return the sorted array.\n    return arr\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    result = []\n    for i in range(len(s)):\n        if len(s[i]) == n:\n            result.append(s[i])\n    return result\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n        elif char in vowels:\n            break\n    return count\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    result = ''\n    for i in lst:\n        if i == '(':\n            if result[-1] == ')':\n                result += i\n            else:\n                result += i\n        else:\n            if result[-1] == ')':\n                result += i\n            else:\n                result += i\n    return result\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == k:\n            result.append(arr[i])\n        else:\n            result.append(max(arr[i:], key=arr[i+k]))\n    return result\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "HumanEval/122", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            result.append(arr[i])\n    return sum(result)\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(3*i+1)\n    return sorted(result)\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n\n    if len(date) < 4:\n        return False\n\n    if len(date) > 12:\n        return False\n\n    if len(date) == 12:\n        if date[0] == '1':\n            return True\n        elif date[0] == '3':\n            return True\n        elif date[0] == '5':\n            return True\n        elif date[0] == '7':\n            return True\n        elif date[0] == '8':\n            return True\n        elif date[0] == '10':\n            return True\n        elif date[0] == '12':\n            return True\n        else:\n            return False\n\n    if len(date) == 12:\n        if date[0] == '1':\n            return True\n        elif date[0] == '3':\n            return True\n        elif date[0] == '5':\n            return True\n        elif date[0] == '7':\n            return True\n        elif date[0] == '8':\n            return True\n        elif date["}
{"task_id": "HumanEval/125", "completion": "\n    count = 0\n    words = []\n    for char in txt:\n        if char =='':\n            count += 1\n        else:\n            if char == ',':\n                count += 1\n            else:\n                words.append(char)\n    return count\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    # Step 1. Iterate through the list of numbers.\n    for i in range(len(lst)):\n        if lst[i] > lst[i + 1]:\n            return lst[i]\n    return None\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    # Step 1. Initialize a variable \"sum\" as 0\n    sum = 0\n    # Step 2. Iterate through the range from right to left.\n    # -If the current element is equal to the next element, increment \"count\" by 1\n    # -If the current element is greater than the previous element, update \"sum\" with the current element.\n    for i in range(len(interval1)):\n        if interval1[i] <= interval2[i]:\n            sum += 1\n        else:\n            sum -= 1\n    # Step 3. Return \"sum\".\n    return sum\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    result = []\n    for i in arr:\n        if i == 0:\n            result.append(0)\n        else:\n            result.append(1)\n    return result\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    max_distance = 0\n    nums = [grid[0]]\n    for i in range(1, len(grid)):\n        for j in range(1, len(grid[0])):\n            if grid[i][j] < max_distance:\n                max_distance = grid[i][j]\n                nums.append(grid[i][j])\n    return nums\n\n"}
{"task_id": "HumanEval/130", "completion": "\n    result = []\n    if n <= 1:\n        return result\n    if n % 2 == 0:\n        result.append(3)\n    else:\n        result.append(1 + n / 2)\n    for i in range(1, n + 1):\n        result.append(tri(i) + tri(i - 1) + tri(i - 2) + tri(i + 1))\n    return result\n\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for i in range(1, n):\n        if i % 2 == 0:\n            product *= i\n    return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                if stack[-1] == '[':\n                    return False\n                else:\n                    return True\n    return True\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    result = []\n    for i in lst:\n        result.append(i**2)\n    return result\n\n"}
{"task_id": "HumanEval/134", "completion": "\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        # Step 1: Iterate through the array starting from the second element.\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                return i\n        # Step 2: Check if the current element is greater than or equal to the previous element.\n        # -If yes, return the current element.\n        return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest = None\n    for i in lst:\n        if i < 0:\n            largest = i\n        elif i > largest:\n            largest = i\n    return largest\n\n"}
{"task_id": "HumanEval/137", "completion": "    if len(a) == 1:\n        return a[0]\n    elif len(a) == 2:\n        return a[0] if a[1] == a[0] else a[1]\n    elif len(a) == 3:\n        return a[0] if a[1] == a[0] else a[1]\n    elif len(a) == 4:\n        return a[0] if a[1] == a[0] else a[1]\n    elif len(a) == 5:\n        return a[0] if a[1] == a[0] else a[1]\n    elif len(a) == 6:\n        return a[0] if a[1] == a[0] else a[1]\n    elif len(a) == 7:\n        return a[0] if a[1] == a[0] else a[1]\n    elif len(a) == 8:\n        return a[0] if a[1] == a[0] else a[1]\n    elif len(a) == 9:\n        return a["}
{"task_id": "HumanEval/138", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = \"\"\n    for char in text:\n        if char.isspace():\n            result += \"_\"\n        elif char.isnotspace():\n            result += \"-\"\n    return result\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) < 3:\n        return \"Error: The file name should be less than 3 digits ('0'-'9')\"\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':\n        return 'b'\n    if file_name[0] == 'a':"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i\n        elif i % 4 == 0:\n            sum += i**2\n        else:\n            sum += i\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    words = sentence.split()\n    unique_words = set()\n    for word in words:\n        if len(word) == 1:\n            unique_words.add(word)\n        else:\n            for i in range(len(word)):\n                if word[i] not in unique_words:\n                    unique_words.add(word[i])\n    return \" \".join(unique_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    result = 0\n    for char in x:\n        if char.isdigit():\n            result += int(char)\n        elif char.isdigit():\n            if abs(result) > 1:\n                result -= 1\n            else:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    sorted_nums = sorted(nums)\n    sorted_nums.sort()\n    new_list = []\n    for i in range(len(sorted_nums)):\n        new_list.append(abs(sorted_nums[i] - sorted_nums[i+1]))\n    return new_list\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/147", "completion": "\n    prime_list = []\n    for i in range(1, n):\n        if i % 3 == 0:\n            prime_list.append(i)\n    return prime_list\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    # Step 1. Create a dictionary to store the frequency of each digit in the input list.\n    frequency = {}\n    for digit in planet1:\n        if digit not in frequency:\n            frequency[digit] = 1\n        else:\n            frequency[digit] += 1\n    # Step 2. Iterate through the range from 1 to n.\n    # -If the current digit is not in the dictionary, add it as a key with a value of 1.\n    # -If the current digit is already in the dictionary, increment its value by 1.\n    for digit in planet2:\n        if digit not in frequency:\n            frequency[digit] = 1\n        else:\n            frequency[digit] += 1\n    # Step 3. Calculate the difference between the current digit and the next digit.\n    difference = frequency[planet1[0]] - frequency[planet2[0]]\n    # Step 4. Return the planet.\n    return (planet1[0], planet2[0]) if difference == 0 else (planet1[1], planet2[1])\n\n"}
{"task_id": "HumanEval/149", "completion": "\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    return result\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n - 1, x, y)\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    if lst == []:\n        return 0\n    sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum += num\n    return sum\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = 0\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result += 1\n        else:\n            result = abs(result - guess[i])\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/153", "completion": "\n    result = ''\n    for letter in class_name:\n        if letter.isalpha():\n            result += letter\n    result = result.split('.')\n    result.sort(key=lambda x: len(x), reverse=True)\n    return '.'.join(result)\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/155", "completion": "\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (num, 1)\n    else:\n        return (num, 2)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    result = ''\n    for i in range(1, number + 1):\n        if i % 10 == 0:\n            result += 'I'\n        else:\n            result += 'X'\n    return result.lower()\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    if a < 1:\n        return False\n    if b < 1:\n        return False\n    if c < 1:\n        return False\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n        return True\n    if a + b + c == 90:\n"}
{"task_id": "HumanEval/158", "completion": "\n    result = \"\"\n    for word in words:\n        if len(word) > len(result):\n            result = word\n    return result\n\n"}
{"task_id": "HumanEval/159", "completion": "    count = 0\n    nums = [number]\n    while count < need:\n        if nums[count] == number:\n            count += 1\n        else:\n            nums.append(nums[count])\n    return [count, len(nums)]\n\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result.append(operand[i])\n        elif operator[i] == '-':\n            result.append(operand[i])\n        elif operator[i] == '*':\n            result.append(operand[i])\n        elif operator[i] == '/':\n            result.append(operand[i])\n        elif operator[i] == '**':\n            result.append(operand[i])\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.lower()\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    # Step 1. Initialize an empty list to store the digits.\n    digits = []\n\n    # Step 2. Iterate through each character in the string.\n    # -If the character is a digit, add it to the list.\n    for char in str(a):\n        if char.isdigit():\n            digits.append(int(char))\n\n    # Step 3. Sort the list in ascending order.\n    digits.sort()\n\n    # Step 4. Return the sorted list of digits.\n    return digits\n\n"}
