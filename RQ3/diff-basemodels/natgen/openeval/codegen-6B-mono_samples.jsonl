{"task_id": "Open/0", "completion": "    sum = 0\n    count = 0\n    for i in range(N):\n        sum += arr[i]\n    for i in range(N):\n        if sum + K > arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    \n    arr.sort()\n    min_val = arr[0]\n    count = 1\n    \n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            count = 1\n        elif arr[i] == min_val:\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/2", "completion": "    \n    # Convert n to binary representation\n    binaryRepresentation = bin(n)\n    \n    # Iterate through the range from l to r (inclusive)\n    for i in range(l, r+1) :\n        \n        # If the bit is 1 in the binary representation, return \"Yes\".\n        if binaryRepresentation[2:].find(str(i))!= -1 :\n            return \"Yes\"\n    \n    # If no bits are set, return \"No\".\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n) :\n        for j in range(i + 1, n) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    \n    # Step 1\n    # Calculate the sum of each part of the list\n    part1_sum = 0\n    part2_sum = 0\n    for i in a:\n        part1_sum += i\n    \n    # Step 2\n    # Check if it is possible to split the list into two parts such that the sum of each part is equal to the sum of each part\n    for i in a:\n        part2_sum += i\n    \n    if part1_sum == part2_sum:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/5", "completion": "    \n    # Convert the integer to its binary representation.\n    binary = bin(x)\n    \n    # Check if the binary representation is odd or even.\n    if binary[-1] == '1' :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "    \n    # Initialize an empty list to store the missing elements.\n    missing_elements = []\n    \n    # Iterate through the input list and modify the elements by changing the sign of the element at the index equal to the absolute value of the current element minus one.\n    for i in range(len(vec)) :\n        vec[i] = abs(vec[i]) - 1\n    \n    # Iterate through the modified list and append the indices of the positive elements plus one to the output list.\n    for i in range(len(vec)) :\n        if vec[i] > 0 :\n            missing_elements.append(i+1)\n    \n    # Return the output list.\n    return missing_elements\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_length = max(max_length, 1 + arr[i])\n    return max_length\n"}
{"task_id": "Open/8", "completion": "    \n    # Step 1\n    distinct_prime_factors = set()\n    \n    # Step 2\n    for i in a:\n        for j in range(2,i):\n            if i % j == 0:\n                distinct_prime_factors.add(j)\n                break\n    \n    # Step 3\n    return len(distinct_prime_factors)\n"}
{"task_id": "Open/9", "completion": "    sum = 0\n    for i in range(1,k+1):\n        sum += abs(arr[i] - arr[0])\n    return sum\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.pop(0)\n            B.pop(0)\n        else :\n            B.append(B.pop(0))\n            A.append(A.pop(0))\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if len(set(s[i:j+1])) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    \n    if n == 1 :\n        return True\n    \n    if n % 2 == 0 :\n        return False\n    \n    while n > 1 :\n        n = n / 2\n        if n % 2 == 0 :\n            return False\n    \n    return True\n"}
{"task_id": "Open/14", "completion": "    result = \"\"\n    if n == 0 :\n        return n\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return n + 1\n    elif n == 3 :\n        return 0\n    else :\n        return result\n"}
{"task_id": "Open/15", "completion": "    \n    for i in range(t) :\n        a = random.randint(2, n-1)\n        if pow(a, (n-1)/2, n)!= 1 and pow(a, (n-1)/2, n)!= n-1 :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "    \n    for i in range( n ) :\n        if ( s1[i] == '0' and s2[i] == '1' ) or ( s1[i] == '1' and s2[i] == '0' ) or ( s1[i] == '0' and s2[i] == 'Z' ) or ( s1[i] == 'Z' and s2[i] == '0' ) :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    difference = 0\n    for i in range(length) :\n        if s[i] == '1' and s[i+1] == '0' :\n            count += 1\n        elif s[i] == '0' and s[i+1] == '1' :\n            difference += 1\n        elif s[i] == '1' and s[i+1] == '0' :\n            difference += 1\n    return min(count, difference)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1):\n        if i % math.floor(math.sqrt(i)) == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == [] :\n        return 0\n    elif x == 0 :\n        return 1\n    elif y == [0] :\n        return 1\n    else :\n        return x + product ( x, y [ 1 : ] )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_length = 0\n    current_length = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            current_length += 1\n        else :\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max(max_length, current_length)\n"}
{"task_id": "Open/23", "completion": "    if i == len(arr) :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        return subsetSum(arr, n, i + 1, sum - arr[i], count) + subsetSum(arr, n, i + 1, sum, count)\n"}
{"task_id": "Open/24", "completion": "    return n * (2 * n - 1)\n"}
{"task_id": "Open/25", "completion": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"}
{"task_id": "Open/26", "completion": "    max_sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return (a / b) * 100\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    count = 0\n    for i in range(1, n+1, 2) :\n        sum += i*i\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3**(n-1)\n"}
{"task_id": "Open/33", "completion": "    term = 1\n    for i in range(1, n+1):\n        term = term * 2 + i - 1\n    return term\n"}
{"task_id": "Open/34", "completion": "    \n    count = 0\n    \n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            product = 1\n            for k in range(i, j + 1):\n                product *= a[k]\n            if product < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1, n+1):\n        string = str(i)\n        if string.find(d)!= -1:\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    missing = 1\n    for i in range(n):\n        if arr[i] == missing:\n            missing += 1\n    return missing\n"}
{"task_id": "Open/37", "completion": "    if n == 0 or n == 1 :\n        return 1\n    if n == 2 :\n        return 2\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    sum = 0\n    while ( sum < l * b ) :\n        sum += (l * b) / 2\n        l -= 1\n        b -= 1\n    return sum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "    max_zeros = -1\n    for i in range(n):\n        if arr[i] == 1:\n            max_zeros += 1\n        else:\n            max_zeros = 0\n    return max_zeros\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            if max_length < i:\n                max_length = i\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    max_element = a[0]\n    min_element = a[0]\n    max_element = a[len(a)-1]\n    for i in range(0,len(a)-k+1):\n        if a[i] < min_element:\n            min_element = a[i]\n        if a[i] > max_element:\n            max_element = a[i]\n    return max_element\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            product = 1\n            for k in range(i,j+1):\n                product = product * array[k]\n            if product <= k:\n                count = count + 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    sum_diff = 0\n    for i in range(n) :\n        sum_diff += abs(arr[i] - (i+1))\n    return sum_diff\n"}
{"task_id": "Open/45", "completion": "    \n    min_element = min(arr)\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_distance = 0\n    for i in range(len(array)):\n        difference = abs(array[i] - i)\n        if difference > max_distance:\n            max_distance = difference\n    return max_distance\n"}
{"task_id": "Open/47", "completion": "    return ( ( a * x1 + b * y1 ) - c ) * ( a * x2 + b * y2 ) > 0\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(0,a+1):\n        xor = i ^ (i ^ a)\n        if xor == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_value = 0\n    for i in range(L,R+1):\n        for j in range(L,R+1):\n            if i & j > max_value:\n                max_value = i & j\n    return max_value\n"}
{"task_id": "Open/50", "completion": "    \n    smallest = -1\n    \n    for i in range(n):\n        for j in range(n):\n            if (i!= j) and (a[i] % a[j] == 0):\n                smallest = a[i]\n                break\n    \n    return smallest\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    result = []\n    for i in range(n):\n        for j in range(n):\n            result.append(arr[i][j] ^ arr[i][j+1] ^ arr[i+1][j] ^ arr[i+1][j+1])\n    return result\n"}
{"task_id": "Open/53", "completion": "    \n    count = 0\n    for i in range(N+1) :\n        if i & i == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    \n    # Step 1. Calculate the sum of the array elements.\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    \n    # Step 2. Calculate the length of the array minus 1.\n    length = n - 1\n    \n    # Step 3. If the sum is equal to k, return True. Otherwise, return False.\n    if (sum + length) == k:\n        return True\n    else:\n        return False\n    \n    "}
{"task_id": "Open/55", "completion": "    \n    # Convert the integer to its binary representation.\n    binary = bin(n)\n    \n    # Get the first and last bits of the binary representation.\n    firstBit = binary[0]\n    lastBit = binary[-1]\n    \n    # Check if the first and last bits are set to 1.\n    if firstBit == '1' and lastBit == '1' :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    for i in range(len(s)) :\n        if s[i]!= s[i-1] :\n            max_partitions += 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    for i in range(2, N+1):\n        var1 = arr[i-1]\n        var2 = arr[i-2]\n        result = result + (var1 + var2) + (var1 * var2) / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "    \n    # Step 1. Perform the specified number of reversals on the array.\n    for i in range(0,reversals) :\n        arr = swap(arr,ranges)\n    \n    # Step 2. Swap the elements within the given range.\n    arr = swap(arr,ranges)\n    \n    # Step 3. Return the value at the given index in the array.\n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "    \n    # Step 1. Calculate the square root of the input integer.\n    sqrt = int(n**0.5)\n    \n    # Step 2. If the square root is an integer, return True.\n    if sqrt**2 == n :\n        return True\n    \n    # Step 3. Otherwise, return False.\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(a)) :\n        if a[i] == b[i] :\n            count += 1\n    if count >= 0 :\n        return count\n    else :\n        return -1\n"}
{"task_id": "Open/62", "completion": "    if len < 1 :\n        return str\n    else :\n        for i in range ( len - 2, -1, -1 ) :\n            if str[i] > str[i+1] :\n                str[i] = str[i] - 1\n                for j in range ( i + 1, len ) :\n                    str[j] = 9\n        return str\n"}
{"task_id": "Open/63", "completion": "    \n    # Find the minimum value in the array.\n    minValue = arr[0]\n    for i in range(1, n):\n        if arr[i] < minValue:\n            minValue = arr[i]\n    \n    # Calculate the sum of logarithms of all numbers in the array.\n    sumLog = 0\n    for i in range(n):\n        sumLog += math.log(arr[i])\n    \n    # Multiply the sum of logarithms by the length of the array.\n    return minValue * sumLog\n"}
{"task_id": "Open/64", "completion": "    if len(s) == 0 or s == '1':\n        return \"-1\"\n    max_len = 0\n    for i in range(1, len(s)):\n        if s[i]!= '1':\n            if max_len < i + 1:\n                max_len = i + 1\n    return max_len\n"}
{"task_id": "Open/65", "completion": "    result = []\n    for i in range(0, len(a)-k):\n        if a[i]!= a[i+1]:\n            result.append(a[i])\n    for i in range(0, len(a)-k):\n        if a[i] == a[i+1]:\n            result.append(a[i])\n    return result\n"}
{"task_id": "Open/66", "completion": "    \n    # Step 1. Calculate the size of the array after adding k elements.\n    size = n + k\n    \n    # Step 2. Sort the array in ascending order.\n    arr.sort()\n    \n    # Step 3. If the size is even, calculate the median by taking the average of the two middle elements.\n    if size % 2 == 0 :\n        median = (arr[size // 2] + arr[size // 2 - 1]) / 2\n    \n    # Step 4. If the size is odd, return the middle element as the median.\n    else :\n        median = arr[size // 2]\n    \n    return median\n"}
{"task_id": "Open/67", "completion": "    step_count = 0\n    for i in range(n):\n        if a[i] < 0:\n            step_count += 1\n        elif a[i] > 0:\n            step_count += 1\n    if step_count % 2 == 0:\n        return step_count\n    else:\n        if a.count(0) > 0:\n            return step_count + a.count(0)\n        else:\n            return step_count + 2\n"}
{"task_id": "Open/68", "completion": "    if n == 1:\n        return 0\n    v = []\n    while n > 0:\n        v.append(n%5)\n        n = n//5\n    result = 0\n    for i in range(len(v)-1, -1, -1):\n        result = result * 10 + v[i]\n    return result\n"}
{"task_id": "Open/69", "completion": "    \n    # Convert the integer to a string\n    nString = str(n)\n    \n    # Iterate through each bit in the string\n    for bit in nString :\n        \n        # If the bit is 1, increment the bit by 1\n        if bit == '1' :\n            bit = int(bit) + 1\n            \n        # If the bit is not 1, return False\n        else :\n            return False\n    \n    # If all bits are set to 1, return True\n    return True\n"}
{"task_id": "Open/70", "completion": "    return x if x < n else n\n"}
{"task_id": "Open/71", "completion": "    \n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    series = []\n    for i in range(1, n+1):\n        series.append(i)\n        for j in range(1, i):\n            series[i-1] += 2\n    return sum(series)\n"}
{"task_id": "Open/73", "completion": "    max_num = 0\n    for i in range(n):\n        if arr[i] == n:\n            max_num += 1\n    return max_num\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n):\n        if (a[i] & (a[i] - 1)) == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    \n    return int( ''.join( [ '1' if int(x) == 0 else '0' for x in bin(n)[2:] ] ), 2 )\n"}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range(n):\n        if A[i] == 1:\n            changes += 1\n        if A[i] == 1:\n            changes += 1\n    return changes\n"}
{"task_id": "Open/77", "completion": "    return ( radian * 180 ) / math.pi\n"}
{"task_id": "Open/78", "completion": "    return n // 2\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        sum += a\n    return sum\n"}
{"task_id": "Open/80", "completion": "    max_power = 1\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            max_power = i\n    return max_power\n"}
{"task_id": "Open/81", "completion": "    count = 0\n    for move in moves :\n        if move == 'up' :\n            count += (row - 1)\n        elif move == 'down' :\n            count += (row + 1)\n        elif move == 'left' :\n            count += (column - 1)\n        elif move == 'right' :\n            count += (column + 1)\n    return count\n"}
{"task_id": "Open/82", "completion": "    # Initialize an empty list to store the next numbers.\n    numbers = []\n    # Iterate from 1 to n.\n    for i in range(1, n+1):\n        # Calculate the sum of the previous number and the current index.\n        sum = i - 1 + i\n        # Append the sum to the list.\n        numbers.append(sum)\n    # Return the next number in the list.\n    return numbers[n-1]\n"}
{"task_id": "Open/83", "completion": "    \n    # Initialize an empty list to store the last occurrence of each character in the string.\n    lastOccurrence = []\n    \n    # Initialize a variable to store the length of the string.\n    length = len(s)\n    \n    # Initialize a variable to store the index of the last occurrence of each character in the string.\n    lastIndex = []\n    \n    # Initialize a variable to store the sorted string.\n    sortedString = \"\"\n    \n    # Initialize a variable to store the sorted string.\n    sortedString = sorted(s)\n    \n    # Initialize a variable to store the index of the last occurrence of each character in the string.\n    for i in range(length):\n        \n        # If the character is not in the correct position, swap it with the character at its last occurrence.\n        if s[i]!= sortedString[i]:\n            \n            # Store the index of the last occurrence of the character in the string.\n            lastIndex.append(s.rfind(s[i]))\n            \n            # Store the character in the sorted string.\n            sortedString ="}
{"task_id": "Open/84", "completion": "    result = []\n    for i in range(l-1,r) :\n        if i%2 == 0 :\n            result.append(i)\n        else :\n            result.append(i+1)\n    return sum(result)\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range ( smaller, 1, -1 ) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "    \n    # Step 1: Initialize an empty list to store the Nth numbers.\n    numbers = []\n    \n    # Step 2: Initialize a variable to store the sum of the previous two numbers.\n    sum = A + B\n    \n    # Step 3: Iterate through the sequence starting from index A.\n    for i in range(A, N+1):\n        \n        # Add the current number to the sum.\n        sum += A\n        \n        # If the sum is equal to N, return the Nth number.\n        if sum == N:\n            numbers.append(A)\n            return A\n        \n        # If no N is found, return -1.\n        if sum > N:\n            return -1\n        \n        # Add the current number to the sum.\n        sum += A\n    \n    # If no N is found, return -1.\n    return -1\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in range(len(str)):\n        if str[i] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    \n    # Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n    r = r / 100 / 12\n    \n    # Convert the loan tenure from years to months by multiplying it by 12.\n    t = t * 12\n    \n    # Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    \n    # Return the calculated EMI.\n    return emi\n    \n    "}
{"task_id": "Open/89", "completion": "    counter = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[k] > B[j] * B[j]:\n                    counter += 1\n    return counter\n"}
{"task_id": "Open/90", "completion": "    if l > r :\n        return 0\n    if l == r :\n        return 1 if l % 10 in [2, 3, 9] else 0\n    return countNums(l, (l + r) // 2) + countNums( (l + r) // 2 + 1, r )\n"}
{"task_id": "Open/91", "completion": "    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] == arr[j] - arr[i]:\n                max_length = max(max_length, j - i + 1)\n    return max_length\n"}
{"task_id": "Open/92", "completion": "    max_len = -1\n    for i in range(len(str)):\n        if str[i].isalnum():\n            max_len += 1\n        else:\n            max_len = 0\n        if max_len > len(str) - i:\n            return str[i:i+max_len]\n    return str[0:max_len]\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            count += 1\n        n = n / 2\n    return count\n"}
{"task_id": "Open/94", "completion": "    \n    # Step 1\n    s = \"\"\n    \n    # Step 2\n    for i in range(n-1, -1, -1) :\n        \n        # Step 3\n        if k > 0 :\n            if k >= 26 :\n                s += 'z'\n                k -= 26\n            else :\n                s += chr(97 + k)\n                k -= k\n        else :\n            break\n    \n    return s\n"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    # Calculate the total sum of the array\n    totalSum = sum(arr)\n    # Iterate through the array\n    for i in range(n):\n        # Calculate the sum of elements before the split point\n        beforeSplit = sum(arr[:i])\n        # Calculate the sum of elements after the split point\n        afterSplit = sum(arr[i+1:])\n        # If such a split point exists, return 1\n        if beforeSplit == totalSum / 3 and afterSplit == totalSum / 3:\n            return 1\n    # If no split point is found, return 0\n    return 0\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "    return (a + k) == (b + k) and (a + k) == (c + k)\n"}
{"task_id": "Open/100", "completion": "    x = x ^ (x >> 32)\n    y = y ^ (y >> 32)\n    return x & y == y\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    min_removal = 0\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) < min_removal:\n            min_removal += 1\n    return min_removal\n"}
{"task_id": "Open/104", "completion": "    max_set_bits = 0\n    left_bin = bin(left)\n    right_bin = bin(right)\n    for i in range(len(left_bin)-1, -1, -1):\n        if left_bin[i] == '1':\n            max_set_bits += 1\n        else:\n            break\n    for i in range(len(right_bin)-1, -1, -1):\n        if right_bin[i] == '1':\n            max_set_bits = max(max_set_bits, len(right_bin)-i-1)\n        else:\n            break\n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "    result = 1\n    for i in range(1, n+1):\n        result *= 2\n    return result\n"}
{"task_id": "Open/106", "completion": "    if n < 0 :\n        return False\n    if n == 0 :\n        return False\n    divisors = []\n    for i in range ( 1, n ) :\n        if n % i == 0 :\n            divisors.append ( i )\n    if sum ( divisors ) == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/107", "completion": "    century = N / 100\n    leap_century = N / 400\n    leap_year = N / 4\n    non_leap_year = N - leap_year\n    if century % 2 == 0 :\n        return non_leap_year\n    else :\n        return non_leap_year + leap_year * 2\n"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return int(a**(1/2))\n"}
{"task_id": "Open/109", "completion": "Convert an integer to a string.\"\"\"\n        \n        if n < 0 :\n            return \"Error: Input must be a non-negative integer.\"\n        \n        elif n == 0 :\n            return \"0\"\n        \n        else :\n            return str(n)\n    \n    def initializeDictionary ( ) :\n        \"\"\"Initialize an empty dictionary.\"\"\"\n        \n        return {}\n    \n    def incrementDictionary ( d, n ) :\n        \"\"\"Increment the value of a key in a dictionary by 1.\"\"\"\n        \n        if d in n :\n            n[d] += 1\n        else :\n            n[d] = 1\n    \n    def getDictionaryKeys ( n ) :\n        \"\"\"Return the keys of a dictionary.\"\"\"\n        \n        return n.keys()\n    \n    def getDictionaryValue ( d, n ) :\n        \"\"\"Return the value of a key in a dictionary.\"\"\"\n        \n        return n[d]\n    \n    def getDictionary ( n ) :\n        \"\"\"Return the entire dictionary.\"\"\"\n"}
{"task_id": "Open/110", "completion": "    return len(set(str(n))) == len(str(n))\n"}
{"task_id": "Open/111", "completion": "    if a == [] :\n        return True\n    if a[0] % 5 == 0 :\n        return canMakeEqual(a[1:], n)\n    elif a[0] % 3 == 0 :\n        return canMakeEqual(a[1:], n)\n    else :\n        return False\n"}
{"task_id": "Open/112", "completion": "    \n    # Initialize an empty array\n    array = [0] * (n+1)\n    \n    # Iterate from 3 to n+1\n    for i in range(3, n+1):\n        # If i is odd, set the value at index i to the value at index i//2 multiplied by 10 and added to 4.\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 4\n        # If i is even, set the value at index i to the value at index (i//2)-1 multiplied by 10 and added to 7.\n        else:\n            array[i] = array[(i//2)-1] * 10 + 7\n    \n    # Return the value at index n of the array\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "    \n    # Initialize an empty array\n    arr = []\n    \n    # Iterate from 3 to n+1\n    for i in range(3, n+1):\n        \n        # If i is odd, set the element at index i to 3 multiplied by 10 and added with 3\n        if i % 2 == 1:\n            arr.append(3 * 10 + 3)\n        \n        # If i is even, set the element at index i to the element at index (i//2)-1 multiplied by 10 and added with 5\n        else:\n            arr.append(5 * 10 + 5)\n    \n    # Return the element at index n\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "    \n    # Initialize an empty array\n    arr = [0] * (n+1)\n    \n    # Calculate the nth element at index n by dividing the length of the array by n+1\n    nthElement = arr[n//2]\n    \n    # Set the first element to 1 and the second element to 2\n    arr[0] = 1\n    arr[1] = 2\n    \n    # Iterate through the array starting from index i//2\n    for i in range(2, n//2+1):\n        # If the index is odd, multiply the element at index i by 10 and adding 1\n        if i%2 == 1:\n            arr[i] = arr[i//2] * 10 + 1\n        # If the index is even, multiply the element at index (i//2)-1 by 10 and adding 2\n        else:\n            arr[i] = arr[i//2-1] * 10 + 2\n    \n    # Return the element at index n\n    return arr[n//2]\n"}
{"task_id": "Open/115", "completion": "    if a == [] :\n        return True\n    else :\n        if a[0] % 11 == 0 :\n            return isPossibleToZero(a[1:], n)\n        else :\n            return False\n"}
{"task_id": "Open/116", "completion": "    if ( l < 0 or b < 0 or h < 0 ) :\n        return -1\n    else :\n        return ( l * h ) / 2\n"}
{"task_id": "Open/117", "completion": "    result = \"\"\n    for i in range(len(string)):\n        if string[i].isalpha():\n            result += string[i].upper()\n        else:\n            result += string[i]\n    return result\n"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "    return len(arr) == len(set(arr))\n"}
{"task_id": "Open/120", "completion": "    \n    # Initialize an empty set to store distinct two-character codes.\n    distinct_code = set()\n    \n    # Iterate through each character in the string.\n    for char in string:\n        # Add each character to the set.\n        distinct_code.add(char)\n    \n    # Return the length of the set.\n    return len(distinct_code)\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    max_num = \"\"\n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            max_num += ss[i]\n        else :\n            if max_num == \"\" :\n                max_num = int(ss[i])\n            else :\n                if int(ss[i]) > int(max_num) :\n                    max_num = int(ss[i])\n    return max_num\n"}
{"task_id": "Open/123", "completion": "    longest = \"\"\n    for i in range(length):\n        if s[i].isdigit():\n            longest += s[i]\n        else:\n            break\n    return longest\n"}
{"task_id": "Open/124", "completion": "    \n    if N < M :\n        N, M = M, N\n    \n    while K > 0 :\n        if N > M :\n            N -= M\n        else :\n            M -= N\n        K -= 1\n    \n    if N > 0 and M > 0 :\n        return N * M\n    else :\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length :\n        return False\n    for i in range(length-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    max_power = 1\n    for i in range(1, n):\n        if n % 2 == 0:\n            n = n / 2\n            max_power = max_power * 2\n        else:\n            max_power = max_power * 2\n    return max_power\n"}
{"task_id": "Open/127", "completion": "    \n    # Convert both strings A and B to integers.\n    A = int(A)\n    B = int(B)\n    \n    # Check if the lengths of A and B are equal. If not, return False.\n    if len(str(A))!= len(str(B)) :\n        return False\n    \n    # Iterate through the characters of A and B simultaneously.\n    for i in range(len(str(A))) :\n        if str(A)[i]!= str(B)[i] :\n            return False\n    \n    # If all characters are equal, return True.\n    return True\n"}
{"task_id": "Open/128", "completion": "    return x - y!= 1\n"}
{"task_id": "Open/129", "completion": "    Sn_1, Sn_2, Sn_3 = 0, 1, 1\n    for i in range(3, n + 1):\n        Sn_3 = Sn_1 + Sn_2 + Sn_3\n        Sn_1, Sn_2, Sn_3 = Sn_1, Sn_2, Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    steps = 0\n    for i in range(1, n):\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    else :\n        return 1\n"}
{"task_id": "Open/132", "completion": "    m = 1\n    sum = 0\n    while m <= N:\n        sum += (m * (m + 1)) / 2\n        m += 1\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    \n    if arr[0] % 2 == 1 and arr[-1] % 2 == 1 and len(arr) % 2 == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/135", "completion": "    count = 0\n    if N == 1 :\n        return count\n    elif N > 1 :\n        count = countSum(N-1,L,R) + countSum(N-2,L,R) + 1\n    return count\n"}
{"task_id": "Open/136", "completion": "    min_num = arr[0]\n    for i in range(1,n):\n        if arr[i] < min_num and arr[i] > 0:\n            min_num = arr[i]\n    return min_num\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1\n    s = s.replace(\" \", \"\")\n    l = list(s)\n    \n    # Step 2\n    l.sort()\n    \n    # Step 3\n    for i in range(len(l)):\n        if len(l) == n:\n            return l[i]\n    \n    # Step 4\n    return None\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for i in s:\n        sum += ord(i)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    for i in A:\n        if i >= B:\n            count += 1\n    if count < N:\n        return -1\n    else:\n        return count\n"}
{"task_id": "Open/141", "completion": "    return x * y / math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "    \n    # Convert the integer to its binary representation.\n    binary = bin(n)\n    \n    # Count the number of trailing zeros in the binary representation.\n    count = 0\n    for i in range(len(binary)-1, -1, -1):\n        if binary[i] == '0':\n            count += 1\n        else:\n            break\n    \n    # Return the count.\n    return count\n"}
{"task_id": "Open/143", "completion": "    n = len(arr)\n    sum = 0\n    for i in range(1, n):\n        sum = sum ^ arr[i]\n        if sum == n:\n            return i\n        if sum > n:\n            return -1\n    return -1\n"}
{"task_id": "Open/144", "completion": "    max_len = 0\n    for i in range(1, n) :\n        if arr[i] < arr[i-1] :\n            max_len = max(max_len, arr[i])\n    return max_len\n"}
{"task_id": "Open/145", "completion": "    \n    # Step 1\n    for i in range(n):\n        if arr[i] == k:\n            return arr[i]\n    \n    # Step 2\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j] - k:\n                return arr[i]\n            elif arr[i] == arr[j] + k:\n                return arr[i]\n    \n    # Step 3\n    return -1\n"}
{"task_id": "Open/146", "completion": "    length = 1\n    while length <= K:\n        length *= 10\n    if length <= K:\n        return -1\n    return length // K\n"}
{"task_id": "Open/147", "completion": "    # Initialize a variable \"operations\" as 0.\n    operations = 0\n    # Iterate through the array.\n    for i in range(1, n) :\n        # If the current element is not equal to the previous element, subtract it from the array and add it to the array.\n        if arr[i]!= arr[i-1] :\n            arr[i] = arr[i] - 1\n            arr[i-1] = arr[i-1] + 1\n            operations += 1\n        # If the current element is equal to the previous element, add it to the array.\n        elif arr[i] == arr[i-1] :\n            arr[i] = arr[i] + 1\n            operations += 1\n    # Return the value of \"operations\".\n    return operations\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(3, n+1) :\n        if i == 3 :\n            sum += 3\n        elif i == 5 :\n            sum += 5\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s**0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1):\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    \n    # Convert the integer to its binary representation\n    binary = bin(n)\n    \n    # Check if the binary representation contains consecutive 1's\n    if '1' in binary :\n        return False\n    else :\n        return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/153", "completion": "    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(s) - 1) :\n        if s[i] not in vowels :\n            return False\n        if s[i] > s[i + 1] :\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high + 1) :\n        num = str(i)\n        if int(num[-1]) >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    return math.ceil( math.log(n, 2) ) - n\n"}
{"task_id": "Open/156", "completion": "    \n    if r < 0 :\n        return -1\n    else :\n        return 3.14 * r * r\n"}
{"task_id": "Open/157", "completion": "    return \"\".join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    \n    # Initialize missing as 0.\n    missing = 0\n    \n    # Iterate through the array.\n    for i in range(0,size) :\n        # If the current element is equal to the next element, increment missing by 1.\n        if i!= 0 and ar[i] == ar[i-1] :\n            missing += 1\n        # If the current element is greater than the next element, update missing to the current element.\n        elif i!= 0 and ar[i] > ar[i-1] :\n            missing = ar[i]\n    \n    # Return missing.\n    return missing\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    \n    # Initialize an empty dictionary to store the count of each element in the array.\n    d = {}\n    \n    # Iterate through the array and update the count in the dictionary.\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    \n    # Iterate through the dictionary and check if the count is odd.\n    for key, value in d.items():\n        if value % 2!= 0:\n            return key\n    \n    # If no element is found, return None.\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    if dx == 0 and dy == 0 :\n        return True\n    "}
{"task_id": "Open/163", "completion": "    if n % 2 == 1 :\n        return 0\n    else :\n        count = 0\n        while count <= n :\n            if n % 2 == 0 :\n                count += 1\n            else :\n                break\n        return count\n"}
{"task_id": "Open/164", "completion": "    \n    # Initialize an empty dictionary to store the count of each element\n    count = {}\n    \n    # Iterate through the array\n    for i in range(n):\n        \n        # If the current element is equal to the previous element, increment the count by 1\n        if arr[i] == arr[i-1]:\n            count[arr[i]] = count.get(arr[i], 0) + 1\n        \n        # If the current element is not equal to the previous element, add it as a key with a value of 1\n        else:\n            count[arr[i]] = count.get(arr[i], 0) + 1\n    \n    # Initialize a variable count to 0\n    count = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        \n        # If the current element is equal to the previous element, increment the count by 1\n        if arr[i] == arr[i-1]:\n            count += 1\n        \n        # If the current element is not equal to the previous element, add 1 to the count\n        else:\n            count *= count"}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 0\n    elif height == 1 :\n        return 1\n    else :\n        return 2 * height + 1\n"}
{"task_id": "Open/166", "completion": "    steps = 0\n    while source!= dest :\n        if source < dest :\n            source += step\n            steps += 1\n        elif source > dest :\n            source -= step\n            steps += 1\n    return steps\n"}
{"task_id": "Open/167", "completion": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(1, n+1):\n            count = count + 1\n            if i == n:\n                return count\n            else:\n                count = count + countnndSay(i-1)\n                "}
{"task_id": "Open/168", "completion": "    max_length = 0\n    max_product = 1\n    for i in range(N):\n        max_product *= arr[i]\n        if max_product < 0:\n            max_length = max(max_length, i)\n            max_product = 1\n    return max_length\n"}
{"task_id": "Open/169", "completion": "    return ( abs(m) * abs(n) ) / math.sqrt( abs(m) * abs(m) + abs(n) * abs(n) )\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            k = j + 1\n            while k < n:\n                if arr[k] - arr[i] <= L:\n                    count += 1\n                k += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r+1) :\n        if isPrime(i) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return n ^ ( ( 1 << m ) - 1 )\n"}
{"task_id": "Open/174", "completion": "    \n    count = 0\n    \n    for i in range ( L, R + 1 ) :\n        if i % 9 == K :\n            count += 1\n        elif i % 9!= K :\n            rem = i % 9\n            if rem == 0 :\n                rem = 9\n            count += ( R - i ) / rem\n    \n    return count\n"}
{"task_id": "Open/175", "completion": "    product = n * math.log10(n)\n    return str(product)[0:k]\n"}
{"task_id": "Open/176", "completion": "    for i in range(n):\n        if A[i] > A[i-1] and A[i] < A[i+1]:\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    a, b, c = sorted([a, b, c])\n    min_increase = float('inf')\n    for i in range(len(a)):\n        if a[i] + b[i] <= c[-1]:\n            min_increase = min(min_increase, c[-1] - (a[i] + b[i]))\n    return min_increase\n"}
