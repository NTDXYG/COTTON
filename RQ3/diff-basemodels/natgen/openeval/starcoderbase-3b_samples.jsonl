{"task_id": "Open/0", "completion": "\n"}
{"task_id": "Open/1", "completion": "    arr.sort()\n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val\n"}
{"task_id": "Open/2", "completion": "\n"}
{"task_id": "Open/3", "completion": "\n"}
{"task_id": "Open/4", "completion": "    # Step 1. Calculate the sum of each part of the list.\n    sum_1 = sum(a[:n])\n    sum_2 = sum(a[n:])\n    # Step 2. Check if it is possible to split the list into two parts such that the sum of each part is equal to the sum of each part.\n    if sum_1 == sum_2 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/5", "completion": "\n"}
{"task_id": "Open/6", "completion": "\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i-1] :\n            max_length = max(max_length, i+1)\n    return max_length\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "Open/8", "completion": "    # Step 1\n    distinct_prime_factors = set()\n    \n    # Step 2\n    for i in range(1, a+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                distinct_prime_factors.add(j)\n    \n    # Step 3\n    return len(distinct_prime_factors)\n"}
{"task_id": "Open/9", "completion": "    # Write your code here\n    sum = 0\n    for i in range(1,k+1):\n        sum += abs(arr[0]-arr[i])\n    return sum\n\narr = [1,2,3,4,5,6,7,8,9,10]"}
{"task_id": "Open/10", "completion": "    # Write your code here.\n    total_time = 0\n    A_deque = deque(A)\n    B_deque = deque(B)\n    while A_deque:\n        if A_deque[0] == B_deque[0]:\n            total_time += 1\n            A_deque.popleft()\n            B_deque.popleft()\n        else:\n            B_deque.popleft()\n            A_deque.append(B_deque.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    \n"}
{"task_id": "Open/13", "completion": "\n"}
{"task_id": "Open/14", "completion": "    result = \"\"\n    if n == 0:\n        return n\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return n + 1\n    elif n == 3:\n        return 0\n    else:\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    for i in range(t) :\n        a = random.randint(2, n-1)\n        if pow(a, (n-1)//2, n) == 1 or pow(a, (n-1)//2, n) == n-1 :\n            continue\n        else :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "    for i in range( len( s1 ) ) :\n        if s1[i] == '0' and s2[i] == '1' :\n            return True\n        elif s1[i] == '1' and s2[i] == '0' :\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(0, length, 2) :\n        if s[i] == '1' :\n            count += 1\n    for i in range(1, length, 2) :\n        if s[i] == '0' :\n            count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "    \n    count = 0\n    \n    for i in range ( 1, n + 1 ) :\n        if n % i == 0 :\n            count += 1\n            \n    return count\n"}
{"task_id": "Open/20", "completion": "\n"}
{"task_id": "Open/21", "completion": "\n"}
{"task_id": "Open/22", "completion": "\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        return count\n    sum += arr[i]\n    if sum == 0 :\n        count += 1\n    return subsetSum(arr, n, i+1, sum, count)\n\narr = [1, 2, 3, 4, 5, 6, 7]\nn = len(arr)"}
{"task_id": "Open/24", "completion": "\n"}
{"task_id": "Open/25", "completion": "    sum = 0\n    for i in range( 1, n+1, 2 ) :\n        sum += i**2\n    return sum\n"}
{"task_id": "Open/26", "completion": "\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return (a/b) * 100\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "\n"}
{"task_id": "Open/33", "completion": "    term = 1\n    for i in range( 1, n + 1 ) :\n        term = term * 2 + i - 1\n    return term\n"}
{"task_id": "Open/34", "completion": "\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1):\n        if str(i).count(str(d))!= 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    missing = 1\n    for i in range(1, n+1):\n        if i not in arr:\n            return missing\n        missing += 1\n    return missing\n"}
{"task_id": "Open/37", "completion": "\n"}
{"task_id": "Open/38", "completion": "    return 0\n"}
{"task_id": "Open/39", "completion": "    return sum( range(1,N+1) )\n"}
{"task_id": "Open/40", "completion": "    max_zeros = -1\n    for i in range(n) :\n        if arr[i] == 1 :\n            max_zeros += 1\n        else :\n            max_zeros = 0\n    return max_zeros\n\narr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"}
{"task_id": "Open/41", "completion": "\n"}
{"task_id": "Open/42", "completion": "    max_element = a[0]\n    min_element = a[0]\n    for i in range(1, n-k+1):\n        if a[i] < min_element:\n            min_element = a[i]\n        if a[i] > max_element:\n            max_element = a[i]\n    return max_element\n"}
{"task_id": "Open/43", "completion": "\n"}
{"task_id": "Open/44", "completion": "    sum_diff = 0\n    for i in range(n):\n        sum_diff += abs(arr[i] - arr[i-1])\n    return sum_diff\n\narr = [1, 2, 3, 4, 5]"}
{"task_id": "Open/45", "completion": "    min_element = min(arr)\n    return min_element * (len(arr) - 1)\n\narr = [1, 2, 3, 4, 5]"}
{"task_id": "Open/46", "completion": "    max_distance = 0\n    for i in range(len(array)):\n        diff = i - array[i]\n        if diff > max_distance:\n            max_distance = diff\n    return max_distance\n"}
{"task_id": "Open/47", "completion": "    return ( ( ( x1 - x2 ) ** 2 ) + ( ( y1 - y2 ) ** 2 ) ) == 0\n"}
{"task_id": "Open/48", "completion": "\n"}
{"task_id": "Open/49", "completion": "    max_value = 0\n    for i in range(len(L)):\n        max_value = max(max_value, L[i] & R[i])\n    return max_value\n"}
{"task_id": "Open/50", "completion": "\n"}
{"task_id": "Open/51", "completion": "\n"}
{"task_id": "Open/52", "completion": "\n"}
{"task_id": "Open/53", "completion": "\n"}
{"task_id": "Open/54", "completion": "    return sum(a) == k and len(a) - 1 == k\n"}
{"task_id": "Open/55", "completion": "\n"}
{"task_id": "Open/56", "completion": "\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - ( N % K )\n"}
{"task_id": "Open/58", "completion": "\n"}
{"task_id": "Open/59", "completion": "    # Step 1\n    for i in range(reversals) :\n        arr = reverse(arr, ranges[i])\n    # Step 2\n    for i in range(len(ranges)) :\n        arr = swap(arr, ranges[i])\n    # Step 3\n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "    return True\n"}
{"task_id": "Open/61", "completion": "\n"}
{"task_id": "Open/62", "completion": "    # Step 1\n    modified = \"\"\n    \n    # Step 2\n    for i in range( len - 1, -1, -1 ) :\n        if str[i] > str[i+1] :\n            modified += str[i]\n            modified += \"9\"\n        else :\n            modified += str[i]\n    \n    # Step 3\n    return modified\n"}
{"task_id": "Open/63", "completion": "    min_val = min(arr)\n    sum_log = 0\n    for i in range(n) :\n        sum_log += math.log(arr[i])\n    return min_val * n - sum_log\n\narr = [1,2,3,4,5]"}
{"task_id": "Open/64", "completion": "    \n    if len(s) == 0 or s.count('1') == len(s):\n        return -1\n    \n    max_len = 0\n    for i in range(1, len(s)):\n        if s[i] == '1':\n            continue\n        if i + 1 + max_len > len(s):\n            max_len = len(s) - i\n        elif i + 1 + max_len > max_len:\n            max_len = i + 1\n    \n    return max_len\n"}
{"task_id": "Open/65", "completion": "\n"}
{"task_id": "Open/66", "completion": "    # Step 1. Calculate the size of the array after adding k elements.\n    size = len(arr) + k\n    # Step 2. Sort the array in ascending order.\n    arr.sort()\n    # Step 3. If the size is even, calculate the median by taking the average of the two middle elements.\n    if size % 2 == 0:\n        return (arr[size//2] + arr[size//2 - 1]) / 2\n    # Step 4. If the size is odd, return the middle element as the median.\n    else:\n        return arr[size//2]\n"}
{"task_id": "Open/67", "completion": "\n"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    v = []\n    n -= 1\n    while n :\n        v.append( n % 5 )\n        n //= 5\n    result = 0\n    for i in reversed( v ) :\n        result = result * 10 + i\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "    return True\n"}
{"task_id": "Open/70", "completion": "\n"}
{"task_id": "Open/71", "completion": "\n"}
{"task_id": "Open/72", "completion": "    # Step 1\n    series = []\n    # Step 2\n    for i in range( 1, n + 1 ) :\n        # Step 3\n        series.append( sumOfTheSeries( i ) )\n    # Step 4\n    return sum( series )\n"}
{"task_id": "Open/73", "completion": "    max_num = 0\n    for i in range(n):\n        if arr[i] == n:\n            max_num += 1\n    return max_num\n"}
{"task_id": "Open/74", "completion": "\n"}
{"task_id": "Open/75", "completion": "\n"}
{"task_id": "Open/76", "completion": "\n"}
{"task_id": "Open/77", "completion": "    return degrees(radian)\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n"}
{"task_id": "Open/80", "completion": "    max_power = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            max_power = i\n    return max_power\n"}
{"task_id": "Open/81", "completion": "\n"}
{"task_id": "Open/82", "completion": "\n"}
{"task_id": "Open/83", "completion": "    # Step 1\n    last_occurrences = []\n    for i in range(len(s)) :\n        if s[i] not in last_occurrences :\n            last_occurrences.append(s[i])\n    # Step 2\n    sorted_s = sorted(s)\n    for i in range(len(s)) :\n        if s[i]!= sorted_s[i] :\n            last_occurrences[s.index(s[i])] = s[i]\n    # Step 3\n    return ''.join(last_occurrences)\n"}
{"task_id": "Open/84", "completion": "\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        x, y = y, x\n    if x % y == 0 :\n        return y\n    else :\n        return getHCF(y, x % y)\n"}
{"task_id": "Open/86", "completion": "\n"}
{"task_id": "Open/87", "completion": "\n"}
{"task_id": "Open/88", "completion": "    # Step 1. Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n    monthly_rate = r / 1200\n    # Step 2. Convert the loan tenure from years to months by multiplying it by 12.\n    tenure_in_months = t * 12\n    # Step 3. Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = (p * monthly_rate * (1 + monthly_rate)**tenure_in_months) / ((1 + monthly_rate)**tenure_in_months - 1)\n    # Step 4. Return the calculated EMI.\n    return emi\n"}
{"task_id": "Open/89", "completion": "    # Write your code here.\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            for k in range(j+1,len(A)):\n                if A[i]*A[k] > A[j]*A[j]:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n"}
{"task_id": "Open/91", "completion": "    max_length = 0\n    for i in range( len( arr ) ) :\n        for j in range( i+1, len( arr ) ) :\n            if arr[j] - arr[i] > max_length :\n                max_length = arr[j] - arr[i]\n    return max_length\n"}
{"task_id": "Open/92", "completion": "    max_len = -1\n    for i in range( len( str ) ) :\n        if str[ i ].isalnum() :\n            max_len += 1\n        else :\n            max_len = max( max_len, i - max_len + 1 )\n    return max_len\n"}
{"task_id": "Open/93", "completion": "\n"}
{"task_id": "Open/94", "completion": "\n"}
{"task_id": "Open/95", "completion": "\n"}
{"task_id": "Open/96", "completion": "\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}
{"task_id": "Open/97", "completion": "    # Step 1. Split the sentence into a list of words.\n    words = sentence.split()\n    \n    # Step 2. Iterate through each word in the list.\n    for word in words :\n        # If the word is present in the list, return True.\n        if word == word :\n            return True\n    \n    # Step 3. If the word is not present in the list, return False.\n    return False\n"}
{"task_id": "Open/98", "completion": "    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "    return (a + k == b) and (b + k == c) and (c + k == a)\n"}
{"task_id": "Open/100", "completion": "    # Step 1. Convert x and y to binary representation.\n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    \n    # Step 2. Perform a bitwise OR operation with the original x.\n    x = int(x, 2) | int(x, 2)\n    \n    # Step 3. Check if the resulting value is equal to y.\n    if x == y :\n        return True\n    else :\n        # Step 4. If the value becomes less than y without being equal to it, return False.\n        while x < y :\n            x = x << 1\n        if x == y :\n            return True\n        else :\n            return False\n"}
{"task_id": "Open/101", "completion": "\n"}
{"task_id": "Open/102", "completion": "\n"}
{"task_id": "Open/103", "completion": "    min_removal = 0\n    for i in range(1, n) :\n        if abs(arr[i] - arr[i-1]) < min_removal :\n            min_removal += 1\n    return min_removal\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Open/104", "completion": "    # TODO: Write your code here\n    pass\n"}
{"task_id": "Open/105", "completion": "\n"}
{"task_id": "Open/106", "completion": "\n"}
{"task_id": "Open/107", "completion": "\n"}
{"task_id": "Open/108", "completion": "\n"}
{"task_id": "Open/109", "completion": "    n = str(n)\n    d = int(d)\n    freq = {}\n    for i in n :\n        freq[int(i)] = freq.get(int(i), 0) + 1\n    for i in freq :\n        if i >= d :\n            freq[i] += 1\n    return ''.join(str(i) for i in sorted(freq.values(), reverse=True))\n"}
{"task_id": "Open/110", "completion": "    \n"}
{"task_id": "Open/111", "completion": "    for i in range(len(a)):\n        if a[i] % 5!= 0 and a[i] % 3!= 0:\n            return False\n        elif a[i] % 5 == 0 or a[i] % 3 == 0:\n            return True\n    return True\n"}
{"task_id": "Open/112", "completion": "\n"}
{"task_id": "Open/113", "completion": "\n"}
{"task_id": "Open/114", "completion": "\n"}
{"task_id": "Open/115", "completion": "\n"}
{"task_id": "Open/116", "completion": "\n"}
{"task_id": "Open/117", "completion": "    result = \"\"\n    for char in string :\n        if char.isalpha() :\n            result += char.upper()\n        else :\n            result += char\n    return result\n"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt( 8 * p + 1 ) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "    # Write your code here.\n    return len(set(arr)) == len(arr)\n"}
{"task_id": "Open/120", "completion": "\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    max_num = \"\"\n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            max_num += str(int(max_num)*10+int(ss[i]))\n        else :\n            if int(max_num) > int(max_num) :\n                max_num = str(int(max_num))\n    return max_num\n"}
{"task_id": "Open/123", "completion": "\n"}
{"task_id": "Open/124", "completion": "    N, M, K = min(N, M), max(N, M)\n    while K:\n        if N > M:\n            N, M = M, N\n        K -= 1\n    return N * M if N > 0 and M > 0 else 0\n\n"}
{"task_id": "Open/125", "completion": "    if len(string) == length:\n        for i in range(1, len(string)):\n            if string[i] == string[i-1]:\n                return False\n        return True\n    return False\n"}
{"task_id": "Open/126", "completion": "\n"}
{"task_id": "Open/127", "completion": "\n"}
{"task_id": "Open/128", "completion": "\n"}
{"task_id": "Open/129", "completion": "\n"}
{"task_id": "Open/130", "completion": "    steps = 0\n    for i in range(1, n):\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "    return 0 if n % 4 == 0 or n % 4 == 3 else 1\n"}
{"task_id": "Open/132", "completion": "    m = 1\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": ""}
{"task_id": "Open/134", "completion": "    if arr[0] % 2 == 1 and arr[n-1] % 2 == 1 and n % 2 == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/135", "completion": "\n"}
{"task_id": "Open/136", "completion": "    \n"}
{"task_id": "Open/137", "completion": "    digits = [int(d) for d in s]\n    digits.sort()\n    for i in range(len(digits)) :\n        if len(digits) == n :\n            return digits[i]\n    return None\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1,len(arr)):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n        else:\n            arr[i-1] = arr[i]\n    return count\n"}
{"task_id": "Open/139", "completion": "    # Step 1\n    sum = 0\n    count = 0\n    \n    # Step 2\n    for character in s :\n        # Step 2.1\n        ascii_code = ord(character)\n        \n        # Step 2.2\n        sum += ascii_code\n        \n        # Step 2.3\n        count += 1\n    \n    # Step 3\n    average = sum / count\n    \n    # Step 4\n    return average\n"}
{"task_id": "Open/140", "completion": "\n"}
{"task_id": "Open/141", "completion": "    max_num = max(x,y)\n    lcm = max_num\n    while lcm % x!= 0 and lcm % y!= 0:\n        lcm += max_num\n    return lcm\n"}
{"task_id": "Open/142", "completion": "\n"}
{"task_id": "Open/143", "completion": "\n"}
{"task_id": "Open/144", "completion": "\n"}
{"task_id": "Open/145", "completion": "\n"}
{"task_id": "Open/146", "completion": "    pass\n"}
{"task_id": "Open/147", "completion": "    # Write your code here\n    return 0\n"}
{"task_id": "Open/148", "completion": "\n"}
{"task_id": "Open/149", "completion": "    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n"}
{"task_id": "Open/151", "completion": "    result = 0\n    for i in range(len1):\n        result ^= ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "    return True\n"}
{"task_id": "Open/153", "completion": "    return True\n"}
{"task_id": "Open/154", "completion": "\n"}
{"task_id": "Open/155", "completion": "    return min(abs(n - 2**int(math.log(n, 2))), abs(n - 2**(int(math.log(n, 2)) + 1)))\n"}
{"task_id": "Open/156", "completion": "\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "\n"}
{"task_id": "Open/159", "completion": "    return str.count(\"010\")\n"}
{"task_id": "Open/160", "completion": "\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n    for i in range(n) :\n        ans = max(ans, xorArr ^ arr[i])\n    return ans\n\narr = [1,3,4,8]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "    if ( dx - sy ) > 0 :\n        return False\n    elif ( dx - sy ) < 0 :\n        return False\n    elif ( dx - sy ) > 0 :\n        return True\n    elif ( dx - sy ) <= ( sy - sx ) :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/163", "completion": "\n"}
{"task_id": "Open/164", "completion": "\n"}
{"task_id": "Open/165", "completion": ""}
{"task_id": "Open/166", "completion": "    steps = 0\n    for i in range(source, dest + 1):\n        if i == dest:\n            steps += 1\n        elif i > dest:\n            steps += 1\n    return steps\n"}
{"task_id": "Open/167", "completion": "\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    max_product = 1\n    for i in arr :\n        max_product *= i\n        if max_product > N :\n            max_length = max( max_length, i )\n    return max_length\n"}
{"task_id": "Open/169", "completion": "    return math.sqrt(m**2 + n**2)"}
{"task_id": "Open/170", "completion": "    count = 0\n    sum = 0\n    for i in range(n) :\n        sum += arr[i]\n        while sum >= k :\n            sum -= arr[i-k]\n            count += 1\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nk = 10"}
{"task_id": "Open/171", "completion": "    count = 0\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] <= L:\n                count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n"}
{"task_id": "Open/173", "completion": "\n"}
{"task_id": "Open/174", "completion": "\n"}
{"task_id": "Open/175", "completion": "    product = n * math.log10(n)\n    return product[:k]\n"}
{"task_id": "Open/176", "completion": "    for i in range(len(A)):\n        if A[i] > A[0] and A[i] < A[1]:\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    a, b = sorted( [a, b] )\n    min_increase = float( 'inf' )\n    for i in range( len( a ) ) :\n        if a[i] + b[i] <= c :\n            min_increase = min( min_increase, c - a[i] - b[i] )\n    return min_increase\n"}
