{"task_id": "Open/0", "completion": "\n    sum = 0\n    count = 0\n    for i in range(N):\n        sum += arr[i]\n    for i in range(N):\n        if sum + K > arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    min_val = min(arr)\n    max_val = max(arr)\n    freq = [0] * (max_val - min_val + 1)\n    for i in range(n):\n        freq[arr[i] - min_val] += 1\n    return max(freq)\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nn = len(arr)"}
{"task_id": "Open/2", "completion": "\n    \n    binaryRepresentation = bin(n)\n    \n    for i in range(l, r + 1) :\n        if binaryRepresentation[2:].find(str(i)) == -1 :\n            return \"No\"\n    \n    return \"Yes\"\n    \n    "}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    \n    sum_a = sum(a)\n    if sum_a % 2!= 0 :\n        return False\n    \n    sum_a = sum_a // 2\n    \n    sum_left = 0\n    sum_right = 0\n    \n    for i in range(n) :\n        sum_left += a[i]\n        sum_right += a[n - i - 1]\n        \n    return sum_left == sum_right\n"}
{"task_id": "Open/5", "completion": "\n    \n    binary = bin(x)\n    \n    if binary[-1] == '1':\n        return 1\n    else:\n        return 0\n"}
{"task_id": "Open/6", "completion": "\n    \n    output = []\n    for i in range(len(vec)):\n        vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/7", "completion": "\n    max_length = 0\n    for i in range(1, n) :\n        for j in range(i) :\n            if arr[i] > arr[j] :\n                max_length = max(max_length, 1 + arr[i])\n    return max_length\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/8", "completion": "\n    \n    distinct_prime_factors = set()\n    \n    for i in a :\n        for j in range(2, int(math.sqrt(i)) + 1) :\n            if i % j == 0 :\n                distinct_prime_factors.add(j)\n                distinct_prime_factors.add(i // j)\n        if i not in distinct_prime_factors :\n            distinct_prime_factors.add(i)\n    \n    return len(distinct_prime_factors)\n"}
{"task_id": "Open/9", "completion": "\n    sum = 0\n    for i in range(1, k + 1):\n        sum += arr[i] - arr[0]\n    return sum\n"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.appendleft(B.pop())\n            A.append(A.pop())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i] % 2 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if len(set(s[i:j+1])) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "\n    \n    if n == 1 :\n        return True\n    \n    if n % 2 == 0 :\n        return False\n    \n    while n > 1 :\n        n = n / 2\n        if n % 2 == 0 :\n            return False\n    \n    return True\n"}
{"task_id": "Open/14", "completion": "\n    \n    switch = {\n        0 : n,\n        1 : 1,\n        2 : n + 1,\n        3 : 0\n    }\n    \n    return switch.get(n % 4, \"\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/15", "completion": "\n    for i in range(t) :\n        a = random.randint(2,n-1)\n        if ( pow(a, (n-1)/2, n)!= 1 ) and ( pow(a, (n-1)/2, n)!= n-1 ) :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "\n    \n    for i in range( n ) :\n        if s1[i] == '0' and s2[i] == '1' :\n            return True\n        elif s1[i] == '1' and s2[i] == '0' :\n            return True\n        elif s1[i] == '0' and s2[i] == 'Z' :\n            return True\n        elif s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    difference = 0\n    for i in range(length):\n        if s[i] == '1':\n            if i % 2 == 0:\n                count += 1\n            else:\n                difference += 1\n        else:\n            if i % 2 == 0:\n                difference += 1\n            else:\n                count += 1\n    return min(count, difference)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n+1) :\n        if i % math.floor(math.sqrt(i)) == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if x == 0 or y == 0 :\n        return 0\n    elif x == 1 :\n        return y\n    elif x == y :\n        return x * y\n    else :\n        return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if arr[i] > arr[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max(max_length, current_length)\n"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        return 1 if sum == 0 else 0\n    else :\n        return subsetSum ( arr, n, i + 1, sum - arr[i], count ) + subsetSum ( arr, n, i + 1, sum, count )\n"}
{"task_id": "Open/24", "completion": "\n    \n    return n * (2 * n - 1)\n"}
{"task_id": "Open/25", "completion": "\n    sum = 0\n    for i in range(1, n+1, 2) :\n        sum += i*i\n    return sum\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return (a / b) * 100\n"}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2) :\n        sum += i**2\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/31", "completion": "\n    \n    arr.sort()\n    return arr[k-1]\n\narr = [1,3,5,7,9,2,4,6,8,0]\nn = len(arr)\nk = 3"}
{"task_id": "Open/32", "completion": "\n    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "\n    term = 1\n    for i in range ( 1, n + 1 ) :\n        term = term * 2 + i - 1\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    if len(a) == 0 :\n        return 0\n    if len(a) == 1 :\n        return 0 if a[0] > k else 1\n    \n    count = 0\n    product = 1\n    left = 0\n    right = 0\n    \n    while right < len(a) :\n        product *= a[right]\n        \n        while product >= k and left <= right :\n            product /= a[left]\n            left += 1\n        \n        count += right - left + 1\n        right += 1\n    \n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range ( 1, n + 1 ) :\n        string = str ( i )\n        if string.count ( d ) > 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    for i in range(1, n + 1) :\n        if i not in arr :\n            return i\n    return n + 1\n"}
{"task_id": "Open/37", "completion": "\n    if n == 0 or n == 1 :\n        return 1\n    if n == 2 :\n        return 2\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    sum = 0\n    area = (l * b) / 2\n    while sum < area:\n        sum += area\n        area += 1\n    return sum\n"}
{"task_id": "Open/39", "completion": "\n    if N == 1 :\n        return 1\n    else :\n        return N + count(N-1)\n"}
{"task_id": "Open/40", "completion": "\n    max_zeros = -1\n    for i in range(n):\n        if arr[i] == 1:\n            max_zeros += 1\n        else:\n            max_zeros = 0\n    return max_zeros\n\narr = [1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            if max_length < i:\n                max_length = i\n    return max_length\n\narr = [1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"task_id": "Open/42", "completion": "\n    max_element = a[0]\n    min_element = a[0]\n    max_element = a[len(a)-k]\n    for i in range(0, len(a)-k):\n        if a[i] < min_element:\n            min_element = a[i]\n        if a[i] > max_element:\n            max_element = a[i]\n    return max_element\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            product = 1\n            for k in range(i,j+1):\n                product = product * array[k]\n            if product <= k:\n                count += 1\n    return count\n\narray = [1,2,3,4,5,6,7,8,9]\nn = len(array)\nk = 20"}
{"task_id": "Open/44", "completion": "\n    sum_diff = 0\n    for i in range(n) :\n        sum_diff += abs(arr[i] - (i+1))\n    return sum_diff\n"}
{"task_id": "Open/45", "completion": "\n    \n    min_cost = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_cost:\n            min_cost = arr[i]\n    \n    return min_cost * (n - 1)\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/46", "completion": "\n    max_distance = 0\n    for i in range(len(array)):\n        difference = abs(array[i] - i)\n        if difference > max_distance:\n            max_distance = difference\n    return max_distance\n"}
{"task_id": "Open/47", "completion": "\n    \n    xDiff = (x2 - x1) ** 2\n    yDiff = (y2 - y1) ** 2\n    \n    if xDiff == yDiff :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(0, a + 1) :\n        xor = i ^ a\n        if xor == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max_value = 0\n    for i in range(L, R+1) :\n        for j in range(L, R+1) :\n            if i & j > max_value :\n                max_value = i & j\n    return max_value\n"}
{"task_id": "Open/50", "completion": "\n    smallest = -1\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] % a[j] == 0:\n                smallest = a[i]\n                break\n    return smallest\n\na = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,"}
{"task_id": "Open/51", "completion": "\n    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum = sum + 1/3**i\n    return sum\n"}
{"task_id": "Open/52", "completion": "\n    result = []\n    for i in range(n):\n        for j in range(n):\n            result.append(arr[i][j] ^ arr[i][j+1] ^ arr[i+1][j] ^ arr[i+1][j+1])\n    return result\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(N+1) :\n        count += (i & N)\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    \n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    \n    if sum == k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/55", "completion": "\n    \n    binary = bin(n)\n    firstBit = binary[2]\n    lastBit = binary[-2]\n    \n    if firstBit == '1' and lastBit == '1' :\n        return True\n    else :\n        return False\n    \n    "}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    for i in range(len(s)):\n        if s[i]!= s[i-1]:\n            max_partitions += 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    for i in range(2, N+1):\n        var1 = arr[i-1]\n        var2 = arr[i-2]\n        result = result + var1 + var2\n        result = result + (var1 * var2) / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "\n    \n    for i in range(0, reversals) :\n        arr = swap(arr, ranges, reversals, index)\n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    \n    if n == 0 :\n        return True\n    \n    squareRoot = int(n ** 0.5)\n    \n    if squareRoot ** 2 == n :\n        return True\n    \n    return False\n"}
{"task_id": "Open/61", "completion": "\n    count = 0\n    for i in range(len(a)) :\n        if a[i] == b[i] :\n            count += 1\n    if count >= 0 :\n        return count\n    else :\n        return -1\n"}
{"task_id": "Open/62", "completion": "\n    \n    newStr = \"\"\n    \n    for i in range(len-1, -1, -1) :\n        if str[i] > str[i+1] :\n            newStr += \"9\"\n        else :\n            newStr += str[i]\n    \n    return newStr\n"}
{"task_id": "Open/63", "completion": "\n    \n    minValue = arr[0]\n    for i in range(1, n) :\n        if arr[i] < minValue :\n            minValue = arr[i]\n    \n    sumLog = 0\n    for i in range(n) :\n        sumLog += math.log(arr[i])\n    \n    return minValue * n - sumLog\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/64", "completion": "\n    if len(s) == 0 or s == '1':\n        return \"-1\"\n    max_len = 0\n    for i in range(1, len(s)):\n        if s[i]!= '1':\n            if max_len < i + 1:\n                max_len = i + 1\n    return max_len\n"}
{"task_id": "Open/65", "completion": "\n    result = []\n    for i in range(0, len(a)-k):\n        if a[i]!= a[i+1]:\n            result.append(a[i])\n    for i in range(0, len(a)-k):\n        if a[i] == a[i+1]:\n            result.append(a[i])\n    return result\n"}
{"task_id": "Open/66", "completion": "\n    \n    size = n + k\n    \n    arr.sort()\n    \n    if size % 2 == 0 :\n        median = (arr[size//2] + arr[size//2 - 1]) / 2\n    else :\n        median = arr[size//2]\n    \n    return median\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/67", "completion": "\n    step_count = 0\n    for i in range(n):\n        if a[i] < 0:\n            step_count += 1\n        elif a[i] > 0:\n            step_count += 1\n    if step_count % 2 == 0:\n        step_count += a.count(0)\n    else:\n        if a.count(0) > 0:\n            step_count += a.count(0)\n    return step_count\n"}
{"task_id": "Open/68", "completion": "\n    \n    if n == 1 :\n        return 0\n    v = []\n    while n > 0 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v) - 1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    n = bin(n)[2:]\n    return all(n[i] > n[i+1] for i in range(len(n)-1))\n"}
{"task_id": "Open/70", "completion": "\n    diff = abs(x - n)\n    if x > n :\n        return x\n    else :\n        return diff\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range ( 0, n + 1 ) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    \n    series = []\n    for i in range(1, n+1):\n        series.append(sum(range(i+1)))\n    return sum(series)\n"}
{"task_id": "Open/73", "completion": "\n    max_num = 0\n    for i in range(n):\n        if arr[i] == n:\n            max_num += 1\n    return max_num\n"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(len(a)):\n        if a[i] > 2**(a[i]-1):\n            count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    return int( ''.join( [ str( int( i ) ^ 1 ) for i in bin( n )[ 2 : ] ] ), 2 )\n"}
{"task_id": "Open/76", "completion": "\n    changes = 0\n    for i in range(n):\n        if A[i-1] == 1:\n            changes += 1\n        if A[i+1] == 1:\n            changes += 1\n        if A[i] == 0:\n            A[i+1] = 0\n    return changes\n\nA = [1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"task_id": "Open/77", "completion": "\n    \n    return degrees(radian)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += a\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    max_power = 1\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            max_power = i\n    return max_power\n"}
{"task_id": "Open/81", "completion": "\n    count = 0\n    for move in moves:\n        if move == \"up\":\n            count += 8 - row\n        elif move == \"down\":\n            count += row + 1\n        elif move == \"left\":\n            count += 8 - column\n        elif move == \"right\":\n            count += column + 1\n    return count\n"}
{"task_id": "Open/82", "completion": "\n    \n    numbers = []\n    for i in range(1, n+1):\n        numbers.append(i+sum(numbers))\n    return numbers[-1]\n"}
{"task_id": "Open/83", "completion": "\n    \n    lastOccurrence = []\n    for i in range ( len ( s ) ) :\n        lastOccurrence.append ( s.rfind ( s[i] ) )\n    \n    sortedString = sorted ( s )\n    for i in range ( len ( s ) ) :\n        if s[i]!= sortedString[i] :\n            temp = s[i]\n            s[i] = sortedString[i]\n            s[lastOccurrence[i]] = temp\n    \n    return \"\".join ( s )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/84", "completion": "\n    arr = [i for i in range(1, n+1, 2)]\n    arr.extend([i for i in range(2, n+1, 2)])\n    return sum(arr[l-1:r])\n"}
{"task_id": "Open/85", "completion": "\n    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    for i in range(1, smaller + 1) :\n        if x % i == 0 and y % i == 0 :\n            hcf = i\n    return hcf\n"}
{"task_id": "Open/86", "completion": "\n    \n    numbers = []\n    sum = A + B\n    \n    while len(numbers) < N:\n        numbers.append(sum)\n        sum = sum + A\n        \n    if sum == N:\n        return numbers[N-1]\n    else:\n        return -1\n    "}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    \n    r = r / 100\n    t = t * 12\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    counter = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] * C[k] > B[j] * B[j]:\n                    counter += 1\n    return counter\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range(l, r+1) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[j] - arr[i] == arr[j] - arr[i-1]:\n                max_length = max(max_length, j-i+1)\n    return max_length\n"}
{"task_id": "Open/92", "completion": "\n    max_len = -1\n    for i in range(len(str)):\n        if str[i].isalnum():\n            max_len += 1\n        else:\n            max_len = 0\n        if max_len > len(str) - i:\n            return str[i:i+max_len]\n    return str[0:max_len]\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 1 :\n        if n % 2 == 0 :\n            count += 1\n        n = n / 2\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    string = \"\"\n    for i in range(n-1, -1, -1) :\n        string += \"a\"\n    \n    k = k % 26\n    if k >= 26 :\n        string = string[:k] + \"z\" + string[k+1:]\n    else :\n        string = string[:k] + chr(97 - (97 - ord(string[k])) + k) + string[k+1:]\n    \n    k = k % 26\n    if k >= 26 :\n        string = string[:k] + \"z\" + string[k+1:]\n    else :\n        string = string[:k] + chr(97 - (97 - ord(string[k])) + k) + string[k+1:]\n    \n    k = k % 26\n    if k >= 26 :\n        string = string[:k] + \"z\" + string[k+1:]\n    else :\n        string = string[:k] + chr(97 - (97 - ord(string[k])) + k) + string[k+1:]"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    \n    totalSum = sum(arr)\n    \n    for i in range(n) :\n        sumBeforeSplit = sum(arr[:i])\n        sumAfterSplit = sum(arr[i+1:])\n        \n        if (sumBeforeSplit == totalSum/3) and (sumAfterSplit == totalSum*2/3) :\n            return 1\n    \n    return 0\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\n"}
{"task_id": "Open/97", "completion": "\n    return word in sentence\n"}
{"task_id": "Open/98", "completion": "\n    if n < 10 :\n        return 1\n    else :\n        return 1 + countDigit ( n // 10 )\n"}
{"task_id": "Open/99", "completion": "\n    if a == b == c:\n        return True\n    elif a == b + k or a == c + k or b == c + k or b == c - k:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/100", "completion": "\n    \n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    \n    while len(x) < len(y):\n        x = '0' + x\n    \n    if x == y:\n        return True\n    else:\n        return False\n    "}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    min_removal = 0\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) < min_removal:\n            min_removal += 1\n    return min_removal\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/104", "completion": "\n    max_set_bits = 0\n    for i in range(left, right+1):\n        max_set_bits = max(max_set_bits, countMaxSetBits(left, i) + countMaxSetBits(i+1, right))\n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "\n    result = 1\n    for i in range(1, n+1) :\n        result *= 2\n    return result\n"}
{"task_id": "Open/106", "completion": "\n    divisors = []\n    for i in range(1, n) :\n        if n % i == 0 :\n            divisors.append(i)\n    return sum(divisors) == n\n"}
{"task_id": "Open/107", "completion": "\n    \n    century = (N % 100) // 100\n    leap_century = (N % 400) // 100\n    \n    leap_years = (N % 100) // 4\n    non_leap_years = (N % 100) // 4\n    \n    if century == 0:\n        non_leap_years -= leap_years\n    else:\n        non_leap_years += leap_years\n        \n    if leap_century == 0:\n        non_leap_years -= leap_years\n    else:\n        non_leap_years += leap_years\n        \n    return non_leap_years\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    else :\n        return int(a * (3 * a - 1) / 2)\n"}
{"task_id": "Open/109", "completion": "\n    \n    n = str(n)\n    dictionary = {}\n    \n    for char in n:\n        if char in dictionary:\n            dictionary[char] += 1\n        else:\n            dictionary[char] = 1\n    \n    for key in sorted(dictionary, key=dictionary.get, reverse=True):\n        if dictionary[key] >= d:\n            return dictionary[key]\n    \n    return 0\n"}
{"task_id": "Open/110", "completion": "\n    \n    n = str(n)\n    \n    if len(n) == 0 :\n        return False\n    \n    n = list(n)\n    \n    for i in range(len(n)) :\n        if n[i] in n[:i] :\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/111", "completion": "\n    for i in range(len(a)):\n        if a[i] % 5 == 0 and a[i] % 3 == 0:\n            return False\n        elif a[i] % 5 == 0 or a[i] % 3 == 0:\n            return True\n        else:\n            return False\n"}
{"task_id": "Open/112", "completion": "\n    array = [0] * (n+1)\n    array[1] = 4\n    array[2] = 7\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 7\n        else:\n            array[i] = array[i//2] * 10 + 4\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 5\n        else:\n            array[i] = 3 * 10 + array[i//2]\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    \n    array = [0] * (n+1)\n    array[0] = 1\n    array[1] = 2\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            array[i] = array[i//2] * 10 + 2\n        else:\n            array[i] = array[i//2] * 10 + 1\n    \n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    \n    for i in range(n):\n        if (a[i] % 11 == 0):\n            return True\n    return False\n"}
{"task_id": "Open/116", "completion": "\n    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return (l * h) / 2\n"}
{"task_id": "Open/117", "completion": "\n    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += char\n    return result.capitalize()\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil( math.sqrt(8 * p + 1) / 2 ) - 1\n"}
{"task_id": "Open/119", "completion": "\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n"}
{"task_id": "Open/120", "completion": "\n    \n    distinctCode = set()\n    \n    for char in string :\n        distinctCode.add(char)\n    \n    return len(distinctCode)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    \n    max_num = \"\"\n    for char in ss :\n        if char.isdigit() :\n            max_num += char\n        else :\n            if max_num == \"\" :\n                max_num = int(char)\n            else :\n                max_num = max(max_num, int(char))\n    return max_num\n"}
{"task_id": "Open/123", "completion": "\n    longest = \"\"\n    for i in range(length):\n        if s[i].isdigit():\n            longest += s[i]\n        else:\n            break\n    return longest\n"}
{"task_id": "Open/124", "completion": "\n    \n    if N > M :\n        N, M = M, N\n    \n    if N == 0 or M == 0 :\n        return 0\n    \n    if K == 0 :\n        return N * M\n    \n    N, M = min(N, M), max(N, M)\n    \n    while K > 0 :\n        if N > M :\n            N -= M\n        else :\n            M -= N\n        K -= 1\n    \n    return N * M\n"}
{"task_id": "Open/125", "completion": "\n    if len(string)!= length:\n        return False\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    max_power = 1\n    while n > 0 :\n        if n % 2 == 0 :\n            n = n / 2\n            max_power = max_power * 2\n        else :\n            break\n    return max_power\n"}
{"task_id": "Open/127", "completion": "\n    \n    if len(str(A))!= len(str(B)):\n        return False\n    \n    for i in range(len(str(A))):\n        if str(A)[i]!= str(B)[i]:\n            return False\n    \n    return True\n    \n    "}
{"task_id": "Open/128", "completion": "\n    \n    diff = abs(x - y)\n    if diff == 1 or diff == 0 :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1, Sn_2, Sn_3 = 0, 0, 1\n    for i in range(3, n+1):\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2 + Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    steps = 0\n    for i in range(1, n):\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    elif n % 4 == 1 or n % 4 == 2 :\n        return 1\n    else :\n        return -1\n"}
{"task_id": "Open/132", "completion": "\n    m = 1\n    sum = 0\n    while m <= N :\n        sum += (m * (m + 1)) / 2\n        m += 1\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n    "}
{"task_id": "Open/134", "completion": "\n    \n    if arr[0] % 2!= 0 :\n        return False\n    \n    if arr[n-1] % 2!= 0 :\n        return False\n    \n    if n % 2!= 0 :\n        return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/135", "completion": "\n    count = 0\n    if N == 1 :\n        return ( R - L + 1 )\n    elif N > 1 :\n        count = ( R - L + 1 ) + ( N - 2 )\n    return count\n"}
{"task_id": "Open/136", "completion": "\n    min_num = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_num and arr[i] > 0:\n            min_num = arr[i]\n    return min_num\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/137", "completion": "\n    \n    s = list(s)\n    s.sort()\n    \n    for i in range(len(s)):\n        if len(s) == n:\n            return s[i]\n    \n    return None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1, n) :\n        if arr[i] > arr[i - 1] :\n            count += arr[i] - arr[i - 1]\n            arr[i] = arr[i - 1]\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for char in s :\n        sum += ord(char)\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/140", "completion": "\n    count = 0\n    for i in A :\n        if i >= B :\n            count += 1\n    if count < N :\n        return -1\n    else :\n        return count\n"}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n > 0 :\n        n = n / 2\n        count += n\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    n = len(arr)\n    sum = 0\n    for i in range(1, n):\n        sum = sum ^ arr[i]\n        if sum == n:\n            return i\n        if sum > n:\n            return -1\n    return -1\n"}
{"task_id": "Open/144", "completion": "\n    max_len = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_len = max(max_len, arr[i])\n    return max_len\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/145", "completion": "\n    \n    if k == 0 :\n        return 0\n    \n    if k < 0 :\n        return -1\n    \n    count = 0\n    \n    for i in range(n) :\n        if arr[i] == k :\n            return k\n        \n        count += arr[i]\n    \n    if count == k :\n        return k\n    \n    return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/146", "completion": "\n    length = 1\n    while length <= K :\n        length *= K\n    if length <= K :\n        return -1\n    return length // K\n"}
{"task_id": "Open/147", "completion": "\n    \n    operations = 0\n    for i in range(n-1):\n        if arr[i]!= arr[i+1]:\n            arr[i] -= 1\n            arr[i+1] += 1\n            operations += 2\n        elif arr[i] == arr[i+1]:\n            arr[i] += 1\n            operations += 1\n    return operations\n"}
{"task_id": "Open/148", "completion": "\n    sum = 0\n    for i in range(3, n+1):\n        if i == 3:\n            sum += 3\n        elif i == 5:\n            sum += 5\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s**0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    result = 0\n    for i in range(len1):\n        result = result ^ ord(str1[i])\n    return result\n"}
{"task_id": "Open/152", "completion": "\n    \n    binary = bin(n)\n    \n    for i in range(2, len(binary) ) :\n        if binary[i]!= '1' :\n            return True\n    \n    return False\n"}
{"task_id": "Open/153", "completion": "\n    \n    vowels = \"aeiou\"\n    \n    for i in range(len(s)):\n        if s[i] not in vowels:\n            return False\n    \n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range ( low, high + 1 ) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    \n    return math.floor(math.log(n, 2))\n"}
{"task_id": "Open/156", "completion": "\n    \n    if r < 0 :\n        return -1\n    else :\n        return 3 * r * r / 2\n"}
{"task_id": "Open/157", "completion": "\n    \n    newString = \"\"\n    \n    for char in s :\n        newString += chr(ord(char))\n    \n    return \"\".join(sorted(newString))\n"}
{"task_id": "Open/158", "completion": "\n    missing = 0\n    for i in range(size) :\n        if i == 0 :\n            if ar[i]!= ar[i+1] :\n                missing = ar[i]\n        elif i == size-1 :\n            if ar[i]!= ar[i-1] :\n                missing = ar[i]\n        elif ar[i]!= ar[i+1] and ar[i]!= ar[i-1] :\n            missing = ar[i]\n    return missing\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)-1) :\n        if str[i] == str[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    \n    count = {}\n    \n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    for key in count:\n        if count[key] % 2 == 1:\n            return key\n    \n    return None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    if ( dx - sx ) * ( dy - sy ) < 0 :\n        return False\n    elif ( dx - sx ) * ( dy - sy ) > 0 :\n        return True\n    elif ( dx - sx ) * ( dy - sy ) == 0 :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/163", "completion": "\n    if n % 2 == 1 :\n        return 0\n    else :\n        count = 0\n        while count <= n :\n            if n % 2 == 0 :\n                count += 1\n            else :\n                break\n        return count\n"}
{"task_id": "Open/164", "completion": "\n    count = 0\n    d = dict()\n    for i in range(n):\n        if arr[i] in d:\n            count += d[arr[i]]\n        if arr[i] not in d:\n            d[arr[i]] = 1\n    return count\n"}
{"task_id": "Open/165", "completion": "\n    if height == 0 :\n        return 0\n    elif height == 1 :\n        return 1\n    else :\n        return AVLnodes(height-1) + 2*AVLnodes(height-2)\n"}
{"task_id": "Open/166", "completion": "\n    steps = 0\n    while source!= dest :\n        if source > dest :\n            source -= step\n            steps += 1\n        elif source < dest :\n            source += step\n            steps += 1\n    return steps\n"}
{"task_id": "Open/167", "completion": "\n    if n == 0 :\n        return 1\n    if n == 1 :\n        return \"1\"\n    count = 0\n    count_str = \"\"\n    for i in range(1, n+1) :\n        if i == 1 :\n            count_str = \"1\"\n        else :\n            count_str = count_str + str(count)\n        count = 0\n        for j in range(0, len(count_str)) :\n            if j == 0 :\n                count += 1\n            else :\n                if count_str[j] == count_str[j-1] :\n                    count += 1\n                else :\n                    count = 1\n        count_str = str(count) + count_str[len(count_str)-1]\n    return count_str\n"}
{"task_id": "Open/168", "completion": "\n    max_length = 0\n    max_product = 1\n    for i in range(N):\n        max_product *= arr[i]\n        if max_product > N:\n            max_length = i + 1\n            break\n    return max_length\n"}
{"task_id": "Open/169", "completion": "\n    \n    sqrt = math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n    return (abs(m) * abs(n)) / sqrt\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n):\n        sum = arr[i]\n        for j in range(i, n):\n            sum += arr[j]\n            if sum < k:\n                count += 1\n    return count\n\narr = [1,2,3,4,5]\nn = len(arr)\nk = 7"}
{"task_id": "Open/171", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] <= L:\n                count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l, r+1):\n        if i % 2 == 0 or i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    return n ^ ( ( 1 << m ) - 1 )\n"}
{"task_id": "Open/174", "completion": "\n    count = 0\n    for i in range(L, R + 1) :\n        if i % 9 == K :\n            count += 1\n        elif i % 9!= K :\n            rem = i % 9\n            if rem == 0 :\n                count += 1\n    for i in range(R, L - 1, -1) :\n        if i % 9 == K :\n            count += 1\n        elif i % 9!= K :\n            rem = i % 9\n            if rem == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    product = math.log10(n) * n\n    return math.floor(product / k)\n"}
{"task_id": "Open/176", "completion": "\n    for i in range(n) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    return -1\n\nA = [1,2,3,4,5]\nn = len(A)"}
{"task_id": "Open/177", "completion": "\n    \n    a = sorted(a)\n    b = sorted(b)\n    min_increase = float(\"inf\")\n    \n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] + b[j] >= c:\n                min_increase = min(min_increase, c - (a[i] + b[j]))\n    \n    return min_increase\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
