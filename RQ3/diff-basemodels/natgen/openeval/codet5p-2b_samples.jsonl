{"task_id": "Open/0", "completion": "\n    sum = 0\n    count = 0\n    for i in arr :\n        sum += i\n    for i in arr :\n        if sum - i > sum :\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    arr.sort()\n    min_val = arr[0]\n    for i in range(1,n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n    return min_val\n"}
{"task_id": "Open/2", "completion": "\n    \n    # Step 1. Convert n to binary representation.\n    binary_rep = bin(n)[2:]\n    \n    # Step 2. Iterate through the range from l to r (inclusive).\n    for i in range(l,r+1):\n        \n        # Step 3. If the bit is 1 in the binary representation, return \"Yes\".\n        if binary_rep[i-l] == \"1\":\n            return \"Yes\"\n    \n    # Step 4. If no bits are set, return \"No\".\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    sum_of_a = sum(a)\n    if sum_of_a % n!= 0 :\n        return False\n    \n    sum_of_a_1 = sum_of_a // n\n    sum_of_a_2 = sum_of_a - sum_of_a_1\n    \n    if sum_of_a_1 == sum_of_a_2 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/5", "completion": "\n    binary = bin(x)\n    if binary[-1] == '1' :\n        return 1\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "\n    \n    # Step 1. Initialize an empty list to store the missing elements.\n    missing_elements = []\n    \n    # Step 2. Iterate through the input list and modify the elements by changing the sign of the element at the index equal to the absolute value of the current element minus one.\n    for i in range(len(vec)):\n        if vec[i] < 0:\n            vec[i] = abs(vec[i]) - 1\n    \n    # Step 3. Iterate through the modified list and append the indices of the positive elements plus one to the output list.\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            missing_elements.append(i + 1)\n    \n    # Step 4. Return the output list.\n    return missing_elements\n"}
{"task_id": "Open/7", "completion": "\n    max_length = 0\n    for i in range(1,n):\n        current_length = 0\n        for j in range(i,n):\n            if arr[i] > arr[j]:\n                current_length = max(current_length,j-i+1)\n        max_length = max(max_length,current_length)\n    return max_length\n"}
{"task_id": "Open/8", "completion": "\n    distinct_prime_factors = set()\n    for i in a :\n        for j in range(2, int(math.sqrt(i))+1) :\n            if i % j == 0 :\n                distinct_prime_factors.add(j)\n                distinct_prime_factors.add(i/j)\n    return len(distinct_prime_factors)\n"}
{"task_id": "Open/9", "completion": "\n    sum = 0\n    for i in range(1,n):\n        sum += abs(arr[i] - arr[0])\n    return sum\n"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A) > 0 and len(B) > 0 :\n        if A[0] == B[0] :\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else :\n            B.append(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(0,size) :\n        if array[i] % 2 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    count = 0\n    for i in range(len(s)) :\n        for j in range(i+1,len(s)+1) :\n            if len(set(s[i:j])) <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "\n    \n    while n > 1 :\n        if n % 2 == 0 :\n            return False\n        n = n // 2\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    \n    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "\n    a = random.randint(2,n-1)\n    for i in range(t) :\n        b = (a**((n-1)/2))%n\n        if b == 1 or b == n-1 :\n            a = random.randint(2,n-1)\n        else :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "\n    for i in range(n) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            return False\n    return True\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    if length == 0 :\n        return 0\n    count = 0\n    for i in range(0, length) :\n        if i % 2 == 0 :\n            if s[i] == '1' :\n                count += 1\n        else :\n            if s[i] == '0' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if x == 0 or y == 0 :\n        return 0\n    return x + product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        if i % 4 == 1 :\n            count1 += 1\n        if i % 4 == 2 :\n            count2 += 1\n        if i % 4 == 3 :\n            count3 += 1\n    if count0 == count1 and count0 == count2 and count0 == count3 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_length = 0\n    current_length = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            current_length += 1\n        else :\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max(max_length, current_length)\n"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    count = subsetSum( arr, n, i + 1, sum, count )\n    count = subsetSum( arr, n, i + 1, sum - arr[i], count )\n    return count\n"}
{"task_id": "Open/24", "completion": "\n    return n * (2 * n - 1)\n"}
{"task_id": "Open/25", "completion": "\n    sum = 0\n    for i in range ( 1, n+1 ) :\n        sum += i**2\n    return sum\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    return x <= y\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return ( a / b ) * 100\n"}
{"task_id": "Open/30", "completion": "\n    sum = 0\n    count = 0\n    for i in range(1, n+1) :\n        sum += i**2\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/31", "completion": "\n    arr.sort()\n    return arr[k-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/32", "completion": "\n    chicks = 3**(n-1)\n    return chicks\n"}
{"task_id": "Open/33", "completion": "\n    term = 1\n    for i in range(1, n+1) :\n        term = term * 2 + (i - 1)\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    count = 0\n    for i in range(len(a)):\n        product = 1\n        for j in range(i,len(a)):\n            product *= a[j]\n            if product < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range ( 1, n + 1 ) :\n        s = str(i)\n        if d in s :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    for i in range(1,n+1) :\n        if i not in arr :\n            return i\n    return n+1\n"}
{"task_id": "Open/37", "completion": "\n    dp = [0] * ( n + 1 )\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1 ) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    sum = 0\n    while l > 0 and b > 0 :\n        area = (l * b) / 2\n        sum += area\n        l -= 1\n        b -= 1\n    return sum\n"}
{"task_id": "Open/39", "completion": "\n    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "\n    max_zeros = -1\n    for i in range(n) :\n        if arr[i] == 1 :\n            max_zeros += 1\n        else :\n            max_zeros = 0\n        if max_zeros > max_zeros :\n            max_zeros = max_zeros\n    return max_zeros\n"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            max_length = max(max_length,1)\n        else :\n            max_length = max(max_length,0)\n    return max_length\n"}
{"task_id": "Open/42", "completion": "\n    max_element = a[0]\n    min_element = a[0]\n    for i in range(1,n-k+1):\n        if a[i] < min_element:\n            min_element = a[i]\n        if a[i] > max_element:\n            max_element = a[i]\n    return max_element\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i,n) :\n            if array[j]*array[i] <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    sum_diff = 0\n    for i in range(n) :\n        sum_diff += abs(arr[i] - i)\n    return sum_diff\n"}
{"task_id": "Open/45", "completion": "\n    min_element = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n    return (min_element * (n - 1))\n"}
{"task_id": "Open/46", "completion": "\n    max_distance = 0\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            diff = array[j] - array[i]\n            if diff > max_distance:\n                max_distance = diff\n    return max_distance\n"}
{"task_id": "Open/47", "completion": "\n    x_diff = (x1 - x2) ** 2\n    y_diff = (y1 - y2) ** 2\n    if x_diff + y_diff == 0 :\n        return True\n    else :\n        return False\n    "}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(0, a+1):\n        xor = i ^ a\n        if xor == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max_value = 0\n    for i in range(len(L)):\n        max_value = max(max_value, L[i] & R[i])\n    return max_value\n"}
{"task_id": "Open/50", "completion": "\n    smallest = -1\n    for i in range(n) :\n        if a[i] % a[0] == 0 :\n            smallest = a[i]\n    return smallest\n"}
{"task_id": "Open/51", "completion": "\n    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "\n    result = []\n    for i in range(n) :\n        for j in range(n) :\n            xor = arr[i][j] ^ arr[i][j+1] ^ arr[i+1][j] ^ arr[i+1][j+1]\n            result.append(xor)\n    return result\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(N+1) :\n        if (i ^ i) == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    sum = 0\n    for i in a :\n        sum += i\n    if sum + n - 1 == k :\n        return True\n    return False\n"}
{"task_id": "Open/55", "completion": "\n    \n    binary = bin( n )\n    first = binary[:2]\n    last = binary[-2:]\n    \n    if first == '1' and last == '1':\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    for i in range(len(s)):\n        if s[i]!= s[i-1]:\n            max_partitions += 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = var1 + var2\n    for i in range(2, N):\n        result = result + var1 + var2\n        var1 = var2\n        var2 = result\n    return result\n"}
{"task_id": "Open/59", "completion": "\n    \n    for i in range(ranges) :\n        arr[index], arr[index+1] = arr[index+1], arr[index]\n        index += 2\n    return arr[index]\n"}
{"task_id": "Open/60", "completion": "\n    if n == 0 :\n        return True\n    if n == 1 :\n        return True\n    if n == 2 :\n        return True\n    if n == 3 :\n        return True\n    if n == 4 :\n        return True\n    if n == 5 :\n        return True\n    if n == 6 :\n        return True\n    if n == 7 :\n        return True\n    if n == 8 :\n        return True\n    if n == 9 :\n        return True\n    if n == 10 :\n        return True\n    if n == 11 :\n        return True\n    if n == 12 :\n        return True\n    if n == 13 :\n        return True\n    if n == 14 :\n        return True\n    if n == 15 :\n        return True\n    if n == 16 :\n        return True\n    if n == 17 :\n        return True\n    if n == 18 :\n        return True\n    if n == 19 :\n        return True\n    if n == 20 :\n        return True\n    if n == 21 :\n        return True\n    if n == 22 :\n        return True\n    if n"}
{"task_id": "Open/61", "completion": "\n    count = 0\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            count += 1\n            b = b[1:]\n        else:\n            break\n    if count >= 0:\n        return count\n    else:\n        return -1\n"}
{"task_id": "Open/62", "completion": "\n    \n    newStr = \"\"\n    for i in range(len-1, -1, -1) :\n        if str[i] > str[i+1] :\n            newStr += str[i] - 1\n            newStr += \"9\"\n        else :\n            newStr += str[i]\n    return newStr\n"}
{"task_id": "Open/63", "completion": "\n    minValue = math.inf\n    for i in range(n):\n        if arr[i] < minValue:\n            minValue = arr[i]\n    return minValue * math.log(n)\n\narr = [1,2,3,4,5,6,7,8,9,10]"}
{"task_id": "Open/64", "completion": "\n    if s == \"\" or s.count(\"1\") == 0 :\n        return -1\n    max_len = 0\n    for i in range(1, len(s)) :\n        if s[i]!= \"1\" :\n            if max_len < i :\n                max_len = i + 1\n    return max_len\n"}
{"task_id": "Open/65", "completion": "\n    result = []\n    for i in range(n):\n        if a[i]!= a[i-1]:\n            result.append(a[i])\n    for i in range(n-k):\n        if a[i] == a[i+k]:\n            result.append(a[i])\n    return len(result)\n"}
{"task_id": "Open/66", "completion": "\n    \n    arr.sort()\n    if n % 2 == 0 :\n        return (arr[n//2] + arr[n//2 - 1])/2\n    else :\n        return arr[n//2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/67", "completion": "\n    step_count = 0\n    for i in range(n) :\n        if a[i] == -1 :\n            step_count += abs(a[i] - 1)\n        elif a[i] == 1 :\n            step_count += abs(a[i] - 1)\n        else :\n            step_count += 2\n    if step_count % 2 == 0 :\n        step_count += 2\n    return step_count\n\na = [1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    while n > 1 :\n        v.append(n % 5)\n        n = n // 5\n    v.append(n)\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return result\n"}
{"task_id": "Open/69", "completion": "\n    if n == 0 :\n        return False\n    if n == 1 :\n        return True\n    \n    if n & (n-1) == 0 :\n        return False\n    \n    return areSetBitsIncreasing ( n & (n-1) )\n"}
{"task_id": "Open/70", "completion": "\n    if x > n :\n        return x\n    else :\n        return abs(x - n)\n"}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(n+1) :\n        sum += 2\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    \n    series = []\n    \n    for i in range(1, n+1) :\n        term = 1\n        for j in range(i) :\n            term += 2\n        series.append(term)\n    \n    return sum(series)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/73", "completion": "\n    max_num = 0\n    for i in range(n) :\n        if arr[i] == n :\n            max_num += 1\n    return max_num\n"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n) :\n        if a[i] > 0 :\n            if a[i] & 1 == 1 :\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    return int( bin( n )[2:], 2 )\n"}
{"task_id": "Open/76", "completion": "\n    changes = 0\n    for i in range(n) :\n        if A[i] == 1 :\n            changes += 1\n            if i!= 0 :\n                A[i] = 0\n            if i!= n-1 :\n                A[i+1] = 0\n    return changes\n"}
{"task_id": "Open/77", "completion": "\n    return degrees(radian)\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range(1,n+1) :\n        sum += a\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    max_power = 1\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            max_power = i\n    return max_power\n"}
{"task_id": "Open/81", "completion": "\n    count = 0\n    for move in moves :\n        count += ( row + move ) * ( column + move )\n    return count\n"}
{"task_id": "Open/82", "completion": "\n    \n    next_numbers = []\n    \n    for i in range(1, n+1) :\n        next_numbers.append(i)\n    \n    return next_numbers\n"}
{"task_id": "Open/83", "completion": "\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] =='':\n            s[i] =''\n    s = ''.join(s)\n    s = sorted(s)\n    s = list(s)\n    for i in range(len(s)):\n        if s[i]!='':\n            s[i] = s[i]\n        else:\n            s[i] = s[i-1]\n    return ''.join(s)\n"}
{"task_id": "Open/84", "completion": "\n    result = []\n    for i in range(l-1, r):\n        result.append(i+1)\n    return sum(result)\n"}
{"task_id": "Open/85", "completion": "\n    if x > y :\n        smaller = y\n    else :\n        smaller = x\n    for i in range(1,smaller+1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "\n    \n    numbers = []\n    \n    for i in range(A,B+1):\n        numbers.append(i)\n        \n    sum = 0\n    \n    for i in range(len(numbers)):\n        sum = sum + numbers[i]\n        \n        if sum == N:\n            return numbers[i]\n        \n    return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    emi = ( p * r * (1 + r)**t ) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "\n    counter = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                if (A[i] * k > A[j] * A[j]):\n                    counter += 1\n    return counter\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if ( i % 10 == 2 or i % 10 == 3 or i % 10 == 9 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    max_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = arr[j] - arr[i]\n            if diff > max_length:\n                max_length = diff\n    return max_length\n"}
{"task_id": "Open/92", "completion": "\n    max_len = -1\n    for i in range(len(str)):\n        if str[i].isalnum():\n            max_len = max(max_len, len(str[i:i+2]))\n    return max_len\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 1 :\n        n = n // 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    string = \"\"\n    for i in range(n,0,-1) :\n        if k > 0 :\n            if k >= 26 :\n                string += chr(97 + (k-26))\n                k -= 26\n            else :\n                string += chr(97 + k)\n                k -= 1\n        else :\n            break\n    return string[::-1]\n"}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    totalSum = sum(arr)\n    if totalSum % 3!= 0 :\n        return 0\n    \n    totalSum = totalSum // 3\n    \n    for i in range(n) :\n        if (totalSum - arr[i]) == (totalSum * 2) :\n            return 1\n    return 0\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "\n    return math.floor(math.log10(n)) + 1\n"}
{"task_id": "Open/99", "completion": "\n    return a == b + k and b == c - k or a == c + k and b == a - k\n"}
{"task_id": "Open/100", "completion": "\n    return (x | y) == y\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= s[i-1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    min_removal = 0\n    for i in range(1, n) :\n        if abs(arr[i] - arr[i-1]) < min_removal :\n            min_removal += 1\n    return min_removal\n"}
{"task_id": "Open/104", "completion": "\n    max_set_bits = 0\n    \n    while left > right:\n        max_set_bits += 1\n        left = left & (left - 1)\n        right = right & (right - 1)\n    \n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "\n    result = 1\n    for i in range(1, n+1) :\n        result = result << 1\n    return result\n"}
{"task_id": "Open/106", "completion": "\n    if n == 1 :\n        return False\n    else :\n        sum = 0\n        for i in range(1, n) :\n            if n % i == 0 :\n                sum += i\n        if sum == n :\n            return True\n        else :\n            return False\n"}
{"task_id": "Open/107", "completion": "\n    \n    century = (N // 100) * 400\n    leap_century = (N // 100) * 400 + (N // 400) * 2\n    \n    odd_days = century - leap_century\n    \n    leap_days = (N // 2) * 2\n    \n    total_days = odd_days + leap_days\n    \n    return total_days % 7\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    else :\n        return int( (1 + (1/3)) * a )\n"}
{"task_id": "Open/109", "completion": "\n    \n    string = str(n)\n    dictionary = {}\n    \n    for i in string :\n        dictionary[i] = dictionary.get(i,0) + 1\n    \n    dictionary = dict(sorted(dictionary.items(), key=lambda x: x[1], reverse=True))\n    \n    for i in dictionary :\n        if dictionary[i] >= d :\n            return str(i)\n    \n    return \"0\"\n"}
{"task_id": "Open/110", "completion": "\n    if n == \"\" :\n        return False\n    \n    string = str(n)\n    \n    for i in string :\n        if i.isdigit() :\n            return False\n    \n    return True\n"}
{"task_id": "Open/111", "completion": "\n    for i in a :\n        if i % 5 == 0 or i % 3 == 0 :\n            return False\n    return True\n"}
{"task_id": "Open/112", "completion": "\n    arr = [4,7]\n    for i in range(3, n+1):\n        if i%2 == 0:\n            arr.append(arr[i//2] + 4)\n        else:\n            arr.append(arr[i//2] + 7)\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "\n    array = [0]*(n+1)\n    array[0] = 3\n    array[1] = 5\n    for i in range(2, n+1):\n        if i%2 == 0:\n            array[i] = array[i//2] + 3\n        else:\n            array[i] = array[i//2] + 5\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "\n    arr = [0] * (n+1)\n    arr[0] = 1\n    arr[1] = 2\n    for i in range(2, n+1) :\n        if i % 2 == 0 :\n            arr[i] = arr[i//2] * 10 + 1\n        else :\n            arr[i] = arr[i//2] * 10 + 2\n    return arr[n]\n"}
{"task_id": "Open/115", "completion": "\n    \n    for i in range(len(a)):\n        if isPossibleToZero(a[i+1:],n-a[i]) :\n            return True\n    return False\n"}
{"task_id": "Open/116", "completion": "\n    if l > 0 and b > 0 and h > 0 :\n        return (l * h) / 2\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "\n    result = \"\"\n    for char in string :\n        if char.isalpha() :\n            result += char.upper()\n        else :\n            result += char\n    return result\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil(math.sqrt(8 * p + 1) - 1) // 2\n"}
{"task_id": "Open/119", "completion": "\n    \n    if len(arr) == 0 or len(arr) == 1:\n        return True\n    \n    set = set()\n    for i in arr:\n        if i in set:\n            return False\n        else:\n            set.add(i)\n    return True\n"}
{"task_id": "Open/120", "completion": "\n    \n    set = set()\n    \n    for i in string :\n        set.add(i)\n    \n    return len(set)\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    elif lower > higher :\n        return 2\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    maximum = 0\n    current = 0\n    for i in ss :\n        if i.isdigit() :\n            current = current * 10 + int(i)\n        else :\n            if current > maximum :\n                maximum = current\n            current = 0\n    if current > maximum :\n        maximum = current\n    return maximum\n"}
{"task_id": "Open/123", "completion": "\n    longest = \"\"\n    for i in range(0, length) :\n        if s[i].isdigit() :\n            longest = s[i] + longest\n        else :\n            break\n    return longest\n"}
{"task_id": "Open/124", "completion": "\n    N, M, K = map(int, input().split())\n    while K > 0 and (N > 0 or M > 0):\n        if N > M:\n            N -= M\n        else:\n            M -= N\n        K -= 1\n    return N * M if K == 0 else N * M * K\n"}
{"task_id": "Open/125", "completion": "\n    if length == len(string) :\n        return False\n    \n    for i in range(1, len(string)) :\n        if string[i] == string[i-1] :\n            return False\n    \n    return True\n"}
{"task_id": "Open/126", "completion": "\n    max_power = 1\n    for i in range(1, n+1) :\n        if i % 2 == 0 :\n            i /= 2\n            max_power = max(max_power, i)\n    return max_power\n"}
{"task_id": "Open/127", "completion": "\n    \n    if len(A)!= len(B) :\n        return False\n    \n    for i in range(len(A)) :\n        if A[i]!= B[i] :\n            return False\n    return True\n"}
{"task_id": "Open/128", "completion": "\n    return (x - y)!= 1\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1, Sn_2, Sn_3 = 0, 0, 0\n    for i in range(3, n+1) :\n        Sn_3 = Sn_1 + Sn_2 + Sn_3\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    steps = 0\n    for i in range(1,n) :\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 :\n        return 0\n    if n % 4 == 1 or n % 4 == 2 :\n        return 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/132", "completion": "\n    m = 1\n    sum = 0\n    while m <= N :\n        sum += m * (m + 1) / 2\n        m += 1\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "\n    if arr[0] % 2 == 1 and arr[-1] % 2 == 1 and n % 2 == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/135", "completion": "\n    count = 0\n    if N == 1:\n        return countSum(N-1,L,R)\n    if N > 1:\n        return countSum(N-2,L,R) + 1\n    return count\n"}
{"task_id": "Open/136", "completion": "\n    min_num = arr[0]\n    for i in range(1,n) :\n        if arr[i] < min_num :\n            min_num = arr[i]\n    return min_num\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/137", "completion": "\n    \n    if n == 0 :\n        return None\n    \n    s = list(s)\n    s.sort()\n    \n    for i in s :\n        if len(s) == n :\n            return i\n    \n    return None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for i in s :\n        sum += ord(i)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "\n    count = 0\n    for i in range(len(A)):\n        if A[i] >= B:\n            count += 1\n    if count < N:\n        return -1\n    return count\n\nA = [1,2,3,4,5]\nB = [1,2,3,4,5]\nS = 5\nN = 4"}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n > 0 :\n        count += n & 1\n        n = n >> 1\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    n = len(arr)\n    sum = 0\n    for i in range(1,n) :\n        sum ^= arr[i-1]\n    if sum == n :\n        return -1\n    for i in range(n-1) :\n        sum ^= arr[i+1]\n    if sum == 0 :\n        return -1\n    return i+1\n"}
{"task_id": "Open/144", "completion": "\n    max_len = 0\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            max_len = max(max_len,arr[i-1]+1)\n    return max_len\n"}
{"task_id": "Open/145", "completion": "\n    \n    if n == 0 :\n        return -1\n    \n    if k == 0 :\n        return -1\n    \n    if k > arr[0] :\n        return -1\n    \n    if k < 0 :\n        return -1\n    \n    arr.sort()\n    \n    for i in range(n) :\n        if arr[i] == k :\n            return i\n    \n    return -1\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 5"}
{"task_id": "Open/146", "completion": "\n    length = 1\n    while length <= K:\n        length = length * K\n        if length % K == 0:\n            return -1\n    return length // K\n"}
{"task_id": "Open/147", "completion": "\n    operations = 0\n    for i in range(0, n) :\n        if arr[i]!= arr[i-1] :\n            operations += abs(arr[i] - arr[i-1])\n            arr[i] = arr[i-1] + arr[i]\n        else :\n            arr[i] = arr[i-1] + arr[i]\n    return operations\n"}
{"task_id": "Open/148", "completion": "\n    sum = 0\n    for i in range(n) :\n        if i == 0 :\n            sum += 3\n        elif i == 1 :\n            sum += 3\n        elif i == 2 :\n            sum += 5\n        else :\n            sum += sum\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    Xor = 0\n    for i in range (len1) :\n        Xor = Xor ^ ord(str1[i])\n    return Xor\n"}
{"task_id": "Open/152", "completion": "\n    \n    binary = bin(n)\n    binary = binary[2:]\n    \n    if binary.count('1') == 0 :\n        return True\n    else:\n        return False\n    "}
{"task_id": "Open/153", "completion": "\n    vowels = ['a','e','i','o','u']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == 0:\n                if s[i] > s[i+1]:\n                    return False\n            elif s[i] > s[i-1]:\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low,high+1):\n        num = str(i)\n        if int(num[-1]) >= k:\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    return math.fabs( 2**(n-1) - n )\n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else :\n        return ( 1/3 ) * ( r * r * r )\n"}
{"task_id": "Open/157", "completion": "\n    new_string = \"\"\n    for i in s :\n        new_string = new_string + i\n    new_string = sorted(new_string)\n    return \"\".join(new_string)\n"}
{"task_id": "Open/158", "completion": "\n    missing = 0\n    for i in range(size) :\n        if ar[i]!= i+1 :\n            missing = i+1\n            break\n    return missing\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i] == str[i-1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] % 2 == 0:\n            return i\n    return None\n"}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n    for i in range(n) :\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "\n    if sx == dx and sy == dy :\n        return True\n    if sx == dx or sy == dy :\n        return True\n    if sx == dx + 1 and sy == dy :\n        return True\n    if sx == dx - 1 and sy == dy :\n        return True\n    if sx == dx and sy == dy + 1 :\n        return True\n    if sx == dx and sy == dy - 1 :\n        return True\n    return False\n"}
{"task_id": "Open/163", "completion": "\n    count = 0\n    if n % 2 == 1 :\n        return 0\n    else :\n        for i in range(1, n+1) :\n            if i % 2 == 0 :\n                count += 1\n            else :\n                break\n        return count\n"}
{"task_id": "Open/164", "completion": "\n    count = {}\n    for i in range(n) :\n        if arr[i] in count :\n            count[arr[i]] += 1\n        else :\n            count[arr[i]] = 1\n    count = {k: v * (v + 1) // 2 for k, v in count.items()}\n    return sum(count.values())\n"}
{"task_id": "Open/165", "completion": "\n    if height == 0 :\n        return 0\n    elif height == 1 :\n        return 1\n    else :\n        return AVLnodes ( height - 1 ) + AVLnodes ( height - 2 ) + 1\n"}
{"task_id": "Open/166", "completion": "\n    steps = 0\n    while source!= dest :\n        if source > dest :\n            steps += 1\n            source -= step\n        else :\n            steps += 1\n            source += step\n    return steps\n"}
{"task_id": "Open/167", "completion": "\n    count = 0\n    nth = 1\n    for i in range(1, n+1) :\n        if i == 1 :\n            count = 1\n        else :\n            count = count + (nth - 1)\n            nth = count\n    return count\n"}
{"task_id": "Open/168", "completion": "\n    max_length = 0\n    max_product = 1\n    for i in arr :\n        max_product *= i\n        if max_product > N :\n            max_length = max(max_length, len(arr) - i)\n    return max_length\n"}
{"task_id": "Open/169", "completion": "\n    sqrt_m_n = math.sqrt((m*m) + (n*n))\n    normal_value = (m*n) / sqrt_m_n\n    return normal_value\n"}
{"task_id": "Open/170", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l,r+1) :\n        if (i % 2 == 0) :\n            if (i % 3 == 0) :\n                count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    result = 1\n    for i in range(m):\n        if n & 1 == 1:\n            result = result ^ 1\n        n = n >> 1\n    return result\n"}
{"task_id": "Open/174", "completion": "\n    count = 0\n    for i in range(L, R - rem + 1):\n        if i % 9 == 0:\n            count += 1\n        if i % 9 == K:\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    product = n * math.log(n,10)\n    return product[:k]\n"}
{"task_id": "Open/176", "completion": "\n    \n    for i in range(n) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    return -1\n\nA = [1,2,3,4,5,6,7,8,9,10]\nn = len(A)"}
{"task_id": "Open/177", "completion": "\n    a.sort()\n    b.sort()\n    min_increase = float('inf')\n    for i in range(len(a)):\n        if a[i] + b[i] <= c[-1]:\n            min_increase = min(min_increase, a[i] + b[i])\n    return min_increase\n"}
