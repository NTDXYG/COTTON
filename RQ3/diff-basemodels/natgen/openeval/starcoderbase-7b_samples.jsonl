{"task_id": "Open/0", "completion": "    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    count = 0\n    for i in range(N):\n        if sum + arr[i] > K:\n            count += 1\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nN = len(arr)\nK = 10"}
{"task_id": "Open/1", "completion": "    arr.sort()\n    min_val = arr[0]\n    for i in range(1,n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val\n"}
{"task_id": "Open/2", "completion": "    # Convert n to binary representation.\n    binary = bin(n)[2:]\n    \n    # Iterate through the range from l to r (inclusive).\n    for i in range(l, r + 1) :\n        # If the bit is 1 in the binary representation, return \"Yes\".\n        if binary[i - 1] == '1' :\n            return \"Yes\"\n    \n    # If no bits are set, return \"No\".\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range( n ) :\n        for j in range( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    sum_a = sum(a)\n    if sum_a % n == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/5", "completion": "    \n    return 1 if x%2 else 0\n"}
{"task_id": "Open/6", "completion": "    missing_elements = []\n    for i in range(len(vec)):\n        if vec[i] < 0:\n            vec[i] = -vec[i]\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            missing_elements.append(i+1)\n    return missing_elements\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                max_length = max(max_length,j-i+1)\n    return max_length\n"}
{"task_id": "Open/8", "completion": "    distinct_prime_factors = set()\n    for i in a :\n        for j in range(1,int(math.sqrt(i))+1) :\n            if i % j == 0 :\n                distinct_prime_factors.add(j)\n                distinct_prime_factors.add(i//j)\n    return len(distinct_prime_factors)\n"}
{"task_id": "Open/9", "completion": "    sum = 0\n    for i in range(1,k+1):\n        sum += abs(arr[0]-arr[i])\n    return sum\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while A and B :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.pop()\n        else :\n            B.appendleft(A[0])\n            A.pop()\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i] % 2 == 0 and array[i]!= 0 and array[i]!= 2:\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range ( len ( s ) ) :\n        for j in range ( i + 1, len ( s ) + 1 ) :\n            if len ( set ( s [ i : j ] ) ) <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    return True\n"}
{"task_id": "Open/14", "completion": "    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    for i in range(t) :\n        a = random.randint(2,n-1)\n        if pow(a,(n-1)//2,n)!= 1 and pow(a,(n-1)//2,n)!= n-1 :\n            return -1\n    return 1\n"}
{"task_id": "Open/16", "completion": "    for i in range(n) :\n        if ( s1[i] == '0' and s2[i] == '1' ) or ( s1[i] == '1' and s2[i] == '0' ) or ( s1[i] == '0' and s2[i] == 'Z' ) or ( s1[i] == 'Z' and s2[i] == '0' ) :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == '1':\n                count += 1\n        else:\n            if s[i] == '0':\n                count += 1\n    return min(count, len(s) - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0:\n        return 0\n    elif x == 0:\n        return 1\n    elif y == 1:\n        return x\n    else:\n        return x + product(x, y-1)\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n):\n        if a[i]%4 == 0:\n            count0 += 1\n        if a[i]%4 == 1:\n            count1 += 1\n        if a[i]%4!= 0 and a[i]%4!= 1:\n            count2 += 1\n        if a[i]%4 == 3:\n            count3 += 1\n    if count0%2 == 0 and count1%2 == 0 and count2%2 == 0 and count3%2 == 0:\n        return 1\n    else:\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_length = 0\n    current_length = 0\n    \n    for i in range(n):\n        if arr[i] > arr[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n            \n    return max(max_length, current_length)\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    count = subsetSum( arr, n, i + 1, sum, count )\n    count = subsetSum( arr, n, i + 1, sum - arr[i], count )\n    return count\n\narr = [ 1, 2, 3, 4, 5 ]\nn = len( arr )\nsum = 10\ncount = 0\n"}
{"task_id": "Open/24", "completion": "    return n * (2 * n - 1)\n"}
{"task_id": "Open/25", "completion": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum + n + 1\n"}
{"task_id": "Open/26", "completion": "    \n    max_sum = 0\n    \n    for i in range(1,n+1):\n        if n%i == 0:\n            max_sum += i\n    \n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return ( a / b ) * 100\n"}
{"task_id": "Open/30", "completion": "    return sum( [ x**2 for x in range(1,n+1) ] ) / n\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n\narr = [1, 3, 5, 7, 9]\nn = len(arr)\nk = 3"}
{"task_id": "Open/32", "completion": "    return 3 ** (n-1)\n"}
{"task_id": "Open/33", "completion": "    term = 1\n    for i in range(1,n+1):\n        term = term * 2 + i - 1\n    return term\n"}
{"task_id": "Open/34", "completion": "    \n    count = 0\n    product = 1\n    \n    for i in a :\n        product *= i\n        \n        if product < k :\n            count += 1\n            \n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1):\n        if str(i).count(str(d)) > 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    for i in range(n):\n        while arr[i] > 0 and arr[i] <= n and arr[arr[i]-1]!= arr[i]:\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n    for i in range(n):\n        if arr[i]!= i+1:\n            return i+1\n    return n+1\n"}
{"task_id": "Open/37", "completion": "    if n == 0 or n == 1 :\n        return 1\n    if n == 2 :\n        return 2\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    sum = 0\n    size = 1\n    while sum > 0 :\n        area = (l * b) / 2\n        sum += area\n        size -= 1\n    return sum\n"}
{"task_id": "Open/39", "completion": "    return N*(N+1)/2\n"}
{"task_id": "Open/40", "completion": "    max_zeros = -1\n    for i in range(n):\n        if arr[i] == 1:\n            max_zeros += 1\n        else:\n            max_zeros = 0\n    return max_zeros\n\narr = [1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"task_id": "Open/41", "completion": "    \n    max_length = 0\n    \n    for i in range(n) :\n        if arr[i] == 0 :\n            count = 1\n            for j in range(i+1,n) :\n                if arr[j] == 0 :\n                    count += 1\n                else :\n                    break\n            if count > max_length :\n                max_length = count\n    \n    return max_length\n"}
{"task_id": "Open/42", "completion": "    max_element = a[0]\n    min_element = a[0]\n    for i in range(1,n-k+1):\n        if a[i] < min_element:\n            min_element = a[i]\n        if a[i+k-1] > max_element:\n            max_element = a[i+k-1]\n    return max_element\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range( n ) :\n        product = 1\n        for j in range( i+1, n ) :\n            product *= array[j]\n            if product <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    sum_diff = 0\n    for i in range(n):\n        sum_diff += abs(arr[i] - i)\n    return sum_diff\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)"}
{"task_id": "Open/45", "completion": "    min_val = min(arr)\n    return min_val * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_distance = 0\n    for i in range(len(array)):\n        diff = abs(array[i] - i)\n        if diff > max_distance:\n            max_distance = diff\n    return max_distance\n"}
{"task_id": "Open/47", "completion": "    return ( ( a * ( x1 - x2 ) + b * ( y1 - y2 ) ) ** 2 ) == ( ( a * x1 + b * y1 ) ** 2 ) + ( ( a * x2 + b * y2 ) ** 2 )\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range(a+1):\n        if (i ^ a) == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_value = 0\n    for i in range(len(L)):\n        max_value = max(max_value, L[i] & R[i])\n    return max_value\n"}
{"task_id": "Open/50", "completion": "    smallest = -1\n    for i in range( n ) :\n        if smallest == -1 or a[i] % smallest == 0 :\n            smallest = a[i]\n        else :\n            break\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += 1/math.pow(3,i)\n    return sum\n"}
{"task_id": "Open/52", "completion": "    result = []\n    for i in range(n):\n        for j in range(n):\n            result.append(arr[i][j] ^ arr[i][j+1] ^ arr[i+1][j] ^ arr[i+1][j+1])\n    return result"}
{"task_id": "Open/53", "completion": "    count = 0\n    for i in range(0,N+1):\n        if i ^ i | i == i:\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "    sum = 0\n    for i in range(n) :\n        sum += a[i]\n    if ( sum + (n-1) ) == k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/55", "completion": "    pass"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    for i in range( len(s) ) :\n        if s[i]!= s[i-1] :\n            max_partitions += 1\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    return N if N % K == 0 else N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = result + var1 + var2 + (var1 * var2)/100\n    for i in range(2,N):\n        result = result + arr[i] + (result * arr[i])/100\n    return result\n"}
{"task_id": "Open/59", "completion": "    for i in range ( reversals ) :\n        start = ranges [ i ] [ 0 ]\n        end = ranges [ i ] [ 1 ]\n        arr [ start ], arr [ end ] = arr [ end ], arr [ start ]\n    return arr [ index ]\n"}
{"task_id": "Open/60", "completion": "    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            count += 1\n    if count >= 0:\n        return count\n    else:\n        return -1\n"}
{"task_id": "Open/62", "completion": "    modifiedStr = \"\"\n    for i in range(len-1,-1,-1):\n        if str[i] > str[i+1]:\n            modifiedStr += str[i] - 1\n            modifiedStr += \"9\"\n        else:\n            modifiedStr += str[i]\n    return modifiedStr\n"}
{"task_id": "Open/63", "completion": "    min_val = min( arr )\n    sum_log = 0\n    for i in range( n ) :\n        sum_log += math.log( arr[i] )\n    return min_val * math.log( n ) - sum_log\n"}
{"task_id": "Open/64", "completion": "    if s == \"\" or s == \"1\" :\n        return \"-1\"\n    \n    max_len = 1\n    for i in range(1, len(s)) :\n        if s[i]!= \"1\" :\n            max_len = max(max_len, i+1)\n    \n    return max_len\n"}
{"task_id": "Open/65", "completion": "    \n    result = []\n    for i in range(n-k):\n        if a[i]!= a[i+1]:\n            result.append(a[i])\n    for i in range(n-k):\n        if a[i] == a[i+1]:\n            result.append(a[i])\n    return len(result)\n"}
{"task_id": "Open/66", "completion": "    arr.sort()\n    if len(arr) % 2 == 0 :\n        median = ( arr[len(arr)//2] + arr[len(arr)//2-1] ) / 2\n    else :\n        median = arr[len(arr)//2]\n    return median\n"}
{"task_id": "Open/67", "completion": "    step_count = 0\n    for i in range(n):\n        if a[i] < 0:\n            step_count += abs(a[i] - 1)\n        elif a[i] > 0:\n            step_count += abs(a[i] - 1)\n    if step_count % 2 == 1:\n        zero_count = 0\n        for i in range(n):\n            if a[i] == 0:\n                zero_count += 1\n        if zero_count > 0:\n            step_count += zero_count\n        else:\n            step_count += 2\n    return step_count\n"}
{"task_id": "Open/68", "completion": "    v = []\n    if n == 1 :\n        return 0\n    else :\n        v.append(n%5)\n        n = n//5\n        while n > 0 :\n            v.append(n%5)\n            n = n//5\n        result = 0\n        for i in range(len(v)-1,-1,-1) :\n            result = result*10 + v[i]\n        return 2*result\n"}
{"task_id": "Open/69", "completion": "    # Step 1. Convert the integer to a string.\n    binary = bin(n)[2:]\n    \n    # Step 2. Iterate through each bit in the string.\n    for bit in binary :\n        # If the bit is 1, increment the bit by 1.\n        if bit == '1' :\n            bit = '0'\n        else :\n            return False\n    \n    # Step 3. If all bits are set to 1, return True.\n    return True\n"}
{"task_id": "Open/70", "completion": "    return x if x > n else n - ( n % x )\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(0, n+1):\n        sum += 2*i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    series = []\n    for i in range(1, n+1):\n        series.append(sum(range(1, i+1)))\n    return sum(series)\n"}
{"task_id": "Open/73", "completion": "    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] == n:\n            max_num += 1\n    return max_num\n"}
{"task_id": "Open/74", "completion": "    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == 2**n:\n            count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    pass"}
{"task_id": "Open/76", "completion": "    \n    changes = 0\n    \n    for i in range(n):\n        if A[i] == 1:\n            changes += 1\n            \n    return changes\n"}
{"task_id": "Open/77", "completion": "    degree = radian * 180 / math.pi\n    return degree\n"}
{"task_id": "Open/78", "completion": "    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1,n+1):\n        sum += a\n    return sum\n"}
{"task_id": "Open/80", "completion": "    max_power = 1\n    for i in range(1,n+1):\n        if n%i == 0:\n            max_power = i\n    return max_power\n"}
{"task_id": "Open/81", "completion": "    count = 0\n    for move in moves:\n        if move == 'U':\n            count += row - 1\n        elif move == 'D':\n            count += 8 - row\n        elif move == 'L':\n            count += column - 1\n        elif move == 'R':\n            count += 8 - column\n    return count\n"}
{"task_id": "Open/82", "completion": "    next_numbers = []\n    for i in range(1, n+1):\n        next_numbers.append(i + i-1)\n    return next_numbers\n"}
{"task_id": "Open/83", "completion": "    # Step 1. Initialize an empty list to store the last occurrence of each character in the string.\n    last_occurrence = []\n    # Step 2. Sort the string and compare each character with its corresponding character in the sorted string.\n    for i in range(len(s)):\n        if s[i] not in last_occurrence:\n            last_occurrence.append(s[i])\n        else:\n            for j in range(len(last_occurrence)):\n                if s[i] == last_occurrence[j]:\n                    last_occurrence[j] = s[i]\n                    break\n    # Step 3. Return the modified string.\n    return ''.join(last_occurrence)\n"}
{"task_id": "Open/84", "completion": "    result = []\n    for i in range(l-1,r):\n        if i%2 == 0:\n            result.append(i)\n        else:\n            result.append(i*2)\n    return sum(result)\n"}
{"task_id": "Open/85", "completion": "    if x == y :\n        return x\n    elif x < y :\n        return getHCF( y, x )\n    else :\n        for i in range( int( x / 2 ) + 1 ) :\n            if x % i == 0 and y % i == 0 :\n                return i\n        return 1\n"}
{"task_id": "Open/86", "completion": "    # Step 1. Initialize an empty list to store the Nth numbers.\n    Nth_numbers = []\n    # Step 2. Initialize a variable to store the sum of the previous two numbers.\n    sum_of_previous_two = A + B\n    # Step 3. Iterate through the sequence starting from index A.\n    for i in range( A, B + 1 ) :\n        # Add the current number to the sum.\n        sum_of_previous_two += i\n        # If the sum is equal to N, return the Nth number.\n        if sum_of_previous_two == N :\n            Nth_numbers.append( i )\n            return Nth_numbers[ -1 ]\n    # Step 4. If no N is found, return -1.\n    return -1\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for i in str :\n        if i == substr :\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    r = r / 1200\n    t = t * 12\n    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n\nemi_calculator(10000, 10, 10)\n"}
{"task_id": "Open/89", "completion": "    counter = 0\n    for i in range(A, B+1):\n        for j in range(A, B+1):\n            for k in range(A, B+1):\n                if i * k > j * j:\n                    counter += 1\n    return counter\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range( l, r+1 ) :\n        if i % 10 in [2,3,9] :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    max_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] == arr[j-1] - arr[i]:\n                max_length = max(max_length, j-i+1)\n    return max_length\n"}
{"task_id": "Open/92", "completion": "    max_len = -1\n    for char in str :\n        if char.isalnum() :\n            max_len += 1\n        else :\n            max_len = max( max_len, 0 )\n    return max_len\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        n = n / 2\n        if n % 2 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "    # Step 1. Initialize an empty string.\n    string = \"\"\n    # Step 2. Iterate through the string in reverse order.\n    for i in range(n-1,-1,-1):\n        # Step 2.1 Subtract the current index from k.\n        k = k - i\n        # Step 2.2 If k is greater than or equal to 26, check if k is greater than or equal to 26.\n        if k >= 26:\n            # Step 2.2.1 If it is, replace the character at the current index with 'z' and subtract 26 from k.\n            string = string + \"z\"\n            k = k - 26\n        # Step 2.3 Otherwise, calculate the ASCII value of the character to be replaced by adding k to 97 and subtracting 1.\n        else:\n            # Step 2.3.1 Replace the character at the current index with the corresponding lowercase letter and subtract the difference between the ASCII values of the replaced character and 'a' from k.\n            string = string + chr(k + 97)\n            k = k - (ord(string[i]) - 97)"}
{"task_id": "Open/95", "completion": "    total_distance = 0\n    while n > 0 :\n        total_distance += fuel/n\n        n -= 1\n    return total_distance\n"}
{"task_id": "Open/96", "completion": "    totalSum = 0\n    for i in range(n):\n        totalSum += arr[i]\n    if totalSum == 0:\n        return 0\n    for i in range(n):\n        if arr[i] == totalSum/3:\n            return 1\n    for i in range(n):\n        if arr[i] == (totalSum*2)/3:\n            return 1\n    return 0\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    count = 0\n    while n > 0 :\n        n = n // 10\n        count += 1\n    return count\n"}
{"task_id": "Open/99", "completion": "    return ( a + k == b + k == c + k ) or ( a - k == b - k == c - k )\n"}
{"task_id": "Open/100", "completion": "    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    \n    if x_bin == y_bin :\n        return True\n    \n    while x_bin!= y_bin :\n        x_bin = x_bin[1:] + x_bin[0]\n        if x_bin == y_bin :\n            return True\n    \n    return False\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i]!= s[i-1]:\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            i += 1\n        else:\n            i += 2\n        count += 1\n    return count\n"}
{"task_id": "Open/103", "completion": "    \n    min_removal = 0\n    \n    for i in range(1,n):\n        if abs(arr[i]-arr[i-1]) < min_removal:\n            min_removal += 1\n            \n    return min_removal"}
{"task_id": "Open/104", "completion": "    pass\n"}
{"task_id": "Open/105", "completion": "    result = 1\n    for i in range(1, n+1):\n        result = result * 2\n    return result\n"}
{"task_id": "Open/106", "completion": "    divisors_sum = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors_sum += i\n            if i!= n // i:\n                divisors_sum += n // i\n    return divisors_sum == n\n"}
{"task_id": "Open/107", "completion": "    # Step 1\n    century = N // 100\n    leapCentury = N // 400\n    # Step 2\n    leapYear = N >> 2\n    # Step 3\n    nonLeapYear = N - leapYear\n    # Step 4\n    if century > 0 or leapCentury > 0:\n        nonLeapYear = nonLeapYear + 1\n        leapYear = leapYear + 1\n    # Step 5\n    totalDays = nonLeapYear + 2 * leapYear\n    # Step 6\n    return totalDays % 7"}
{"task_id": "Open/108", "completion": "    if a < 0:\n        return -1\n    else:\n        return int( ( 2 * a + 1 ) * ( 3 * a + 1 ) / 2 )\n"}
{"task_id": "Open/109", "completion": "    # Step 1. Convert the number n to a string.\n    n = str( n )\n    \n    # Step 2. Initialize an empty dictionary to store the frequency of each digit.\n    freq = {}\n    \n    # Step 3. Iterate through each character in the string.\n    for i in n :\n        # Convert the character to an integer and add it to the dictionary.\n        freq[ int( i ) ] = freq.get( int( i ) ) + 1\n    \n    # Step 4. Iterate through the dictionary in descending order of the integer values.\n    for i in sorted( freq, reverse = True ) :\n        # If the integer value is greater than or equal to d, increment the frequency by 1.\n        if i >= d :\n            freq[ i ] += 1\n    \n    # Step 5. Convert the dictionary back to a string and return it.\n    return str( freq )\n"}
{"task_id": "Open/110", "completion": "    pass\n"}
{"task_id": "Open/111", "completion": "    for i in a :\n        if i % 5 == 0 and i % 3 == 0 :\n            return True\n        elif i % 5 == 0 or i % 3 == 0 :\n            return False\n        else :\n            return False\n"}
{"task_id": "Open/112", "completion": "    # Initialize an empty array.\n    arr = [0]*(n+1)\n    # Set the first element to 4 and the second element to 7.\n    arr[0] = 4\n    arr[1] = 7\n    # Iterate from 3 to n+1.\n    for i in range(3,n+1):\n        # If i is odd, set the value at index i to the value at index i//2 multiplied by 10 and added to 4.\n        if i%2 == 1:\n            arr[i] = arr[i//2]*10 + 4\n        # If i is even, set the value at index i to the value at index (i//2)-1 multiplied by 10 and added to 7.\n        else:\n            arr[i] = arr[i//2-1]*10 + 7\n    # Return the value at index n of the array.\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "    # Initialize an empty array\n    arr = [0] * (n+1)\n    # Iterate from 3 to n+1\n    for i in range(3, n+1):\n        # If i is odd, set the element at index i to 3 multiplied by 10 and added with 3.\n        if i % 2 == 1:\n            arr[i] = 3 * (10 ** (i//2)) + 3\n        # If i is even, set the element at index i to the element at index (i//2)-1 multiplied by 10 and added with 5.\n        else:\n            arr[i] = arr[i//2-1] * (10 ** (i//2)) + 5\n    # Return the element at index n.\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "    # Step 1. Initialize an empty array.\n    array = []\n    \n    # Step 2. Calculate the nth element at index n by dividing the length of the array by n+1.\n    index = len( array ) // ( n + 1 )\n    \n    # Step 3. Set the first element to 1 and the second element to 2.\n    array[ index ] = 1\n    array[ index + 1 ] = 2\n    \n    # Step 4. Iterate through the array starting from index i//2.\n    for i in range( index // 2, len( array ) ) :\n        # If the index is odd, multiply the element at index i by 10 and adding 1.\n        if i % 2 == 1 :\n            array[ i ] = array[ i // 2 ] * 10 + 1\n        # If the index is even, multiply the element at index (i//2)-1 by 10 and adding 2.\n        else :\n            array[ i ] = array[ i // 2 - 1 ] * 10 + 2\n    \n    # Step 5. Return the element at index n.\n    return array[ n ]\n"}
{"task_id": "Open/115", "completion": "    pass\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        area = (l * h) / 2\n        return area\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += char.upper()\n        else:\n            result += char\n    return result\n"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt( 8 * p + 1 ) / 2 ) - 1\n"}
{"task_id": "Open/119", "completion": "    return len(set(arr)) == len(arr)\n"}
{"task_id": "Open/120", "completion": "    # Your code here\n    return len(set(string))\n"}
{"task_id": "Open/121", "completion": "    pass\n"}
{"task_id": "Open/122", "completion": "    max_num = \"\"\n    for i in ss:\n        if i.isdigit():\n            max_num = max_num + i\n        else:\n            if int(max_num) > int(i):\n                max_num = i\n    return max_num\n"}
{"task_id": "Open/123", "completion": "    longest = \"\"\n    for i in range(0,length):\n        if s[i].isdigit():\n            longest += s[i]\n        else:\n            break\n    return longest\n"}
{"task_id": "Open/124", "completion": "    if N > M :\n        N, M = M, N\n    while K > 0 :\n        if N > M :\n            N -= M\n        else :\n            M -= N\n        K -= 1\n    return N * M\n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length:\n        return False\n    \n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            return False\n    \n    return True\n"}
{"task_id": "Open/126", "completion": "    max_power = 1\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            max_power = i\n    return max_power\n"}
{"task_id": "Open/127", "completion": "    return len(A) == len(B) and all(a == b for a, b in zip(A, B))\n"}
{"task_id": "Open/128", "completion": "    return ( x - y )!= 1\n"}
{"task_id": "Open/129", "completion": "    pass"}
{"task_id": "Open/130", "completion": "    steps = 0\n    for i in range(1, n) :\n        steps += abs(arr[i] - arr[i-1])\n    return steps\n"}
{"task_id": "Open/131", "completion": "    return 0 if n%4==0 or n%4==3 else 1\n"}
{"task_id": "Open/132", "completion": "    m = 1\n    sum = 0\n    while m * a <= N :\n        sum += m * (m + 1) / 2\n        m += 1\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    # Step 1. Get the first element of the array.\n    first = arr[0]\n    \n    # Step 2. Get the last element of the array.\n    last = arr[n-1]\n    \n    # Step 3. Check if the first element, the last element, and the length of the array are all odd numbers.\n    if first % 2 == 1 and last % 2 == 1 and n % 2 == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/135", "completion": "    count = 0\n    if N == 1 :\n        return ( R - L + 1 )\n    elif N > 1 :\n        for i in range( L, R + 1 ) :\n            if i % N == 0 :\n                count += 1\n        return count\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "    min_num = arr[0]\n    for i in range(1,n):\n        if arr[i] < min_num:\n            min_num = arr[i]\n    return min_num\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/137", "completion": "    # Step 1\n    digits = [int(x) for x in list(s)]\n    # Step 2\n    digits.sort()\n    # Step 3\n    for digit in digits :\n        if len(digits) == n :\n            return digit\n    # Step 4\n    return None\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += arr[i] - arr[i-1]\n            arr[i] = arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for char in s :\n        sum += ord(char)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    for i in A:\n        if i >= B:\n            count += 1\n    if count < N:\n        return -1\n    return count\n"}
{"task_id": "Open/141", "completion": "    return x * y / math.gcd ( x, y )\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n % 2 == 0:\n        count += 1\n        n = n // 2\n    return count\n"}
{"task_id": "Open/143", "completion": "    \n    # Your code here\n    pass\n"}
{"task_id": "Open/144", "completion": "    max_len = 0\n    for i in range(1,n):\n        if arr[i] > arr[i-1]:\n            max_len = max(max_len,arr[i])\n    return max_len\n\narr = [10,22,9,33,21,50,41,60]\nn = len(arr)"}
{"task_id": "Open/145", "completion": "    for i in range(n) :\n        for j in range(i+1,n) :\n            if arr[i] == k :\n                return arr[i]\n            elif arr[j] == k :\n                return arr[j]\n    return -1\n"}
{"task_id": "Open/146", "completion": "    length = 1\n    while length <= K:\n        if length % K == 0:\n            return length\n        length += 1\n    return -1\n"}
{"task_id": "Open/147", "completion": "    # Your code here\n    return 0\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range(3, n+1):\n        if i == 3:\n            sum += 3\n        elif i == 5:\n            sum += 5\n        else:\n            sum += i\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s**0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    xor = 0\n    for i in range(len1):\n        xor = xor ^ ord(str1[i])\n    return xor\n"}
{"task_id": "Open/152", "completion": "    binary = bin(n)\n    if binary[2:].count('1') > 1 :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/153", "completion": "    vowels = \"aeiou\"\n    for char in s:\n        if char not in vowels:\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high + 1):\n        if str(i)[-1] >= str(k):\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    return int(math.pow(2, math.ceil(math.log(n, 2)))) - n\n"}
{"task_id": "Open/156", "completion": "    if r < 0:\n        return -1\n    else:\n        return (3 * r**2) / 2\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    missing = 0\n    for i in range(1,size):\n        if ar[i]!= ar[i-1]:\n            missing = ar[i-1] + 1\n    return missing\n"}
{"task_id": "Open/159", "completion": "    count = 0\n    prev_char = str[0]\n    for char in str :\n        if char == prev_char :\n            count += 1\n        prev_char = char\n    return count\n"}
{"task_id": "Open/160", "completion": "    # Your code here\n    return None\n"}
{"task_id": "Open/161", "completion": "    \n    xorArr = 0\n    ans = 0\n    \n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n        ans = max(ans, xorArr)\n    \n    return ans\n"}
{"task_id": "Open/162", "completion": "    if sx == dx and sy == dy :\n        return True\n    elif sx == dx :\n        return sy < dy\n    elif sy == dy :\n        return sx < dx\n    else :\n        return False\n"}
{"task_id": "Open/163", "completion": "    if n % 2 == 1 :\n        return 0\n    count = 0\n    while count <= n :\n        if n % 2 == 0 :\n            count += 1\n        else :\n            break\n    return count\n"}
{"task_id": "Open/164", "completion": "    count = 0\n    d = {}\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            count += d[arr[i]]\n        else:\n            count += 1\n    return count * d[arr[n-1]]"}
{"task_id": "Open/165", "completion": "    pass\n"}
{"task_id": "Open/166", "completion": "    steps = 0\n    for i in range(source, dest + 1):\n        if i == dest:\n            steps += 1\n        elif i > dest:\n            steps += 1\n    return steps\n"}
{"task_id": "Open/167", "completion": "    count = 0\n    if n == 0:\n        return 1\n    elif n == 1:\n        count += 1\n    else:\n        while count < n:\n            count += 1\n            if count == 1:\n                count += 1\n            else:\n                count += 1\n    return count\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    max_product = 1\n    \n    for i in range(N):\n        max_product *= arr[i]\n        if max_product > N:\n            max_length = i + 1\n            max_product = arr[i]\n    \n    return max_length\n"}
{"task_id": "Open/169", "completion": "    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range ( n ) :\n        curr_sum = 0\n        for j in range ( i, n ) :\n            curr_sum += arr [ j ]\n            if curr_sum < k :\n                count += 1\n    return count\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range( len( arr ) - 2 ) :\n        for j in range( i + 1, len( arr ) - 1 ) :\n            for k in range( j + 1, len( arr ) ) :\n                if arr[ k ] - arr[ i ] <= L :\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l,r+1):\n        if isPrime(i):\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    result = 1\n    for i in range(m-1,-1,-1):\n        if n & 1 == 1:\n            result = 1\n        n = n >> 1\n    return result\n"}
{"task_id": "Open/174", "completion": "    count = 0\n    for i in range(L, R - (R % 9)):\n        if i % 9 == 0:\n            count += 1\n    for i in range(R, R - (R % 9) + 1, -1):\n        if i % 9 == K:\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    product = n * math.log(n,10)\n    return str(product)[:k]\n"}
{"task_id": "Open/176", "completion": "    pass\n"}
{"task_id": "Open/177", "completion": "    # Step 1. Sort both integers a and b.\n    a = sorted(a)\n    b = sorted(b)\n    \n    # Step 2. Initialize a variable min_increase as infinity.\n    min_increase = float('inf')\n    \n    # Step 3. Iterate through the sorted integers a and b.\n    for i in range(len(a)):\n        # If the sum of a and b is less than or equal to the largest integer, update min_increase.\n        if a[i] + b[i] <= c:\n            min_increase = min(min_increase, c - a[i] - b[i])\n    \n    # Step 4. Return min_increase.\n    return min_increase\n"}
