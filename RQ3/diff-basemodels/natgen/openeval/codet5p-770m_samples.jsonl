{"task_id": "Open/0", "completion": "    \n    sum = 0\n    count = 0\n    \n    for i in arr :\n        sum += i\n        \n    for i in arr :\n        if sum > K :\n            count += 1\n            \n    return count\n"}
{"task_id": "Open/1", "completion": "    arr.sort()\n    min_val = arr[0]\n    for i in range(1,n) :\n        if arr[i] < min_val :\n            min_val = arr[i]\n    return min_val\n\n"}
{"task_id": "Open/2", "completion": "    n = bin(n)\n    for i in range(l,r+1) :\n        if n[i] == '1' :\n            return \"Yes\"\n    return \"No\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range(n) :\n        for j in range(n) :\n            if (A[i] + A[j]) % K == 0 :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/4", "completion": "    if n == 0 :\n        return False\n    elif n == 1 :\n        return a[0] == a[1]\n    else :\n        return isSpiltPossible( n-1, a ) or isSpiltPossible( n-2, a )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/5", "completion": "    return int(bin(x)[2:],2) % 2\n"}
{"task_id": "Open/6", "completion": "    missing = []\n    for i in vec :\n        if i < 0 :\n            missing.append(i)\n    return missing\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    for i in range(2,n+1) :\n        for j in range(n-i+1) :\n            if arr[j] > arr[j-1] :\n                max_length = max(max_length,j+1)\n    return max_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/8", "completion": "    prime_factors = set()\n    for i in a :\n        for j in range(1, int(math.sqrt(i))+1) :\n            if i % j == 0 :\n                break\n        else :\n            prime_factors.add(i)\n    return len(prime_factors)\n\n\n"}
{"task_id": "Open/9", "completion": "    sum = 0\n    for i in range ( 1, n ) :\n        sum += arr[i] - arr[i-1]\n    return min( sum, k )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/10", "completion": "\n    # Step 1. Initialize total time as 0.\n    total_time = 0\n\n    # Step 2. Iterate through the lists A and B simultaneously.\n    for i in range( len(A) ) :\n        if A[i] == B[i] :\n            total_time += 1\n        else :\n            B.popleft()\n            B.append( A[i] )\n            A.popleft()\n\n    # Step 3. Return the total time.\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in array :\n        if i % 2 == 0 :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range( len( s ) ) :\n        if len( set( s[i:i+k] ) ) >= k :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/13", "completion": "    if n == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/14", "completion": "    if n % 4 == 0 :\n        return n\n    elif n % 4 == 1 :\n        return 1\n    elif n % 4 == 2 :\n        return n + 1\n    elif n % 4 == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "    a = random.randint(2,n-1)\n    b = pow(a,(n-1)/2,n)\n    if b == 1 or b == n-1 :\n        return -1\n    else :\n        for i in range(t) :\n            a = random.randint(2,n-1)\n            b = pow(a,(n-1)/2,n)\n            if b == 1 or b == n-1 :\n                return -1\n        return 1\n\n\n"}
{"task_id": "Open/16", "completion": "    if len(s1)!= len(s2) :\n        return False\n    for i in range(len(s1)) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    difference = 0\n    for i in range( length ) :\n        if s[i] == '1' :\n            count += 1\n        else :\n            difference += 1\n    return count, difference\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range ( 1, n + 1 ) :\n        if n % i == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 0\n    elif x == 0 :\n        return 1\n    else :\n        return x * product( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        elif i % 4 == 1 :\n            count1 += 1\n        elif i % 4 == 2 :\n            count2 += 1\n        elif i % 4 == 3 :\n            count3 += 1\n    if count0 == 4 and count1 == 4 and count2 == 4 and count3 == 4 :\n        return 1\n    else :\n        return 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/22", "completion": "    \n    max_length = 0\n    current_length = 0\n    \n    for i in range( n ) :\n        if arr[i] > arr[i-1] :\n            current_length += 1\n        else :\n            max_length = max( max_length, current_length )\n            current_length = 0\n    \n    return max_length\n\n"}
{"task_id": "Open/23", "completion": "    if i == n :\n        return count\n    else :\n        if sum == 0 :\n            count += 1\n        return subsetSum ( arr, n, i + 1, sum, count ) + subsetSum ( arr, n, i + 1, sum - arr[i], count )\n\n"}
{"task_id": "Open/24", "completion": "    return n * (2 * n - 1)\n"}
{"task_id": "Open/25", "completion": "    sum = 0\n    for i in range(1,n+1) :\n        sum += i**2\n    return sum\n"}
{"task_id": "Open/26", "completion": "    \n    max_sum = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            max_sum += i\n    return max_sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/27", "completion": "    \n    if x > y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    return (a / b) * 100\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/30", "completion": "    sum = 0\n    count = 0\n    for i in range ( 1, n+1 ) :\n        sum = sum + i * i\n        count = count + 1\n    return sum / count\n"}
{"task_id": "Open/31", "completion": "    arr.sort()\n    return arr[k-1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/32", "completion": "    \n    chicks = 0\n    for i in range ( 1, n ) :\n        chicks = chicks + 3\n    return chicks\n\n"}
{"task_id": "Open/33", "completion": "    \n    # Step 1. Initialize a variable \"term\" as 1.\n    term = 1\n    \n    # Step 2. Iterate from 1 to n.\n    for i in range ( 1, n + 1 ) :\n        # Calculate the nth term by multiplying the previous term by 2 and adding the difference between the current index and 1.\n        term = term * 2 + i\n        \n    # Step 3. Return the \"term\" variable.\n    return term\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in range( len( a ) ) :\n        for j in range( i + 1, len( a ) ) :\n            if a[i] * a[j] < k :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1,n+1) :\n        str = str(i)\n        if d in str :\n            count += 1\n    return count\n"}
{"task_id": "Open/36", "completion": "    missing = 1\n    for i in range(n) :\n        if arr[i] == missing :\n            missing += 1\n    return missing\n\n"}
{"task_id": "Open/37", "completion": "    if n == 0 or n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    else :\n        dp = [0 for i in range(n+1)]\n        dp[0] = 1\n        dp[1] = 2\n        for i in range(2, n+1) :\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]\n"}
{"task_id": "Open/38", "completion": "    sum = 0\n    while sum < l * b :\n        sum += (l * b) / 2\n        b -= 1\n    return sum\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1,N+1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/40", "completion": "    \n    max_zeros = -1\n    for i in range( n ) :\n        if arr[i] == 1 :\n            max_zeros += 1\n        else :\n            max_zeros = 0\n    return max_zeros\n\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range( n ) :\n        if arr[i] == 0 :\n            max_length = max( max_length, i + 1 )\n    return max_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/42", "completion": "    \n    # Step 1. Initialize a variable max_element as the first element of array a.\n    max_element = a[0]\n    min_element = a[0]\n    \n    # Step 2. Initialize a variable min_element as the first element of array a.\n    for i in range(1,n) :\n        if a[i] < min_element :\n            min_element = a[i]\n            \n    # Step 3. Initialize a variable max_element as the last element of array a.\n    for i in range(n-k,n) :\n        if a[i] > max_element :\n            max_element = a[i]\n            \n    return max_element\n\n\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range( n ) :\n        count += 1\n        for j in range( n ) :\n            if array[i] * array[j] < k :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/44", "completion": "    sum_diff = 0\n    for i in range(n) :\n        sum_diff += abs(arr[i] - arr[i-1])\n    return sum_diff\n\n"}
{"task_id": "Open/45", "completion": "    min = arr[0]\n    product = 1\n    for i in range(1,n) :\n        if arr[i] < min :\n            min = arr[i]\n        product *= arr[i]\n    return product, n - 1\n\n"}
{"task_id": "Open/46", "completion": "\n    max_distance = 0\n    for i in range( len( array ) ) :\n        max_distance = max( max_distance, array[i] - i )\n    return max_distance\n"}
{"task_id": "Open/47", "completion": "    xDiff = x2 - x1\n    yDiff = y2 - y1\n    if xDiff * xDiff + yDiff * yDiff == c :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/48", "completion": "    count = 0\n    for i in range ( 0, a ) :\n        count = count + 1\n        count = count ^ i\n    return count\n"}
{"task_id": "Open/49", "completion": "    max_value = 0\n    for i in range( L, R + 1 ) :\n        max_value = max( max_value, i & L )\n    return max_value\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/50", "completion": "    smallest = -1\n    for i in range(n) :\n        if a[i] % n == 0 :\n            smallest = a[i]\n            break\n    return smallest\n\n"}
{"task_id": "Open/51", "completion": "    sum = 0\n    for i in range ( 1, n + 1 ) :\n        sum += 1 / 3 ** i\n    return sum\n"}
{"task_id": "Open/52", "completion": "    \n    result = []\n    for i in range( n ) :\n        row = []\n        for j in range( n ) :\n            row.append( arr[i][j] )\n        row = row[::-1]\n        result.append( row[0] ^ row[n-1] )\n    return result\n\n"}
{"task_id": "Open/53", "completion": "    \n    count = 0\n    for i in range( N ) :\n        count = count | ( i ^ i )\n    return count\n"}
{"task_id": "Open/54", "completion": "    \n    # Step 1. Calculate the sum of the array elements.\n    sum = 0\n    for i in a :\n        sum += i\n        \n    # Step 2. Calculate the length of the array minus 1.\n    minus1 = 0\n    for i in a :\n        minus1 += i\n        \n    # Step 3. If the sum is equal to k, return True. Otherwise, return False.\n    if ( sum == k ) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/55", "completion": "    return ( (n & (n-1)) == 0 )\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    for i in range( len( s ) ) :\n        if i == 0 :\n            max_partitions = 0\n        elif s[i] == s[i-1] :\n            max_partitions += 1\n        else :\n            max_partitions = max( max_partitions, 1 )\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    for i in range(2, N+1) :\n        result = result + var1 * var2\n        var1 = var2\n        var2 = result\n    return result\n\n"}
{"task_id": "Open/59", "completion": "    if len( arr ) == 0 :\n        return 0\n    if len( arr ) == 1 :\n        return arr[0]\n    if len( arr ) == 2 :\n        return arr[0] + arr[1]\n    if len( arr ) == 3 :\n        return arr[0] + arr[1] + arr[2]\n    if len( arr ) == 4 :\n        return arr[0] + arr[1] + arr[2] + arr[3]\n    if len( arr ) == 5 :\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n    if len( arr ) == 6 :\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n    if len( arr ) == 7 :\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n    if len( arr ) == 8 :\n        return arr[0] +"}
{"task_id": "Open/60", "completion": "    \n    # Step 1. Calculate the square root of the input integer.\n    square_root = int( n ** 0.5 )\n    \n    # Step 2. If the square root is an integer, return True.\n    if type( square_root ) == int :\n        return True\n    \n    # Step 3. Otherwise, return False.\n    else :\n        return False\n\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(a)):\n        if a[i] == b:\n            count += 1\n    if count > 0:\n        return count\n    else:\n        return -1\n"}
{"task_id": "Open/62", "completion": "    newStr = \"\"\n    for i in range( len( str ) - 1 ) :\n        if str[i] > str[i+1] :\n            newStr += str[i]\n            newStr += str[i+1]\n            newStr += \"9\"\n        else :\n            newStr += str[i]\n    return newStr\n"}
{"task_id": "Open/63", "completion": "    if len( arr ) == 0 :\n        return 0\n    if len( arr ) == 1 :\n        return arr[0]\n    return math.log( findMinValue( arr[1:], n ) ) + findMinValue( arr[1:], n ) * len( arr )\n\n"}
{"task_id": "Open/64", "completion": "    if len( s ) == 0 or s[0]!= '1' :\n        return \"-1\"\n    max_len = 0\n    for i in range( 1, len( s ) ) :\n        if s[i]!= '1' :\n            max_len = max( max_len, i )\n    return max_len\n"}
{"task_id": "Open/65", "completion": "    \n    result = []\n    for i in range(n) :\n        if a[i]!= a[i-k] :\n            result.append(a[i])\n    return len(result)\n\n"}
{"task_id": "Open/66", "completion": "    if n == 0 :\n        return 0\n    if k == 0 :\n        return 0\n    if k == 1 :\n        return ( arr[0] + arr[1] ) / 2\n    if k == 2 :\n        return ( arr[0] + arr[1] ) / 2 + ( arr[2] + arr[3] ) / 2\n    if k == 3 :\n        return ( arr[0] + arr[1] ) / 2 + ( arr[2] + arr[3] ) / 2 + ( arr[4] + arr[5] ) / 2\n    if k == 4 :\n        return ( arr[0] + arr[1] ) / 2 + ( arr[2] + arr[3] ) / 2 + ( arr[4] + arr[5] ) / 2 + ( arr[6] + arr[7] ) / 2\n    if k == 5 :\n        return ( arr[0] + arr[1] ) / 2 + ( arr[2] + arr[3] ) / 2 + ( arr[4] + arr[5] ) / 2 + ( arr[6] +"}
{"task_id": "Open/67", "completion": "    \n    step_count = 0\n    for i in a :\n        if i < 0 :\n            step_count += abs(i)\n        else :\n            step_count += 1\n            \n    if n % 2 == 0 :\n        step_count += n // 2\n    \n    return step_count\n\n"}
{"task_id": "Open/68", "completion": "    if n == 1 :\n        return 0\n    else :\n        v = []\n        while n % 5!= 0 :\n            v.append(n % 5)\n            n = n // 5\n        result = 0\n        for i in reversed(v) :\n            result = result * 10 + i\n        return result * 2\n"}
{"task_id": "Open/69", "completion": "\n    # Step 1. Convert the integer to a string.\n    s = str(n)\n\n    # Step 2. Iterate through each bit in the string.\n    for i in range(len(s)) :\n        if s[i] == '1' :\n            s = s[:i] + '1' + s[i+1:]\n\n    # Step 3. If all bits are set to 1, return True.\n    return len(s) == 1\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        return abs(x - n)\n"}
{"task_id": "Open/71", "completion": "    \n    sum = 0\n    \n    for i in range ( n ) :\n        sum = sum + 2\n        \n    return sum\n"}
{"task_id": "Open/72", "completion": "    series = [1]\n    for i in range(1, n+1) :\n        series.append(series[i-1] + 2)\n    return sum(series)\n\n"}
{"task_id": "Open/73", "completion": "    max_num = 0\n    for i in arr :\n        if i == n :\n            max_num += 1\n    return max_num\n\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n) :\n        if (a[i] & (a[i] - 1)) == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    return bin(n)[2:]\n\n"}
{"task_id": "Open/76", "completion": "    \n    changes = 0\n    for i in range( n ) :\n        if A[i] == 1 :\n            changes += 1\n    return changes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/77", "completion": "    \n    degrees = radian * ( 180 / 3.141592653589793 )\n    return degrees\n"}
{"task_id": "Open/78", "completion": "    return math.floor( n / 2 )\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range( 1, n + 1 ) :\n        sum = sum + a\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    max_power = 1\n    for i in range( 1, n ) :\n        if n % i == 0 :\n            max_power = i\n    return max_power\n"}
{"task_id": "Open/81", "completion": "    count = 0\n    for move in moves :\n        if move == 'up' :\n            count += row\n        elif move == 'down' :\n            count += column\n        elif move == 'left' :\n            column -= 1\n        elif move == 'right' :\n            column += 1\n    return count\n"}
{"task_id": "Open/82", "completion": "    next_numbers = []\n    for i in range(1, n+1) :\n        next_numbers.append(i)\n        next_numbers.append(sum(next_numbers))\n    return next_numbers[-1]\n"}
{"task_id": "Open/83", "completion": "    \n    # Step 1\n    last = [0] * 26\n    for i in range( len( s ) ) :\n        last[ ord( s[ i ] ) - ord( 'a' ) ] += 1\n    \n    # Step 2\n    s = sorted( s )\n    \n    # Step 3\n    for i in range( len( s ) ) :\n        if last[ ord( s[ i ] ) - ord( 'a' ) ] == 0 :\n            s[ i ] = s[ i ][ : -1 ]\n            s[ i ] = s[ i ][ : -1 ] + s[ i ][ 1 : ]\n    \n    return ''.join( s )\n"}
{"task_id": "Open/84", "completion": "    result = [0] * n\n    for i in range(l, r+1) :\n        result[i] = result[i-1] + 2\n    return sum(result)\n"}
{"task_id": "Open/85", "completion": "    if x < y :\n        return x\n    else :\n        return y\n"}
{"task_id": "Open/86", "completion": "    if A > B :\n        return -1\n    if A == B :\n        return A\n    if A < B :\n        return findNthNumber ( A + 1, B, N )\n    return findNthNumber ( A, B + 1, N )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    for char in str :\n        if char == substr :\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    emi = (p * r * (1 + r)**t) / ((1 + r)**t - 1)\n    return emi\n"}
{"task_id": "Open/89", "completion": "    counter = 0\n    for i in range(A) :\n        for j in range(B) :\n            for k in range(C) :\n                if i * k > j * j :\n                    counter += 1\n    return counter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/90", "completion": "    count = 0\n    for i in range(l,r+1) :\n        if i % 10 == 2 or i % 10 == 3 or i % 10 == 9 :\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "    max_length = 0\n    for i in range( n ) :\n        for j in range( n ) :\n            if arr[i] + arr[j] == arr[i] + arr[j] :\n                max_length = max( max_length, j - i + 1 )\n    return max_length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/92", "completion": "    max_len = -1\n    for i in str :\n        if i.isalnum() :\n            max_len = max( max_len, len(i) )\n        else :\n            max_len = -1\n    return max_len\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1 :\n        if n % 2 == 0 :\n            count += 1\n        n = n // 2\n    return count\n"}
{"task_id": "Open/94", "completion": "    s = ''\n    for i in range(n) :\n        s += chr( ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s[i]) - (ord(s"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    \n    # Step 1. Calculate the total sum of the array.\n    total = 0\n    for i in arr :\n        total += i\n    \n    # Step 2. Iterate through the array.\n    for i in range( n ) :\n        if i < n - 1 :\n            # Step 3. If no split point is found, return 0.\n            if total - arr[i] == arr[i + 1] - arr[i] :\n                return 1\n        else :\n            # Step 3. If no split point is found, return 0.\n            return 0\n    \n    # Step 3. If no split point is found, return 0.\n    return 0\n"}
{"task_id": "Open/97", "completion": "    if word in sentence :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/98", "completion": "    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "    if a == b == c :\n        return True\n    elif a == b or b == c :\n        return False\n    elif a + k == b + k or b + k == c + k :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/100", "completion": "    if x == y :\n        return True\n    else :\n        x_bin = bin(x)\n        y_bin = bin(y)\n        while x_bin[32:]!= y_bin[32:] :\n            x = x ^ y\n            x_bin = bin(x)\n            y_bin = bin(y)\n        return x == y\n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range( len( s ) ) :\n        if s[i]!= s[i-1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for char in string :\n        if char == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    \n    min_removal = 0\n    for i in range(1, n) :\n        if abs(arr[i] - arr[i-1]) < min_removal :\n            min_removal = abs(arr[i] - arr[i-1])\n        else :\n            min_removal += 1\n    return min_removal\n\n"}
{"task_id": "Open/104", "completion": "    \n    max_set_bits = 0\n    \n    for i in range( left, right + 1 ) :\n        if ( i % 2 == 0 ) :\n            max_set_bits = max( max_set_bits, i )\n            \n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "\n    result = 1\n    for i in range ( 1, n + 1 ) :\n        result = result * 2\n    return result\n"}
{"task_id": "Open/106", "completion": "    divisors_sum = 0\n    for i in range ( 1, int ( n ** 0.5 ) + 1 ) :\n        if n % i == 0 :\n            divisors_sum += i\n    return divisors_sum == n\n"}
{"task_id": "Open/107", "completion": "    oddDays = 0\n    leapYears = 0\n    leapDays = 0\n    leapYears = N // 100\n    leapDays = N // 400\n    N = N - leapYears - leapDays\n    oddDays = N % 7\n    return oddDays\n"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return a**2\n\n"}
{"task_id": "Open/109", "completion": "    \n    # Step 1. Convert the number n to a string.\n    n = str(n)\n    \n    # Step 2. Initialize an empty dictionary to store the frequency of each digit.\n    d = {}\n    \n    # Step 3. Iterate through each character in the string.\n    for i in n :\n        d[i] = d.get(i, 0) + 1\n    \n    # Step 4. Iterate through the dictionary in descending order of the integer values.\n    for i in sorted(d.items(), key=lambda x: x[1], reverse=True) :\n        if i[1] >= d :\n            d[i[0]] = d[i[0]] + 1\n    \n    # Step 5. Convert the dictionary back to a string and return it.\n    return str(d)\n"}
{"task_id": "Open/110", "completion": "    s = str(n)\n    if len(s) == 0 :\n        return False\n    for i in s :\n        if i not in \"0123456789\" :\n            return False\n    return True\n\n"}
{"task_id": "Open/111", "completion": "    \n    # Step 1. Iterate through the list of numbers.\n    for i in range ( len ( a ) ) :\n        # Step 2. Check if the number is divisible by both 5 and 3.\n        if ( a [ i ] % 5 == 0 and a [ i ] % 3 == 0 ) :\n            # Step 3. Check if the number is divisible by either 5 or 3.\n            if ( a [ i ] % 5 == 0 ) :\n                return True\n            # Step 4. Check if the number is not divisible by either 5 or 3.\n            else :\n                return False\n    return False\n"}
{"task_id": "Open/112", "completion": "    arr = [0]*(n+1)\n    arr[0] = 4\n    arr[1] = 7\n    for i in range(2,n+1) :\n        if i%2 == 0 :\n            arr[i] = arr[i//2]*10\n        else :\n            arr[i] = arr[(i//2)-1]*10\n    return arr[n]\n"}
{"task_id": "Open/113", "completion": "\n    # Step 1. Initialize an empty array.\n    array = [0]*(n+1)\n\n    # Step 2. Iterate from 3 to n+1.\n    for i in range(3,n+1) :\n        if i%2 == 0 :\n            array[i] = 3*10 + array[i//2]\n        else :\n            array[i] = (i//2)-1*10 + array[i//2]\n\n    # Step 3. Return the element at index n.\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "    \n    # Step 1. Initialize an empty array.\n    array = [0]*(n+1)\n    \n    # Step 2. Calculate the nth element at index n by dividing the length of the array by n+1.\n    for i in range(n+1) :\n        if i%2 == 0 :\n            array[i] = array[i] * 10 + 1\n        else :\n            array[i] = array[i] * 10 + 2\n    \n    # Step 3. Set the first element to 1 and the second element to 2.\n    array[0] = 1\n    array[1] = 2\n    \n    # Step 4. Iterate through the array starting from index i//2.\n    for i in range(n+1) :\n        if i%2 == 0 :\n            array[i] = array[i] * 10 + 1\n        else :\n            array[i] = array[i] * 10 + 2\n    \n    # Step 5. Return the element at index n.\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "    for i in range(n) :\n        if a[i] % 11 == 0 :\n            return True\n    return False\n"}
{"task_id": "Open/116", "completion": "    if l > 0 and b > 0 and h > 0 :\n        return (l * h) / 2\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "    \n    result = \"\"\n    for char in string :\n        if char.isalpha() :\n            result += char.upper()\n        else :\n            result += char\n    return result\n"}
{"task_id": "Open/118", "completion": "    return int( math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2 )\n"}
{"task_id": "Open/119", "completion": "    set = set()\n    for i in arr :\n        set.add(i)\n    if len(set) == 0 or len(set) == 1 :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/120", "completion": "    code = set()\n    for i in string :\n        code.add(i)\n    return len(code)\n\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    max_num = ''\n    for i in ss :\n        if i.isdigit() :\n            max_num += str(int(i) * 10)\n        else :\n            max_num += str(i)\n    return max_num\n"}
{"task_id": "Open/123", "completion": "    longest = \"\"\n    for i in range( length ) :\n        if s[i].isdigit() :\n            longest = longest + s[i]\n        else :\n            break\n    return longest\n"}
{"task_id": "Open/124", "completion": "    if N > M :\n        N, M = M, N\n    if K == 0 :\n        return N * M\n    else :\n        return remainingArea ( N, M, K - 1 )\n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length :\n        return False\n    for i in range(1,len(string)) :\n        if string[i]!= string[i-1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    \n    max_power = 1\n    \n    for i in range ( 1, n + 1 ) :\n        if n % 2 == 0 :\n            n = n / 2\n        else :\n            max_power = max ( max_power, i )\n            \n    return max_power\n\n"}
{"task_id": "Open/127", "completion": "    A = int(A)\n    B = int(B)\n    if A == B :\n        return True\n    else :\n        return False\n\n"}
{"task_id": "Open/128", "completion": "    return ( x - y )!= 1\n"}
{"task_id": "Open/129", "completion": "    Sn_1 = 0\n    Sn_2 = 0\n    Sn_3 = 0\n    for i in range ( 3, n ) :\n        Sn_3 = Sn_1 + Sn_2\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    \n    # Step 1. Initialize a variable \"steps\" as 0.\n    steps = 0\n    \n    # Step 2. Iterate through the array starting from the second element.\n    for i in range( 1, n ) :\n        # Calculate the absolute difference between the current element and the previous element.\n        steps += abs( arr[i] - arr[i-1] )\n    \n    # Step 3. Return \"steps\".\n    return steps\n"}
{"task_id": "Open/131", "completion": "    \n    return (n % 4) == 0 or (n % 4) == 3\n"}
{"task_id": "Open/132", "completion": "    m = 1\n    sum = 0\n    ans = 0\n    while m <= N :\n        sum += m\n        m += 1\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    \n    if N < 2 :\n        return N\n    elif N < 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    else :\n        return N - 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/134", "completion": "    if len( arr ) == 0 :\n        return False\n    if len( arr ) == 1 :\n        return True\n    if arr[0] % 2 == 0 :\n        return False\n    if arr[-1] % 2 == 0 :\n        return False\n    return True\n\n\n"}
{"task_id": "Open/135", "completion": "    \n    count = 0\n    if N == 1 :\n        count = L + R\n    elif N > 1 :\n        count = L + R + 1\n    return count\n\n"}
{"task_id": "Open/136", "completion": "    min_num = arr[0]\n    for i in range(1,n) :\n        if arr[i] < min_num :\n            min_num = arr[i]\n    return min_num\n\n\n"}
{"task_id": "Open/137", "completion": "    digits = list(s)\n    digits.sort()\n    for i in range(len(digits)) :\n        if i == n :\n            return digits[i]\n    return None\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(n) :\n        if arr[i] > arr[i-1] :\n            count += 1\n            arr[i] = arr[i-1]\n        elif arr[i] < arr[i-1] :\n            arr[i] = arr[i-1]\n    return count\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "Open/139", "completion": "    sum = 0\n    count = 0\n    for c in s :\n        sum += ord(c)\n        count += 1\n    return sum / count\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    for i in A :\n        if i >= B :\n            count += 1\n    if count <= N :\n        return count\n    else :\n        return -1\n\n"}
{"task_id": "Open/141", "completion": "    max_num = max( x, y )\n    lcm = max_num\n    while lcm % x == 0 and lcm % y == 0 :\n        lcm += max_num\n    return lcm\n"}
{"task_id": "Open/142", "completion": "    count = 0\n    while n > 0 :\n        count += n % 2\n        n = n // 2\n    return count\n"}
{"task_id": "Open/143", "completion": "    sum = 0\n    for i in range( n ) :\n        sum = sum ^ arr[i]\n    if sum == n :\n        return i\n    else :\n        return -1\n\n\narr = [1,2,3,4,5]\nn = len(arr)"}
{"task_id": "Open/144", "completion": "    max_len = 0\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            max_len = max(max_len,i)\n    return max_len\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/145", "completion": "    if len(arr) == 0 :\n        return -1\n    elif len(arr) == 1 :\n        return arr[0]\n    else :\n        for i in range(0, len(arr)) :\n            if arr[i] == k :\n                return arr[i]\n        return -1\n"}
{"task_id": "Open/146", "completion": "    length = 1\n    while length <= K :\n        length += 1\n    return length\n"}
{"task_id": "Open/147", "completion": "    operations = 0\n    prev = arr[0]\n    for i in range(1, n) :\n        if arr[i]!= prev :\n            operations += 1\n        prev = arr[i]\n    return operations\n"}
{"task_id": "Open/148", "completion": "    sum = 0\n    for i in range ( n ) :\n        sum = sum + i\n    return sum\n"}
{"task_id": "Open/149", "completion": "    if s == 0 :\n        return 0\n    else :\n        return s / 2\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    xor = 0\n    for i in range(len1) :\n        xor = xor ^ ord(str1[i])\n    return xor\n"}
{"task_id": "Open/152", "completion": "\n    # Step 1. Convert the integer to its binary representation.\n    bin_n = bin(n)[2:]\n\n    # Step 2. Check if the binary representation contains consecutive 1's.\n    if bin_n.count( '1' ) > bin_n.count( '0' ) :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/153", "completion": "    vowels = \"aeiou\"\n    for i in s :\n        if i not in vowels :\n            return False\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high+1) :\n        str = str(i)\n        if str[-1] >= k :\n            count += 1\n    return count\n\n"}
{"task_id": "Open/155", "completion": "    return math.fabs(n) ** 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/156", "completion": "    \n    if r < 0 :\n        return -1\n    \n    return 3.14 * r ** 2\n\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    missing = 0\n    for i in range(size) :\n        missing = (missing + ar[i]) % size\n    return missing\n\nar = [1,2,3,4,5,6,7,8,9]\nsize = len(ar)"}
{"task_id": "Open/159", "completion": "    \n    count = 0\n    for i in range( len( str ) ) :\n        if str[ i ] == \"010\" :\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "    \n    # Step 1. Initialize an empty dictionary to store the count of each element in the array.\n    count = {}\n    \n    # Step 2. Iterate through the array and update the count in the dictionary.\n    for i in arr :\n        if i in count :\n            count[i] += 1\n        else :\n            count[i] = 1\n    \n    # Step 3. Iterate through the dictionary and check if the count is odd.\n    for i in count :\n        if count[i] % 2 == 1 :\n            return i\n    \n    # Step 4. If no element is found, return None.\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range( n ) :\n        xorArr = xorArr ^ arr[i]\n        ans = ans if xorArr > ans else ans\n    return ans\n"}
{"task_id": "Open/162", "completion": "    if (dx > 0) and (dy > 0) :\n        return False\n    elif (dx < 0) and (dy < 0) :\n        return False\n    elif (dx > 0) and (dy > 0) :\n        return True\n    elif (dx < 0) and (dy < 0) :\n        return False\n    else :\n        return True\n"}
{"task_id": "Open/163", "completion": "    \n    if n % 2 == 0 :\n        return 0\n    \n    count = 0\n    \n    while count <= n :\n        if n % 2 == 0 :\n            count += 1\n        else :\n            break\n    \n    return count\n\n"}
{"task_id": "Open/164", "completion": "    \n    # Step 1. Initialize an empty dictionary to store the count of each element.\n    count = {}\n    \n    # Step 2. Iterate through the array.\n    for i in range( n ) :\n        if arr[i] in count :\n            count[arr[i]] += 1\n        else :\n            count[arr[i]] = 1\n    \n    # Step 3. Initialize a variable count to 0.\n    count = 0\n    \n    # Step 4. Iterate through the array.\n    for i in range( n ) :\n        if arr[i] in count :\n            count += 1\n        else :\n            count += 1\n            count = count * count[arr[i]]\n    \n    # Step 5. Multiply the count by the value in the dictionary.\n    return count\n"}
{"task_id": "Open/165", "completion": "    if height == 0 :\n        return 0\n    elif height == 1 :\n        return 1\n    else :\n        return AVLnodes(height-1) + 1\n"}
{"task_id": "Open/166", "completion": "    if source == dest :\n        return 0\n    if source < dest :\n        return steps ( source, step, dest ) + 1\n    else :\n        return steps ( source, -step, dest ) + 1\n\n"}
{"task_id": "Open/167", "completion": "    \n    count = 0\n    result = \"1\"\n    \n    for i in range ( n ) :\n        count = 0\n        result = \"\"\n        for j in range ( len ( result ) ) :\n            if result[ j ] == \"1\" :\n                count += 1\n            else :\n                result += str ( count ) + \"1\"\n                count = 1\n        result += str ( count ) + \"1\"\n        \n    return result\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    max_product = 1\n    for i in range( len( arr ) ) :\n        max_product = max( max_product * arr[i], 1 )\n        if max_product > N :\n            max_length = i + 1\n    return max_length\n\n"}
{"task_id": "Open/169", "completion": "    return (m * n) / math.sqrt( (m * m) + (n * n) )\n"}
{"task_id": "Open/170", "completion": "    count = 0\n    for i in range(n) :\n        sum = 0\n        for j in range(i,n) :\n            sum += arr[j]\n            if sum < k :\n                count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            for k in range(j+1,n) :\n                if arr[k] - arr[i] <= L :\n                    count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range( l, r + 1 ) :\n        if isPrime( i ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    result = 1\n    for i in range( m ) :\n        result = result << 1\n        result = result | n\n        n = n >> 1\n    return result\n"}
{"task_id": "Open/174", "completion": "    \n    # Step 1. Initialize a count variable as 0.\n    count = 0\n    \n    # Step 2. Iterate through numbers from L to R - rem.\n    for num in range ( L, R, -1 ) :\n        if num % 9 == 0 :\n            count += 1\n        else :\n            rem = num % 9\n            if rem == K :\n                count += 1\n    \n    # Step 3. Iterate through numbers from R to R - rem.\n    for num in range ( R, R - 1, -1 ) :\n        if num % 9 == K :\n            count += 1\n    \n    # Step 4. Return the count.\n    return count\n"}
{"task_id": "Open/175", "completion": "    product = n * n\n    log = math.log(n)\n    return str(product)[0:k] + str(log)[0:k]\n\n"}
{"task_id": "Open/176", "completion": "    for i in range(n) :\n        if A[i] > A[i-1] and A[i] < A[i+1] :\n            return A[i]\n    return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Open/177", "completion": "    \n    # Step 1. Sort both integers a and b.\n    a = sorted(a)\n    b = sorted(b)\n    \n    # Step 2. Initialize a variable min_increase as infinity.\n    min_increase = float('inf')\n    \n    # Step 3. Iterate through the sorted integers a and b.\n    for i in range(len(a)):\n        if a[i] + b[i] <= c:\n            min_increase = min(min_increase, a[i] + b[i] - c)\n            \n    return min_increase\n"}
