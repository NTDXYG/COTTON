{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "    paren_list = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')':\n            if current_group:\n                paren_list.append(current_group)\n                current_group = ''\n            paren_list.append(char)\n    if current_group:\n        paren_list.append(current_group)\n    return paren_list\n\n"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    if integer_part < number:\n        return integer_part\n    else:\n        return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"Cannot calculate mean absolute deviation on empty list\")\n    x_mean = sum(numbers) / n\n    return sum(abs(x - x_mean) for x in numbers) / n\n\n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        if numbers[i] == numbers[i + 1]:\n            result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "    # Step 1. Initialize an empty list to store the levels of nesting.\n    levels_of_nesting = []\n\n    # Step 2. Initialize a variable to keep track of the current level of nesting.\n    current_level = 0\n\n    # Step 3. Iterate through each character in the input string.\n    for char in paren_string:\n        # -If the character is an opening parenthesis, increment the current level.\n        if char == '(':\n            current_level += 1\n        # -If the character is a closing parenthesis, decrement the current level.\n        elif char == ')':\n            current_level -= 1\n        # -If the current level is greater than the maximum level, update the maximum level.\n        if current_level > levels_of_nesting[-1]:\n            levels_of_nesting.append(current_level)\n\n    return levels_of_nesting\n\n"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]\n\n"}
{"task_id": "HumanEval/8", "completion": "    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_ += i\n        product *= i\n    return sum_, product\n\n"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[i])\n        else:\n            max_list.append(max(numbers[i], max_list[i-1]))\n    return max_list\n\n"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return ''\n    \n    # Step 1. Split the string into two parts: the prefix and the suffix.\n    prefix, suffix = string[0], string[1:]\n    \n    # Step 2. Initialize two pointers, one at the beginning of the string and one at the end.\n    left, right = 0, len(suffix) - 1\n    \n    # Step 3. Iterate until the two pointers meet or cross each other.\n    while left < right:\n        if prefix[left]!= suffix[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    # Step 4. If the two pointers meet or cross each other, return True.\n    return True\n\n"}
{"task_id": "HumanEval/11", "completion": "    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n"}
{"task_id": "HumanEval/12", "completion": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n\n"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "    return''.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "    parsed_music = []\n    for char in music_string:\n        if char == 'o':\n            parsed_music.append(4)\n        elif char == 'o|':\n            parsed_music.append(2)\n        elif char == '.':\n            parsed_music.append(1)\n    return parsed_music\n\n"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "    numbers = list(map(int, numbers.split()))\n    numbers.sort()\n    return \" \".join(map(str, numbers))\n\n"}
{"task_id": "HumanEval/20", "completion": "    smallest = float('inf')\n    larger = float('-inf')\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        elif num > larger:\n            larger = num\n    return smallest, larger\n\n"}
{"task_id": "HumanEval/21", "completion": "    min_number = min(numbers)\n    max_number = max(numbers)\n    diff = max_number - min_number\n    if diff == 0:\n        return numbers\n    return [(x - min_number) / diff for x in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: isinstance(x, int), values))\n\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "    largest = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"}
{"task_id": "HumanEval/32", "completion": "    result = 0\n    for i, coeff in enumerate(xs):\n        if i % 2 == 0:\n            result *= x\n        else:\n            result += coeff\n    return result\n\n"}
{"task_id": "HumanEval/33", "completion": "    l_ = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_.append(l[i])\n        else:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "    max_value = l[0]\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n        else:\n            l_.append(l[i])\n            l_.append(l[i])\n    l_.sort()\n    return l_\n"}
{"task_id": "HumanEval/38", "completion": "    encoded_string = []\n    for i in range(0, len(s), 3):\n        group = s[i:i + 3]\n        if len(group) < 3:\n            encoded_string.append(group)\n        else:\n            encoded_string.append(group[1:] + group[0])\n    return \"\".join(encoded_string)\n\n"}
{"task_id": "HumanEval/39", "completion": "    if n < 2:\n        return n\n    a, b = 0, 1\n    for i in range(2, n):\n        if b % i == 0:\n            a = b\n            b = i\n    return b\n"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        collisions = 0\n        for i in range(1, n):\n            distance = abs(i - (n - i))\n            if distance < abs(i - (n - i - 1)):\n                collisions += 1\n        return collisions\n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"}
{"task_id": "HumanEval/45", "completion": "    return a * h / 2\n"}
{"task_id": "HumanEval/46", "completion": "    if n == 0 or n == 1:\n        return n\n    a, b = 0, 1\n    for i in range(2, n+1):\n        c = a + b\n        a, b = b, c\n    return b\n"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n"}
{"task_id": "HumanEval/48", "completion": "    if len(text) < 2:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i > t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "    return len(set(s0) & set(s1)) == len(set(s0)) == len(set(s1))\n\n"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "    l.sort()\n    if l == sorted(l):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))\n\n"}
{"task_id": "HumanEval/59", "completion": "    if n <= 1:\n        return n\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "    derivative = []\n    for i in range(len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative\n"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in 'aeiouy':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "    # Step 1. Convert the integer x to a string.\n    x_str = str(x)\n    # Step 2. Check if the shift is greater than the number of digits.\n    if shift > len(x_str):\n        # Step 3. Check if the shift is equal to the number of digits.\n        if shift == len(x_str):\n            # If true, shift the digits right by shift and return the resulting string.\n            return x_str[-shift:] + x_str[:-shift]\n        else:\n            # If true, reverse the shift and return the reversed string.\n            return x_str[-shift:] + x_str[:-shift][::-1]\n    else:\n        # If true, shift the digits right by shift and return the resulting string.\n        return x_str[-shift:] + x_str[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = s.split(\" \")\n    apples = int(apples)\n    oranges = int(oranges)\n    mango_fruits = apples // oranges\n    return mango_fruits\n"}
{"task_id": "HumanEval/68", "completion": "    plucked_nodes = []\n\n    if len(arr) == 0:\n        return plucked_nodes\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            plucked_nodes.append(arr[i])\n\n    plucked_nodes.sort()\n    return plucked_nodes\n\n"}
{"task_id": "HumanEval/69", "completion": "    # Step 1. Initialize a dictionary to store the frequency of each integer.\n    freq = {}\n    # Step 2. Iterate through the list.\n    for i in lst:\n        # If the integer is greater than zero, update the frequency of the integer.\n        if i > 0:\n            freq[i] = freq.get(i, 0) + 1\n    # Step 3. Iterate through the dictionary and check if any of the frequencies are greater than or equal to the integer itself.\n    for i in freq:\n        if freq[i] >= i:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst\n    minimum = lst[0]\n    maximum = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < minimum:\n            minimum = lst[i]\n        elif lst[i] > maximum:\n            maximum = lst[i]\n    return [minimum] + strange_sort_list(lst[1:]) + [maximum]\n\n"}
{"task_id": "HumanEval/71", "completion": "    # Step 1. Calculate the sum of any two sides of the triangle.\n    s = (a + b + c) / 2\n    # Step 2. Check if the sum of any two sides is greater than the third side.\n    if s < a or s < b or s < c:\n        return -1\n    # Step 3. Calculate the area of the triangle using Heron's formula.\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    # Step 4. Round the area to 2 decimal points.\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "    sum_of_elements = sum(q)\n    if sum_of_elements <= w:\n        return True\n    else:\n        return False\n\nwill_it_fly([1, 2], 5)\nwill_it_fly([3, 2, 3], 1)\nwill_it_fly([3], 5)\nwill_it_fly([3, 2, 3], 9)\nwill_it_fly([3, 2, 3], 10)\nwill_it_fly([3, 2, 3], 11)\nwill_it_fly([3, 2, 3], 12)\nwill_it_fly([3, 2, 3], 13)\nwill_it_fly([3, 2, 3], 14)\nwill_it_fly([3, 2, 3], 15)\nwill_it_fly([3, 2, 3], 16)\nwill_it_fly([3, 2, 3], 17)\nwill_it_fly([3, 2, 3], 18)\nwill_it_fly([3, 2, 3], 19)\nwill_it_fly([3, 2, 3], 20)"}
{"task_id": "HumanEval/73", "completion": "    if not arr:\n        return 0\n    \n    dp = [[0] * len(arr) for _ in range(len(arr))]\n    \n    for i in range(len(arr)):\n        dp[i][i] = len(arr)\n    \n    for i in range(len(arr)-1, -1, -1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n    \n    return dp[0][len(arr)-1]\n"}
{"task_id": "HumanEval/74", "completion": "    count = 0\n    for i in lst1:\n        if i not in lst2:\n            count += 1\n    if count == len(lst2):\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, 100):\n        if a % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x <= n:\n        return False\n    while x % n == 0:\n        x = x // n\n    if x == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/77", "completion": "    cube = True\n    for i in str(a):\n        if i.isdigit():\n            cube = cube and int(i)**3 == a\n    return cube\n"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    num = num.upper()\n    for i in range(len(num)):\n        if num[i] in \"ABCDEF\":\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "    return \"db\" + str(bin(decimal)[2:]) + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(1, len(s)):\n        if s[i]!= s[i-1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    grades = sorted(grades)\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append('A+')\n        elif grade > 3.3:\n            letter_grades.append('A')\n        elif grade > 3.0:\n            letter_grades.append('A-')\n        elif grade > 2.7:\n            "}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, n+1):\n        if i[0] == 1 or i[-1] == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "    sum_digits = 0\n    \n    # Step 1. Initialize a variable sum_digits as 0.\n    sum_digits = 0\n    \n    # Step 2. Convert N to binary representation.\n    binary_rep = bin(N)[2:]\n    \n    # Step 3. Iterate through each digit in the binary representation.\n    for digit in binary_rep:\n        sum_digits += int(digit)\n    \n    # Step 4. Return sum_digits.\n    return sum_digits\n"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return''.join(words)\n\n"}
{"task_id": "HumanEval/87", "completion": "    row_coordinates = []\n    for i in range(len(lst)):\n        row_coordinates.append((i, lst[i].index(max(lst[i]))))\n    row_coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return sorted(row_coordinates, key=lambda x: (x[0], -x[1]))\n"}
{"task_id": "HumanEval/88", "completion": "    # Step 1. Create a copy of the given array.\n    array = array[:]\n\n    # Step 2. Calculate the sum of the first index value and last index value.\n    sum = 0\n    for i in range(len(array)):\n        sum += array[i]\n\n    # Step 3. If the sum is odd, sort the array in ascending order.\n    if sum % 2!= 0:\n        for i in range(len(array)):\n            for j in range(i + 1, len(array)):\n                if array[i] > array[j]:\n                    array[i], array[j] = array[j], array[i]\n\n    # Step 4. If the sum is even, sort the array in descending order.\n    else:\n        for i in range(len(array)):\n            for j in range(i + 1, len(array)):\n                if array[i] < array[j]:\n                    array[i], array[j] = array[j], array[i]\n\n    return array\n\n"}
{"task_id": "HumanEval/89", "completion": "    # Step 1. Create an empty string to store the encrypted string.\n    encrypted_string = \"\"\n    # Step 2. Iterate through each character in the input string.\n    for char in s:\n        # Step 3. Find the index of the character in the alphabet.\n        index = alphabet.index(char)\n        # Step 4. Shift the index down by two multiplied to two places.\n        index = index - 2\n        # Step 5. Append the encrypted character to the encrypted string.\n        encrypted_string = encrypted_string + alphabet[index]\n    # Step 6. Return the encrypted string.\n    return encrypted_string\n"}
{"task_id": "HumanEval/90", "completion": "    smallest = None\n    second_smallest = None\n    \n    for num in lst:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num > smallest:\n            second_smallest = num\n    \n    return second_smallest\n"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or x == z + y:\n        return True\n    elif x == y or x == z or y == z:\n        return False\n    else:\n        return any_int(x, y, z)\n"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "    max_prime = None\n    sum_digits = 0\n    for i in lst:\n        if is_prime(i):\n            if max_prime is None:\n                max_prime = i\n            else:\n                max_prime = max(max_prime, i)\n        else:\n            if max_prime is not None:\n                sum_digits += int(str(max_prime)[-1])\n                max_prime = None\n    return sum_digits\n"}
{"task_id": "HumanEval/95", "completion": "    if dict == {}:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n    for key in dict.keys():\n        if key.isupper():\n            if not key.islower():\n                return False\n    return True\n\n"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "    product = 0\n    for i in range(len(str(a))):\n        product += a // 10**i * b % 10\n    return product\n"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "    # Step 1. Initialize a variable closest_integer as None.\n    closest_integer = None\n\n    # Step 2. Check if the value is equidistant from two integers.\n    if int(value) % 2 == 0:\n        # If yes, round the value away from zero.\n        closest_integer = int(value)\n    else:\n        # If no, return the closest_integer.\n        closest_integer = int(value)\n\n    # Step 3. Round the value away from zero to get the closest integer.\n    closest_integer = int(round(value))\n\n    # Step 4. Return the closest_integer.\n    return closest_integer\n\n"}
{"task_id": "HumanEval/100", "completion": "    # initialize an empty list to store the count of stones in each level\n    count_list = []\n    # iterate from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # if n is odd, append 1 to the list\n        if i % 2 == 1:\n            count_list.append(1)\n        # if n is even, append 1 to the list\n        else:\n            count_list.append(1)\n    # return the length of the list\n    return len(count_list)\n\n"}
{"task_id": "HumanEval/101", "completion": "    words = s.split(', ')\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "    for num in range(x, y + 1):\n        if num % 2 == 0:\n            return num\n    return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        return int((n + m) / 2)\n\n"}
{"task_id": "HumanEval/104", "completion": "    # Step 1. Initialize an empty set to store unique digits.\n    unique_digits = set()\n\n    # Step 2. Iterate through each element in the input list.\n    for num in x:\n        # Step 3. Convert the element to a string.\n        num_str = str(num)\n        # Step 4. Check if the length of the string is even.\n        if len(num_str) % 2 == 0:\n            # If it is, add it to the set.\n            unique_digits.add(num)\n\n    # Step 5. Convert the set back to a list and sort it.\n    return sorted(unique_digits)\n"}
{"task_id": "HumanEval/105", "completion": "    # Step 1. Reverse the resulting array.\n    arr.reverse()\n    \n    # Step 2. Iterate through the sorted array.\n    #         -For each element, iterate through the remaining elements.\n    #             -If the element is greater than 1, replace it with its corresponding name from the dictionary.\n    for i in range(len(arr)):\n        if arr[i] > 1:\n            arr[i] = str(arr[i])\n            for j in range(i + 1, len(arr)):\n                if arr[j] > 1:\n                    arr[j] = str(arr[j])\n    \n    # Step 3. Return the modified array.\n    return arr\n\n"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i + 1)\n    return result\n\n"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) < 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return False\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[left]:\n            left = mid + 1\n        elif arr[mid] < arr[right]:\n            right = mid - 1\n        else:\n            return False\n    return True\n"}
{"task_id": "HumanEval/110", "completion": "    # Step 1. Check if either lst1 or lst2 is empty. If so, return \"NO\".\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    # Step 2. Check if the length of lst1 is less than the length of lst2. If so, return \"YES\".\n    if len(lst1) < len(lst2):\n        return \"YES\"\n    # Step 3. Check if the length of lst1 is equal to the length of lst2. If so, return \"YES\".\n    if len(lst1) == len(lst2):\n        return \"YES\"\n    # Step 4. Check if the length of lst1 is equal to the length of lst2. If so, return \"NO\".\n    if len(lst1) == len(lst2):\n        return \"NO\"\n    # Step 5. If none of the above conditions are met, return \"NO\".\n    return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "    d = {}\n    for letter in test.lower():\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d\n"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n"}
{"task_id": "HumanEval/113", "completion": "    odd_count = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j % 2!= 0:\n                count += 1\n        odd_count.append(count)\n    return odd_count\n"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                count += 1\n    return count\n\n"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "    words = []\n    words = s.split()\n    for word in words:\n        if len(word) == len(s) - n:\n            words.append(word)\n    return words\n"}
{"task_id": "HumanEval/118", "completion": "    closest_vowel = \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in \"aeiouAEIOU\":\n            closest_vowel = word[i]\n            break\n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "    if len(lst) < 2:\n        return False\n    \n    start = 0\n    end = len(lst) - 1\n    \n    while start < end:\n        if lst[start] == lst[end]:\n            start += 1\n            end -= 1\n        else:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/120", "completion": "    # Step 1. Create a list of length k with the maximum k numbers in arr.\n    # Step 2. Sort the list of length k in ascending order.\n    # Step 3. Return the sorted list.\n    # Time: O(n)\n    # Space: O(n)\n    # n = len(arr)\n    # k = min(k, n)\n    # res = []\n    # for i in range(k):\n    #     max_num = -math.inf\n    #     for j in range(i, n):\n    #         if arr[j] > max_num:\n    #             max_num = arr[j]\n    #     res.append(max_num)\n    # return res\n\n    # Step 1. Create a list of length k with the maximum k numbers in arr.\n    # Step 2. Sort the list of length k in ascending order.\n    # Step 3. Return the sorted list.\n    # Time: O(n log k)\n    # Space: O(n)\n    # n = len(arr)\n    # k = min(k, n)\n"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(len(arr)):\n        if len(str(arr[i])) >= k:\n            sum += arr[i]\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "    odd_numbers = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        odd_numbers.append(n)\n    return sorted(odd_numbers)\n\n"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        date_list = date.split('-')\n        month = int(date_list[0])\n        day = int(date_list[1])\n        year = int(date_list[2])\n        if month < 1 or month > 12:\n            return False\n        if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day > 31:\n                return False\n        if month in (4, 6, 9, 11):\n            if day < 1 or day > 30:\n                return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False\n\n"}
{"task_id": "HumanEval/125", "completion": "    words = []\n    words = txt.split()\n    count = 0\n    for i in range(len(txt)):\n        if ord(txt[i]) >= 97 and ord(txt[i]) <= 122:\n            count += 1\n    return words\n"}
{"task_id": "HumanEval/126", "completion": "    if lst == [] or len(lst) == 1:\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "    # Step 1. Calculate the length of the intersection of the two intervals.\n    intersection_length = end_1 - start_1 + 1\n    # Step 2. Check if the length of the intersection is a prime number.\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "    sum = 0\n    for i in arr:\n        magnitude = abs(i)\n        if magnitude == 0:\n            continue\n        if i > 0:\n            sum += magnitude * 1\n        elif i < 0:\n            sum += magnitude * -1\n        else:\n            sum += magnitude * 0\n    return sum\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    if not grid or not k:\n        return []\n    \n    dp = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    \n    # Step 1. Initialize a 2D array dp of size N x N, where dp[i][j] represents the minimum path length k in the grid.\n    for i in range(len(grid)):\n        dp[i][0] = grid[i][0]\n    for j in range(len(grid[0])):\n        dp[0][j] = grid[0"}
{"task_id": "HumanEval/130", "completion": "    tribonacci = []\n    tribonacci.append(0)\n    tribonacci.append(1)\n    for i in range(2, n + 1):\n        tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci\n"}
{"task_id": "HumanEval/131", "completion": "    # Step 1. Convert the integer n to a string.\n    n = str(n)\n    # Step 2. Initialize a variable \"product\" as 1.\n    product = 1\n    # Step 3. Iterate through each character in the string.\n    for i in range(len(n)):\n        # -If the character is a digit, multiply it with the product.\n        if n[i].isdigit():\n            product *= int(n[i])\n    # Step 4. If the product is even, return 0.\n    if product % 2 == 0:\n        return 0\n    # Step 5. Return the product.\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "    sum_squares = 0\n    for i in lst:\n        sum_squares += (i ** 2)\n    return sum_squares\n"}
{"task_id": "HumanEval/134", "completion": "    return not (txt[-1].isalpha() and not txt[-1].isalpha() in txt.split())\n\n"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "    largest_smallest_integers = None\n    smallest_smallest_integers = None\n    for i in lst:\n        if i < 0:\n            if largest_smallest_integers == None:\n                largest_smallest_integers = i\n            elif largest_smallest_integers < i:\n                largest_smallest_integers = i\n        elif i > 0:\n            if smallest_smallest_integers == None:\n                smallest_smallest_integers = i\n            elif smallest_smallest_integers > i:\n                smallest_smallest_integers = i\n    return (largest_smallest_integers, smallest_smallest_integers)\n\n"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "HumanEval/138", "completion": "    sum_even = 0\n    for i in range(2, 5):\n        if n % i == 0:\n            sum_even += i\n    return sum_even == n\n"}
{"task_id": "HumanEval/139", "completion": "    special_factorial = 1\n    for i in range(1, n+1):\n        special_factorial *= i\n    return special_factorial\n\n"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \" and result!= \"\":\n            result += \"_\"\n        elif char == \" \" and result == \"\":\n            result += char\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) == 0:\n        return 'No'\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0].isalpha():\n        return 'No'\n    if file_name[1:].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\n"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    words.sort(key=len, reverse=True)\n    return \" \".join(words)\n"}
{"task_id": "HumanEval/144", "completion": "    x = str(x)\n    n = str(n)\n    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x = int(x[0]) / int(x[1])\n    n = int(n[0]) / int(n[1])\n    if x == int(x) and n == int(n):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/145", "completion": "    # Step 1. Convert the list of integers to a list of characters.\n    chars = []\n    for num in nums:\n        chars.append(str(num))\n\n    # Step 2. Sort the list of characters in ascending order based on the sum of their digits.\n    chars.sort(key=lambda x: sum(int(i) for i in x))\n\n    # Step 3. Return the sorted list.\n    return chars\n\n"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2!= 0 and num % 10!= 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n    \n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "    # Step 1. Create a list of all planet orbits, located between the orbit of planet1 and planet2, sorted by the proximity to the sun.\n    planet_orbits = []\n    for planet in planets:\n        if planet == planet1 or planet == planet2:\n            planet_orbits.append(planet)\n    planet_orbits.sort(key=lambda x: distance(x, planet1))\n    # Step 2. If planet1 or planet2 are not correct, return an empty tuple.\n    if planet_orbits == [] or planet_orbits == None:\n        return ()\n    # Step 3. Calculate the distance between planet1 and planet2.\n    distance = distance(planet1, planet2)\n    # Step 4. Iterate through each planet in the list.\n    for planet in planet_orbits:\n        # Step 5. If the distance is smaller than the distance between the planet1 and planet2, add the planet to the list.\n        if distance < distance(planet, planet1) and distance < distance(planet, planet2):\n            planet_orbits.append(planet)\n    # Step 6."}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for word in lst:\n        if len(word) % 2 == 1:\n            result.append(len(word))\n    result.sort()\n    return result\n\n"}
{"task_id": "HumanEval/150", "completion": "    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "    sum = 0\n    for i in lst:\n        if i > 0 and i % 2!= 0:\n            sum += i ** 2\n    return sum\n"}
{"task_id": "HumanEval/152", "completion": "    \n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n"}
{"task_id": "HumanEval/153", "completion": "    # Step 1. Initialize a variable `strongest_extension` as an empty string.\n    strongest_extension = \"\"\n    # Step 2. Iterate through each extension in the `extensions` list.\n    for extension in extensions:\n        # Step 3. Calculate the fraction CAP and SM for the extension.\n        fraction_cap = 0\n        fraction_sm = 0\n        for char in extension:\n            if char.isupper():\n                fraction_cap += 1\n            elif char.islower():\n                fraction_sm += 1\n        # Step 4. If the fraction CAP is greater than SM, update `strongest_extension` to the current extension.\n        if fraction_cap > fraction_sm:\n            strongest_extension = extension\n    # Step 5. Return `strongest_extension`.\n    return strongest_extension\n"}
{"task_id": "HumanEval/154", "completion": "    if len(a) == len(b):\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] == b[j]:\n                    return True\n        return False\n    else:\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "    count = 0\n    num = str(num)\n    for i in num:\n        if int(i) % 2 == 0:\n            count += 1\n        else:\n            count += 1\n    return (count, len(num) - count)\n\n"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X',\n                      11: 'XI', 12: 'XII', 13: 'XIII', 14: 'XIV', 15: 'XV', 16: 'XVI', 17: 'XVII', 18: 'XVIII',\n                      19: 'XIX', 20: 'XX', 30: 'XXX', 40: 'XL', 50: 'L', 60: 'LX', 70: 'LXX', 80: 'LXXX', 90: 'XC',\n                      100: 'C', 200: 'CC', 300: 'CCC', 400: 'CD', 500: 'D', 600: 'DC', 700: 'DCC', 800: 'DCCC', 900: 'CM',\n                      1000: 'M'}\n    result = ''\n    for key, value in sorted(roman_numerals.items(), reverse=True):\n        while number >= key:\n            result +="}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    current_count = 0\n    for word in words:\n        current_count = len(set(word))\n        if current_count > max_count:\n            max_count = current_count\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n"}
{"task_id": "HumanEval/160", "completion": "    result = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result.append(operand[i] + operand[i+1])\n        elif operator[i] == '-':\n            result.append(operand[i] - operand[i+1])\n        elif operator[i] == '*':\n            result.append(operand[i] * operand[i+1])\n        elif operator[i] == '//':\n            result.append(operand[i] // operand[i+1])\n        elif operator[i] == '**':\n            result.append(operand[i] ** operand[i+1])\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "    \n    # Step 1. Iterate through each character in the string.\n    for i in range(len(s)):\n        # Step 2. If the character is a letter, reverse its case from lower to upper.\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        # Step 3. If no letters are found, reverse the string.\n        else:\n            s = s[:i] + s[i:]\n    \n    return s\n"}
{"task_id": "HumanEval/162", "completion": "    if text == '':\n        return None\n    else:\n        import hashlib\n        md5 = hashlib.md5()\n        md5.update(text.encode('utf-8'))\n        return md5.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b + 1):\n        number = str(i)\n        for j in range(len(number)):\n            if int(number[j]) % 2 == 0:\n                even_digits.append(int(number[j]))\n    return sorted(even_digits)\n\n"}
