{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')':\n            if current_group:\n                groups.append(current_group)\n                current_group = ''\n        else:\n            current_group += char\n    if current_group:\n        groups.append(current_group)\n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            return True\n        balance += operation\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            if numbers[i] == numbers[i - 1]:\n                result.append(delimeter)\n            else:\n                result.append(numbers[i])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "    levels = []\n    level = 0\n    for char in paren_string:\n        if char == '(':\n            level += 1\n        elif char == ')':\n            level -= 1\n        if level > max(levels):\n            max_level = level\n        levels.append(level)\n    return levels\n\n"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n"}
{"task_id": "HumanEval/9", "completion": "    rolling_max = []\n    for number in numbers:\n        if number > max(rolling_max):\n            rolling_max.append(number)\n    return rolling_max\n\n"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return ''\n    prefix, suffix = string[:], string[::-1]\n    while prefix and suffix:\n        if prefix!= suffix:\n            return False\n        prefix = prefix[1:]\n        suffix = suffix[:-1]\n    return True\n\n"}
{"task_id": "HumanEval/11", "completion": "    return \"\".join(map(str, [int(a[i]) ^ int(b[i]) for i in range(len(a))]))\n\n"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        if string[i] == string[i - 1]:\n            prefixes.append(string[i - 1] * (i + 1))\n        else:\n            prefixes.append(string[i - 1] * (i + 1) + string[i])\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "    return''.join(str(i) for i in range(n))\n"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))\n\n"}
{"task_id": "HumanEval/17", "completion": "    parsed_beats = []\n    for char in music_string:\n        if char == 'o':\n            parsed_beats.append(4)\n        elif char == 'o|':\n            parsed_beats.append(2)\n        elif char == '.|':\n            parsed_beats.append(1)\n    return parsed_beats\n\n"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for char in string:\n        if char == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "    numbers = numbers.lower()\n    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "    smallest = float('inf')\n    largest = float('-inf')\n    for number in numbers:\n        if len(str(number)) <= 2:\n            difference = abs(number - numbers[-1])\n            if difference < smallest:\n                smallest = difference\n            if difference > largest:\n                largest = difference\n    return smallest, largest\n\n"}
{"task_id": "HumanEval/21", "completion": "    # TODO: Implement this function.\n    return numbers\n\n"}
{"task_id": "HumanEval/22", "completion": "    return [int(value) for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "    largest = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "    positive_numbers = []\n    for number in l:\n        if number > 0:\n            positive_numbers.append(number)\n    return positive_numbers\n"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "    result = 0\n    for coeff in xs:\n        result *= coeff\n        result += 1\n    return result\n\n"}
{"task_id": "HumanEval/33", "completion": "    l_sorted = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_sorted.append(l[i])\n    l_sorted.sort()\n    return l_sorted\n\n"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    l_even = sorted(l_even)\n    l_odd = sorted(l_odd)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = l_even[i]\n        else:\n            l[i] = l_odd[i]\n    return l\n\n"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "    if n < 2:\n        return n\n    a, b = 0, 1\n    for i in range(2, n):\n        if b % i == 0:\n            a, b = b, i\n    return b\n\n"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        collisions = 0\n        for i in range(1, n + 1):\n            distance = distance_between_cars(i)\n            if distance < distance_between_cars(i - 1):\n                collisions += 1\n        return collisions\n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base == 36:\n        return str(x)\n    if base == 62:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 8:\n        return bin(x)[2:]\n    if base == 10:\n        return str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 2:\n        return str(x)\n    if base == 3:\n        return str(x)\n    if base == 4:\n        return str(x)\n    if base == 5:\n        return str(x)\n    if base == 6:\n        return str(x)\n    if base == 7:\n        return str(x)\n    if base == 8:\n        return str(x)\n    if base == 9:\n        return str(x)\n    if base == 10:\n        return str(x)\n    if base"}
{"task_id": "HumanEval/45", "completion": "    return a * h / 2\n"}
{"task_id": "HumanEval/46", "completion": "    if n == 0 or n == 1:\n        return 0\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return b\n"}
{"task_id": "HumanEval/47", "completion": "    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    for i in range(n):\n        result *= p\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "    decoded_string = \"\"\n    for ch in s:\n        decoded_string += chr(((ord(ch) - ord(\"a\")) + 5) % 26 + ord(\"a\"))\n    return decoded_string\n\n"}
{"task_id": "HumanEval/51", "completion": "    result = ''\n    for character in text:\n        if character not in 'aeiou':\n            result += character\n    return result\n"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i > t:\n            return True\n    return False\n"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/57", "completion": "    l.sort()\n    return l[0] <= l[1]\n\n"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1).intersection(set(l2)))\n"}
{"task_id": "HumanEval/59", "completion": "    if n <= 1:\n        return n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n        else:\n            return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/62", "completion": "    return [x**i for i, x in enumerate(xs)]\n"}
{"task_id": "HumanEval/63", "completion": "    if n == 0 or n == 1:\n        return n\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in 'aeiou':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:]\n\n"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for c in s:\n        sum += ord(c)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "    return 0\n"}
{"task_id": "HumanEval/68", "completion": "    plucked_nodes = []\n    for node in arr:\n        if node % 2 == 0:\n            plucked_nodes.append(node)\n    plucked_nodes.sort()\n    return plucked_nodes\n\n"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for i in lst:\n        if i > 0:\n            freq[i] = freq.get(i, 0) + 1\n    for i in freq:\n        if freq[i] >= i:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/70", "completion": "    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        if val > max_val:\n            max_val = val\n    return [min_val, max_val, *sorted(lst[1:])]\n"}
{"task_id": "HumanEval/71", "completion": "    sum_a = a + b\n    sum_b = b + c\n    sum_c = c + a\n    if sum_a > sum_b and sum_a > sum_c:\n        return sum_a * (sum_b + sum_c) / 2\n    elif sum_b > sum_a and sum_b > sum_c:\n        return sum_b * (sum_a + sum_c) / 2\n    elif sum_c > sum_a and sum_c > sum_b:\n        return sum_c * (sum_a + sum_b) / 2\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "    return q[0] <= w and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "    dp = [[0] * (len(arr) + 1) for _ in range(len(arr) + 1)]\n    dp[0][0] = len(arr)\n    for i in range(1, len(arr) + 1):\n        for j in range(1, len(arr) + 1):\n            if arr[i - 1] < arr[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n    return dp[len(arr)][len(arr)]\n\n"}
{"task_id": "HumanEval/74", "completion": "    count = 0\n    for i in lst1:\n        if i not in lst2:\n            count += 1\n    if count == len(lst2):\n        return lst1\n    else:\n        return lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x <= n:\n        return False\n    while x % n == 0:\n        x //= n\n    if x == 1:\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/77", "completion": "    cube = True\n    for i in str(a):\n        if i.isdigit():\n            cube = cube * int(i)\n    return cube\n"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    digits = num.split('x')\n    for digit in digits:\n        digit = digit.upper()\n        if digit in '0123456789ABCDEF':\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/79", "completion": "    return \"\".join(bin(decimal)[2:].zfill(8))\n\n"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(1, len(s)):\n        if s[i]!= s[i-1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    # Step 1. Initialize an empty list to store the letter grades.\n    letter_grades = []\n    # Step 2. Sort the grades in ascending order.\n    grades.sort()\n    # Step 3. Iterate through the grades list.\n    for grade in grades:\n        # If the grade is greater than 3, append 'A' to the list.\n        if grade > 3:\n            letter_grades.append('A+')\n        # If the grade is less than 3, append 'A' to the list.\n        elif grade < 3:\n            letter_grades.append('A')\n        # If the grade is greater than 3, append 'A' to the list.\n        elif grade > 3:\n            letter_grades.append('A-')\n        # If the grade is less than 2, append 'B' to the list.\n        elif grade < 2:\n            letter_grades.append('B')\n        # If the grade"}
{"task_id": "HumanEval/82", "completion": "    pass\n"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10, n + 1):\n        if i % 10 == 1 or i % 10 == 9:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/84", "completion": "    sum_digits = 0\n    while N:\n        sum_digits += N % 2\n        N = N // 2\n    return str(sum_digits)\n"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "HumanEval/86", "completion": "    return''.join(sorted(s.split()))\n"}
{"task_id": "HumanEval/87", "completion": "    row_coordinates = []\n    max_value = max(lst)\n    for sublist in lst:\n        if max_value in sublist:\n            row_coordinates.append((len(lst)-1, max_value))\n            max_value = max(sublist)\n    row_coordinates.sort(key=lambda x: x[0])\n    return row_coordinates\n"}
{"task_id": "HumanEval/88", "completion": "    array = array[:]\n    sum_first = array[0]\n    sum_last = array[-1]\n    if sum_first % 2 == 1:\n        array.sort()\n    elif sum_last % 2 == 0:\n        array.sort(reverse=True)\n    return array\n\n"}
{"task_id": "HumanEval/89", "completion": "    return ''\n"}
{"task_id": "HumanEval/90", "completion": "    if lst == []:\n        return None\n    smallest = lst[0]\n    second_smallest = lst[0]\n    for i in lst[1:]:\n        if i < smallest:\n            smallest = i\n        elif i < second_smallest:\n            second_smallest = i\n    return second_smallest\n\n"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split(\".?!\"):\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "    return x == (y + z) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            encoded_message += char.lower()\n        elif char in 'aeiou':\n            encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "    max_prime = None\n    sum_digits = 0\n    for i in lst:\n        if i == 0:\n            continue\n        if i % 2 == 0:\n            continue\n        if max_prime is None or i > max_prime:\n            max_prime = i\n        if i % max_prime == 0:\n            continue\n        sum_digits += i\n    return sum_digits\n\n"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            continue\n        if key.isupper():\n            continue\n        return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "    prime_numbers = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            continue\n        if i > 2:\n            for j in range(3, int(i**0.5)+1, 2):\n                if i % j == 0:\n                    break\n            else:\n                prime_numbers.append(i)\n    return prime_numbers\n\n"}
{"task_id": "HumanEval/97", "completion": "    product = 0\n    for digit in str(a):\n        product *= int(digit)\n    for digit in str(b):\n        product *= int(digit)\n    return product\n\n"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "    closest_integer = None\n    if value == \"0\":\n        return 0\n    if value == \"1\":\n        return 1\n    if value == \"2\":\n        return 2\n    if value == \"3\":\n        return 3\n    if value == \"4\":\n        return 4\n    if value == \"5\":\n        return 5\n    if value == \"6\":\n        return 6\n    if value == \"7\":\n        return 7\n    if value == \"8\":\n        return 8\n    if value == \"9\":\n        return 9\n    if value == \"10\":\n        return 10\n    if value == \"11\":\n        return 11\n    if value == \"12\":\n        return 12\n    if value == \"13\":\n        return 13\n    if value == \"14\":\n        return 14\n    if value == \"15\":\n        return 15\n    if value == \"16\":\n        return 16\n    if value == \"17\":\n        return 17\n    if value == \"18\":\n        return 18\n    if value == \"19\":\n        return 19\n    if value == \"20\":\n        return"}
{"task_id": "HumanEval/100", "completion": "    return [1] * n\n\n"}
{"task_id": "HumanEval/101", "completion": "    return s.split(\",\")\n"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    return int(round(n + m / 2))\n\n"}
{"task_id": "HumanEval/104", "completion": "    digits = set()\n    for i in x:\n        digits.add(str(i))\n    return sorted(digits)\n"}
{"task_id": "HumanEval/105", "completion": "    arr = arr[::-1]\n    arr = sorted(arr)\n    arr = [dict[i] for i in arr]\n    return arr\n\n"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * f(i - 1))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        num_str = str(num)\n        for digit in num_str:\n            if digit >= 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        middle = left + (right - left) // 2\n        if arr[middle] > arr[left]:\n            left = middle + 1\n        elif arr[middle] < arr[right]:\n            right = middle - 1\n        else:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/110", "completion": "    if not lst1 or not lst2:\n        return \"NO\"\n    if len(lst1) < len(lst2):\n        return \"YES\"\n    if len(lst1) == len(lst2):\n        return \"YES\"\n    if len(lst1) == len(lst2):\n        return \"NO\"\n    return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "    return {}\n"}
{"task_id": "HumanEval/112", "completion": "    result = ''\n    for i in s:\n        if i!= c:\n            result += i\n    if result == result[::-1]:\n        return True, False\n    else:\n        return False, False\n"}
{"task_id": "HumanEval/113", "completion": "    return [str(len(str(x))) for x in lst]\n"}
{"task_id": "HumanEval/114", "completion": "    min_sum = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "    count = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr)\n"}
{"task_id": "HumanEval/117", "completion": "    words = []\n    s = s.split()\n    for word in s:\n        word_count = 0\n        for char in word:\n            if char.isalpha():\n                word_count += 1\n        if word_count == n:\n            words.append(word)\n    return words\n"}
{"task_id": "HumanEval/118", "completion": "    closest_vowel = \"\"\n    for char in word:\n        if char.isupper():\n            distance = abs(ord(char) - ord('A'))\n            if distance < len(closest_vowel):\n                closest_vowel = char\n    return closest_vowel\n\n"}
{"task_id": "HumanEval/119", "completion": "    if len(lst) < 2:\n        return 'No'\n    start = 0\n    end = len(lst) - 1\n    while start < end:\n        if lst[start] == lst[end]:\n            start += 1\n            end -= 1\n        else:\n            return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[:k]\n\n"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in arr:\n        sum += int(str(i)[-2:])\n    return sum\n\n"}
{"task_id": "HumanEval/123", "completion": "    odd_collatz = []\n    if n == 1:\n        return [1]\n    while n > 1:\n        if n % 2 == 0:\n            n = int(n / 2)\n        else:\n            n = 3 * n + 1\n        odd_collatz.append(n)\n    return odd_collatz\n\n"}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    date = date.split('-')\n    if len(date)!= 3:\n        return False\n    if int(date[1]) < 1 or int(date[1]) > 12:\n        return False\n    if int(date[2]) < 1 or int(date[2]) > 31:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 30:\n        return False\n    if int(date[0]) == 1 and int(date[1]) == 1 and int(date[2]) == 1:\n        return False\n    if int(date[0]) == 1 and int(date[1]) == 1 and int(date[2]) == 2:\n        return False\n    if int(date[0]) == 1 and int(date[1]) == 1 and int(date[2]) == 3:\n        return False\n    if int(date[0]) == 1 and int(date[1]) == 1 and int(date[2]) == 4:\n        return False\n    if int(date[0]) == "}
{"task_id": "HumanEval/125", "completion": "    return txt.split()\n\n"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) == 0:\n        return False\n    if len(lst) == 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sum = 0\n    for i in arr:\n        sum += abs(i) * pow(1, abs(i))\n    return sum\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    # Step 1. Initialize a 2D array dp of size N x N, where dp[i][j] represents the minimum path length k in the grid.\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    # Step 2. Set dp[0][0] equal to the value at index i-1.\n    dp[0][0] = grid[0][0]\n\n    # Step 3. Iterate through each cell in the grid.\n    for i in range(1, N):\n        for j in range(1, N):\n            # For each cell, calculate the minimum path length k by taking the minimum of dp[i-1][j-1] and dp[i][j-1].\n            dp[i][j] = min(dp[i-1][j-1], dp[i][j-1]) + grid[i][j]\n\n    # Step 4. Return the dp array.\n    return dp\n\n\n"}
{"task_id": "HumanEval/130", "completion": "    if n <= 1:\n        return [n]\n    else:\n        return [tri(n - 1), tri(n - 2), tri(n + 1)]\n"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for i in str(n):\n        if i.isdigit():\n            product *= int(i)\n    if product % 2 == 0:\n        return 0\n    else:\n        return product\n"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n        else:\n            return False\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "    sum_squares = 0\n    for i in lst:\n        sum_squares += i**2\n    return round(sum_squares, 2)\n"}
{"task_id": "HumanEval/134", "completion": "    last_char = txt[-1]\n    if last_char.isalpha():\n        if not txt[-2].isalpha():\n            return True\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            max_index = i\n    return max_index\n\n"}
{"task_id": "HumanEval/136", "completion": "    largest_smallest_integers = None\n    smallest_smallest_integers = None\n    for i in lst:\n        if i < 0:\n            largest_smallest_integers = i\n        elif i > 0:\n            smallest_smallest_integers = i\n    return largest_smallest_integers, smallest_smallest_integers\n\n"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif type(a) == type(b):\n        return a\n    else:\n        return b\n"}
{"task_id": "HumanEval/138", "completion": "    sum_even = 0\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sum_even += i\n    return sum_even == n\n\n"}
{"task_id": "HumanEval/139", "completion": "    special_factorial = 1\n    for i in range(n):\n        special_factorial *= i\n    return special_factorial\n\n"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            if result!= \"\":\n                result += \"_\"\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.')!= 1:\n        return 'No'\n    if file_name[0].isalpha():\n        return 'No'\n    if file_name[-1] in ['.txt', '.exe', '.dll']:\n        return 'Yes'\n    return 'No'\n"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0:\n            sum += i ** 3\n        else:\n            sum += i\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    words.sort(reverse=True)\n    return''.join(words)\n"}
{"task_id": "HumanEval/144", "completion": "    pass\n"}
{"task_id": "HumanEval/145", "completion": "    return sorted(map(lambda x: x, str(sum(map(int, str(x))))), reverse=True)\n"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num % 100!= 10:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(n)]\n    counter = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    counter += 1\n    return counter\n\n"}
{"task_id": "HumanEval/148", "completion": "    pass"}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for word in lst:\n        if len(word) % 2 == 1:\n            result.append(word)\n    result.sort()\n    return result\n"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "    sum = 0\n    for num in lst:\n        if num.is_integer():\n            sum += num ** 2\n    return sum\n"}
{"task_id": "HumanEval/152", "completion": "    pass"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = ''\n    for extension in extensions:\n        fraction_cap = len(extension) / len(extension.upper())\n        fraction_sm = len(extension) / len(extension.lower())\n        if fraction_cap > fraction_sm:\n            strongest_extension = extension\n    return strongest_extension\n\n"}
{"task_id": "HumanEval/154", "completion": "    if len(a) == len(b):\n        return a == b\n    else:\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "    count = 0\n    string = str(num)\n    for char in string:\n        if char.isdigit():\n            if int(char) % 2 == 0:\n                count += 1\n            else:\n                count += 1\n    return (count, count)\n"}
{"task_id": "HumanEval/156", "completion": "    roman_dict = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    while number >= 1000:\n        result += roman_dict[number % 1000]\n        number //= 1000\n    result += roman_dict[number]\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "    return (a + b) <= (c + c)\n"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    current_count = 0\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            current_count = 1\n        elif count == max_count:\n            current_count += 1\n    if current_count > 0:\n        return word\n    else:\n        return \"\"\n"}
{"task_id": "HumanEval/159", "completion": "    if number >= need:\n        return [number, 0]\n    else:\n        return [number + eat(number, need, remaining - need)[0], remaining - need]\n\n"}
{"task_id": "HumanEval/160", "completion": "    result = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result.append(operand[i])\n        elif operator[i] == '-':\n            result.append(operand[i])\n        elif operator[i] == '*':\n            result.append(operand[i])\n        elif operator[i] == '/':\n            result.append(operand[i])\n        elif operator[i] == '%':\n            result.append(operand[i])\n        elif operator[i] == '^':\n            result.append(operand[i])\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "    return \"\".join(reversed(s))\n"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text)\n    return md5.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "    return [int(i) for i in str(a) if int(i) % 2 == 0]\n\n"}
