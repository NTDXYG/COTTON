{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "    paren_list = []\n    paren_count = 0\n    for char in paren_string:\n        if char == '(':\n            paren_count += 1\n        elif char == ')':\n            paren_count -= 1\n        if paren_count == 0:\n            paren_list.append(paren_string[:paren_string.index(char)])\n            paren_string = paren_string[paren_string.index(char) + 1:]\n    return paren_list\n\n"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation == 1:\n            balance += 1\n        elif operation == -1:\n            balance -= 1\n        else:\n            return False\n    return balance < 0\n\n"}
{"task_id": "HumanEval/4", "completion": "    numbers_mean = sum(numbers) / len(numbers)\n    return sum(abs(x - numbers_mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "    max_nesting = []\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n        elif char == ')':\n            current_level -= 1\n        elif char =='':\n            if current_level > max_nesting[-1]:\n                max_nesting.append(current_level)\n    return max_nesting\n\n"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]\n\n"}
{"task_id": "HumanEval/8", "completion": "    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_ += i\n        product *= i\n    return (sum_, product)\n\n"}
{"task_id": "HumanEval/9", "completion": "    # Step 1. Initialize an empty list to store the rolling maximum elements.\n    rolling_max_list = []\n\n    # Step 2. Iterate through the given list of numbers.\n    for i in range(len(numbers)):\n        # For each number, find the maximum element from the current number and all previous numbers.\n        maximum_element = max(numbers[i], numbers[i - 1])\n        # Append the maximum element to the rolling maximum list.\n        rolling_max_list.append(maximum_element)\n    \n    # Step 3. Return the rolling maximum list. \n    return rolling_max_list\n\n"}
{"task_id": "HumanEval/10", "completion": "    # Step 1. Find the longest palindromic suffix of the supplied string.\n    # Step 2. Find the longest prefix of the supplied string that is a palindrome.\n    # Step 3. Reverse the prefix and append it to the reverse of the suffix.\n    # Step 4. Return the resulting palindrome.\n    suffix = ''\n    prefix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            suffix = string[i:]\n            break\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n    return prefix + suffix[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n"}
{"task_id": "HumanEval/12", "completion": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "    string = \"\"\n    for i in range(n+1):\n        string += str(i) + \" \"\n    return string[:-1]\n"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == '.':\n            beats.append(1)\n    return beats\n\n"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "    numbers = numbers.split()\n    numbers = list(map(int, numbers))\n    numbers.sort()\n    numbers = list(map(str, numbers))\n    numbers = \" \".join(numbers)\n    return numbers\n\n"}
{"task_id": "HumanEval/20", "completion": "    # Step 1. Initialize two variables to store the closest two numbers.\n    closest_number_1 = None\n    closest_number_2 = None\n\n    # Step 2. Iterate through the list of numbers.\n    for i in range(len(numbers) - 1):\n        # Calculate the absolute difference between each number and the previous number.\n        absolute_difference = abs(numbers[i] - numbers[i + 1])\n\n        # If the absolute difference is smaller than the current closest difference, update the closest numbers.\n        if closest_number_1 is None or closest_number_2 is None or absolute_difference < closest_number_1:\n            closest_number_1 = absolute_difference\n            closest_number_2 = numbers[i + 1]\n\n    # Step 3. Return the closest numbers in order (smaller number, larger number).\n    return (closest_number_1, closest_number_2)\n\n"}
{"task_id": "HumanEval/21", "completion": "    min_number = min(numbers)\n    max_number = max(numbers)\n    diff = max_number - min_number\n    if diff == 0:\n        return numbers\n    return [(x - min_number) / diff for x in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: isinstance(x, int), values))\n\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    for i in numbers:\n        if i not in result:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "    x = 0\n    for i in range(len(xs)):\n        x += xs[i] * x\n    return x\n\n"}
{"task_id": "HumanEval/33", "completion": "    l_ = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_.append(l[i])\n    l_.sort()\n    return l_\n"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "    max_value = l[0]\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 7 == 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_.append(l[i])\n        else:\n            l_.append(l[i])\n    return l_\n"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n        if is_prime(fib[i]):\n            print(fib[i])\n    return fib[n-1]\n"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "    collisions = 0\n    for i in range(1, n):\n        collisions += 1\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x % base)\n"}
{"task_id": "HumanEval/45", "completion": "    return a * h / 2\n"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n == 4:\n        return 2\n    fib4_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n    return fib4_list[n]\n"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "    # Step 1. Initialize an empty set.\n    set_s0 = set()\n    # Step 2. Iterate through each character in s0.\n    for char in s0:\n        # Add each character to the set.\n        set_s0.add(char)\n    # Step 3. Iterate through each character in s1.\n    for char in s1:\n        # If the character is not in the set, return False.\n        if char not in set_s0:\n            return False\n    # Step 4. Return True. \n    return True\n"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] <= l[i-1]:\n            increasing = False\n        if l[i] >= l[i-1]:\n            decreasing = False\n    if increasing or decreasing:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))\n\n"}
{"task_id": "HumanEval/59", "completion": "    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n /= factor\n        else:\n            factor += 1\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/62", "completion": "    # Step 1. Initialize an empty list to store the coefficients of the derivative.\n    derivative = []\n    # Step 2. Iterate through the coefficients of the polynomial.\n    for i in range(len(xs)):\n        # -For each coefficient, calculate the derivative and append it to the list.\n        derivative.append(xs[i] * (i + 1))\n    # Step 3. Return the list of coefficients representing the derivative.\n    return derivative\n"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in 'aeiouy':\n            count += 1\n        elif char == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "    # Step 1. Convert the integer x to a string.\n    x_str = str(x)\n    # Step 2. Calculate the number of digits in the string.\n    num_digits = len(x_str)\n    # Step 3. If shift > number of digits, reverse the string and return.\n    if shift > num_digits:\n        x_str = x_str[::-1]\n        return x_str\n    # Step 4. Otherwise, circularly shift the string by shift positions to the right.\n    else:\n        return x_str[shift:] + x_str[:shift]\n"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\n"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = s.split(\" \")\n    apples = int(apples)\n    oranges = int(oranges)\n    return apples - oranges\n"}
{"task_id": "HumanEval/68", "completion": "    plucked = []\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < plucked[0]:\n            plucked = [node, i]\n        elif plucked:\n            return plucked\n    return plucked\n\n"}
{"task_id": "HumanEval/69", "completion": "    # Step 1. Initialize a dictionary to store the frequency of each integer.\n    freq_dict = {}\n    # Step 2. Iterate through the list and update the frequency dictionary.\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    # Step 3. Sort the list in descending order.\n    sorted_list = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n    # Step 4. Iterate through the sorted list.\n    for i in sorted_list:\n        # If the current integer is greater than 0 and its frequency is greater than or equal to the integer itself, return the integer.\n        if i[0] > 0 and i[1] >= i[0]:\n            return i[0]\n    # If no such value exists, return -1.\n    return -1\n\n"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    new_lst = []\n    while len(lst) > 0:\n        new_lst.append(lst.pop(0))\n    return new_lst\n\n"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        return round((a + b + c) * 0.5, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "    if is_palindromic(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "    # Step 1. Initialize a variable to keep track of the minimum number of elements that need to be changed.\n    min_changes = 0\n\n    # Step 2. Iterate through the array from both ends.\n    for i in range(len(arr)):\n        # If the elements at the current positions are not equal, increment the minimum number of elements by 1.\n        if arr[i]!= arr[len(arr) - i - 1]:\n            min_changes += 1\n\n    # Step 3. Return the minimum number of elements that need to be changed.\n    return min_changes\n"}
{"task_id": "HumanEval/74", "completion": "    total1 = 0\n    total2 = 0\n    for i in lst1:\n        total1 += len(i)\n    for j in lst2:\n        total2 += len(j)\n    if total1 < total2:\n        return lst2\n    elif total2 < total1:\n        return lst1\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "    primes = get_primes(100)\n    for i in range(len(primes)):\n        for j in range(len(primes)):\n            for k in range(len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return False\n    else:\n        return x % n == 0\n\n"}
{"task_id": "HumanEval/77", "completion": "    return a**(1/3) % 1 == 0\n"}
{"task_id": "HumanEval/78", "completion": "    counter = 0\n    for i in num:\n        if i == \"B\" or i == \"D\":\n            counter += 1\n    return counter\n\n"}
{"task_id": "HumanEval/79", "completion": "    return \"db\" + bin(decimal)[2:] + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    grades_dict = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    grades_list = []\n    for grade"}
{"task_id": "HumanEval/82", "completion": "    # Step 1. Get the length of the string.\n    length = len(string)\n    # Step 2. Check if the length is a prime number.\n    if length <= 1:\n        return False\n    # Iterate from 2 to the square root of the length.\n    for i in range(2, int(length ** 0.5) + 1):\n        # Check if the length is divisible by any number in the range.\n        if length % i == 0:\n            return False\n    # Return True.\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, n+1):\n        if i[0] == 1 or i[-1] == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "    # Step 1. Convert N to binary representation.\n    binary_representation = bin(N)[2:]\n    \n    # Step 2. Initialize a variable sum_digits to 0.\n    sum_digits = 0\n    \n    # Step 3. Iterate through each digit in the binary representation.\n    for digit in binary_representation:\n        sum_digits += int(digit)\n    \n    # Step 4. Return sum_digits.\n    return sum_digits\n"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/86", "completion": "    words = s.split(' ')\n    words = sorted(words, key=lambda x: ord(x[0]))\n    return''.join(words)\n"}
{"task_id": "HumanEval/87", "completion": "    return sorted(\n        [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x],\n        key=lambda x: (x[0], -x[1])\n    )\n\n"}
{"task_id": "HumanEval/88", "completion": "    # Calculate the sum of the first index value and the last index value of the given array.\n    sum_of_first_index_value_and_last_index_value = sum(array)\n    # If the sum is odd, sort the array in ascending order.\n    if sum_of_first_index_value_and_last_index_value % 2!= 0:\n        return sorted(array)\n    # If the sum is even, sort the array in descending order.\n    else:\n        return sorted(array, reverse=True)\n\n"}
{"task_id": "HumanEval/89", "completion": "    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char)\n            encrypted_string += alphabet[index+2]\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "HumanEval/90", "completion": "    if not lst:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst) if lst else None\n"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    words = S.split()\n    for word in words:\n        if word == \"I\" and words[words.index(word) - 1][-1] in \"!.\":\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "    return (type(x) == int) and (type(y) == int) and (type(z) == int) and (x + y == z) and (x == y or x == z or y == z)\n\n"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "    largest_prime = None\n    for i in lst:\n        if largest_prime is None:\n            largest_prime = i\n        elif is_prime(i) and i > largest_prime:\n            largest_prime = i\n    if largest_prime is None:\n        return 0\n    else:\n        return sum(int(i) for i in str(largest_prime))\n"}
{"task_id": "HumanEval/95", "completion": "    if dict == {}:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower() == False and key.isupper() == False:\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "    unit_digit_a = get_unit_digit(a)\n    unit_digit_b = get_unit_digit(b)\n    return unit_digit_a * unit_digit_b\n"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "    return int(round(float(value)))\n"}
{"task_id": "HumanEval/100", "completion": "    # Step 1. Initialize an empty list to store the number of stones in each level.\n    pile = []\n    # Step 2. Initialize a variable to keep track of the current number of stones.\n    current_number = 0\n    # Step 3. Iterate from 1 to n.\n    for i in range(1, n+1):\n        # Step 4. If the current number is odd, add the current number to the list and increment the current number by 1.\n        if i % 2 == 1:\n            pile.append(current_number)\n            current_number += 1\n        # Step 5. If the current number is even, add the current number to the list and increment the current number by 2.\n        else:\n            pile.append(current_number)\n            current_number += 2\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "    return s.split(', ')\n"}
{"task_id": "HumanEval/102", "completion": "    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even\n\n"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        return int(round((n + m) / 2))\n\n"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for i in x:\n        i = str(i)\n        if not any(i.count(j) % 2 == 0 for j in i):\n            result.append(i)\n    result.sort()\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "    # Step 1. Create an empty list to store the sorted and reversed array.\n    new_arr = []\n    \n    # Step 2. Sort the array in ascending order.\n    sorted_arr = sorted(arr)\n    \n    # Step 3. Reverse the sorted array.\n    reversed_arr = sorted_arr[::-1]\n    \n    # Step 4. Iterate through the reversed array.\n    for i in reversed_arr:\n        # If the number is between 1 and 9 inclusive, replace it with its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n        if i >= 1 and i <= 9:\n            new_arr.append(f\"{i}\")\n        # Otherwise, append the number to the new array.\n        else:\n            new_arr.append(i)\n    \n    # Step 5. Return the new array. \n    return new_arr\n\n"}
{"task_id": "HumanEval/106", "completion": "    # Step 1. Initialize an empty list.\n    f = []\n    # Step 2. Iterate from 1 to n.\n    for i in range(1, n + 1):\n        # Step 3. If the index is even, append the factorial of the index to the list.\n        if i % 2 == 0:\n            f.append(i)\n        # Step 4. Otherwise, calculate the sum of numbers from 1 to the index and append it to the list.\n        else:\n            f.append(i + sum(range(1, i + 1)))\n    # Step 5. Return the list.\n    return f\n\n"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n\n"}
{"task_id": "HumanEval/108", "completion": "    counter = 0\n    for num in arr:\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num = num // 10\n        if sum_of_digits > 0:\n            counter += 1\n    return counter\n"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/110", "completion": "    even_lst = []\n    for i in lst1:\n        if i % 2 == 0:\n            even_lst.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            even_lst.append(i)\n    if len(even_lst) == len(lst1) + len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "    histogram = {}\n    for char in test:\n        if char in histogram:\n            histogram[char] += 1\n        else:\n            histogram[char] = 1\n    return histogram, max(histogram.values())\n"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n"}
{"task_id": "HumanEval/113", "completion": "    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j.isdigit() and int(j) % 2!= 0:\n                count += 1\n        output.append(f\"the number of odd elements {count}n the str{count}ng {i} of the {count}nput.\")\n    return output\n"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "    count = 0\n    for row in range(len(grid)):\n        for well in range(len(grid[row])):\n            if grid[row][well] == 1:\n                count += 1\n                extracted = 0\n                while extracted < capacity:\n                    if grid[row][well] == 1:\n                        extracted += 1\n                        grid[row][well] = 0\n                        count += 1\n                    else:\n                        break\n    return count\n"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "    words = []\n    words = s.split()\n    for word in words:\n        if len(word) == len(s) and len(word) >= n:\n            words.append(word)\n    return words\n"}
{"task_id": "HumanEval/118", "completion": "    closest_vowel = \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in \"aeiou\":\n            closest_vowel = word[i]\n            break\n        elif word[i] not in \"aeiou\" and word[i+1] in \"aeiou\":\n            closest_vowel = word[i+1]\n            break\n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "    if len(lst) == 0:\n        return 'No'\n    \n    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "    odd_numbers = []\n    current_number = n\n    while current_number!= 1:\n        if current_number % 2 == 1:\n            odd_numbers.append(current_number)\n        current_number = current_number // 2 if current_number % 2 == 0 else current_number * 3 + 1\n    odd_numbers.sort()\n    return odd_numbers\n"}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    month, day, year = date.split('-')\n    if len(month)!= 2 or len(day)!= 2 or len(year)!= 4:\n        return False\n    if month.isalpha() or day.isalpha() or year.isalpha():\n        return False\n    if month not in ['jan', 'feb','mar', 'apr','may', 'jun', 'jul', 'aug','sep', 'oct', 'nov', 'dec']:\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(year) < 1 or int(year) > 2020:\n        return False\n    if int(day) > 30 and month == 'dec':\n        return False\n    if int(day) > 29 and month == 'feb':\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/125", "completion": "    return txt.split()\n"}
{"task_id": "HumanEval/126", "completion": "    # Step 1. Iterate through the list.\n    for i in range(len(lst) - 1):\n        # Step 2. Check if the current element is greater than the next element.\n        if lst[i] > lst[i + 1]:\n            return False\n    # Step 3. Check if the list has more than one duplicate.\n    if lst.count(lst[0]) > 1:\n        return False\n    # Step 4. If the list passes both checks, return True. \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "    # Step 1. Find the intersection of the two intervals.\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    # Step 2. Calculate the length of the intersection.\n    length = end - start + 1\n    # Step 3. Check if the length is a prime number.\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "    result = 0\n    if len(arr) == 0:\n        return None\n    for i in arr:\n        if i > 0:\n            result += i\n        elif i < 0:\n            result -= i\n    return result\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    if not grid or not k:\n        return []\n\n    m, n = len(grid), len(grid[0])\n    dp = [[float('inf')] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j - 1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n\n    return dp[-1"}
{"task_id": "HumanEval/130", "completion": "    if n < 1:\n        return []\n    \n    sequence = []\n    sequence.append(0)\n    sequence.append(1)\n    sequence.append(1)\n    \n    for i in range(3, n + 1):\n        sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    \n    return sequence\n"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    n = str(n)\n    for i in n:\n        if int(i) % 2!= 0:\n            product *= int(i)\n    if product == 1:\n        return 0\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "    sum_squares = 0\n    for i in lst:\n        i = round(i)\n        i = i ** 2\n        sum_squares += i\n    return sum_squares\n\n\n"}
{"task_id": "HumanEval/134", "completion": "    return not (txt[-1].isalpha() and txt[-1] not in \" \\t\\n\")\n"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            if a is None:\n                a = i\n            else:\n                if a > i:\n                    a = i\n        else:\n            if b is None:\n                b = i\n            else:\n                if b < i:\n                    b = i\n    return (a, b)\n"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif type(a) == type(b):\n        if type(a) == int or type(a) == float:\n            return a if a > b else b\n        elif type(a) == str:\n            return compare_one(float(a.replace(\",\", \".\")), float(b))\n    else:\n        raise Exception(\"Type not supported\")\n\n"}
{"task_id": "HumanEval/138", "completion": "    if n % 4!= 0:\n        return False\n    sum_even = 0\n    for i in range(2, n):\n        if i % 2 == 0:\n            sum_even += i\n    return sum_even == n\n"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            if result[-1] == \" \":\n                result += \"_\"\n            else:\n                result += \"-\"\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if '.' in file_name:\n        return 'No'\n    if file_name[0].isalpha():\n        return 'No'\n    if file_name[0].isalpha() and file_name[1].isalpha():\n        return 'No'\n    if file_name[0].isalpha() and file_name[1].isalpha() and file_name[2].isalpha():\n        return 'No'\n    if file_name[0].isalpha() and file_name[1].isalpha() and file_name[2].isalpha() and file_name[3].isalpha():\n        return 'No'\n    if file_name[0].isalpha() and file_name[1].isalpha() and file_name[2].isalpha() and file_name[3].isalpha() and file_name[4].isalpha():\n        return 'No'\n    if file_name[0].isalpha() and file_name[1].isalpha() and file_name[2].isalpha() and"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i**2\n        elif i % 4 == 0:\n            sum += i**3\n        else:\n            sum += i\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1 and is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x_numerator = int(x[0])\n    x_denominator = int(x[1])\n    n_numerator = int(n[0])\n    n_denominator = int(n[1])\n    result = x_numerator * n_numerator / n_denominator\n    if result == int(result):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum([int(i) for i in str(num)])\n    \n    return sorted(nums, key=sum_of_digits)\n"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0 and num % 10!= 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "    a = []\n    for i in range(1, n+1):\n        a.append(i*i-i+1)\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i]+a[j]+a[k] % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "    # Step 1. Create a dictionary to store the orbits of the planets.\n    orbits = {}\n    # Step 2. Create a list to store the intermediate planets.\n    intermediate = []\n    # Step 3. Check if planet1 and planet2 are correct planet names.\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    # Step 4. Find the orbit of planet1 and add it to the list.\n    orbits[planet1] = orbits.get(planet1, []) + [planet1]\n    # Step 5. Find the orbit of planet2 and add it to the list.\n    orbits[planet2] = orbits.get(planet2, []) + [planet2]\n    # Step 6. Iterate through the orbits in the dictionary.\n    for planet, orbits in orbits.items():\n        # If the orbit is between the orbit of planet1 and the orbit of planet2, add it to the list.\n        if planet1 in orbits and planet2 in orbits:\n            intermediate.append(planet)\n    # Step 7. Sort the list of intermediate planets by proximity to the sun."}
{"task_id": "HumanEval/149", "completion": "    new_list = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            new_list.append(word)\n    new_list.sort(key=lambda x: (len(x), x))\n    return new_list\n\n"}
{"task_id": "HumanEval/150", "completion": "    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "    sum_squares = 0\n    for number in lst:\n        if number > 0 and number % 2 == 1:\n            sum_squares += number ** 2\n    return sum_squares\n\n"}
{"task_id": "HumanEval/152", "completion": "    \n    # Your code here\n    \n    # return the difference between the guess and the score\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n"}
{"task_id": "HumanEval/153", "completion": "    # initialize variables\n    strongest_extension = \"\"\n    strongest_strength = -1\n\n    # iterate through each extension\n    for extension in extensions:\n        # count the number of uppercase letters and lowercase letters in the extension's name\n        uppercase_count = 0\n        lowercase_count = 0\n        for letter in extension:\n            if letter.isupper():\n                uppercase_count += 1\n            elif letter.islower():\n                lowercase_count += 1\n        # calculate the strength of the extension as the difference between the number of uppercase letters and lowercase letters\n        strength = uppercase_count - lowercase_count\n        # if the strength is greater than \"strongest_strength\", update \"strongest_strength\" and \"strongest_extension\"\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    # return the string \"class_name.strongest_extension\"\n    return class_name + \".\" + strongest_extension\n"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    for i in range(len(a)-len(b)+1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "    count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            count += 1\n        else:\n            count += 1\n    return count, len(str(num)) - count\n\n"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    result = ''\n    for key in sorted(roman_numerals, reverse=True):\n        while number >= key:\n            result += roman_numerals[key]\n            number -= key\n    return result\n"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "    \n    total_eaten = 0\n    remaining = remaining - need\n    \n    if remaining < 0:\n        total_eaten = remaining + need\n        remaining = 0\n    else:\n        total_eaten = remaining + need\n        remaining = 0\n    \n    return [total_eaten, remaining]\n"}
{"task_id": "HumanEval/160", "completion": "    # Step 1. Initialize an empty stack to store the operators and operands.\n    stack = []\n    # Step 2. Iterate through the operator and operand lists simultaneously.\n    for operator, operand in zip(operator, operand):\n        # -Push the operator and operand to the stack.\n        stack.append(operator)\n        stack.append(operand)\n        # -If the operator is not \"+\", evaluate the expression on the top of the stack and push the result back to the stack.\n        if operator!= \"+\":\n            operand2 = stack.pop()\n            operand1 = stack.pop()\n            result = do_algebra(operator, operand1, operand2)\n            stack.append(result)\n    # Step 3. After iterating through all operators and operands, evaluate the final expression on the top of the stack and return the result.\n    return stack.pop()\n"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].swapcase()\n        else:\n            result += s[i]\n    if result == \"\":\n        result = s[::-1]\n    return result\n\n"}
{"task_id": "HumanEval/162", "completion": "    if text == '':\n        return None\n    \n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits\n\n"}
