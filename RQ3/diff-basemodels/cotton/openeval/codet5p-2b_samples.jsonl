{"task_id": "Open/0", "completion": "\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    for i in range(len(arr)):\n        if sum - arr[i] >= K:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "\n    min_value = arr[0]\n    min_count = 1\n    for i in range(1,n) :\n        if arr[i] < min_value :\n            min_value = arr[i]\n            min_count = 1\n        elif arr[i] == min_value :\n            min_count += 1\n    return min_count\n"}
{"task_id": "Open/2", "completion": "\n    \n    binary_rep = str(bin(n))[2:]\n    \n    for i in range(l,r+1):\n        if binary_rep[i] == \"0\":\n            return \"No\"\n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if (A[i]+A[j])%K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "\n    totalSum = sum(a)\n    if totalSum % 2!= 0 :\n        return False\n    \n    for i in range(len(a)) :\n        if a[i] % 2!= 0 :\n            return False\n        \n    for i in range(len(a)) :\n        if a[i] % 2 == 0 :\n            a[i] = a[i] // 2\n        else :\n            a[i] = a[i] // 2 + 1\n    \n    return sum(a) == totalSum\n"}
{"task_id": "Open/5", "completion": "\n    return (x & 1) ^ 1\n"}
{"task_id": "Open/6", "completion": "\n    \n    output = []\n    \n    for i in range(len(vec)):\n        if vec[i] < 0:\n            vec[i] = abs(vec[i]) - 1\n    \n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i + 1)\n    \n    return output\n"}
{"task_id": "Open/7", "completion": "\n    max_length = 0\n    for i in range(n) :\n        length = 1\n        for j in range(i+1,n) :\n            if arr[i] == arr[j] :\n                length += 1\n        if length > max_length :\n            max_length = length\n    return max_length\n"}
{"task_id": "Open/8", "completion": "\n    distinct_prime_factors = []\n    for i in a :\n        prime_factors = []\n        for j in range(2,i+1) :\n            if i % j == 0 :\n                prime_factors.append(j)\n        distinct_prime_factors.append(len(prime_factors))\n    return distinct_prime_factors\n"}
{"task_id": "Open/9", "completion": "\n    arr.sort(reverse=True)\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n):\n        sum1 += arr[i] - arr[0]\n    for i in range(1,k+1):\n        sum2 += arr[i] - arr[0]\n    return min(sum1,sum2)\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nk = 3"}
{"task_id": "Open/10", "completion": "\n    total_time = 0\n    while len(A)!= 0 and len(B)!= 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.append(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "completion": "\n    count = 0\n    for i in range(size) :\n        if array[i]!= 0 and array[i]!= 2 and array[i] % 2 == 0 :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if len(set(s[i:j+1])) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "\n    current_number = 2\n    while current_number <= n :\n        if n % current_number == 0 :\n            return False\n        current_number = current_number + 1\n    return True\n"}
{"task_id": "Open/14", "completion": "\n    \n    xor = n % 4\n    if xor == 0 :\n        return n\n    elif xor == 1 :\n        return 1\n    elif xor == 2 :\n        return n + 1\n    elif xor == 3 :\n        return 0\n    else :\n        return \"\"\n"}
{"task_id": "Open/15", "completion": "\n    a = random.randint(2, n-1)\n    for i in range(t) :\n        a = (a**2) % n\n        if a == 1 or a == n-1 :\n            return 1\n    return -1\n"}
{"task_id": "Open/16", "completion": "\n    for i in range(n):\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0':\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "\n    count = 0\n    for i in range(0, len(s), 2) :\n        if s[i] == '1' :\n            count += 1\n    for i in range(1, len(s), 2) :\n        if s[i] == '0' :\n            count += 1\n    return min(count, len(s) - count)\n"}
{"task_id": "Open/19", "completion": "\n    count = 0\n    for i in range(1, n + 1) :\n        if math.pow(i, 2) <= n :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "\n    if y == 0 :\n        return 1\n    else :\n        return x + product(x,y-1)\n"}
{"task_id": "Open/21", "completion": "\n    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in a :\n        if i % 4 == 0 :\n            count0 += 1\n        if i % 4 == 1 :\n            count1 += 1\n        if i % 4 == 2 :\n            count2 += 1\n        if i % 4 == 3 :\n            count3 += 1\n    if count0 == count1 and count1 == count2 and count2 == count3 :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "\n    max_len = 0\n    curr_len = 1\n    for i in range(1,n) :\n        if arr[i] > arr[i-1] :\n            curr_len += 1\n        else :\n            max_len = max(max_len,curr_len)\n            curr_len = 1\n    max_len = max(max_len,curr_len)\n    return max_len\n"}
{"task_id": "Open/23", "completion": "\n    if i == n :\n        if sum == 0 :\n            count += 1\n        return count\n    \n    if sum < 0 :\n        return 0\n    \n    count = subsetSum( arr, n, i + 1, sum, count )\n    count += subsetSum( arr, n, i + 1, sum - arr[i], count )\n    return count\n"}
{"task_id": "Open/24", "completion": "\n    center_hexadecagonal_num = ( n * ( n + 1 ) ) / 2\n    return center_hexadecagonal_num\n"}
{"task_id": "Open/25", "completion": "\n    sum = 0\n    for i in range ( 1, n+1 ) :\n        sum += i**2\n    sum += 1\n    return sum\n"}
{"task_id": "Open/26", "completion": "\n    max_sum = 0\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            sum_of_digits = 0\n            for j in str(i) :\n                sum_of_digits += int(j)\n            if sum_of_digits > max_sum :\n                max_sum = sum_of_digits\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "\n    return x <= y\n"}
{"task_id": "Open/28", "completion": "\n    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "\n    return (b-a)/a\n"}
{"task_id": "Open/30", "completion": "\n    sum_squares = 0\n    for i in range(1, n+1) :\n        sum_squares += i**2\n    return sum_squares/n\n"}
{"task_id": "Open/31", "completion": "\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "\n    return 3**(n-1)\n"}
{"task_id": "Open/33", "completion": "\n    \n    term = 1\n    for i in range ( 2, n + 1 ) :\n        term = term * 2 + ( i - 1 )\n    return term\n"}
{"task_id": "Open/34", "completion": "\n    count = 0\n    for i in range(len(a)):\n        product = 1\n        for j in range(i,len(a)):\n            product *= a[j]\n            if product < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "\n    count = 0\n    for i in range(1,n+1) :\n        count += getOccurence( math.floor(i/10), i%10 )\n    return count\n"}
{"task_id": "Open/36", "completion": "\n    arr.sort()\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n    return n+1\n"}
{"task_id": "Open/37", "completion": "\n    dp = [0] * ( n + 1 )\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1 ) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "\n    area = 0\n    length = l\n    breadth = b\n    while length and breadth > 0:\n        area += length * breadth\n        length -= 1\n        breadth -= 1\n    return area\n"}
{"task_id": "Open/39", "completion": "\n    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "\n    max_zeros = 0\n    count_zeros = 0\n    for i in range(n) :\n        if arr[i] == 1 :\n            count_zeros = 0\n        else :\n            count_zeros += 1\n        if count_zeros > max_zeros :\n            max_zeros = count_zeros\n    if max_zeros > 0 :\n        return max_zeros\n    else :\n        return -1\n"}
{"task_id": "Open/41", "completion": "\n    max_length = 0\n    for i in range(n) :\n        if arr[i] == 0 :\n            if max_length < i - max(range(i,n)) :\n                max_length = i - max(range(i,n))\n    return max_length\n"}
{"task_id": "Open/42", "completion": "\n    max_min_segments = []\n    for i in range(0, n, k):\n        min_element = min(a[i:i+k])\n        max_min_segments.append(min_element)\n    return max(max_min_segments)\n"}
{"task_id": "Open/43", "completion": "\n    count = 0\n    for i in range(n) :\n        for j in range(i,n) :\n            if (array[j] * array[i]) <= k :\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "\n    sum = 0\n    arr.sort()\n    for i in range(0,n) :\n        sum += abs(arr[i] - i + 1)\n    return sum\n"}
{"task_id": "Open/45", "completion": "\n    min_element = arr[0]\n    for i in range(1, n) :\n        if arr[i] < min_element :\n            min_element = arr[i]\n    return (min_element * (n - 1))\n"}
{"task_id": "Open/46", "completion": "\n    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            diff = array[j] - array[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "\n    if ( a*x1 + b*y1 + c ) == ( a*x2 + b*y2 + c ) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/48", "completion": "\n    count = 0\n    for i in range(0, a+1) :\n        if (i ^ i) == a :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "completion": "\n    max_AND = 0\n    for i in range(L,R+1):\n        max_AND = max(max_AND,i & R)\n    return max_AND\n"}
{"task_id": "Open/50", "completion": "\n    smallest = None\n    for i in range(1,n+1) :\n        if smallest is None :\n            smallest = i\n        elif i % smallest!= 0 :\n            continue\n        elif i % smallest == 0 :\n            if smallest > i :\n                smallest = i\n    return smallest\n"}
{"task_id": "Open/51", "completion": "\n    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "\n    result = 0\n    for i in range(n) :\n        for j in range(n) :\n            if (i+1)*(j+1)%2 == 1 :\n                result ^= arr[i][j]\n    return result\n"}
{"task_id": "Open/53", "completion": "\n    count = 0\n    for i in range(0, N+1) :\n        xor = i ^ i\n        if xor == i :\n            count += 1\n    return count\n"}
{"task_id": "Open/54", "completion": "\n    \n    if len(a) == 0:\n        return False\n    \n    if len(a) == 1:\n        return a[0] == k\n    \n    if len(a) == 2:\n        return a[0] + a[1] == k\n    \n    if len(a) == 3:\n        return a[0] + a[1] + a[2] == k\n    \n    if len(a) == 4:\n        return a[0] + a[1] + a[2] + a[3] == k\n    \n    if len(a) == 5:\n        return a[0] + a[1] + a[2] + a[3] + a[4] == k\n    \n    if len(a) == 6:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] == k\n    \n    if len(a) == 7:\n        return a[0] + a[1] + a[2] + a[3] + a[4] +"}
{"task_id": "Open/55", "completion": "\n    return (n & 1) == 1 and (n >> 1) & 1 == 1\n"}
{"task_id": "Open/56", "completion": "\n    max_partitions = 0\n    current_partitions = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_partitions += 1\n        else:\n            max_partitions = max(max_partitions, current_partitions)\n            current_partitions = 1\n    max_partitions = max(max_partitions, current_partitions)\n    return max_partitions\n"}
{"task_id": "Open/57", "completion": "\n    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "\n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = var1 + var2\n    for i in range(2,N):\n        result = result + var1 + var2\n        result = result / 100\n        var1 = arr[i]\n        var2 = arr[i+1]\n        result = result + var1 + var2\n        result = result / 100\n    return result\n\narr = [1,2,3,4,5,6,7,8,9,10]\nN = len(arr)"}
{"task_id": "Open/59", "completion": "\n    result = arr[index]\n    for i in range(ranges) :\n        result = result ^ arr[index+i]\n    return result\n"}
{"task_id": "Open/60", "completion": "\n    \n    for i in range(1, n+1) :\n        square = i**2\n        if square == n :\n            return True\n        elif square < n :\n            for j in range(1, n+1) :\n                if square + j == n :\n                    return True\n    return False\n"}
{"task_id": "Open/61", "completion": "\n    count = 0\n    for i in range(len(b)):\n        if b[i] == a[0]:\n            count += 1\n        else:\n            return -1\n    return count\n"}
{"task_id": "Open/62", "completion": "\n    modified_string = \"\"\n    for i in range(len-1, -1, -1) :\n        if str[i] > str[i+1] :\n            str[i] -= 1\n            modified_string += \"9\"\n        else :\n            modified_string += str[i]\n    return modified_string\n"}
{"task_id": "Open/63", "completion": "\n    min_value = math.inf\n    running_sum = 0\n    for i in arr :\n        running_sum += math.log(i)\n        if running_sum < min_value * n :\n            min_value = i\n    return min_value\n"}
{"task_id": "Open/64", "completion": "\n    max_len = 0\n    start = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            continue\n        curr_len = 1\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                break\n            curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n            start = i\n    if max_len == 0:\n        return \"-1\"\n    return s[start:start+max_len]\n"}
{"task_id": "Open/65", "completion": "\n    counter = {}\n    for i in a :\n        if i in counter :\n            counter[i] += 1\n        else :\n            counter[i] = 1\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    modified_array_length = 0\n    for i in sorted_counter :\n        if i[1] <= k :\n            modified_array_length += 1\n    return modified_array_length\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,"}
{"task_id": "Open/66", "completion": "\n    \n    size = n + k\n    arr.sort()\n    \n    if size % 2 == 0 :\n        return ( arr[size//2] + arr[size//2 - 1] ) / 2\n    else :\n        return arr[size//2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/67", "completion": "\n    positive, negative, zero = 0, 0, 0\n    for i in a :\n        if i > 0 :\n            positive += 1\n        elif i < 0 :\n            negative += 1\n        else :\n            zero += 1\n    if positive % 2 == 0 :\n        step = positive + zero\n    else :\n        step = positive + zero + abs(negative - 1)\n    return step\n"}
{"task_id": "Open/68", "completion": "\n    if n == 1 :\n        return 0\n    v = []\n    while n > 1 :\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v)-1, -1, -1) :\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "\n    if n == 0 :\n        return False\n    if n == 1 :\n        return True\n    \n    while n > 0 :\n        if n % 2 == 0 :\n            n = n // 2\n        else :\n            n = n - 1\n        if n == 0 :\n            return False\n    return True\n"}
{"task_id": "Open/70", "completion": "\n    if x > n :\n        return x\n    else:\n        return (n - x) * x\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/71", "completion": "\n    sum = 0\n    for i in range(n+1) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        sum += (1 + 2 + 3 +... + i)\n    return sum\n"}
{"task_id": "Open/73", "completion": "\n    count_dict = {}\n    max_count = 0\n    max_value = 0\n    for i in arr :\n        if i in count_dict :\n            count_dict[i] += 1\n        else :\n            count_dict[i] = 1\n    for i in count_dict :\n        if count_dict[i] == n :\n            max_count = max(max_count, count_dict[i])\n            max_value = i\n    return max_value\n\narr = [1,1,1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5"}
{"task_id": "Open/74", "completion": "\n    count = 0\n    for i in range(n) :\n        if a[i] > 0 :\n            if a[i] & 1 == 1 :\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "\n    return int( bin( n )[2:], 2 )\n"}
{"task_id": "Open/76", "completion": "\n    changes = 0\n    for i in range(n) :\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0 :\n            changes += 1\n            A[i+1] = 0\n    return changes\n"}
{"task_id": "Open/77", "completion": "\n    return 180 * radian / 3.14\n"}
{"task_id": "Open/78", "completion": "\n    return math.floor(n/2)\n"}
{"task_id": "Open/79", "completion": "\n    sum = 0\n    for i in range(1, n+1) :\n        sum += a + (i-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "\n    if n % 2 == 1 :\n        return 1\n    power = 1\n    while power * 2 <= n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/81", "completion": "\n    board = [[False for i in range(8)] for j in range(8)]\n    count = 0\n    row = row - 1\n    column = column - 1\n    for i in range(moves) :\n        if row + 1 < 8 :\n            row += 1\n        elif row - 1 >= 0 :\n            row -= 1\n        elif column + 1 < 8 :\n            column += 1\n        elif column - 1 >= 0 :\n            column -= 1\n        if board[row][column] == False :\n            count += 1\n            board[row][column] = True\n    return count\n"}
{"task_id": "Open/82", "completion": "\n    current_number = 0\n    numbers = []\n    for i in range(n) :\n        current_number = current_number + i\n        numbers.append(current_number)\n    return numbers\n"}
{"task_id": "Open/83", "completion": "\n    \n    lastOcc = [0] * 26\n    \n    for i in range(len(s)):\n        lastOcc[ord(s[i]) - ord('a')] = i\n    \n    sorted_string = sorted(s)\n    \n    for i in range(len(s)):\n        if s[i]!= sorted_string[i]:\n            sorted_string[i], sorted_string[lastOcc[ord(s[i]) - ord('a')]] = sorted_string[lastOcc[ord(s[i]) - ord('a')]], sorted_string[i]\n    \n    return ''.join(sorted_string)\n"}
{"task_id": "Open/84", "completion": "\n    \n    arr = [i for i in range(n)]\n    \n    for i in range(n) :\n        if i % 2 == 0 :\n            arr[i] = arr[i] + arr[i+1]\n        else :\n            arr[i] = arr[i] + arr[i+1]\n            \n    return sum(arr[l-1:r])\n    "}
{"task_id": "Open/85", "completion": "\n    if x > y :\n        smaller = y\n    else :\n        smaller = x\n    for i in range(1,smaller+1) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "completion": "\n    current = A\n    for i in range(N-1):\n        current = current + B\n    return current\n"}
{"task_id": "Open/87", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:].find(substr)!= -1:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "\n    emi = ( p * r * (1 + r)**t ) / ((1 + r)**t - 1)\n    return emi\n\nemi = emi_calculator ( 100000, 0.05, 12 )"}
{"task_id": "Open/89", "completion": "\n    count = 0\n    for i in range(1, A+1):\n        for j in range(1, B+1):\n            for k in range(1, C+1):\n                if i * k > j * j:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "\n    count = 0\n    for num in range(l,r+1):\n        last_digit = num % 10\n        if last_digit == 2 or last_digit == 3 or last_digit == 9:\n            count += 1\n    return count\n"}
{"task_id": "Open/91", "completion": "\n    max_length = 0\n    for i in range(len(arr)):\n        length = 1\n        curr_num = arr[i]\n        for j in range(i+1, len(arr)):\n            if arr[j] - curr_num == curr_num - arr[i]:\n                length += 1\n            else:\n                curr_num = arr[j]\n                length = 1\n            if length > max_length:\n                max_length = length\n    return max_length\n"}
{"task_id": "Open/92", "completion": "\n    max_len = -1\n    for i in range(len(str)) :\n        if (i+1)%2 == 0 :\n            if (str[i].isalnum()) :\n                if (len(str[i]) > max_len) :\n                    max_len = len(str[i])\n    return max_len\n"}
{"task_id": "Open/93", "completion": "\n    count = 0\n    while n > 1 :\n        n = n / 2\n        count += 1\n    return count\n"}
{"task_id": "Open/94", "completion": "\n    \n    if n < 0 or k < 0 :\n        return \"Invalid input\"\n    \n    if n == 0 or k == 0 :\n        return \"Invalid input\"\n    \n    string = \"a\" * n\n    \n    for i in range(n-1, -1, -1) :\n        k = k - 1\n        if k < 0 :\n            break\n        if k >= 26 :\n            string = string[:i] + \"z\" + string[i+1:]\n            k = k - 26\n        else :\n            string = string[:i] + chr(97 + k) + string[i+1:]\n            k = k - 1\n    \n    return string\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/95", "completion": "\n    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel/n\n        fuel -= fuel/n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "\n    totalSum = sum(arr)\n    if totalSum % 3!= 0 :\n        return 0\n    \n    totalSum = totalSum // 3\n    \n    for i in range(n) :\n        beforeSum = 0\n        afterSum = 0\n        if i == 0 :\n            beforeSum = arr[i]\n        else :\n            beforeSum = arr[i-1]\n        if i == n-1 :\n            afterSum = arr[i]\n        else :\n            afterSum = arr[i+1]\n        if beforeSum == totalSum and afterSum == totalSum :\n            return 1\n    return 0\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)"}
{"task_id": "Open/97", "completion": "\n    \n    sentence = sentence.split()\n    if word in sentence :\n        return True\n    else :\n        return False\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nword = \"fox\""}
{"task_id": "Open/98", "completion": "\n    return math.floor(math.log10(n)) + 1\n"}
{"task_id": "Open/99", "completion": "\n    if a == b and b == c and c == k :\n        return True\n    elif k == 0 :\n        return False\n    elif a - k == b :\n        return True\n    elif a + k == b :\n        return True\n    elif b - k == c :\n        return True\n    elif b + k == c :\n        return True\n    elif c - k == a :\n        return True\n    elif c + k == a :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/100", "completion": "\n    return (x == y)\n"}
{"task_id": "Open/101", "completion": "\n    count = 0\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "\n    count = 0\n    for i in string :\n        if i == '0' :\n            count += 1\n        else :\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "\n    arr.sort()\n    removal = 0\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) > 1:\n            removal += 1\n    return removal\n"}
{"task_id": "Open/104", "completion": "\n    max_set_bits = 0\n    while left <= right:\n        if left & 1 == 1:\n            max_set_bits += 1\n        left >>= 1\n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "\n    power = 1\n    while power <= n :\n        power = power << 1\n    return power\n"}
{"task_id": "Open/106", "completion": "\n    sum_divisors = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum_divisors += i\n    if sum_divisors == n:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/107", "completion": "\n    \n    century = 100\n    leap_century = 400\n    \n    total_days = 0\n    \n    for i in range(1, N+1) :\n        \n        if i % century == 0 :\n            total_days += (century * 365)\n            \n        elif i % leap_century == 0 :\n            total_days += (leap_century * 365)\n            \n        else :\n            total_days += (century * 365)\n            \n    total_days -= leap_century\n    \n    total_days += leap_century\n    \n    total_days += century\n    \n    total_days += leap_century\n    \n    total_days += century\n    \n    total_days += leap_century\n    \n    total_days += century\n    \n    total_days += leap_century\n    \n    total_days += century\n    \n    total_days += leap_century\n    \n    total_days += century\n    \n    total_days += leap_century\n    \n    total_days += century\n    \n    total_days += leap_century\n    \n    total_days +="}
{"task_id": "Open/108", "completion": "\n    if a < 0 :\n        return -1\n    else :\n        return (3 * a - 2)\n"}
{"task_id": "Open/109", "completion": "\n    count = 0\n    while n > 0 :\n        if n % 10 == d :\n            count += 1\n        n = n // 10\n    return count\n"}
{"task_id": "Open/110", "completion": "\n    \n    if n == 0 :\n        return False\n    \n    string = str(n)\n    \n    for i in range(len(string)):\n        if string.count(string[i]) > 1 :\n            return False\n    \n    return True\n"}
{"task_id": "Open/111", "completion": "\n    count = 0\n    for i in a :\n        if i % 5 == 0 and i % 3 == 0 :\n            count += 1\n    if count == n :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/112", "completion": "\n    array = [4,7]\n    for i in range(3, n+1) :\n        if i % 2 == 0 :\n            array.append(array[i//2]*10+4)\n        else :\n            array.append(array[i//2]*10+7)\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "\n    arr = [3,5]\n    for i in range(2,n+1) :\n        if i%2 == 0 :\n            arr.append(arr[i//2]-1)\n        else :\n            arr.append(arr[i//2]*10+3)\n    return arr[n]\n"}
{"task_id": "Open/114", "completion": "\n    array = [1,2]\n    for i in range(3, n+1) :\n        if i % 2 == 0 :\n            array.append(array[i//2]*10+1)\n        else :\n            array.append(array[i//2]*10+2)\n    return array[n]\n"}
{"task_id": "Open/115", "completion": "\n    result = 0\n    for i in a :\n        result += i\n    if result % 11 == 0 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/116", "completion": "\n    if l > 0 and b > 0 and h > 0 :\n        return l * b + b * h + l * h\n    else :\n        return -1\n"}
{"task_id": "Open/117", "completion": "\n    \n    string = string.split()\n    \n    for i in range(len(string)):\n        string[i] = string[i][0].upper() + string[i][1:]\n        string[i] = string[i][0].upper() + string[i][1:]\n        \n    return \" \".join(string)\n"}
{"task_id": "Open/118", "completion": "\n    return math.ceil(math.sqrt(8 * p + 1) - 1) // 2\n"}
{"task_id": "Open/119", "completion": "\n    return len(set(arr)) == len(arr)\n"}
{"task_id": "Open/120", "completion": "\n    \n    set_codes = set()\n    \n    for char in string :\n        for char_remaining in string :\n            set_codes.add(char + char_remaining)\n    \n    return len(set_codes)\n"}
{"task_id": "Open/121", "completion": "\n    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "\n    current_number = 0\n    maximum_number = 0\n    for char in ss :\n        if char.isdigit() :\n            current_number = current_number * 10 + int(char)\n        else :\n            if current_number > maximum_number :\n                maximum_number = current_number\n            current_number = 0\n    if current_number > maximum_number :\n        maximum_number = current_number\n    return maximum_number\n"}
{"task_id": "Open/123", "completion": "\n    longest = \"\"\n    for i in range(0, length):\n        if s[i].isdigit():\n            if i == 0:\n                longest = s[i]\n            elif s[i]!= s[i-1]:\n                longest = s[i]\n        else:\n            if len(longest) > len(s[i:]):\n                return longest\n    return longest\n"}
{"task_id": "Open/124", "completion": "\n    N, M, K = N, M, K\n    while K > 0 and (N > 0 or M > 0):\n        if N > M:\n            N -= M\n        else:\n            M -= N\n        K -= 1\n    if N > 0 and M > 0:\n        return N*M\n    else:\n        return 0\n"}
{"task_id": "Open/125", "completion": "\n    if length == 0 :\n        return False\n    \n    for i in range(length) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "\n    i = 1\n    while i <= n :\n        i = i * 2\n    return i - 1\n"}
{"task_id": "Open/127", "completion": "\n    \n    A = str(A)\n    B = str(B)\n    \n    if len(A) == len(B) :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Open/128", "completion": "\n    return (x - y)!= 1\n"}
{"task_id": "Open/129", "completion": "\n    Sn_1, Sn_2, Sn_3 = \"1\", \"12\", \"1213\"\n    for i in range(3, n+1) :\n        Sn_1, Sn_2, Sn_3 = Sn_2 + Sn_1, Sn_3 + Sn_2, Sn_3\n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "\n    minSteps = []\n    previous = arr[0]\n    for i in range(1, n) :\n        diff = abs(arr[i] - previous)\n        minSteps.append(diff)\n        previous = arr[i]\n    return minSteps\n"}
{"task_id": "Open/131", "completion": "\n    if n % 4 == 0 or n % 4 == 3 :\n        return 0\n    if n % 4 == 1 or n % 4 == 2 :\n        return 1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/132", "completion": "\n    m = 0\n    sum = 0\n    for i in range(1, N+1):\n        if i % a == 0:\n            m += 1\n    sum = (m * (m + 1)) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "\n    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n    "}
{"task_id": "Open/134", "completion": "\n    if arr[0] % 2 == 1 and arr[-1] % 2 == 1 and n % 2 == 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/135", "completion": "\n    count = 0\n    if N == 1 :\n        for i in range(L,R+1) :\n            count += 1\n        return count\n    elif N > 1 :\n        for i in range(L,R+1) :\n            count += countSum(N-1,L,i)\n        return count\n    else :\n        return 0\n"}
{"task_id": "Open/136", "completion": "\n    arr.sort()\n    result = 1\n    for i in range(n) :\n        if arr[i] >= result :\n            result += 1\n    return result\n"}
{"task_id": "Open/137", "completion": "\n    s = list(s)\n    s.sort()\n    return int(\"\".join(s))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/138", "completion": "\n    count = 0\n    for i in range(1,n):\n        if arr[i] > arr[i-1]:\n            count += arr[i] - arr[i-1]\n            arr[i-1] = arr[i]\n    return count\n"}
{"task_id": "Open/139", "completion": "\n    sum = 0\n    count = 0\n    for char in s :\n        sum += ord(char)\n        count += 1\n    return sum/count\n"}
{"task_id": "Open/140", "completion": "\n    count = 0\n    while S >= A:\n        count += S // A\n        S = S % A\n    if S > 0:\n        return -1\n    return count + N\n"}
{"task_id": "Open/141", "completion": "\n    return x * y // math.gcd(x, y)\n"}
{"task_id": "Open/142", "completion": "\n    count = 0\n    while n > 0 :\n        if n % 2 == 0 :\n            count += 1\n        n = n // 2\n    return count\n"}
{"task_id": "Open/143", "completion": "\n    max_index = 0\n    for i in range(n) :\n        sum_left = 0\n        sum_right = 0\n        for j in range(i) :\n            sum_left += arr[j]\n        for k in range(i+1,n) :\n            sum_right += arr[k]\n        if sum_left > sum_right :\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/144", "completion": "\n    max_len = 0\n    for i in range(n) :\n        curr_len = 1\n        for j in range(i) :\n            if arr[i] < arr[j] :\n                curr_len += 1\n        if curr_len > max_len :\n            max_len = curr_len\n    return max_len\n\narr = [1,3,2,4,5,6,7,8,9]"}
{"task_id": "Open/145", "completion": "\n    \n    min_element = arr[0]\n    max_element = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n        if arr[i] > max_element:\n            max_element = arr[i]\n    \n    range_between_min_and_max = max_element - min_element\n    \n    if k >= range_between_min_and_max:\n        return min_element + k\n    else:\n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/146", "completion": "\n    length = 1\n    while K % 10 == 0 :\n        K = K // 10\n        length += 1\n    if K!= 1 :\n        return -1\n    return length\n"}
{"task_id": "Open/147", "completion": "\n    min_ops = 0\n    for i in range(n) :\n        min_ops += abs(arr[i] - arr[0])\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "\n    sum = 3\n    for i in range(1, n) :\n        sum += i\n    return sum\n"}
{"task_id": "Open/149", "completion": "\n    return s ** 0.5\n"}
{"task_id": "Open/150", "completion": "\n    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "\n    XOR = 0\n    for i in range(len1) :\n        XOR = XOR ^ ord(str1[i])\n    return XOR\n"}
{"task_id": "Open/152", "completion": "\n    \n    binary = bin(n)\n    binary = binary[2:]\n    \n    if binary.count('1') == 0 :\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/153", "completion": "\n    vowels = ['a','e','i','o','u']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == 0:\n                if s[i] > s[i+1]:\n                    return False\n            elif s[i] > s[i-1]:\n                return False\n    return True\n"}
{"task_id": "Open/154", "completion": "\n    count = 0\n    for i in range(low, high + 1) :\n        last_digit = str(i)[-1]\n        if int(last_digit) >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "\n    min_diff = math.inf\n    for i in range(1, n + 1) :\n        abs_diff = abs(i - math.pow(2, i))\n        if abs_diff < min_diff :\n            min_diff = abs_diff\n    return min_diff\n"}
{"task_id": "Open/156", "completion": "\n    if r < 0 :\n        return -1\n    else :\n        return (1 + (1 + (3**0.5))**2) * r**2 / 4\n"}
{"task_id": "Open/157", "completion": "\n    new_string = \"\"\n    for i in sorted(s) :\n        new_string += i\n    return new_string\n"}
{"task_id": "Open/158", "completion": "\n    if size == 0 :\n        return 1\n    if size == 1 :\n        return 2\n    if ar[mid]!= ar[mid - 1] :\n        return ar[mid]\n    if ar[mid] == ar[mid - 1] :\n        return search(ar, mid - 1)\n    return search(ar, mid + 1)\n"}
{"task_id": "Open/159", "completion": "\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] == \"010\":\n            count += 1\n    return count\n"}
{"task_id": "Open/160", "completion": "\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in arr:\n        if d[i] % 2 == 0:\n            return i\n    return None\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nn = len(arr)"}
{"task_id": "Open/161", "completion": "\n    xorArr = 0\n    ans = 0\n    for i in range(n) :\n        xorArr = xorArr ^ arr[i]\n    for i in range(n) :\n        ans = ans ^ arr[i]\n    for i in range(n) :\n        ans = ans ^ xorArr\n    return ans\n\narr = [3,5,7,9]\nn = len(arr)"}
{"task_id": "Open/162", "completion": "\n    if ( sx == dx and sy == dy ) :\n        return True\n    if ( sx == dx and sy!= dy ) :\n        return True\n    if ( sx!= dx and sy == dy ) :\n        return True\n    if ( sx!= dx and sy!= dy ) :\n        return False\n    return False\n"}
{"task_id": "Open/163", "completion": "\n    count = 0\n    if n % 2 == 0 :\n        return 0\n    else :\n        for i in range(2,n+1) :\n            if i % 2 == 0 :\n                continue\n            elif i % 4 == 0 :\n                count += 1\n            else :\n                continue\n        return count\n"}
{"task_id": "Open/164", "completion": "\n    count = {}\n    for i in range(n):\n        count[arr[i]] = count.get(arr[i], 0) + 1\n    \n    count = {k: v*(v-1)//2 for k, v in count.items()}\n    return sum(count.values())\n"}
{"task_id": "Open/165", "completion": "\n    count = 1\n    if height > 0 :\n        count += AVLnodes(height-1)\n        count += AVLnodes(height-2)\n    return count\n"}
{"task_id": "Open/166", "completion": "\n    steps = 0\n    diff = abs(source - dest)\n    if diff == 0 :\n        return steps\n    elif diff > 0 :\n        steps += 1\n        while diff!= 0 :\n            diff = abs(source - dest)\n            if diff > 0 :\n                steps += 1\n                source += step\n            elif diff < 0 :\n                steps += 1\n                source -= step\n    elif diff < 0 :\n        steps += 1\n        while diff!= 0 :\n            diff = abs(source - dest)\n            if diff < 0 :\n                steps += 1\n                source -= step\n            elif diff > 0 :\n                steps += 1\n                source += step\n    return steps\n"}
{"task_id": "Open/167", "completion": "\n    if n == 1 :\n        return \"1\"\n    else :\n        current_term = \"1\"\n        count = 1\n        for i in range(2, n+1) :\n            if current_term[-1]!= current_term[-2] :\n                current_term = current_term[:-1] + str(count)\n                count = 1\n            else :\n                count += 1\n        return current_term\n"}
{"task_id": "Open/168", "completion": "\n    max_length = 0\n    for i in range(1,N+1) :\n        product = 1\n        for j in range(i) :\n            product *= arr[j]\n        if product >= 0 :\n            max_length = max(max_length,i)\n    return max_length\n"}
{"task_id": "Open/169", "completion": "\n    m = abs( m )\n    n = abs( n )\n    return ( m * n ) / math.sqrt( m * m + n * n )\n"}
{"task_id": "Open/170", "completion": "\n    counter = 0\n    for i in range(n) :\n        for j in range(i,n) :\n            if arr[i] + arr[j] < k :\n                counter += 1\n    return counter\n"}
{"task_id": "Open/171", "completion": "\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "\n    count = 0\n    for i in range(l,r+1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "\n    \n    mask = (1 << m) - 1\n    return n ^ mask\n"}
{"task_id": "Open/174", "completion": "\n    count = 0\n    for i in range(L, R + 1):\n        if i % 9 == 0:\n            count += 1\n        if i % 9 == K:\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "\n    product = n * math.log(n,10)\n    return str(product)[:k]\n"}
{"task_id": "Open/176", "completion": "\n    for i in range(1,n) :\n        if A[i] > max(A[:i]) and A[i] < min(A[i+1:]):\n            return A[i]\n    return -1\n\nA = [1,2,3,4,5,6,7,8,9,10]\nn = len(A)"}
{"task_id": "Open/177", "completion": "\n    a.sort()\n    b.sort()\n    c.sort()\n    \n    sum1 = sum(a)\n    sum2 = sum(b)\n    sum3 = sum(c)\n    \n    if sum1 > sum2 :\n        diff = sum1 - sum2\n    else :\n        diff = sum2 - sum1\n    \n    return diff\n"}
