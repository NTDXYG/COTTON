{"task_id": "Open/0", "completion": "    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    count = 0\n    for i in range(N):\n        if sum + K > arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/1", "completion": "    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    if arr[0] < arr[1] :\n        return 1\n    else :\n        return maxLen(arr[1:], n-1) + 1\n"}
{"task_id": "Open/2", "completion": "    \n    # Convert the binary representation of n to a string.\n    binaryString = str(bin(n))[2:]\n    \n    # Iterate through the bits in the string from l to r (inclusive).\n    for i in range(l, r+1) :\n        # If any bit is not set to 1, return \"No\".\n        if binaryString[i] == '0' :\n            return \"No\"\n    \n    # Return \"Yes\".\n    return \"Yes\"\n"}
{"task_id": "Open/3", "completion": "    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1, n ) :\n            if ( A[i] + A[j] ) % K == 0 :\n                count += 1\n    return count\n"}
{"task_id": "Open/4", "completion": "    totalSum = sum(a)\n    for i in range(1, n):\n        if (totalSum - a[i]) % 2 == 0:\n            return True\n    return False\n"}
{"task_id": "Open/5", "completion": "    \n    # convert the integer to its binary representation\n    x_bin = bin(x)\n    \n    # count the number of 1's in the binary representation\n    count = x_bin.count('1')\n    \n    # if the count is odd, return 1\n    if count % 2 == 1 :\n        return 1\n    \n    # otherwise, return 0\n    else :\n        return 0\n"}
{"task_id": "Open/6", "completion": "    output = []\n    for i in range(len(vec)) :\n        vec[i] = abs(vec[i]) - 1\n    for i in range(len(vec)) :\n        if vec[i] > 0 :\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/7", "completion": "    max_length = 0\n    for i in range(n):\n        length = 1\n        for j in range(i+1,n):\n            if arr[j] >= 10:\n                length += 1\n            else:\n                break\n        max_length = max(max_length,length)\n    return max_length\n"}
{"task_id": "Open/8", "completion": "    \n    # Initialize an empty list to store the distinct prime factors.\n    distinct_prime_factors = []\n    \n    # Iterate through each integer in the input list.\n    for i in range(len(a)) :\n        \n        # Initialize a variable to store the prime factors of the integer.\n        prime_factors = []\n        \n        # Find its prime factors and add them to the list of distinct prime factors.\n        for j in range(2, int(math.sqrt(a[i])) + 1) :\n            if a[i] % j == 0 :\n                prime_factors.append(j)\n                while a[i] % j == 0 :\n                    a[i] = a[i] / j\n        \n        # Add the prime factors to the list of distinct prime factors.\n        distinct_prime_factors.append(prime_factors)\n    \n    # Count the number of distinct prime factors in the list.\n    count = 0\n    for i in range(len(distinct_prime_factors)) :\n        count += len(distinct_prime"}
{"task_id": "Open/9", "completion": "    \n    arr.sort(reverse=True)\n    \n    sum = 0\n    for i in range(k):\n        sum += arr[i] - arr[0]\n    \n    for i in range(k,n):\n        sum += arr[i] - arr[i-k]\n    \n    return sum\n"}
{"task_id": "Open/10", "completion": "    total_time = 0\n    while len(A) > 0 :\n        if A[0] == B[0] :\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else :\n            B.appendleft(B.pop())\n            A.append(A.popleft())\n    return total_time\n"}
{"task_id": "Open/11", "completion": "    count = 0\n    for i in range(size):\n        if array[i]!= 0 and array[i]!= 2:\n            if array[i] % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "Open/12", "completion": "    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if len(set(s[i:j+1])) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/13", "completion": "    current_number = 2\n    while current_number <= n:\n        if n % current_number == 0:\n            return False\n        current_number *= 2\n    return True\n"}
{"task_id": "Open/14", "completion": "    \n    # Step 1.\n    remainder = n % 4\n    \n    # Step 2.\n    if remainder == 0:\n        return n\n    elif remainder == 1:\n        return 1\n    elif remainder == 2:\n        return n + 1\n    elif remainder == 3:\n        return 0\n    \n    # Step 3.\n    return \"\"\n"}
{"task_id": "Open/15", "completion": "    \n    # Step 1\n    a = random.randint(2, n-1)\n    \n    # Step 2\n    b = pow(a, (n-1)/2, n)\n    \n    # Step 3\n    if b == 1 or b == n-1 :\n        for i in range(t-1) :\n            a = random.randint(2, n-1)\n            b = pow(a, (n-1)/2, n)\n            if b!= 1 and b!= n-1 :\n                return -1\n        return 1\n    else :\n        return -1\n"}
{"task_id": "Open/16", "completion": "    for i in range(n) :\n        if s1[i] == '0' and s2[i] == '1' or s1[i] == '1' and s2[i] == '0' or s1[i] == '0' and s2[i] == 'Z' or s1[i] == 'Z' and s2[i] == '0' :\n            return True\n    return False\n"}
{"task_id": "Open/17", "completion": "    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(length) :\n        if i%2 == 0 :\n            if s[i] == '0' :\n                count += 1\n        else :\n            if s[i] == '1' :\n                count += 1\n    return min(count, length - count)\n"}
{"task_id": "Open/19", "completion": "    count = 0\n    for i in range(1, n+1):\n        if isPowerNumber(i):\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    if y == 0 :\n        return 1\n    else :\n        return x * product ( x, y - 1 )\n"}
{"task_id": "Open/21", "completion": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if a[i] % 4 == 0 :\n            count0 += 1\n        elif a[i] % 4 == 1 :\n            count1 += 1\n        elif a[i] % 4 == 2 :\n            count2 += 1\n        elif a[i] % 4 == 3 :\n            count3 += 1\n    if count0 == n and count1 == n and count2 == n and count3 == n :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "completion": "    max_len = 0\n    for i in range(n):\n        curr_len = 1\n        for j in range(i+1,n):\n            if arr[j] > arr[i]:\n                curr_len += 1\n            else:\n                max_len = max(max_len, curr_len)\n                curr_len = 1\n        max_len = max(max_len, curr_len)\n    return max_len\n"}
{"task_id": "Open/23", "completion": "    if i == len(arr) :\n        if sum == 0 :\n            count += 1\n        return count\n    else :\n        return subsetSum(arr, n, i + 1, sum - arr[i], count) + subsetSum(arr, n, i + 1, sum, count)\n"}
{"task_id": "Open/24", "completion": "    \n    # Calculate the center hexadecagonal number for the given value of n.\n    center_hexadecagonal_num = ( n * ( n + 1 ) ) / 2\n    \n    # Return the calculated center hexadecagonal number.\n    return center_hexadecagonal_num\n"}
{"task_id": "Open/25", "completion": "    \n    # Initialize a variable sum as 0.\n    sum = 0\n    \n    # Iterate through the range from 1 to n+1.\n    for i in range ( 1, n+1 ) :\n        # Add the square of each number to sum.\n        sum += i**2\n    \n    # Add 1 to sum.\n    sum += 1\n    \n    # Return the sum of the squares, the sum, and the total sum. \n    return sum\n"}
{"task_id": "Open/26", "completion": "    max_sum = 0\n    for i in range(1, n+1) :\n        sum = 0\n        for j in range(1, i+1) :\n            if i % j == 0 :\n                sum += j\n        if sum > max_sum :\n            max_sum = sum\n    return max_sum\n"}
{"task_id": "Open/27", "completion": "    if x <= y :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/28", "completion": "    return 9 * n * n - 9 * n + 1\n"}
{"task_id": "Open/29", "completion": "    \n    return (b - a) / a\n"}
{"task_id": "Open/30", "completion": "    sum_squares = 0\n    for i in range(1, n+1) :\n        sum_squares += i**2\n    return sum_squares / n\n"}
{"task_id": "Open/31", "completion": "    \n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "Open/32", "completion": "    return 3**(n-1)\n"}
{"task_id": "Open/33", "completion": "    \n    if n == 1 :\n        return 1\n    else :\n        return findTerm(n-1) * 2 + (n-1) - 1\n"}
{"task_id": "Open/34", "completion": "    count = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if (a[i] * a[j]) < k:\n                count += 1\n    return count\n"}
{"task_id": "Open/35", "completion": "    count = 0\n    for i in range(1, n+1):\n        string = str(i)\n        count += string.count(str(d))\n    return count\n"}
{"task_id": "Open/36", "completion": "    \n    # Step 1. Initialize a set to store positive integers from the array.\n    pos_int_set = set()\n    \n    # Step 2. Iterate through the array and add positive integers to the set.\n    for i in range(n):\n        if arr[i] > 0:\n            pos_int_set.add(arr[i])\n    \n    # Step 3. Iterate through positive integers starting from 1.\n    for i in range(1, n + 1):\n        if i not in pos_int_set:\n            return i\n    \n    # Step 4. If all positive integers are present, return the next positive integer after the maximum integer in the array.\n    return i + 1\n"}
{"task_id": "Open/37", "completion": "    if n == 0 or n == 1 :\n        return 1\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1) :\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n"}
{"task_id": "Open/38", "completion": "    area = 0\n    length = l\n    breadth = b\n    while length > 0 and breadth > 0:\n        area += (length * breadth)\n        length -= 1\n        breadth -= 1\n    return area\n"}
{"task_id": "Open/39", "completion": "    return sum(range(1, N+1))\n"}
{"task_id": "Open/40", "completion": "    max_zeros = 0\n    count_zeros = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count_zeros = 0\n        else:\n            count_zeros += 1\n        if count_zeros > max_zeros:\n            max_zeros = count_zeros\n    if max_zeros > 0:\n        return max_zeros\n    else:\n        return -1\n"}
{"task_id": "Open/41", "completion": "    max_length = 0\n    for i in range(n):\n        if arr[i] == 0:\n            length = i\n            while i < n:\n                if arr[i] == 0:\n                    length += 1\n                else:\n                    break\n            if length > max_length:\n                max_length = length\n    return max_length\n"}
{"task_id": "Open/42", "completion": "    \n    # Initialize an empty list called'max_min_segments'\n    max_min_segments = []\n    \n    # Iterate through the array 'a' with a step size of 'k'\n    for i in range(0, n, k):\n        # For each segment, find the minimum element and append it to'max_min_segments'\n        min_element = min(a[i:i+k])\n        max_min_segments.append(min_element)\n    \n    # Find the maximum element in'max_min_segments'\n    max_element = max(max_min_segments)\n    \n    # Return the maximum element\n    return max_element\n"}
{"task_id": "Open/43", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (array[j]*array[i]) <= k:\n                count += 1\n    return count\n"}
{"task_id": "Open/44", "completion": "    \n    arr.sort()\n    sum = 0\n    for i in range(n):\n        sum += abs(arr[i] - (i+1))\n    return sum\n"}
{"task_id": "Open/45", "completion": "    \n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    return min_element * (n - 1)\n"}
{"task_id": "Open/46", "completion": "    max_diff = 0\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if i!= j:\n                diff = abs(array[i] - array[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/47", "completion": "    return ( ( a * x1 + b * y1 ) - c ) * ( a * x2 + b * y2 ) > 0\n"}
{"task_id": "Open/48", "completion": "    return sum(1 for i in range(0, a + 1) if a == i + (a ^ i))\n"}
{"task_id": "Open/49", "completion": "    max_AND = 0\n    for i in range(L,R+1) :\n        if i & max_AND < i :\n            max_AND = i & max_AND\n    return max_AND\n"}
{"task_id": "Open/50", "completion": "    smallest = None\n    for i in range(1, n):\n        if smallest is None or i < smallest:\n            smallest = i\n        if smallest is not None and i % smallest == 0:\n            break\n    return smallest\n"}
{"task_id": "Open/51", "completion": "    if n == 0 :\n        return 1\n    else :\n        return 1/3**n + sum(n-1)\n"}
{"task_id": "Open/52", "completion": "    result = 0\n    for i in range(n) :\n        for j in range(n) :\n            if (i+1) * (j+1) > n :\n                break\n            if (i+1) * (j+1) == n :\n                if (arr[i][j] * arr[i][j+1] * arr[i+1][j] * arr[i+1][j+1]) % 2 == 1 :\n                    result += arr[i][j] ^ arr[i][j+1] ^ arr[i+1][j] ^ arr[i+1][j+1]\n    return result\n"}
{"task_id": "Open/53", "completion": "    \n    count = 0\n    \n    for i in range(N+1) :\n        xor = i ^ i\n        if xor == i :\n            count += 1\n    \n    return count\n"}
{"task_id": "Open/54", "completion": "    \n    # Initialize a set to store unique elements.\n    unique_elements = set()\n    \n    # Iterate through the array.\n    for i in range(n):\n        \n        # If an element is already in the set, return False.\n        if a[i] in unique_elements:\n            return False\n        \n        # Otherwise, add the element to the set.\n        else:\n            unique_elements.add(a[i])\n    \n    # Return True.\n    return True\n"}
{"task_id": "Open/55", "completion": "    \n    # Convert the integer to binary representation\n    binary = bin(n)\n    \n    # Check if the first bit is set to 1 and the last bit is set to 1\n    if binary[0] == '1' and binary[-1] == '1' :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/56", "completion": "    max_partitions = 0\n    current_partitions = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_partitions += 1\n        else:\n            max_partitions = max(max_partitions, current_partitions)\n            current_partitions = 1\n    return max(max_partitions, current_partitions)\n"}
{"task_id": "Open/57", "completion": "    if N % K == 0 :\n        return N\n    else :\n        return N - (N % K)\n"}
{"task_id": "Open/58", "completion": "    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = result + var1 + var2\n    for i in range(2, N):\n        var1 = arr[i]\n        result = result + var1\n        result = result + (var1 * var2) / 100\n    return result\n"}
{"task_id": "Open/59", "completion": "    result = arr[index]\n    for i in range(reversals) :\n        for j in range(len(ranges)) :\n            if ranges[j][0] <= index and index <= ranges[j][1] :\n                temp = arr[ranges[j][0]]\n                arr[ranges[j][0]] = arr[ranges[j][1]]\n                arr[ranges[j][1]] = temp\n    return result\n"}
{"task_id": "Open/60", "completion": "    \n    # Step 1\n    for i in range(1, n+1) :\n        for j in range(1, n+1) :\n            if i**2 + j**2 == n :\n                return True\n    return False\n"}
{"task_id": "Open/61", "completion": "    count = 0\n    for i in range(len(b)) :\n        if b[i] == a[0] :\n            count += 1\n        else :\n            return -1\n    return count\n"}
{"task_id": "Open/62", "completion": "    \n    # Initialize a variable \"modified_string\" as an empty string.\n    modified_string = \"\"\n    \n    # Iterate through the string from the second-to-last character to the first character.\n    for i in range(len-2, -1, -1) :\n        \n        # If a character is greater than the next character, subtract 1 from that character and set all subsequent characters to 9.\n        if str[i] > str[i+1] :\n            modified_string += \"9\"\n        \n        # Append the modified string to \"modified_string\".\n        else :\n            modified_string += str[i]\n    \n    # Return \"modified_string\".\n    return modified_string\n"}
{"task_id": "Open/63", "completion": "    min_value = max(arr)\n    running_sum = 0\n    for i in range(n):\n        running_sum += math.log(arr[i])\n        if running_sum < math.log(min_value) * n:\n            min_value = arr[i]\n    return min_value\n"}
{"task_id": "Open/64", "completion": "    if len(s) == 0 or s == '1':\n        return \"-1\"\n    max_len = 0\n    start = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            continue\n        curr_len = 0\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                break\n            curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n            start = i\n    if max_len > 0:\n        return s[start:start+max_len]\n    return \"-1\"\n"}
{"task_id": "Open/65", "completion": "    # Step 1. Initialize a counter dictionary to keep track of the count of each element in the array.\n    counter = {}\n    for i in range(n) :\n        if a[i] in counter :\n            counter[a[i]] += 1\n        else :\n            counter[a[i]] = 1\n    # Step 2. Iterate through the array and update the count in the counter dictionary.\n    for i in range(n) :\n        counter[a[i]] -= 1\n    # Step 3. Sort the array based on the count of each element in the counter dictionary.\n    sorted_counter = sorted(counter.items(), key=lambda x:x[1])\n    # Step 4. Initialize a variable to keep track of the modified array length.\n    modified_array_length = 0\n    # Step 5. Iterate through the sorted array.\n    for i in range(n) :\n        # -If the count of the current element is less than or equal to 'k', increment the modified array length.\n        if sorted_counter[i][1] <= k :\n            modified_array_length += 1\n"}
{"task_id": "Open/66", "completion": "    # sort the array in ascending order\n    arr.sort()\n    # calculate the size of the array after adding k elements\n    size = len(arr) + k\n    # if the size is even, the function calculates the median by taking the average of the two middle elements\n    if size % 2 == 0 :\n        median = (arr[size//2] + arr[size//2 - 1]) / 2\n    # if the size is odd, the function simply returns the middle element as the median\n    else :\n        median = arr[size//2]\n    return median\n"}
{"task_id": "Open/67", "completion": "    \n    # Initialize positive, negative, and zero counts as 0.\n    positive = 0\n    negative = 0\n    zero = 0\n    \n    # Iterate through the array and count the number of positive, negative, and zero elements.\n    for i in range(n) :\n        if a[i] > 0 :\n            positive += 1\n        elif a[i] < 0 :\n            negative += 1\n        else :\n            zero += 1\n    \n    # Calculate the step count based on the positive, negative, and zero counts.\n    step = 0\n    if negative % 2 == 0 :\n        step += zero\n    else :\n        if zero > 0 :\n            step += zero\n        else :\n            step += 2\n    \n    if positive > 0 :\n        step += positive\n    else :\n        step += -positive\n    \n    return step\n"}
{"task_id": "Open/68", "completion": "    if n == 1:\n        return 0\n    v = []\n    n = n - 1\n    while n > 0:\n        v.append(n % 5)\n        n = n // 5\n    result = 0\n    for i in range(len(v) - 1, -1, -1):\n        result = result * 10 + v[i]\n    return 2 * result\n"}
{"task_id": "Open/69", "completion": "    if n < 0 :\n        n = -n\n    if n == 0 :\n        return True\n    if n & 1 == 0 :\n        return False\n    return areSetBitsIncreasing(n >> 1)\n"}
{"task_id": "Open/70", "completion": "    if x > n :\n        return x\n    else :\n        return n * (x // n)\n"}
{"task_id": "Open/71", "completion": "    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n"}
{"task_id": "Open/72", "completion": "    sum = 0\n    for i in range(1, n+1):\n        sum += (i + 2)\n    return sum\n"}
{"task_id": "Open/73", "completion": "    \n    # Initialize a dictionary to store the count of each value in the array.\n    count_dict = {}\n    \n    # Iterate through the array and update the count of each value in the dictionary.\n    for i in range(n) :\n        if arr[i] in count_dict :\n            count_dict[arr[i]] += 1\n        else :\n            count_dict[arr[i]] = 1\n    \n    # Find the maximum value in the array that occurs the same number of times as its value.\n    max_val = 0\n    for i in range(n) :\n        if count_dict[arr[i]] == arr[i] :\n            if max_val < arr[i] :\n                max_val = arr[i]\n    \n    return max_val\n"}
{"task_id": "Open/74", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (a[i] > a[j] and (a[i] & a[j]) == 0):\n                count += 1\n    return count\n"}
{"task_id": "Open/75", "completion": "    return int( ''.join( [ str( 1 - int( i ) ) for i in bin( n )[ 2 : ] ] ), 2 )\n"}
{"task_id": "Open/76", "completion": "    changes = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i+1] == 1 and A[i] == 0:\n            changes += 1\n            A[i+1] = 0\n    return changes\n"}
{"task_id": "Open/77", "completion": "    return radian * 180/pi\n"}
{"task_id": "Open/78", "completion": "    return n // 2\n"}
{"task_id": "Open/79", "completion": "    sum = 0\n    for i in range(1, n+1) :\n        sum += a + (i-1)*d\n    return sum\n"}
{"task_id": "Open/80", "completion": "    if n % 2 == 1 :\n        return 1\n    power = 1\n    while power * 2 <= n :\n        power *= 2\n    return power\n"}
{"task_id": "Open/81", "completion": "    board = [[False for i in range(8)] for j in range(8)]\n    board[row][column] = True\n    count = 0\n    for i in range(moves):\n        if row > 0 and board[row-1][column] == False:\n            count += 1\n            board[row-1][column] = True\n        if row < 7 and board[row+1][column] == False:\n            count += 1\n            board[row+1][column] = True\n        if column > 0 and board[row][column-1] == False:\n            count += 1\n            board[row][column-1] = True\n        if column < 7 and board[row][column+1] == False:\n            count += 1\n            board[row][column+1] = True\n        row += 1\n        column += 1\n        row %= 8\n        column %= 8\n    return count\n"}
{"task_id": "Open/82", "completion": "    current_number = 0\n    numbers = []\n    for i in range(n):\n        current_number += i\n        numbers.append(current_number)\n    return numbers\n"}
{"task_id": "Open/83", "completion": "    \n    # Step 1. Create an empty list to store the last occurrences of each character in the string.\n    last_occurrences = []\n    \n    # Step 2. Iterate through the characters in the string and find the last occurrence of each character.\n    for i in range(len(s)) :\n        last_occurrences.append(s.rfind(s[i]))\n    \n    # Step 3. Sort the string.\n    sorted_string = sorted(s)\n    \n    # Step 4. Compare each character in the sorted string with its corresponding character in the original string.\n    # If a character is not in the correct position, swap it with the character at its last occurrence.\n    for i in range(len(s)) :\n        if last_occurrences[i]!= sorted_string.index(s[i]) :\n            s = s[:last_occurrences[i]] + s[last_occurrences[i]].replace(s[i], '') + s[last_occurrences[i]+1:]\n    \n    # Step 5. Return the modified string.\n"}
{"task_id": "Open/84", "completion": "    \n    # Step 1\n    array = [None] * n\n    \n    # Step 2\n    for i in range(n) :\n        if i % 2 == 0 :\n            array[i] = i + 1\n        else :\n            array[i] = i - 1\n    \n    # Step 3\n    sum = 0\n    for i in range(l-1, r) :\n        sum += array[i]\n    \n    return sum\n"}
{"task_id": "Open/85", "completion": "    \n    if x < y :\n        smaller = x\n    else :\n        smaller = y\n    \n    for i in range ( 2, smaller + 1 ) :\n        if x % i == 0 and y % i == 0 :\n            return i\n    \n    return 1\n"}
{"task_id": "Open/86", "completion": "    current = A\n    for i in range(N-1):\n        current = current + B\n    return current\n"}
{"task_id": "Open/87", "completion": "    count = 0\n    if str.find(substr)!= -1:\n        count += 1\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n"}
{"task_id": "Open/88", "completion": "    # Convert the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n    monthly_interest_rate = (r / 12) / 100\n    # Convert the loan tenure from years to months by multiplying it by 12.\n    monthly_tenure = t * 12\n    # Calculate the EMI using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    emi = (p * monthly_interest_rate * (1 + monthly_interest_rate) ** monthly_tenure) / ((1 + monthly_interest_rate) ** monthly_tenure - 1)\n    # Return the calculated EMI.\n    return emi\n"}
{"task_id": "Open/89", "completion": "    count = 0\n    for i in range(1, A+1):\n        for j in range(1, B+1):\n            for k in range(1, C+1):\n                if i * k > j * j:\n                    count += 1\n    return count\n"}
{"task_id": "Open/90", "completion": "    if l > r :\n        return 0\n    if l == r :\n        return 1 if l % 10 in [2, 3, 9] else 0\n    return countNums(l, (l + r) // 2) + countNums( (l + r) // 2 + 1, r )\n"}
{"task_id": "Open/91", "completion": "    max_length = 0\n    for num in arr:\n        length = 1\n        curr_num = num\n        for num2 in arr:\n            if num2 == curr_num:\n                length += 1\n            elif num2 - curr_num == 0:\n                length += 1\n                curr_num = num2\n            else:\n                curr_num = num2\n                length = 1\n            if length > max_length:\n                max_length = length\n    return max_length\n"}
{"task_id": "Open/92", "completion": "    max_len = -1\n    for i in range(len(str)):\n        for j in range(i, len(str), 2):\n            if str[i:j+1].isalnum():\n                max_len = max(max_len, j-i+1)\n    return max_len\n"}
{"task_id": "Open/93", "completion": "    count = 0\n    while n > 1:\n        count += 1\n        n /= 2\n    return count\n"}
{"task_id": "Open/94", "completion": "    \n    # Step 1. Create a string of length n, consisting of all 'a' characters.\n    # Step 2. Iterate through the string in reverse order.\n    # Step 3. Subtract the current index from k.\n    # Step 4. If k is greater than or equal to 0, check if k is greater than or equal to 26.\n    # Step 5. If it is, replace the character at the current index with 'z' and subtract 26 from k.\n    # Step 6. Otherwise, calculate the ASCII value of the character to be replaced by adding k to 97 and subtracting 1.\n    # Step 7. Replace the character at the current index with the corresponding lowercase letter and subtract the difference between the ASCII values of the replaced character and 'a' from k.\n    # Step 8. If k is less than 0, exit the loop.\n    # Step 9. Add the current index to k.\n    # Step 10. Repeat the above steps for the previous index.\n    # Step 11. Finally, return the modified string.\n    \n    # Step 1.\n    s = 'a' * n\n    \n    # Step 2.\n"}
{"task_id": "Open/95", "completion": "    totalDistance = 0\n    while n > 0 :\n        totalDistance += fuel / n\n        n -= 1\n    return totalDistance\n"}
{"task_id": "Open/96", "completion": "    totalSum = sum(arr)\n    for i in range(n):\n        sumBefore = sum(arr[:i])\n        sumAfter = sum(arr[i+1:])\n        if sumBefore == totalSum/3 and sumAfter == totalSum*2/3:\n            return 1\n    return 0\n"}
{"task_id": "Open/97", "completion": "    return word in sentence\n"}
{"task_id": "Open/98", "completion": "    return len(str(n))\n"}
{"task_id": "Open/99", "completion": "    if a == b and b == c and c == a :\n        return True\n    if k == 0 :\n        return False\n    if a - k == b :\n        return True\n    if a + k == b :\n        return True\n    if b - k == c :\n        return True\n    if b + k == c :\n        return True\n    if c - k == a :\n        return True\n    if c + k == a :\n        return True\n    return False\n"}
{"task_id": "Open/100", "completion": "    \n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    \n    if len(x_bin) < len(y_bin) :\n        x_bin = '0' * (len(y_bin) - len(x_bin)) + x_bin\n    else :\n        y_bin = '0' * (len(x_bin) - len(y_bin)) + y_bin\n    \n    if x_bin == y_bin :\n        return True\n    else :\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/101", "completion": "    count = 0\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            count += 1\n    return count\n"}
{"task_id": "Open/102", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n"}
{"task_id": "Open/103", "completion": "    \n    arr.sort()\n    removal = 0\n    for i in range(1,n):\n        if abs(arr[i]-arr[i-1]) > 1:\n            removal += 1\n    return removal\n"}
{"task_id": "Open/104", "completion": "    \n    # Convert `left` and `right` to binary representation\n    left_binary = bin(left)[2:]\n    right_binary = bin(right)[2:]\n    \n    # Initialize a variable `max_set_bits` to 0\n    max_set_bits = 0\n    \n    # Iterate through the bits in the binary representation of `left`\n    for i in range(len(left_binary)) :\n        \n        # If the current bit is 1 and `max_set_bits` is less than or equal to the current position, increment `max_set_bits` by 1\n        if left_binary[i] == '1' and max_set_bits <= i :\n            max_set_bits += 1\n    \n    # Return `max_set_bits`\n    return max_set_bits\n"}
{"task_id": "Open/105", "completion": "    power = 1\n    while power <= n :\n        power = power * 2\n    return power\n"}
{"task_id": "Open/106", "completion": "    if n <= 0 :\n        return False\n    else :\n        divisors = []\n        for i in range ( 1, n ) :\n            if n % i == 0 :\n                divisors.append ( i )\n        return sum ( divisors ) == n\n"}
{"task_id": "Open/107", "completion": "    \n    # Step 1. Calculate the number of centuries and leap centuries in the year.\n    centuries = ( N // 100 )\n    leap_centuries = ( N // 400 )\n    \n    # Step 2. Calculate the number of leap years by shifting the year by 2 bits.\n    leap_years = ( ( N & 0b11 ) << 2 )\n    \n    # Step 3. Subtract the number of leap years from the total number of days in the year.\n    non_leap_years = ( N - leap_years )\n    \n    # Step 4. If there are any centuries or leap centuries, adjust the number of non-leap years and leap years accordingly.\n    if ( centuries > 0 ) :\n        non_leap_years -= ( centuries * 100 )\n        leap_years += ( centuries * 400 )\n    \n    # Step 5. Calculate the total number of days by adding the number of non-leap years and twice the number of leap years.\n    total_days = ( non_leap_years + ( 2 * leap_years ) )\n    \n    # Step 6. Take"}
{"task_id": "Open/108", "completion": "    if a < 0 :\n        return -1\n    else :\n        return a * (3 * a - 2)\n"}
{"task_id": "Open/109", "completion": "    \n    # Step 1\n    n = str(n)\n    \n    # Step 2\n    counter = 0\n    \n    # Step 3\n    for i in n :\n        if i == d :\n            counter += 1\n    \n    # Step 4\n    return counter\n"}
{"task_id": "Open/110", "completion": "    \n    # Convert the integer to a string\n    n = str(n)\n    \n    # Iterate through each character in the string\n    for i in range(len(n)) :\n        # If the character is not unique in the string, return False\n        if n.count(n[i]) > 1 :\n            return False\n    \n    # Return True\n    return True\n"}
{"task_id": "Open/111", "completion": "    if a == [] :\n        return True\n    elif a[0] % 5 == 0 :\n        return canMakeEqual(a[1:], n)\n    elif a[0] % 3 == 0 :\n        return canMakeEqual(a[1:], n)\n    else :\n        return False\n"}
{"task_id": "Open/112", "completion": "    \n    # Initialize an array with length n+1 and set the first two elements to 4 and 7 respectively.\n    array = [0] * (n+1)\n    array[0] = 4\n    array[1] = 7\n    \n    # Iterate through the indices from 3 to n+1.\n    for i in range(2, n+1):\n        # If the index is odd, set the value at index i to the value at index i//2 multiplied by 10 and added to 4.\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 4\n        # If the index is even, set the value at index i to the value at index (i//2)-1 multiplied by 10 and added to 7.\n        else:\n            array[i] = array[i//2 - 1] * 10 + 7\n    \n    # Return the value at index n of the array.\n    return array[n]\n"}
{"task_id": "Open/113", "completion": "    \n    # Initialize an array with length n+1 and set the first two elements to 3 and 5.\n    array = [0] * (n+1)\n    array[0] = 3\n    array[1] = 5\n    \n    # Iterate through the indices from 3 to n+1.\n    for i in range(3, n+1):\n        # If the index is odd, set the element at index i to the element at index i//2 multiplied by 10 and added with 3.\n        if i % 2 == 1:\n            array[i] = array[i//2] * 10 + 3\n        # If the index is even, set the element at index i to the element at index (i//2)-1 multiplied by 10 and added with 5.\n        else:\n            array[i] = array[i//2 - 1] * 10 + 5\n    \n    # Return the element at index n.\n    return array[n]\n"}
{"task_id": "Open/114", "completion": "Write a function that takes an integer n and returns the nth element of an array.\n        The array is initialized with 0s and has a length of n+1.\n        The first element is set to 1 and the second element is set to 2.\n        For each subsequent element, if the index is odd, the element is calculated by multiplying the element at index i//2 by 10 and adding 1.\n        If the index is even, the element is calculated by multiplying the element at index (i//2)-1 by 10 and adding 2.\n        The function returns the element at index n.\n        \n        How to solve:\n        Step 1. Initialize an array with length n+1 and the first two elements set to 1 and 2 respectively.\n        Step 2. Iterate from 3 to n.\n            -If the index is odd, calculate the element by multiplying the element at index i//2 and adding 1.\n            -If the index is even, calculate the element by multiplying the element at index (i//2)-1 and adding 2.\n            -Update the element at the current index.\n        Step 3"}
{"task_id": "Open/115", "completion": "    result = 0\n    for i in range(n):\n        result = result + a[i]\n    if result % 11 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Open/116", "completion": "    if l < 0 or b < 0 or h < 0 :\n        return -1\n    else :\n        return l * b + b * h + l * h\n"}
{"task_id": "Open/117", "completion": "    \n    # Split the string into a list of words.\n    words = string.split()\n    \n    # Iterate through each word in the list.\n    for i in range(len(words)):\n        \n        # Capitalize the first letter of the word.\n        words[i] = words[i][0].upper() + words[i][1:]\n        \n        # Capitalize the last letter of the word.\n        words[i] = words[i][:-1] + words[i][-1].upper()\n        \n    # Join the list of words back into a string.\n    return \" \".join(words)\n"}
{"task_id": "Open/118", "completion": "    return math.ceil( math.sqrt(8 * p + 1) - 1 ) / 2\n"}
{"task_id": "Open/119", "completion": "    if len(arr) == 0:\n        return True\n    else:\n        return len(arr) == len(set(arr))\n"}
{"task_id": "Open/120", "completion": "    # Your code here\n    # return len(set(string))\n    return len(set(string[i:i+2] for i in range(len(string)-1)))\n"}
{"task_id": "Open/121", "completion": "    if lower == higher :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "completion": "    \n    currentNumber = 0\n    maximumNumber = 0\n    \n    for i in range(len(ss)) :\n        if ss[i].isdigit() :\n            currentNumber = currentNumber * 10 + int(ss[i])\n        else :\n            if currentNumber > maximumNumber :\n                maximumNumber = currentNumber\n            currentNumber = 0\n    \n    return maximumNumber\n"}
{"task_id": "Open/123", "completion": "    longest = \"\"\n    for i in range(length):\n        if s[i].isdigit():\n            if i+1 < length and s[i+1].isdigit():\n                continue\n            else:\n                if len(longest) < len(s[i:]):\n                    longest = s[i:]\n    return longest\n"}
{"task_id": "Open/124", "completion": "    if N > M :\n        N, M = M, N\n    if N == 0 or M == 0 :\n        return 0\n    else :\n        if K == 0 :\n            return N * M\n        else :\n            if N > M :\n                N -= M\n                K -= 1\n            else :\n                M -= N\n                K -= 1\n            return remainingArea ( N, M, K )\n"}
{"task_id": "Open/125", "completion": "    if len(string)!= length :\n        return False\n    for i in range(len(string)-1) :\n        if string[i] == string[i+1] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "completion": "    i = 1\n    while i <= n:\n        i = i * 2\n    return i - 1\n"}
{"task_id": "Open/127", "completion": "    \n    return len(str(A)) == len(str(B))\n"}
{"task_id": "Open/128", "completion": "    \n    if abs(x - y)!= 1 :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/129", "completion": "    \n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    \n    for i in range(3, n+1):\n        Sn_1, Sn_2, Sn_3 = Sn_2, Sn_3, Sn_1 + Sn_2 + Sn_3\n    \n    return Sn_3\n"}
{"task_id": "Open/130", "completion": "    # Initialize an empty list to store the minimum number of steps for each element.\n    steps = [0] * n\n    # Initialize a variable to store the previous element in the array.\n    prev = arr[0]\n    # Iterate through the array.\n    for i in range(1, n):\n        # Calculate the absolute difference between the current element and the previous element.\n        diff = abs(arr[i] - prev)\n        # Add the absolute difference to the list of minimum steps.\n        steps[i] = steps[i-1] + diff\n        # Update the previous element to the current element.\n        prev = arr[i]\n    # Return the list of minimum steps.\n    return steps\n"}
{"task_id": "Open/131", "completion": "    return 0 if n % 4 == 0 or n % 4 == 3 else 1\n"}
{"task_id": "Open/132", "completion": "    m = (N // a) * a\n    sum = (m * (m + 1)) // 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "completion": "    if N <= 2 :\n        return N\n    elif N <= 4 :\n        return N + 3\n    elif (N - 4) % 4 == 0 :\n        return N + 1\n    elif (N - 4) % 4 < 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "completion": "    if arr[0] % 2!= 0 :\n        return False\n    if arr[-1] % 2!= 0 :\n        return False\n    if len(arr) % 2!= 0 :\n        return False\n    return True\n"}
{"task_id": "Open/135", "completion": "    count = 0\n    if N == 1 :\n        for i in range ( L, R + 1 ) :\n            count += 1\n    elif N > 1 :\n        for i in range ( L, R + 1 ) :\n            if i == L :\n                count += 1\n            elif i == R :\n                count += 1\n            else :\n                count += 2\n    return count\n"}
{"task_id": "Open/136", "completion": "    arr.sort()\n    result = 1\n    for i in range(n):\n        if arr[i] >= result:\n            result += 1\n    return result\n"}
{"task_id": "Open/137", "completion": "    \n    # Step 1: Convert the string to a list of characters.\n    charList = list(s)\n    \n    # Step 2: Sort the list of characters.\n    charList.sort()\n    \n    # Step 3: Join the sorted list of characters into a string.\n    sortedString = \"\".join(charList)\n    \n    # Step 4: Convert the string back to an integer.\n    return int(sortedString)\n"}
{"task_id": "Open/138", "completion": "    count = 0\n    for i in range(1, n) :\n        if arr[i] <= arr[i-1] :\n            arr[i] = arr[i-1]\n        else :\n            count += arr[i] - arr[i-1]\n    return count\n"}
{"task_id": "Open/139", "completion": "    \n    # Initialize a variable to store the sum of ASCII codes.\n    sum = 0\n    \n    # Initialize a variable to store the count of characters.\n    count = 0\n    \n    # Iterate through each character in the string.\n    for i in s :\n        # Add the ASCII code of the character to the sum.\n        sum += ord(i)\n        # Increment the count of characters.\n        count += 1\n    \n    # Calculate the average by dividing the sum by the count of characters.\n    average = sum / count\n    \n    # Return the average.\n    return average\n"}
{"task_id": "Open/140", "completion": "    count = 0\n    while S >= A:\n        count += S // A\n        S = S % A\n    if S > 0:\n        return -1\n    return count\n"}
{"task_id": "Open/141", "completion": "    return x * y / math.gcd(x,y)\n"}
{"task_id": "Open/142", "completion": "    \n    # convert the integer to binary representation\n    binary = bin(n)\n    \n    # count the number of trailing zeros in the binary representation\n    count = 0\n    for i in range(len(binary)-1, -1, -1):\n        if binary[i] == '0':\n            count += 1\n        else:\n            break\n    \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Open/143", "completion": "    max_index = 0\n    for i in range(n):\n        left_sum = 0\n        right_sum = 0\n        for j in range(i):\n            left_sum += arr[j]\n        for k in range(i+1,n):\n            right_sum += arr[k]\n        if left_sum ^ right_sum > max_index:\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/144", "completion": "    max_len = 0\n    for i in range(n):\n        curr_len = 1\n        for j in range(i):\n            if arr[j] < arr[i]:\n                curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n"}
{"task_id": "Open/145", "completion": "    \n    # Step 1\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Step 2\n    range_val = max_val - min_val\n    \n    # Step 3\n    if k > range_val:\n        return -1\n    \n    # Step 4\n    if k >= range_val:\n        return min_val + k\n    \n    # Step 5\n    for i in range(n):\n        if arr[i]!= min_val + k:\n            return -1\n    \n    return min_val + k\n"}
{"task_id": "Open/146", "completion": "    length = 1\n    while K % 10 == 0 :\n        K = K / 10\n        length += 1\n    if K!= 1 :\n        return -1\n    return length\n"}
{"task_id": "Open/147", "completion": "    min_ops = 0\n    for i in range(n):\n        min_ops += abs(arr[i] - min(arr))\n    return min_ops\n"}
{"task_id": "Open/148", "completion": "    sum = 3\n    for i in range(1, n) :\n        sum = sum + i\n    return sum\n"}
{"task_id": "Open/149", "completion": "    return s**0.5\n"}
{"task_id": "Open/150", "completion": "    return (p**2 + q**2) / (p + q)\n"}
{"task_id": "Open/151", "completion": "    \n    # Initialize XOR as 0\n    XOR = 0\n    \n    # Iterate through each character in the string\n    for i in range(len1) :\n        # Convert the character to its ASCII value\n        XOR = XOR ^ ord(str1[i])\n    \n    # Return the XOR value\n    return XOR\n"}
{"task_id": "Open/152", "completion": "    \n    # Convert the integer to its binary representation\n    binary = bin(n)\n    \n    # Check if the binary representation contains consecutive 1's\n    for i in range(2, len(binary)) :\n        if binary[i]!= '1' :\n            return True\n    \n    return False\n"}
{"task_id": "Open/153", "completion": "    \n    previous_vowel = s[0]\n    for i in range(1, len(s)):\n        if s[i] in \"aeiouAEIOU\":\n            if s[i] < previous_vowel:\n                return False\n            previous_vowel = s[i]\n    return True\n"}
{"task_id": "Open/154", "completion": "    count = 0\n    for i in range(low, high + 1) :\n        if i % 10 >= k :\n            count += 1\n    return count\n"}
{"task_id": "Open/155", "completion": "    # Your code here\n    if n == 0 :\n        return 0\n    else :\n        return min(abs(n - 2**math.floor(math.log(n, 2))), abs(n - 2**math.ceil(math.log(n, 2))))\n"}
{"task_id": "Open/156", "completion": "    \n    if r < 0 :\n        return -1\n    else :\n        return (1 + math.sqrt(3)) * r**2 / 4\n"}
{"task_id": "Open/157", "completion": "    return ''.join(sorted(s))\n"}
{"task_id": "Open/158", "completion": "    if size == 0 or size == 1 :\n        return 1\n    else :\n        mid = (start + end) // 2\n        if mid == ar[mid] :\n            return search(ar, mid + 1, end)\n        elif mid == ar[mid - 1] :\n            return search(ar, start, mid - 1)\n        else :\n            return search(ar, start, mid - 1) + search(ar, mid + 1, end)\n"}
{"task_id": "Open/159", "completion": "    return str.count(\"010\")\n"}
{"task_id": "Open/160", "completion": "    \n    # Initialize an empty dictionary to store the count of each element.\n    count = {}\n    \n    # Iterate through the array.\n    for i in range(n):\n        \n        # If the element is not in the dictionary, add it with a count of 1.\n        if arr[i] not in count:\n            count[arr[i]] = 1\n        \n        # If the element is already in the dictionary, increment its count by 1.\n        else:\n            count[arr[i]] += 1\n    \n    # Iterate through the array again.\n    for i in range(n):\n        \n        # If the count of an element is odd, return that element.\n        if count[arr[i]] % 2!= 0:\n            return arr[i]\n    \n    # If no element is found, return None.\n    return None\n"}
{"task_id": "Open/161", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr = xorArr ^ arr[i]\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n"}
{"task_id": "Open/162", "completion": "    visited = set()\n    visited.add((sx, sy))\n    queue = deque()\n    queue.append((sx, sy))\n    while len(queue) > 0:\n        x, y = queue.popleft()\n        if (x, y) == (dx, dy):\n            return True\n        if x + y < dx + dy:\n            if (x + y, y) not in visited:\n                visited.add((x + y, y))\n                queue.append((x + y, y))\n        if x + y > dx + dy:\n            if (x, x + y) not in visited:\n                visited.add((x, x + y))\n                queue.append((x, x + y))\n    return False\n"}
{"task_id": "Open/163", "completion": "    if n % 2 == 1 :\n        return 0\n    else :\n        count = 0\n        for i in range ( 2, n + 1, 2 ) :\n            if i % 4 == 0 :\n                count += 1\n        return count\n"}
{"task_id": "Open/164", "completion": "    \n    # Initialize a dictionary to store the count of each element in the array.\n    d = {}\n    for i in range(n):\n        d[arr[i]] = d.get(arr[i], 0) + 1\n    \n    # Iterate through the array and update the count of each element in the dictionary.\n    count = 1\n    for i in range(n):\n        count = count * d[arr[i]]\n    \n    # Calculate the count of all possible subsequences by multiplying the values in the dictionary.\n    return count\n"}
{"task_id": "Open/165", "completion": "    count = 1\n    if height > 0 :\n        count += AVLnodes(height-1)\n        count += AVLnodes(height-2)\n    return count\n"}
{"task_id": "Open/166", "completion": "    steps = 0\n    if source == dest :\n        return steps\n    elif source > dest :\n        return sys.maxsize\n    else :\n        diff = dest - source\n        if diff == 0 :\n            return steps\n        elif diff > 0 :\n            steps += 1\n            return steps\n        else :\n            steps -= 1\n            return steps\n"}
{"task_id": "Open/167", "completion": "    if n == 1 :\n        return \"1\"\n    else :\n        currentTerm = countnndSay(n-1)\n        count = 1\n        nextTerm = \"\"\n        for i in range(1,len(currentTerm)) :\n            if currentTerm[i]!= currentTerm[i-1] :\n                nextTerm += str(count) + currentTerm[i-1]\n                count = 1\n            else :\n                count += 1\n        nextTerm += str(count) + currentTerm[-1]\n        return nextTerm\n"}
{"task_id": "Open/168", "completion": "    max_length = 0\n    for i in range(N):\n        for j in range(i,N):\n            product = 1\n            for k in range(i,j+1):\n                product *= arr[k]\n            if product >= 0:\n                max_length = max(max_length, j-i+1)\n    return max_length\n"}
{"task_id": "Open/169", "completion": "    return (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n"}
{"task_id": "Open/170", "completion": "    counter = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1]) < k:\n                counter += 1\n    return counter\n"}
{"task_id": "Open/171", "completion": "    arr.sort()\n    count = 0\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            k = j+1\n            while k < len(arr):\n                if arr[k] - arr[i] <= L:\n                    count += 1\n                k += 1\n    return count\n"}
{"task_id": "Open/172", "completion": "    count = 0\n    for i in range(l, r + 1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "completion": "    return n ^ ( ( 1 << m ) - 1 )\n"}
{"task_id": "Open/174", "completion": "    total = R - L + 1\n    div9 = total / 9\n    rem = total % 9\n    count = 0\n    if K == 9 :\n        K = 0\n    for i in range ( R, L - rem, -1 ) :\n        if i % 9 == K :\n            count += 1\n    return count\n"}
{"task_id": "Open/175", "completion": "    \n    # Step 1\n    product = n * math.log10(n)\n    \n    # Step 2\n    result = str(product)\n    \n    # Step 3\n    return result[0:k]\n    \n    "}
{"task_id": "Open/176", "completion": "    for i in range(1,n):\n        if A[i] > A[i-1] and A[i] < A[i+1]:\n            return A[i]\n    return -1\n"}
{"task_id": "Open/177", "completion": "    \n    a, b, c = sorted(a,b,c)\n    \n    if a + b >= c :\n        return 0\n    \n    return c - (a + b)\n"}
