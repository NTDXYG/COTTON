"Input: numbers: a list of numbers
Output: bool: True if any two numbers are close to each other than threshold, False otherwise
1: for each number in numbers:
2:     if abs(number - numbers[0]) < threshold
3:         return True
4: return False"
"Input: str: a string
Output: list of strings
1: list of strings
2: list of strings
3: list of strings
4: list of strings
5: list of strings
6: list of strings
7: list of strings
8: list of strings
9: list of strings
10: list of strings
11: list of strings
12: list of strings
13: list of strings
14: list of strings
15: list of strings
16: list of strings
17: list of strings
18: list of strings
19: list of strings
20: list of strings
21: list of strings
22: list of strings
23: list of strings
24: list of strings
25: list of strings
26: list of strings
27: list of strings
28: list of strings
29: list of strings
30: list of strings
31: list of strings
32: list of strings
33: list of strings
34: list of strings
35: list of strings
36: list of strings
37: list of strings
38: list of strings
39: list of strings
40: list of strings
41"
"Input: number: a positive floating point number
Output: integer_part: integer part of the number
1: if number > 0:
2:     return number // 10
3: return number % 10
4: return 0"
"Input: operations: a list of deposit and withdrawal operations
Output: True if at any point the balance of account falls below zero, False otherwise
1: for each deposit and withdrawal operation in operations:
2:     if the deposit and withdrawal operation is below zero:
3:         return True
4: return False
"""""""
"Input: numbers: a list of numbers
Output: MAD: the mean absolute deviation
1: for each number in numbers:
2:     if abs(number - numbers[0]) > 0.01:
3:         return abs(number - numbers[0])
4: return None
"""""""
"Input: numbers: a list of numbers
Output: interspersed_numbers: a list of interspersed numbers
1: for each number in numbers:
2:     if number % 2 == 0:
3:         interspersed_numbers.append(number + delimeter)
4: return interspersed_numbers"
"Input: paren_string: a string
Output: nesting_level: a list of nesting levels
1: for each character ch in paren_string:
2:     if ch appears more than once in paren_string
3:         return nesting_level
4: return []"
"Input: strings: a list of strings
Output: filtered_strings: a list of strings
1: for each string in strings:
2:     if substring in string:
3:         return strings
4: return []"
"Input: numbers: a list of integers
Output: sum: a sum of all the integers in a list
1: for each integer in numbers:
2:     sum += each integer
3: return sum
4: return 0
5: return 1
6: return None
7: return None
8: return None
9: return None
10: return None
11: return None
12: return None
13: return None
14: return None
15: return None
16: return None
17: return None
18: return None
19: return None
20: return None
21: return None
22: return None
23: return None
24: return None
25: return None
26: return None
27: return None
28: return None
29: return None
30: return None
31: return None
32: return None
33: return None
34: return None
35: return None
36: return None
37: return None
38: return None
39: return None
40: return None
41: return None
42: return None
43: return None
44: return None
45: return None"
"Input: numbers: a list of integers
Output: rolling_max_list: a list of rolling maximum elements found until given moment in the sequence
1: for each number in numbers:
2:     if number > rolling_max_list[-1]:
3:         rolling_max_list.append(number)
4: return rolling_max_list"
"Input: string: a string
Output: a string that is a palindrome
1: if string is a palindrome
2: if string is not a palindrome
3: return string
4: return None
"""""""
"Input: a: a string
Output: b: a string
1: a = ""01""
2: b = ""01""
3: a = ""01""
4: b = ""10""
5: a = ""10""
6: b = ""11""
7: a = ""11""
8: b = ""11""
9: a = ""11""
10: b = ""11""
11: a = ""11""
12: b = ""11""
13: a = ""11""
14: b = ""11""
15: a = ""11""
16: b = ""11""
17: a = ""11""
18: b = ""11""
19: a = ""11""
20: b = ""11""
21: a = ""11""
22: b = ""11""
23: a = ""11""
24: b = ""11""
25: a = ""11""
26: b = ""11""
27: a = ""11""
28: b = ""11""
29: a = ""11""
30: b = ""11"""
"Input: strings: a list of strings
Output: longest_string: the longest string in the list
1: if len(strings) > 1:
2:     return max(strings, key=len)
3: return None
4: return None"
"Input: a: an integer
Output: b: a greatest common divisor of a and b
1: if a > b:
2:     return a
3: return b
4: return None"
"Input: str: a string
Output: prefixes: a list of all prefixes from shortest to longest of the input string
1: for each character prefix in string:
2:     if prefix appears more than once in string
3:         return prefix
4: return []"
"Input: n: an integer
Output: a string containing space-delimited numbers starting from 0 upto n inclusive.
1: for each number n in range(0, n+1):
2:     if n appears more than once in str:
3:         return str(n)
4: return None"
"Input: str: a string
Output: number of distinct characters
1: for each character ch in str:
2:     if ch.isalnum():
3:         return len(ch)
4: return 0"
"Input: music_string: a string
Output: music_string_parsed: a list of integers corresponding to how many beats does each not last
1: for each character ch in music_string:
2:     if ch appears more than once in music_string
3:         return music_string_parsed
4: return None"
"Input: str: a string
Output: how many times a given substring can be found in the original string. Count overlaping cases.
1: for each character ch in str:
2:     if ch appears more than once in str
3:         return how_many_times(string, substring)
4: return 0"
"Input: str: a string
Output: str: a string sorted from smallest to largest
1: for each character ch in str:
2:     if ch appears more than once in str
3:         return ch
4: return None"
"Input: numbers: a list of numbers
Output: smallest_number: the smallest number in numbers
2: smallest_number = min(numbers)
3: return smallest_number
4: return None"
"Input: numbers: a list of numbers
Output: a list of numbers in the range [0,1]
1: for each number in numbers:
2:     if number > 0:
3:         return [0,1]
4: return []"
"Input: values: a list of any python values only for integers
Output: filtered_values: a list of integers
1: for each value in values:
2:     if isinstance(value, int):
3:         return value
4: return []"
"Input: str: a string
Output: length of given string
1: return len(string)
2: return 0
3: return 0
4: return 0
5: return 0
6: return 0
7: return 0
8: return 0
9: return 0
10: return 0
11: return 0
12: return 0
13: return 0
14: return 0
15: return 0
16: return 0
17: return 0
18: return 0
19: return 0
20: return 0
21: return 0
22: return 0
23: return 0
24: return 0
25: return 0
26: return 0
27: return 0
28: return 0
29: return 0
30: return 0
31: return 0
32: return 0
33: return 0
34: return 0
35: return 0
36: return 0
37: return 0
38: return 0
39: return 0
40: return 0
41: return 0
42: return 0
43: return 0
44: return 0
45: return 0
46: return 0
47: return 0
48:"
"Input: n: an integer
Output: largest_divisor: the largest number that divides n evenly, smaller than n
1: if n is evenly divisible by any number from 1 to n
2: if n is evenly divisible by any number from 1 to n
3: if n is evenly divisible by any number from 1 to n
4: if n is evenly divisible by any number from 1 to n
5: if n is evenly divisible by any number from 1 to n
6: if n is evenly divisible by any number from 1 to n
7: if n is evenly divisible by any number from 1 to n
8: if n is evenly divisible by any number from 1 to n
9: if n is evenly divisible by any number from 1 to n
10: if n is evenly divisible by any number from 1 to n
11: if n is evenly divisible by any number from 1 to n
12: if n is evenly divisible by any number from 1 to n
13: if n is evenly divisible by any number from 1 to n
14: if n is"
"Input: n: an integer
Output: factors: a list of prime factors of n
1: for each prime factor in factors:
2:     if n % prime factor == 0:
3:         return factors
4: return None"
"Input: numbers: a list of integers
Output: numbers: a list of integers without duplicates
1: for each number in numbers:
2:     if numbers.count(number) > 1:
3:         numbers.remove(number)
4: return numbers"
"Input: str: a string
Output: string: a string with all lowercase characters flipped
1: for each character in str:
2:     if ch.islower():
3:         string = string.upper()
4: return string"
"Input: str: a string
Output: str: a concatenated string
1: for each string in strings:
2:     if len(str) > 1:
3:         return ''.join(str)
4: return None"
"Input: strings: a list of strings
Output: filtered_strings: a list of strings only for ones that start with a given prefix
1: for each string in strings:
2:     if string.startswith(prefix):
3:         return strings
4: return []"
"Input: l: a list
Output: positive_numbers: a list of positive numbers in l
1: for each number in l:
2:     if number > 0:
3:         positive_numbers.append(number)
4: return positive_numbers"
"Input: n: a number
Output: True if n is prime, False otherwise
1: if n is prime
2: if n is not prime
3: if n is not prime and n > 1
4: if n is not prime and n < 100
5: if n is not prime and n > 1 and n < 100 and n % 2 == 0:
6: if n is not prime and n % 2 == 0 and n % 3 == 0:
7: if n is not prime and n % 3 == 0 and n % 5 == 0:
8: if n is not prime and n % 5 == 0 and n % 7 == 0:
9: if n is not prime and n % 7 == 0 and n % 9 == 0:
10: if n is not prime and n % 9 == 0 and n % 11 == 0:
11: if n is not prime and n % 11 == 0 and n % 13 == 0:
12: if n is not prime and n % 13 == 0 and n % 14 == 0:
13: if n is not prime and n % 14 == 0 and n % 15 == 0:
14: if n is not"
"Input: xs: a list of coefficients
Output: x: the first non zero point
1: for each coefficient x in xs:
2:     if x!= 0
3:         return x
4: return None
""""""


def find_max(xs: list):
    """""" xs are coefficients of a polynomial.
    find_max find x such that poly(x) = max(xs).
    find_max returns only only max point, even if there are many.
    Moreover, find_max only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    """"""

#### Output:
Input: xs: a list of coefficients
Output: x: the first non zero point
1: for each coefficient x in xs:
2:     if x!= 0
3:         return x
4: return None
""""""


def find_min(xs: list):
    """""" xs are coefficients of a polynomial.
    find_min find x such that poly(x) = min(xs).
    find_min returns only only min point, even if there are many."
"Input: l: a list
Output: l_sorted: a list sorted by the values of the corresponding indicies of l
1: for each element in l:
2:     if l[i] % 3 == 0:
3:         l_sorted.append(l[i])
4: return l_sorted"
"Input: l: a list
Output: unique_list: a list of unique elements in l
1: for each element in l:
2:     if l.count(l[0]) > 1:
3:         return l
4: return []"
"Input: l: a list
Output: m: the maximum element in the list
1: for each element m in l:
2:     if m > l[0]:
3:         return m
4: return None"
"Input: n: an integer
Output: count: the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
1: for each digit 7 in n:
2:     if n % 11 == 0:
3:         count += 1
4: return count"
"Input: l: a list
Output: l_sorted: a list sorted evenly
1: for each element in l:
2:     if element % 2 == 0:
3:         l_sorted.append(element)
4: return l_sorted"
"Input: s: a string
Output: decoded string
1: for each character ch in s:
2:     if ch appears more than once in s
3:         return ch
4: return None"
"Input: n: an integer
Output: prime_fib(n): a Fibonacci number and it's also prime
1: for each number n in range(1, n+1):
2:     if n % 2 == 0:
3:         return False
4: return True"
"Input: l: a list of integers
Output: true if there are three distinct elements in the list that
    sum to zero, and false otherwise.
1: for each element in l:
2:     if l[i] == 0:
3:         return True
4: return False
"""""""
"Input: n: an integer
Output: number of collisions
1: if n is odd, return 0
2: if n is even, return 1
3: return 2
4: return None"
"Input: l: a list
Output: l: a list with elements incremented by 1
1: for each element in l:
2:     if l[i] == 1:
3:         l[i] = 2
4: return l"
"Input: l: a list of integers
Output: True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
1: for each element in l:
2:     if l.count(element) > 1:
3:         return True
4: return False"
"Input: x: a number
Output: str: a string representation after the conversion.
1: if x is less than 10:
2:     return str(x)
3: return None
4: return None
"""""""
"Input: a: a side length
Output: h: a high return area
1: for each side length a:
2:     if a > h:
3:         return a * h
4: return None"
"Input: n: an integer
Output: the nth element of the fib4 number sequence
1: return fib4(0)
2: return fib4(1)
3: return fib4(2)
4: return fib4(3)"
"Input: l: a list
Output: median: the median of the list
1: if len(l) % 2 == 0:
2:     return l[len(l)//2]
3: return None
4: return None"
"Input: str: a string
Output: True if given string is a palindrome
1: if str == str[::-1]:
2:     return True
3:     return False
4:     return None"
"Input: n: an integer
Output: p: a positive integer
1: if n is a positive integer, return p
2: if n is a negative integer, return p
3: if n is a zero integer, return p
4: if n is not a positive integer, return p
5: if n is not a negative integer, return p
6: if n is not a zero integer, return p
7: if n is not a positive integer and n is not a negative integer, return p
8: if n is not a positive integer and n is not a zero integer, return p
9: if n is not a negative integer and n is not a zero integer, return p
10: if n is not a negative integer and n is not a positive integer, return p
11: if n is not a negative integer and n is not a zero integer, return p
12: if n is not a negative integer and n is not a positive integer, return p
13: if n is not a negative integer and n is not a zero integer, return p
14: if n is not a negative integer and n is not a positive integer, return p
15: if n"
"Input: str: a string
Output: decoded string
1: for each character ch in str:
2:     if ch appears more than once in str
3:         return ch
4: return None
"""""""
"Input: str: a string
Output: text without vowels
1: for each character ch in str:
2:     if ch not in vowels:
3:         return text
4: return None"
"Input: l: a list
Output: t: a boolean value
1: if all numbers in l are below threshold t
2:     return True
3:     return False
4: return None"
"Input: x: a number
Output: y: a number
1: x + y
2: x + y
3: x + y
4: x + y
5: x + y
6: x + y
7: x + y
8: x + y
9: x + y
10: x + y
11: x + y
12: x + y
13: x + y
14: x + y
15: x + y
16: x + y
17: x + y
18: x + y
19: x + y
20: x + y
21: x + y
22: x + y
23: x + y
24: x + y
25: x + y
26: x + y
27: x + y
28: x + y
29: x + y
30: x + y
31: x + y
32: x + y
33: x + y
34: x + y
35: x + y
36: x + y
37: x + y
38: x + y
39: x + y
40: x + y"
"Input: s0: a string
Output: s1: a string
1: if s0 == s1:
2:     return True
3:     return False
4: return None"
"Input: n: an integer
Output: fib(n): the n-th Fibonacci number.
1: fib(0) = 0
2: fib(1) = 1
3: fib(2) = 1
4: fib(3) = 2
5: fib(4) = 3
6: fib(5) = 5
7: fib(6) = 8
8: fib(7) = 13
9: fib(8) = 21
10: fib(9) = 34
11: fib(10) = 55
12: fib(11) = 89
13: fib(12) = 144
14: fib(13) = 233
15: fib(14) = 377
16: fib(15) = 610
17: fib(16) = 720
18: fib(17) = 880
19: fib(18) = 960
20: fib(19) = 1080
21: fib(20) = 1280
22: fib(21) = 1440"
"Input: brackets: a string
Output: True if every opening bracket has a corresponding closing bracket.
1: if brackets.count(""<"") == brackets.count("">""):
2:     return True
3:     return False
4: return False
"""""""
"Input: l: a list
Output: True if l is monotonically increasing or decreasing
1: if l is monotonically increasing
2: if l is monotonically decreasing
3: return False
4: return True"
"Input: l1: a list
Output: l2: a list
1: l1.sort()
2: l2.sort()
3: l1.intersection(l2)
4: l1.union(l2)
5: l1.difference(l2)
6: l1.symmetric_difference(l2)
7: l1.pop()
8: l1.pop(0)
9: l1.pop(0)
10: l1.pop(0)
11: l1.pop(0)
12: l1.pop(0)
13: l1.pop(0)
14: l1.pop(0)
15: l1.pop(0)
16: l1.pop(0)
17: l1.pop(0)
18: l1.pop(0)
19: l1.pop(0)
20: l1.pop(0)
21: l1.pop(0)
22: l1.pop(0)
23: l1.pop(0)
24: l1.pop("
"Input: n: an integer
Output: largest_prime_factor: the largest prime factor of n
1: if n > 1:
2:     for i in range(2, n):
3:         if n % i == 0:
4:             return i
5: return None
6: return None
7: return None
8: return None
9: return None
10: return None
11: return None
12: return None
13: return None
14: return None
15: return None
16: return None
17: return None
18: return None
19: return None
20: return None
21: return None
22: return None
23: return None
24: return None
25: return None
26: return None
27: return None
28: return None
29: return None
30: return None
31: return None
32: return None
33: return None
34: return None
35: return None
36: return None
37: return None
38: return None
39: return None
40: return None
41: return None
42: return None
43: return None"
"Input: n: an integer
Output: sum: a sum of numbers from 1 to n
1: sum = 0
2: for i in range(1, n+1):
3:     sum += i
4: return sum"
"Input: brackets: a string
Output: True if brackets has a corresponding closing bracket.
1: if brackets.count(""("") == brackets.count("")""):
2:     return True
3: return False
4: return None"
"Input: xs: a list of coefficients
Output: d: a list of derivative coefficients
1: for each coefficient x in xs:
2:     if x > 0:
3:         d.append(x)
4: return d"
"Input: n: an integer
Output: the n-th element of the fibfib number sequence
1: for each element n in range(n):
2:     if n == 0:
3:         return 0
4:     if n == 1:
5:         return 1
6: return None"
"Input: s: a string
Output: vowels: the number of vowels in the string
1: for each character ch in s:
2:     if ch in 'aeiou':
3:         return s.count(ch)
4: return 0"
"Input: x: an integer
Output: y: a string
1: x = x + shift
2: x = x + shift
3: x = x + shift
4: x = x + shift
5: x = x + shift
6: x = x + shift
7: x = x + shift
8: x = x + shift
9: x = x + shift
10: x = x + shift
11: x = x + shift
12: x = x + shift
13: x = x + shift
14: x = x + shift
15: x = x + shift
16: x = x + shift
17: x = x + shift
18: x = x + shift
19: x = x + shift
20: x = x + shift
21: x = x + shift
22: x = x + shift
23: x = x + shift
24: x = x + shift
25: x = x + shift
26: x = x + shift
27: x = x + shift
28: x = x + shift
29: x = x + shift
30: x = x + shift"
"Input: str: a string
Output: sum: the sum of the upper characters only' ASCII codes
1: for each character ch in str:
2:     if ch.isupper():
3:         sum += ord(ch)
4: return sum"
"Input: s: a string
Output: n: an integer
1: for each character ch in s:
2:     if ch appears more than once in s
3:         return n
4: return None"
"Input: arr: an array
Output: a list of [ smalest_value, its index ]
1: for each element in arr:
2:     if element % 2 == 0:
3:         return [ element, arr.index(element) ]
4: return []
"""""""
"Input: lst: a list of positive integers
Output: greatest_integer: the greatest integer that is greater than zero
1: for each integer val in lst:
2:     if val > 0:
3:         return val
4: return -1"
"Input: lst: a list of integers
Output: lst: sorted list
1: lst.sort()
2: lst.sort(reverse=True)
3: lst.sort(key=lambda x: x % 2)
4: lst.sort(key=lambda x: x % 2, reverse=True)
5: lst.sort(key=lambda x: x % 2, reverse=True)
6: lst.sort(key=lambda x: x % 2, reverse=True)
7: lst.sort(key=lambda x: x % 2, reverse=True)
8: lst.sort(key=lambda x: x % 2, reverse=True)
9: lst.sort(key=lambda x: x % 2, reverse=True)
10: lst.sort(key=lambda x: x % 2, reverse=True)
11: lst.sort(key=lambda x: x % 2, reverse=True)
12: lst.sort(key=lambda x: x % 2, reverse=True)
13: lst.sort(key=lambda x: x % 2, reverse=True)
14: lst."
"Input: a, b, c: two integers
Output: area: the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
1: if a + b > c:
2:     if a + c > b:
3:         return a * b * c
4: return -1"
"Input: q: a list
Output: will_it_fly: True if q will fly, and False otherwise
1: if q is a palindromic list and the sum of its elements is less than or equal the maximum possible weight w
2: if q is not a palindromic list and the sum of its elements is greater than or equal the maximum possible weight w
3: return False
4: return True"
"Input: arr: an array of integers
Output: minimum number of elements that need to be changed to make the array palindromic
1: for each element in arr:
2:     if arr[i]!= arr[i+1]:
3:         return i+1
4: return 0"
"Input: lst1: a list of strings
Output: lst2: a list of strings
1: for each string in lst1:
2:     if len(lst1) == len(lst2):
3:         return lst1
4: return None"
"Input: a: a number
Output: true if a is a multiple of 3 prime numbers and false otherwise
1: if a is a multiple of 3 prime numbers
2:     if a is a multiple of 3 prime numbers
3:         return True
4: return False"
"Input: x: a number
Output: n: a simple power of n if n**int=x
1: if x is a simple power of n
2: if x is not a simple power of n
3: return False
4: return True
"""""""
"Input: a: an integer
Output: True if a cube of a number is equal to a cube of a number
1: if a is equal to a cube of a number
2: if a is not equal to a cube of a number
3: if a is not equal to a cube of a number
4: if a is not equal to a cube of a number
5: if a is not equal to a cube of a number
6: if a is not equal to a cube of a number
7: if a is not equal to a cube of a number
8: if a is not equal to a cube of a number
9: if a is not equal to a cube of a number
10: if a is not equal to a cube of a number
11: if a is not equal to a cube of a number
12: if a is not equal to a cube of a number
13: if a is not equal to a cube of a number
14: if a is not equal to a cube of a number
15: if a is not equal to a cube of a number
16: if a is not equal to a cube of a number
17: if a is not"
"Input: num: a hexadecimal number
Output: primes: a list of primes
1: for each digit in num:
2:     if num[digit] == '0':
3:         primes.append(digit)
4: return primes"
"Input: decimal: a decimal number
Output: binary: a binary number
1: for each character in decimal:
2:     if decimal[i] == '1':
3:         return '0' + binary[i]
4: return '1' + binary[i]
5: return None"
"Input: s: a string
Output: True or False
1: if len(s) >= 3 and s.count('a') == s.count('a') and s.count('a') == s.count('a'):
2:     return True
3:     return False
4: return None"
"Input: grades: a list of GPAs
Output: letter_grades: a list of letter grades
1: for each GPA in grades:
2:     if GPA > 3.7:
3:         letter_grades.append('A')
4: return letter_grades"
"Input: str: a string
Output: True if the string is a prime number or False otherwise
1: if the string is a prime number
2: if the string is not a prime number
3: return False
4: return True"
"Input: n: a positive integer
Output: count: the count of the numbers of n-digit positive integers that start or end with 1
1: for each number n in range(1, n+1):
2:     if n % 10 == 0:
3:         count += 1
4: return count"
"Input: N: a positive integer
Output: sum: the sum of the digits in binary
1: for each digit in N:
2:     if digit appears more than once in N
3:         return sum
4: return 0"
"Input: lst: a list of integers
Output: lst: a list of even integers
1: lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]
2: lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
3: lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
4: lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,"
"Input: s: a string
Output: s: an ordered version of s
1: for each word in s:
2:     if len(word) > 1:
3:         return''.join(sorted(word))
4: return s"
"Input: lst: a nested list
Output: row: a list of tuples, [(x1, y1), (x2, y2)...] such that
each tuple is a coordinate - (row, columns), starting with 0.
1: for each row in lst:
2:     if x in row:
3:         return row
4: return None"
"Input: array: a list of non-negative integers
Output: sorted_array: a list of non-negative integers
1: for each element in the given array:
2:     if the sum of the first index value and last index value is odd
3:         return sorted_array
4: return None"
"Input: s: a string
Output: encrypted: a string encrypted with the alphabet being rotated
1: for each character ch in s:
2:     if ch appears more than once in s
3:         return ch
4: return None"
"Input: lst: a list of integers
Output: smallest: the 2nd smallest element of the list
1: if lst[0] < lst[1]:
2:     return lst[0]
3: return None
4: return None"
"Input: S: a string
Output: count: the number of boredoms
1: for each word in S:
2:     if S.startswith('I.'):
3:         count += 1
4: return count"
"Input: x, y, z: 3 numbers
Output: true if x == y + z, false otherwise
1: if x == y + z: return True
2: if x == y: return False
3: if x!= y: return False
4: if x!= y and x!= z: return False
5: if x!= y and x!= z: return False
6: if x!= y and x!= z: return False
7: if x!= y and x!= z: return False
8: if x!= y and x!= z: return False
9: if x!= y and x!= z: return False
10: if x!= y and x!= z: return False
11: if x!= y and x!= z: return False
12: if x!= y and x!= z: return False
13: if x!= y and x!= z: return False
14: if x!= y and x!= z: return False
15: if x!= y and x!= z: return False
16: if x!= y and x!= z: return False
17: if x!= y and x!= z: return False
18:"
"Input: message: a string
Output: encoded_message: a string
1: for each character in message:
2:     if ch in ""aeiou"":
3:         encoded_message += ch
4: return encoded_message"
"Input: lst: a list of integers
Output: largest_prime: the largest prime number
1: for each integer lst[i]
2:     if lst[i] > 1
3:         return lst[i]
4: return None"
"Input: dict: a dictionary
Output: bool: True if all keys are strings in lower case, else False
1: if all keys are strings in lower case
2: if all keys are strings in upper case
3: return False
4: return True
"""""""
"Input: n: an integer
Output: prime_numbers: an array of prime numbers less than or equal to n
1: for each prime number
2:     if prime_number > 1
3:         prime_numbers.append(prime_number)
4: return prime_numbers"
"Input: a, b: two integers
Output: a * b
1: a * b = a * b
2: a * b = a * b + b * b
3: a * b = a * b + b * b + a * b
4: a * b = a * b + b * b + a * b
5: a * b = a * b + b * b + a * b
6: a * b = a * b + b * b + a * b
7: a * b = a * b + b * b + a * b
8: a * b = a * b + b * b + a * b
9: a * b = a * b + b * b + a * b
10: a * b = a * b + b * b + a * b
11: a * b = a * b + b * b + a * b
12: a * b = a * b + b * b + a * b
13: a * b = a * b + b * b + a * b
14: a * b = a * b + b * b + a * b"
"Input: str: a string
Output: count: the number of uppercase vowels in even indices
1: for each character ch in str:
2:     if ch.isupper():
3:         count += 1
4: return count"
"Input: value: a string representing a number
Output: closest_integer: the closest integer to the given number
1: for each character ch in value:
2:     if ch appears more than once in value
3:         return int(ch)
4: return None
"""""""
"Input: n: a positive integer
Output: a list of the number of stones in each level in a pile
1: for each level in the pile:
2:     if n % 2 == 0:
3:         return [n//2]
4: return []
"""""""
"Input: s: a string
Output: words: an array of words
1: words = s.split(',')
2: words = s.split()
3: words = s.split(' ')
4: return words"
"Input: x, y: positive integers
Output: biggest even integer number in the range [x, y] inclusive
1: if x is even
2: if y is even
3: if x is odd
4: if y is odd
5: return -1"
"Input: n: a positive integer
Output: m: a positive integer
1: if n is greater than m, return -1
2: if n is less than or equal to m, return 0
3: if n is greater than or equal to m, return n/m
4: return 0
5: return -1"
"Input: x: a list of positive integers
Output: y: a sorted list of all elements that have even digits
1: for each element in x:
2:     if x[i] % 2 == 0:
3:         y.append(x[i])
4: return y"
"Input: arr: an array of integers
Output: arr: an array of integers
1: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
2: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
3: arr = ["
"Input: n: an integer
Output: a list of size n, such that the value of the element at index i is the factorial of i if i is even
1: for each element i in range(1, n+1):
2:     if i is even:
3:         return [i]
4: return []"
"Input: n: an integer
Output: even_odd_palindrome: a tuple of even and odd integer palindromes that fall within the range(1, n), inclusive
1: for each integer n in range(1, n):
2:     if n is even
3:         if n is odd
4: return (even_odd_palindrome(n-1), even_odd_palindrome(n-2))
5: return (0, 0)
6: return (0, 0)
7: return (0, 0)
8: return (0, 0)
9: return (0, 0)
10: return (0, 0)
11: return (0, 0)
12: return (0, 0)
13: return (0, 0)
14: return (0, 0)
15: return (0, 0)
16: return (0, 0)
17: return (0, 0)
18: return (0, 0)
19: return (0, 0)
20: return (0, 0)
21: return (0, 0)
22:"
"Input: arr: an array of integers
Output: count: the number of elements which has a sum of digits > 0
1: for each element in arr:
2:     if sum(arr) > 0:
3:         count += 1
4: return count"
"Input: arr: an array
Output: True or False
1: arr[0] < arr[1]
2: arr[0] > arr[1]
3: arr[0] == arr[1]
4: arr[0]!= arr[1]"
"Input: lst1: a list of numbers
Output: lst2: a list of even numbers
1: if lst1[i] % 2 == 0:
2:     lst2[i] = lst1[i]
3:     return lst2
4: return None"
"Input: test: a string
Output: a dictionary of the letter with the most repetition and containing the corresponding count.
1: for each letter in test:
2:     if test.count(letter) > 1:
3:         return test
4: return None"
"Input: s: a string
Output: is_palindrome: a boolean
1: if s is a palindrome
2: if s is not a palindrome
3: if s is not a palindrome
4: return False
5: return True
6: return None"
"Input: lst: a list of strings
Output: odd_count: a list of odd numbers in lst
1: for each string i in lst:
2:     if i.isdigit():
3:         odd_count.append(int(i))
4: return odd_count"
"Input: nums: an array of integers
Output: the minimum sum of any non-empty sub-array of nums
1: if nums[0] > nums[1]:
2:     return nums[0]
3:     return nums[1]
4: return None"
"Input: grid: a rectangular grid of wells
Output: number of times you need to lower the buckets
1: for each well,
2:     if the well is full,
3:         if the well is full,
4:         if the well is full,
5:         if the well is full,
6:         if the well is full,
7:         if the well is full,
8:         if the well is full,
9:         if the well is full,
10: return 0
"""""""
"Input: arr: a list of integers
Output: arr: sorted list of integers
1: arr.sort()
2: arr.sort(reverse=True)
3: arr.sort(key=lambda x: bin(x).count('1'))
4: arr.sort(key=lambda x: bin(x).count('1'), reverse=True)
5: arr.sort(key=lambda x: bin(x).count('1'), reverse=True)
6: arr.sort(key=lambda x: bin(x).count('1'), reverse=True)
7: arr.sort(key=lambda x: bin(x).count('1'), reverse=True)
8: arr.sort(key=lambda x: bin(x).count('1'), reverse=True)
9: arr.sort(key=lambda x: bin(x).count('1'), reverse=True)
10: arr.sort(key=lambda x: bin(x).count('1'), reverse=True)
11: arr.sort(key=lambda x: bin(x).count('1'), reverse=True)
12: arr.sort("
"Input: s: a string
Output: words: a list of all words from string s that contain exactly n consonants, in order these words appear in the string s.
1: if s is empty then the function should return an empty list.
2: if s contains only letters and spaces then the function should return a list of all words from string s that contain exactly n consonants, in order these words appear in the string s.
3: if s contains only letters and spaces then the function should return a list of all words from string s that contain exactly n consonants, in order these words appear in the string s.
4: if s contains only letters and spaces then the function should return a list of all words from string s that contain exactly n consonants, in order these words appear in the string s.
5: if s contains only letters and spaces then the function should return a list of all words from string s that contain exactly n consonants, in order these words appear in the string s.
6: if s contains only letters and spaces then the function should return a list of all words from string s that contain exactly n consonants, in order these words appear in"
"Input: word: a string
Output: closest_vowel: a string
1: if word[0] == word[-1]:
2:     return word[0]
3: return ''
4: return None"
"Input: lst: a list of two strings
Output: yes: if there's a way to make a good string, and return 'Yes' otherwise
1: if there's a way to make a good string, and return 'Yes' otherwise
2: if there's a way to make a good string, and return 'No' otherwise
3: if there's a way to make a good string, and return 'No' otherwise
4: if there's a way to make a good string, and return 'Yes' otherwise
5: if there's a way to make a good string, and return 'No' otherwise
6: if there's a way to make a good string, and return 'Yes' otherwise
7: if there's a way to make a good string, and return 'No' otherwise
8: if there's a way to make a good string, and return 'Yes' otherwise
9: if there's a way to make a good string, and return 'No' otherwise
10: if there's a way to make a good string, and return 'Yes' otherwise
11: if there's a way to make a good string, and return 'No' otherwise
12:"
"Input: arr: a list of integers
Output: a sorted list of length k with the maximum k numbers in arr
1: for each element in arr:
2:     if arr[i] > arr[i-1]:
3:         return arr[:k]
4: return []"
"Input: lst: a list of integers
Output: sum: the sum of all odd elements that are in even positions
1: for each element in lst:
2:     if lst[i] % 2 == 0:
3:         sum += lst[i]
4: return sum"
"Input: arr: a non-empty array of integers
Output: sum: the sum of the elements with at most two digits from the first k elements of arr
1: for each element in arr:
2:     if len(str(arr[0])) > 2:
3:         sum += arr[0]
4: return sum"
"Input: n: a positive integer
Output: collatz_list: a sorted list that has the odd numbers in collatz sequence.
1: for each number in n:
2:     if n % 2 == 0:
3:         collatz_list.append(n // 2)
4: return collatz_list"
"Input: date: a string
Output: True if the date is valid otherwise False
1: if date is not empty
2: if date is not empty
3: if date is not empty
4: if date is not empty
5: if date is not empty
6: if date is not empty
7: if date is not empty
8: if date is not empty
9: if date is not empty
10: if date is not empty
11: if date is not empty
12: if date is not empty
"""""""
"Input: txt: a string
Output: words: a list of words
1: for each word in txt:
2:     if word appears more than once in txt
3:         return words
4: return None"
"Input: lst: a list
Output: True or False
1: if lst is sorted in ascending order
2: if lst is sorted in ascending order
3: if lst is sorted in ascending order
4: return False
"""""""
"Input: interval1: a pair of integers
Output: interval2: a pair of integers
1: if interval1[0] <= interval2[1]:
2:     if interval1[1] <= interval2[0]:
3:         return interval1
4: return interval2"
"Input: arr: an array of integers
Output: sum: sum of magnitudes of integers multiplied by product of all signs
1: for each number in arr:
2:     if arr[i] == 1:
3:         sum += arr[i]
4: return sum"
"Input: grid: a grid with N rows and N columns (N >= 2)
Output: lst: a list of the values on the cells that the minimum path go through
1: for each cell in grid:
2:     if grid[i][j] == 1:
3:         lst.append(grid[i][j])
4: return lst"
"Input: n: an integer
Output: a list of the first n + 1 numbers of the Tribonacci sequence
1: for each number n in range(1, n + 1):
2:     if n is even:
3:         return [1, 2, 3]
4: return None"
"Input: n: a positive integer
Output: product of the odd digits of n
1: if n is even
2: if n is odd
3: return 0
4: return None
5: return None
6: return None
7: return None
8: return None
9: return None
10: return None
11: return None
12: return None
13: return None
14: return None
15: return None
16: return None
17: return None
18: return None
19: return None
20: return None
21: return None
22: return None
23: return None
24: return None
25: return None
26: return None
27: return None
28: return None
29: return None
30: return None
31: return None
32: return None
33: return None
34: return None
35: return None
36: return None
37: return None
38: return None
39: return None
40: return None
41: return None
42: return None
43: return None
44: return None
45: return None
46: return None
47:"
"Input: string: a string
Output: True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.
"""""""
"Input: lst: a list of numbers
Output: sum_squares: the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
"""""""
"Input: txt: a string
Output: True if the last character of txt is an alphabetical character and is not
a part of a word, and False otherwise.
1: for each character ch in txt:
2:     if ch.isalpha() and ch!='':
3:         return True
4: return False"
"Input: arr: a list
Output: largest_index: the largest index of the given element
1: if arr[0] > arr[1]:
2:     return 0
3:     return -1
4: return -1"
"Input: lst: a list
Output: a tuple (a, b)
1: if lst[0] < 0:
2:     return (lst[0], None)
3: if lst[0] > 0:
4:     return (None, lst[0])
5: return (None, None)
6: return (None, None)
7: return (None, None)
8: return (None, None)
9: return (None, None)
10: return (None, None)
11: return (None, None)
12: return (None, None)
13: return (None, None)
14: return (None, None)
15: return (None, None)
16: return (None, None)
17: return (None, None)
18: return (None, None)
19: return (None, None)
20: return (None, None)
21: return (None, None)
22: return (None, None)
23: return (None, None)
24: return (None, None)
25: return (None, None)
26:"
"Input: a, b: integers, floats, or strings representing real numbers
Output: larger: the larger variable in its given variable type
1: if a > b:
2:     return a
3:     return b
4: return None"
"Input: n: a positive integer
Output: True if n can be written as the sum of exactly 4 positive even numbers
1: if n is even, return True
2: if n is odd, return False
3: return False
4: return True"
"Input: n: an integer
Output: the special factorial of n
1: for each integer n in range(1, n+1):
2:     return n! * (n-1)! * (n-2)! *... * 1!
3: return None
4: return 0
5: return 1
6: return 1
7: return 1
8: return 1
9: return 1
10: return 1
11: return 1
12: return 1
13: return 1
14: return 1
15: return 1
16: return 1
17: return 1
18: return 1
19: return 1
20: return 1
21: return 1
22: return 1
23: return 1
24: return 1
25: return 1
26: return 1
27: return 1
28: return 1
29: return 1
30: return 1
31: return 1
32: return 1
33: return 1
34: return 1
35: return 1
36: return 1
37: return 1
38: return 1
39: return 1
40: return 1
41: return 1
42"
"Input: str: a string
Output: text: a string with all spaces replaced with underscores
1: for each character ch in str:
2:     if ch appears more than once in str
3:         return text
4: return None"
"Input: file_name: a string
Output: 'Yes' if the file's name is valid, and returns 'No' otherwise.
1: if len(file_name) > 3:
2:     if file_name[0] == '.':
3:         if file_name[1] == '-' and file_name[2] == '-' and file_name[3] == '-':
4: return 'Yes'
5: return 'No'"
"Input: lst: a list of integers
Output: sum: the sum of all entries
1: for each entry in lst:
2:     if (entry % 3) == 0:
3:         sum += entry ** 3
4: return sum"
"Input: sentence: a string
Output: words: a string that contains the words from the original sentence,
 whose lengths are prime numbers,
 the order of the words in the new string should be the same as the original one.
"""""""
"Input: x: a string representation of a fraction
Output: n: a string representation of a fraction
1: if x * n evaluates to a whole number
2: if x * n evaluates to a fraction
3: if x * n evaluates to a fraction
4: if x * n evaluates to a fraction
5: if x * n evaluates to a fraction
6: if x * n evaluates to a fraction
7: if x * n evaluates to a fraction
8: if x * n evaluates to a fraction
9: if x * n evaluates to a fraction
10: if x * n evaluates to a fraction
11: if x * n evaluates to a fraction
12: if x * n evaluates to a fraction
13: if x * n evaluates to a fraction
14: if x * n evaluates to a fraction
15: if x * n evaluates to a fraction
16: if x * n evaluates to a fraction
17: if x * n evaluates to a fraction
18: if x * n evaluates to a fraction
19: if x * n evaluates to a fraction
20: if x * n evaluates to a fraction
21: if x * n evaluates to a fraction"
"Input: nums: a list of integers
Output: nums: sorted list of integers
1: nums.sort()
2: nums.sort(key=lambda x: sum(map(int, str(x))))
3: nums.sort(key=lambda x: x[0])
4: nums.sort(key=lambda x: x[1])
5: nums.sort(key=lambda x: x[2])
6: nums.sort(key=lambda x: x[3])
7: nums.sort(key=lambda x: x[4])
8: nums.sort(key=lambda x: x[5])
9: nums.sort(key=lambda x: x[6])
10: nums.sort(key=lambda x: x[7])
11: nums.sort(key=lambda x: x[8])
12: nums.sort(key=lambda x: x[9])
13: nums.sort(key=lambda x: x[10])
14: nums.sort(key=lambda x: x[11])
15: nums.sort(key=lambda x: x[12"
"Input: nums: an array of numbers
Output: odd: the number of odd numbers in nums
1: for each number in nums:
2:     if nums[i] % 2 == 0:
3:         odd += 1
4: return odd"
"Input: n: an integer
Output: a: an integer array a of length n
1: for each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1
2:     if a[i] is a multiple of 3
3:         return a
4: return None"
"Input: planet1: a string
Output: planet2: a string
1: if planet1 == planet2: return planet1
2: return planet1
3: return planet2
4: return None"
"Input: lst: a list of strings
Output: lst_sum: a list of numbers
1: for each word in lst:
2:     if len(word) % 2 == 0:
3:         lst_sum.append(sum(word))
4: return lst_sum"
"Input: n: an integer
Output: x: if n is a prime number
1: if n is a prime number
2: if n is not a prime number
3: return None
4: return None"
"Input: lst: a list
Output: sum: the sum of squares of the numbers in the list that are odd
1: for each number in lst:
2:     if number % 2 == 0:
3:         sum += number**2
4: return sum"
"Input: game: a list of integers
Output: guess: a list of integers
1: for each index in game:
2:     if game[index] == guess[index]:
3:         guess.append(game[index])
4: return guess"
"Input: class_name: a string
Output: strongest_extension_name: a string
1: for each extension in extensions:
2:     if extension.isupper():
3:         return extension
4: return None
5: return None
6: return None
7: return None
8: return None
9: return None
10: return None
11: return None
12: return None
13: return None
14: return None
15: return None
16: return None
17: return None
18: return None
19: return None
20: return None
21: return None
22: return None
23: return None
24: return None
25: return None
26: return None
27: return None
28: return None
29: return None
30: return None
31: return None
32: return None
33: return None
34: return None
35: return None
36: return None
37: return None
38: return None
39: return None
40: return None
41: return None
42: return None
43: return None
44: return None
45: return"
"Input: a: a string
Output: b: a string
1: if a == b:
2:     if a[0] == b[0]:
3:         if a[1] == b[1]:
4: return True
5: return False
6: return None
7: return None
8: return None
9: return None
10: return None
11: return None
12: return None
13: return None
14: return None
15: return None
16: return None
17: return None
18: return None
19: return None
20: return None
21: return None
22: return None
23: return None
24: return None
25: return None
26: return None
27: return None
28: return None
29: return None
30: return None
31: return None
32: return None
33: return None
34: return None
35: return None
36: return None
37: return None
38: return None
39: return None
40: return None
41: return None
42: return None
43: return None
44: return None"
"Input: num: an integer
Output: even_count: the number of even digits in num
1: for each digit in num:
2:     if num % 2 == 0:
3:         even_count += 1
4: return even_count"
"Input: number: a positive integer
Output: mini_roman: a string representing the roman numeral equivalent of number
1: for each character in number:
2:     if number.count(character) > 1:
3:         return number
4: return None"
"Input: a, b, c: three integers
Output: True if a + b + c = 180, False otherwise
1: if a + b + c = 180
2: if a + b + c = 90
3: if a + b + c = -90
4: return False
"""""""
"Input: words: a list of strings
Output: word: the word with maximum number of unique characters
1: for each word in words:
2:     if len(set(word)) > len(word):
3:         return word
4: return None"
"Input: number: an integer
Output: eaten_carrots: an integer
1: if number is less than or equal to the need,
2:     eaten_carrots = number - need
3:     eaten_carrots = number - need
4: return eaten_carrots"
"Input: operator: a list of operators
Output: operand: a list of integers
1: do_algebra([+], [1, 2])
2: do_algebra([-], [1, 2])
3: do_algebra([*], [1, 2])
4: do_algebra([//], [1, 2])
5: do_algebra([**], [1, 2])"
"Input: s: a string
Output: s: a string
1: if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
2: if s[i] is not a letter, reverse the string.
3: return s[::-1]
4: return s[::-1]
5: return s[::-1]
6: return s[::-1]
7: return s[::-1]
8: return s[::-1]
9: return s[::-1]
10: return s[::-1]
11: return s[::-1]
12: return s[::-1]
13: return s[::-1]
14: return s[::-1]
15: return s[::-1]
16: return s[::-1]
17: return s[::-1]
18: return s[::-1]
19: return s[::-1]
20: return s[::-1]
21: return s[::-1]"
"Input: text: a string
Output: md5: a md5 hash equivalent string
1: if text is empty, return None
2: if text is not empty, return md5(text)
3: return None
4: return None"
"Input: a, b: positive integers
Output: even_digits: a list of even digits between a and b
1: for each even digit in a:
2:     if even_digits.count(even_digit) == 1:
3:         return even_digits
4: return None"
