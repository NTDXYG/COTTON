":
How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    """""""
":

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    """""""
":
How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    """""""
":

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    """""""
":

def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.
    """""""
":

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    """""""
":
How to solve:
Step 1. Initialize sum and product as 0.
Step 2. Iterate through numbers.
    -add value to sum.
    -multiply value to product.
Step 3. Return tuple consisting of sum and product."
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    """"""

#### Output:

def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix."
":

def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account falls below zero, and
    at that point function should return True. Otherwise it should return False.
    """"""

#### Output:
How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

How to solve:
Step 1. Iterate through strings.
    -If current string is longer than longest string, update longest string.
Step 2. Return longest string."
":

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    """""""
":

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    """""""
":

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat
    """""""
":
How to solve:
Step 1. Initialize count as 0.
Step 2. Iterate through string.
    -If substring is found, increment count.
Step 3. Return count."
":

def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    """""""
":
How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    """""""
":

def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    """""""
":

def strlen(string: str) -> int:
    """""" Return length of given string
    """""""
":

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    """""""
":

def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    """""""
":

def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    """""""
":

def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    """""""
":

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    """""""
":

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    """""""
":

def get_positive(l: list):
    """"""Return only positive numbers in the list.
    """""""
":

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    """""""
":

How to solve:
Step 1. Initialize x as 0.
Step 2. Iterate through xs.
    -If poly(x) = 0, return x.
    -If poly(x) < 0, return False.
Step 3. Return x."
":

def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    """""""
":

def unique(l: list):
    """"""Return sorted unique elements in a list
    """""""
":

def max_element(l: list):
    """"""Return maximum element in the list.
    """""""
":
How to solve:
Step 1. Initialize count as 0.
Step 2. Iterate through integers less than n.
    -If integer is divisible by 11 or 13, increment count.
Step 3. Return count."
":

def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    """""""
":

def decode_cyclic(s: str):
    """"""    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":
How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def incr_list(l: list):
    """"""Return list with elements incremented by 1.
    """""""
":

def pairs_sum_to_zero(l):
    """"""    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    """""""
":

def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    """""""
":

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def median(l: list):
    """"""Return median of elements in the list l.
    """""""
":

def is_palindrome(text: str):
    """"""    Checks if given string is a palindrome
    """""""
":

def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    """""""
":

def encode_shift(s: str):
    """"""    returns encoded string by shifting every character by 5 in the alphabet.
    """"""    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""    takes as input string encoded with encode_shift function. Returns decoded string.
    """""""
":

def remove_vowels(text):
    """"""    remove_vowels is a function that takes string and returns string without vowels.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def add(x: int, y: int):
    """"""Add two numbers x and y
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def fib(n: int):
    """"""Return n-th Fibonacci number.
    """""""
":

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    """""""
":

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    """""""
":

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    """"""

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    """"""

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    """"""

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    """"""

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    """"""

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    """"""

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    """"""

def sum_to_n(n:"
":

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.
    """""""
":

def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 +....
     Return derivative of this polynomial in the same form.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.
    """""""
":

def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    """""""
":

def digit_sum(s):
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def pluck(arr):
    """"""    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].
    """""""
":

def search(lst):
    """"""    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    """""""
":

def strange_sort_list(lst):
    """"""    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.
    """""""
":

def triangle_area(a, b, c):
    """"""    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

How to solve:
Step 1. Iterate through arr.
    -If arr[i] is not equal to arr[len(arr)-1-i], return False.
Step 2. Return True."
":

def total_match(lst1, lst2):
    """"""    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.
    """""""
":

def is_multiply_prime(a):
    """"""Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100.
    """""""
":

def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def binary_to_decimal(binary):
    """"""You will be given a number in binary form and your task is to convert it to
    decimal format. The function should return a string, with each character representing a decimal
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return False.
    -If account balance >= 3, check if every 3 consecutive letters are distinct
    -If account balance >= 3 and every 3 consecutive letters are distinct, return True.
Step 3. Return False."
":

def numerical_letter_grade(grades):
    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    """""""
":

def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.
    """""""
":

def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..
    """""""
":

def anti_shuffle(s):
    """"""    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.
    """""""
":

How to solve:
Step 1. Iterate through list of tuples.
    -If tuple contains x, return tuple.
Step 2. Return False."
":

def sort_array(array):
    """"""    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.
    """""""
":

def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    """""""
":

def next_smallest(lst):
    """"""    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    """""""
":

How to solve:
Step 1. Initialize count as 0.
Step 2. Iterate through S.
    -If S starts with ""I"", increment count.
Step 3. Return count."
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def decode(message):
    """"""    Write a function that takes a message, and decodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters.
    """""""
":

def skjkasdkd(lst):
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.
    """""""
":

def check_dict_case(dict):
    """"""    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    """""""
":

def count_up_to(n):
    """"""Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    """""""
":

def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    """""""
":

def count_upper(s):
    """"""    Given a string s, count the number of uppercase vowels in even indices.
    """""""
":
How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def make_a_pile(n):
    """"""    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).
    """""""
":

How to solve:
Step 1. Split the string into words.
Step 2. Return an array of the words."
":

def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return -1.
Step 3. Return 0."
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def by_length(arr):
    """"""    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".
    """""""
":

def f(n):
    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).
    """""""
":
How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def count_nums(arr):
    """"""    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":
How to solve:
Step 1. Initialize lst1 and lst2 as empty lists.
Step 2. Iterate through lst1 and lst2.
    -If lst1 and lst2 are not even, return ""NO"".
    -If lst1 and lst2 are even, add lst1 and lst2 to lst1 and lst2, respectively.
    -If lst1 and lst2 are even, check if lst1 is even.
        -If lst1 is even, add lst1 to lst2.
        -If lst1 is odd, add lst2 to lst1.
Step 3. Return ""YES""."
":

def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    """""""
":

How to solve:
Step 1. Initialize result string as empty string.
Step 2. Iterate through s.
    -If c is in s, delete all the characters in s that are equal to c.
    -If the result string is empty, return False.
    -If the result string is not empty, return the result string and True for the check.
Step 3. Return the result string and False for the check."
":

def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.
    """""""
":

def min_sub_array_sum(nums):
    """"""    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    """""""
":

How to solve:
Step 1. Iterate through grid.
    -If grid[i][j] == 1, add 1 to bucket.
    -If grid[i][j] == 0, add 1 to bucket.
    -If grid[i][j] == -1, subtract 1 from bucket.
    -If grid[i][j] == -2, subtract 1 from bucket.
    -If grid[i][j] == -3, subtract 1 from bucket.
    -If grid[i][j] == -4, subtract 1 from bucket.
    -If grid[i][j] == -5, subtract 1 from bucket.
    -If grid[i][j] == -6, subtract 1 from bucket.
    -If grid[i][j] == -7, subtract 1 from bucket.
    -If grid[i][j] == -8, subtract 1 from bucket.
    -If grid[i][j] == -9, subtract 1 from bucket.
    -If grid[i][j] == -10, subtract 1 from bucket.
    -If grid[i][j] == -11, subtract"
":

def sort_array(arr):
    """"""    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.
    """""""
":

How to solve:
Step 1. Initialize a list to store the words.
Step 2. Iterate through the string s.
    -If the character is a space, then skip it.
    -If the character is a letter, then add it to the list.
Step 3. Return the list."
":

def get_closest_vowel(word):
    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return False.
Step 3. Return True."
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    """""""
":

def add_elements(arr, k):
    """"""    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.
    
    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

How to solve:
Step 1. Split on whitespace.
Step 2. Iterate through split words.
    -If word is lower-case letter, increment odd order count.
Step 3. Return odd order count."
":

def is_sorted(lst):
    """"""    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.
    """""""
":

def is_prime(number):
    """"""
    >>> is_prime(1)
    'NO'
    >>> is_prime(2)
    'YES'
    >>> is_prime(3)
    'YES'
    >>> is_prime(4)
    'NO'
    >>> is_prime(5)
    'YES'
    >>> is_prime(6)
    'NO'
    >>> is_prime(7)
    'NO'
    >>> is_prime(8)
    'NO'
    >>> is_prime(9)
    'NO'
    """""""
":

def prod_signs(arr):
    """"""    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.
    """""""
"#### Output:
How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":
How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    """""""
":

def is_nested(string):
    """"""    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.
    """""""
":

def sum_squares(lst):
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    """""""
":

def check_if_last_char_is_a_letter(txt):
    """"""    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.
    """""""
":

def can_arrange(arr):
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.
    """""""
":

How to solve:
Step 1. Initialize a variable to hold the largest negative integer.
Step 2. Initialize a variable to hold the smallest positive integer.
Step 3. Iterate through the list of integers.
    -If the integer is negative, set the largest negative integer to the
    current integer.
    -If the integer is positive, set the smallest positive integer to the
    current integer.
Step 4. Return a tuple (a, b) where 'a' is the largest negative integer,
    and 'b' is the smallest positive integer."
":

def compare_one(a, b):
    """"""    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be. or,
    """""""
":

def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    """""""
":

def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!
    where n > 0

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """""""
":

def fix_spaces(text):
    """"""    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with -
    """""""
":

def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account falls below zero, and
    at that point function should return True. Otherwise it should return False.
    """""""
":

def sum_squares(lst):
    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.
    """""""
":

def words_in_sentence(sentence):
    """"""    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.
    
    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def order_by_points(nums):
    """"""    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.
    """""""
":

def specialFilter(nums):
    """"""Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def bf(planet1, planet2):
    """"""    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names.
    """""""
":

def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account falls below zero, and
    at that point function should return True. Otherwise it should return False.
    """"""

#"
":

def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.
    """""""
":

def double_the_difference(lst):
    """"""    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    If the input list is empty, return 0.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

ClassName.StrongestExtensionName."
":

def cycpattern_check(a, b):
    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return True.
Step 3. Return False."
":

def roman_to_int(roman):
    """"""    Given a roman numeral, obtain its integer value and return it.
    Restrictions: 1 <= num <= 3999
    """""""
":

How to solve:
Step 1. Initialize a, b, c as 0.
Step 2. Iterate through operations.
    -If a + b > c and a + c > b and b + c > a, return True.
Step 3. Return False."
":

def find_max(words):
    """"""Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.
    """""""
":

How to solve:
Step 1. Initialize account balance as 0.
Step 2. Iterate through operations.
    -add value to account balance.
    -If account balance < 0, return [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
Step 3. Return [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]"
":

def do_algebra(operator, operand):
    """"""    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""

### Example:

def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account falls below zero, and
    at that point function should"
":

def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    """""""
":

def string_to_md5(text):
    """"""    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.
    """""""
":

def generate_integers(a, b):
    """"""    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.
    """""""
